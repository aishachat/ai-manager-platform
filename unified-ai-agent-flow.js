// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–ª–æ—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤
import { createClient } from '@supabase/supabase-js';
import UnifiedRAGSystem from './unified-rag-system.js';
import ChunkingSystem from './chunking.js';
import ImprovedContentParser from './improved-content-parser.js';
import EnhancedResponseValidator from './enhanced-response-validator.js';
import ResponseCorrector from './response-corrector.js';
import monitoring from './monitoring-system.js';
import KnowledgeDatabase from './knowledge-db.js';

class UnifiedAIAgentFlow {
  constructor(config = {}) {
    this.config = {
      supabaseUrl: config.supabaseUrl || process.env.SUPABASE_URL,
      supabaseKey: config.supabaseKey || process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY,
      tokenBudget: config.tokenBudget || 800,
      maxChunks: config.maxChunks || 3,
      cacheTTL: config.cacheTTL || 3600000,
      enableValidation: config.enableValidation || true,
      enableMonitoring: config.enableMonitoring || true,
      ...config
    };
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    this.supabase = createClient(this.config.supabaseUrl, this.config.supabaseKey);
    this.knowledgeDB = new KnowledgeDatabase();
    this.ragSystem = new UnifiedRAGSystem(this.knowledgeDB);
    this.chunkingSystem = new ChunkingSystem();
    this.contentParser = new ImprovedContentParser();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
    this.enhancedValidator = new EnhancedResponseValidator({
      supabaseUrl: this.config.supabaseUrl,
      supabaseKey: this.config.supabaseKey,
      enableAdvancedValidation: this.config.enableAdvancedValidation || true,
      enableSentimentAnalysis: this.config.enableSentimentAnalysis || true,
      enableToxicityDetection: this.config.enableToxicityDetection || true,
      enableBiasDetection: this.config.enableBiasDetection || true,
      enableConsistencyCheck: this.config.enableConsistencyCheck || true,
      enableComplianceCheck: this.config.enableComplianceCheck || true
    });
    
    this.responseCorrector = new ResponseCorrector({
      supabaseUrl: this.config.supabaseUrl,
      supabaseKey: this.config.supabaseKey,
      enableAutoCorrection: this.config.enableAutoCorrection || true,
      enableStyleCorrection: this.config.enableStyleCorrection || true,
      enableFactCorrection: this.config.enableFactCorrection || true,
      enableToneCorrection: this.config.enableToneCorrection || true
    });
    
    // –ö—ç—à–∏
    this.responseCache = new Map();
    this.promptCache = new Map();
    this.validationCache = new Map();
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.stats = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      cacheHits: 0,
      cacheMisses: 0,
      validationPassed: 0,
      validationFailed: 0
    };
    
    console.log('ü§ñ Unified AI Agent Flow initialized');
  }
  
  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async processUserRequest(request) {
    const startTime = Date.now();
    this.stats.totalRequests++;
    
    try {
      console.log('üöÄ [UnifiedFlow] Processing user request:', {
        userId: request.userId,
        assistantId: request.assistantId,
        message: request.message?.substring(0, 100),
        timestamp: new Date().toISOString()
      });
      
      // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const validationResult = await this.validateRequest(request);
      if (!validationResult.isValid) {
        throw new Error(`Invalid request: ${validationResult.errors.join(', ')}`);
      }
      
      // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞
      const agentSettings = await this.getAgentSettings(request.userId, request.assistantId);
      
      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –æ—Ç–≤–µ—Ç–æ–≤
      const cachedResponse = await this.getCachedResponse(request, agentSettings);
      if (cachedResponse) {
        this.stats.cacheHits++;
        console.log('‚úÖ [UnifiedFlow] Cache HIT for request');
        return cachedResponse;
      }
      
      this.stats.cacheMisses++;
      
      // 4. –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const searchResults = await this.searchRelevantInformation(request, agentSettings);
      
      // 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
      const systemPrompt = await this.generateSystemPrompt(request, agentSettings, searchResults);
      
      // 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
      const aiResponse = await this.generateAIResponse(request, systemPrompt, agentSettings);
      
      // 7. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
      if (this.config.enableValidation) {
        const validationResult = await this.enhancedValidator.validateResponse(aiResponse, {
          searchResults: searchResults,
          conversationHistory: request.conversationHistory || []
        }, request);
        
        if (!validationResult.isValid) {
          console.log('‚ö†Ô∏è [UnifiedFlow] Response validation failed, attempting correction...');
          
          // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
          const correctionResult = await this.responseCorrector.correctResponse(
            aiResponse, 
            validationResult, 
            { searchResults: searchResults },
            request
          );
          
          if (correctionResult.success && correctionResult.correctedResponse.content !== aiResponse.content) {
            console.log('‚úÖ [UnifiedFlow] Response corrected successfully');
            aiResponse = correctionResult.correctedResponse;
            this.stats.validationPassed++;
          } else {
            console.log('‚ö†Ô∏è [UnifiedFlow] Correction failed, regenerating response...');
            // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            const improvedPrompt = await this.generateImprovedPrompt(systemPrompt, validationResult.errors);
            const improvedResponse = await this.generateAIResponse(request, improvedPrompt, agentSettings);
            
            // –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            const secondValidation = await this.enhancedValidator.validateResponse(improvedResponse, {
              searchResults: searchResults,
              conversationHistory: request.conversationHistory || []
            }, request);
            
            if (secondValidation.isValid) {
              aiResponse = improvedResponse;
              this.stats.validationPassed++;
            } else {
              this.stats.validationFailed++;
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –æ—Ç–≤–µ—Ç
              aiResponse = await this.generateFallbackResponse(request, agentSettings);
            }
          }
        } else {
          this.stats.validationPassed++;
        }
      }
      
      // 8. –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
      const processedResponse = await this.postProcessResponse(aiResponse, request, agentSettings);
      
      // 9. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
      await this.cacheResponse(request, processedResponse, agentSettings);
      
      // 10. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      await this.saveToHistory(request, processedResponse);
      
      // 11. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –º–µ—Ç—Ä–∏–∫–∏
      if (this.config.enableMonitoring) {
        await this.recordMetrics(request, processedResponse, startTime);
      }
      
      this.stats.successfulRequests++;
      
      console.log(`‚úÖ [UnifiedFlow] Request processed successfully in ${Date.now() - startTime}ms`);
      
      return {
        success: true,
        response: processedResponse,
        searchResults: searchResults,
        processingTime: Date.now() - startTime,
        timestamp: new Date().toISOString()
      };
      
    } catch (error) {
      this.stats.failedRequests++;
      console.error('‚ùå [UnifiedFlow] Request processing failed:', error);
      
      // Fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
      const fallbackResponse = await this.generateFallbackResponse(request, {});
      
      return {
        success: false,
        response: fallbackResponse,
        error: error.message,
        processingTime: Date.now() - startTime,
        timestamp: new Date().toISOString()
      };
    }
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  async validateRequest(request) {
    const errors = [];
    
    if (!request.userId) {
      errors.push('userId is required');
    }
    
    if (!request.message || typeof request.message !== 'string' || request.message.trim().length === 0) {
      errors.push('message is required and must be non-empty');
    }
    
    if (request.message && request.message.length > 4000) {
      errors.push('message is too long (max 4000 characters)');
    }
    
    return {
      isValid: errors.length === 0,
      errors: errors
    };
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞
  async getAgentSettings(userId, assistantId) {
    const cacheKey = `settings_${userId}_${assistantId}`;
    
    if (this.promptCache.has(cacheKey)) {
      return this.promptCache.get(cacheKey);
    }
    
    try {
      const { data, error } = await this.supabase
        .from('ai_agent_settings')
        .select('*')
        .eq('user_id', userId)
        .eq('assistant_id', assistantId)
        .single();
      
      if (error) {
        console.log('‚ö†Ô∏è [UnifiedFlow] No agent settings found, using defaults');
        return this.getDefaultAgentSettings();
      }
      
      this.promptCache.set(cacheKey, data);
      return data;
      
    } catch (error) {
      console.error('‚ùå [UnifiedFlow] Error getting agent settings:', error);
      return this.getDefaultAgentSettings();
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  getDefaultAgentSettings() {
    return {
      role: 'assistant',
      style: 'professional',
      emoji_usage: 'rare',
      max_response_length: 500,
      enable_rag: true,
      niche_id: null,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
  }
  
  // –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  async searchRelevantInformation(request, agentSettings) {
    try {
      console.log('üîç [UnifiedFlow] Searching relevant information...');
      
      const searchResults = await this.ragSystem.searchRelevantKnowledge(request.message, request.userId, {
        assistantId: request.assistantId,
        nicheId: agentSettings.niche_id,
        tokenBudget: this.config.tokenBudget,
        maxChunks: this.config.maxChunks
      });
      
      console.log(`‚úÖ [UnifiedFlow] Found ${searchResults.chunks.length} relevant chunks`);
      return searchResults;
      
    } catch (error) {
      console.error('‚ùå [UnifiedFlow] Error searching information:', error);
      return { chunks: [], totalTokens: 0, searchSource: 'error' };
    }
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  async generateSystemPrompt(request, agentSettings, searchResults) {
    const cacheKey = `prompt_${request.userId}_${agentSettings.niche_id || 'default'}`;
    
    if (this.promptCache.has(cacheKey)) {
      const cachedPrompt = this.promptCache.get(cacheKey);
      return this.injectSearchResults(cachedPrompt, searchResults);
    }
    
    const basePrompt = this.buildBasePrompt(agentSettings);
    const contextPrompt = this.buildContextPrompt(searchResults);
    const fullPrompt = `${basePrompt}\n\n${contextPrompt}`;
    
    this.promptCache.set(cacheKey, basePrompt);
    return fullPrompt;
  }
  
  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  buildBasePrompt(agentSettings) {
    const role = agentSettings.role || 'assistant';
    const style = agentSettings.style || 'professional';
    const emojiUsage = agentSettings.emoji_usage || 'rare';
    
    let prompt = `–¢—ã ${role} —Å ${style} —Å—Ç–∏–ª–µ–º –æ–±—â–µ–Ω–∏—è.`;
    
    if (emojiUsage === 'never') {
      prompt += ' –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏.';
    } else if (emojiUsage === 'rare') {
      prompt += ' –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —Ä–µ–¥–∫–æ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π.';
    } else if (emojiUsage === 'often') {
      prompt += ' –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —á–∞—Å—Ç–æ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.';
    }
    
    prompt += `\n\n–ü—Ä–∞–≤–∏–ª–∞:
1. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
2. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
3. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã
4. –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º
5. –û–≥—Ä–∞–Ω–∏—á—å –æ—Ç–≤–µ—Ç ${agentSettings.max_response_length || 500} —Å–∏–º–≤–æ–ª–∞–º–∏`;
    
    return prompt;
  }
  
  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  buildContextPrompt(searchResults) {
    if (!searchResults.chunks || searchResults.chunks.length === 0) {
      return '–ö–æ–Ω—Ç–µ–∫—Å—Ç: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–≤–µ—á–∞–π —á–µ—Å—Ç–Ω–æ, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞.';
    }
    
    let context = '–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞:\n';
    searchResults.chunks.forEach((chunk, index) => {
      context += `${index + 1}. ${chunk.chunk_text}\n`;
    });
    
    context += '\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.';
    return context;
  }
  
  // –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
  injectSearchResults(basePrompt, searchResults) {
    const contextPrompt = this.buildContextPrompt(searchResults);
    return `${basePrompt}\n\n${contextPrompt}`;
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
  async generateAIResponse(request, systemPrompt, agentSettings) {
    try {
      console.log('ü§ñ [UnifiedFlow] Generating AI response...');
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GigaChat –∏–ª–∏ –¥—Ä—É–≥–æ–π LLM
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
      const response = await this.callLLMAPI({
        system: systemPrompt,
        user: request.message,
        max_tokens: agentSettings.max_response_length || 500
      });
      
      console.log('‚úÖ [UnifiedFlow] AI response generated');
      return response;
      
    } catch (error) {
      console.error('‚ùå [UnifiedFlow] Error generating AI response:', error);
      throw error;
    }
  }
  
  // –í—ã–∑–æ–≤ LLM API (–∑–∞–≥–ª—É—à–∫–∞)
  async callLLMAPI(params) {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GigaChat
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return {
      content: `–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å: "${params.user}". –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LLM –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.`,
      tokens_used: 50,
      model: 'gigachat-pro'
    };
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
  async validateResponse(response, searchResults, request) {
    const cacheKey = `validation_${JSON.stringify(response)}`;
    
    if (this.validationCache.has(cacheKey)) {
      return this.validationCache.get(cacheKey);
    }
    
    const validation = {
      isValid: true,
      errors: [],
      score: 0
    };
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
    if (response.content && response.content.length > 1000) {
      validation.errors.push('Response too long');
      validation.isValid = false;
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (!response.content || response.content.trim().length === 0) {
      validation.errors.push('Empty response');
      validation.isValid = false;
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (searchResults.chunks.length > 0 && response.content) {
      const hasRelevantInfo = this.checkRelevance(response.content, searchResults.chunks);
      if (!hasRelevantInfo) {
        validation.errors.push('Response not based on search results');
        validation.score -= 0.3;
      }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏ (–ø—Ä–æ—Å—Ç–∞—è)
    const hallucinationScore = this.detectHallucinations(response.content);
    if (hallucinationScore > 0.7) {
      validation.errors.push('Potential hallucination detected');
      validation.score -= 0.5;
    }
    
    // 5. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    if (validation.score < 0.5) {
      validation.isValid = false;
    }
    
    this.validationCache.set(cacheKey, validation);
    return validation;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  checkRelevance(response, chunks) {
    const responseWords = response.toLowerCase().split(/\s+/);
    const chunkWords = chunks.flatMap(chunk => chunk.chunk_text.toLowerCase().split(/\s+/));
    
    const commonWords = responseWords.filter(word => chunkWords.includes(word));
    const relevanceScore = commonWords.length / responseWords.length;
    
    return relevanceScore > 0.1; // –ú–∏–Ω–∏–º—É–º 10% –æ–±—â–∏—Ö —Å–ª–æ–≤
  }
  
  // –î–µ—Ç–µ–∫—Ü–∏—è –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π (–ø—Ä–æ—Å—Ç–∞—è)
  detectHallucinations(content) {
    const hallucinationIndicators = [
      '—Ç–æ—á–Ω–æ –∑–Ω–∞—é',
      '—É–≤–µ—Ä–µ–Ω —á—Ç–æ',
      '–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é',
      '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ',
      '–∫–æ–Ω–µ—á–Ω–æ'
    ];
    
    const contentLower = content.toLowerCase();
    let hallucinationScore = 0;
    
    hallucinationIndicators.forEach(indicator => {
      if (contentLower.includes(indicator)) {
        hallucinationScore += 0.2;
      }
    });
    
    return Math.min(hallucinationScore, 1.0);
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
  async generateImprovedPrompt(originalPrompt, validationErrors) {
    let improvedPrompt = originalPrompt;
    
    if (validationErrors.includes('Response not based on search results')) {
      improvedPrompt += '\n\n–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.';
    }
    
    if (validationErrors.includes('Potential hallucination detected')) {
      improvedPrompt += '\n\n–í–ê–ñ–ù–û: –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —Å–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ.';
    }
    
    return improvedPrompt;
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –æ—Ç–≤–µ—Ç–∞
  async generateFallbackResponse(request, agentSettings) {
    return {
      content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.',
      tokens_used: 50,
      model: 'fallback'
    };
  }
  
  // –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
  async postProcessResponse(response, request, agentSettings) {
    let processedContent = response.content;
    
    // 1. –û–±—Ä–µ–∑–∫–∞ –ø–æ –¥–ª–∏–Ω–µ
    const maxLength = agentSettings.max_response_length || 500;
    if (processedContent.length > maxLength) {
      processedContent = processedContent.substring(0, maxLength - 3) + '...';
    }
    
    // 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    return {
      ...response,
      content: processedContent,
      processed_at: new Date().toISOString(),
      user_id: request.userId,
      assistant_id: request.assistantId,
      validation_passed: true
    };
  }
  
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  async cacheResponse(request, response, agentSettings) {
    const cacheKey = this.createResponseCacheKey(request, agentSettings);
    this.responseCache.set(cacheKey, response);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
    if (this.responseCache.size > 1000) {
      const firstKey = this.responseCache.keys().next().value;
      this.responseCache.delete(firstKey);
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  async getCachedResponse(request, agentSettings) {
    const cacheKey = this.createResponseCacheKey(request, agentSettings);
    return this.responseCache.get(cacheKey) || null;
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –∫—ç—à–∞ –æ—Ç–≤–µ—Ç–∞
  createResponseCacheKey(request, agentSettings) {
    return `${request.userId}_${agentSettings.niche_id || 'default'}_${request.message.substring(0, 50)}`;
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
  async saveToHistory(request, response) {
    try {
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.supabase
        .from('chat_messages')
        .insert({
          user_id: request.userId,
          assistant_id: request.assistantId,
          role: 'user',
          content: request.message,
          session_id: request.sessionId,
          created_at: new Date().toISOString()
        });
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      await this.supabase
        .from('chat_messages')
        .insert({
          user_id: request.userId,
          assistant_id: request.assistantId,
          role: 'assistant',
          content: response.content,
          session_id: request.sessionId,
          tokens_in: response.tokens_used || 0,
          created_at: new Date().toISOString()
        });
      
    } catch (error) {
      console.error('‚ùå [UnifiedFlow] Error saving to history:', error);
    }
  }
  
  // –ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫
  async recordMetrics(request, response, startTime) {
    try {
      const processingTime = Date.now() - startTime;
      
      await monitoring.recordMetric('ai_agent_request', {
        userId: request.userId,
        assistantId: request.assistantId,
        processingTime: processingTime,
        responseLength: response.content.length,
        tokensUsed: response.tokens_used || 0,
        success: true
      });
      
    } catch (error) {
      console.error('‚ùå [UnifiedFlow] Error recording metrics:', error);
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats() {
    return {
      ...this.stats,
      cacheSize: this.responseCache.size,
      promptCacheSize: this.promptCache.size,
      validationCacheSize: this.validationCache.size,
      hitRate: this.stats.totalRequests > 0 ? 
        (this.stats.cacheHits / this.stats.totalRequests) : 0,
      successRate: this.stats.totalRequests > 0 ? 
        (this.stats.successfulRequests / this.stats.totalRequests) : 0,
      enhancedValidator: this.enhancedValidator.getStats(),
      responseCorrector: this.responseCorrector.getStats()
    };
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π
  clearCaches() {
    this.responseCache.clear();
    this.promptCache.clear();
    this.validationCache.clear();
    this.enhancedValidator.clearCaches();
    this.responseCorrector.clearCache();
    console.log('üßπ [UnifiedFlow] All caches cleared');
  }
  
  // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  resetStats() {
    this.stats = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      cacheHits: 0,
      cacheMisses: 0,
      validationPassed: 0,
      validationFailed: 0
    };
    this.enhancedValidator.resetStats();
    this.responseCorrector.resetStats();
    console.log('üìä [UnifiedFlow] Statistics reset');
  }
}

export default UnifiedAIAgentFlow;
