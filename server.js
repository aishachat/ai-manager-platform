import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import OpenAI from 'openai';
import https from 'https';
import axios from 'axios';
import { agentSettings, chatHistory, knowledgeBase } from './supabase.js';
import fs from 'fs';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (process.env.NODE_ENV === 'production') {
  dotenv.config({ path: '.env' });
} else {
  dotenv.config({ path: '.env.local' });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è GigaChat
const certPath = path.resolve(process.cwd(), 'russian_trusted_root_ca.crt');
if (fs.existsSync(certPath)) {
  process.env.NODE_EXTRA_CA_CERTS = certPath;
  console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ù–£–¶ –ú–∏–Ω—Ü–∏—Ñ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω:', certPath);
} else {
  console.log('‚ö†Ô∏è –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ù–£–¶ –ú–∏–Ω—Ü–∏—Ñ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL');
  process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
}

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI (–¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)
const openai = process.env.OPENAI_API_KEY ? new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
}) : null;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ò–ò-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
const AI_PROVIDERS = {
  gigachat: {
    name: 'GigaChat',
    available: true,
    regionRestricted: false,
    apiKey: process.env.GIGACHAT_API_KEY,
    clientId: process.env.GIGACHAT_CLIENT_ID,
    clientSecret: process.env.GIGACHAT_CLIENT_SECRET,
    endpoint: 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions',
    accessToken: null,
    tokenExpiry: null
  },
  yandex: {
    name: 'Yandex GPT',
    available: true,
    regionRestricted: false,
    apiKey: process.env.YANDEX_API_KEY,
    endpoint: 'https://llm.api.cloud.yandex.net/foundationModels/v1/completion'
  },
  openai: {
    name: 'OpenAI GPT',
    available: true,
    regionRestricted: true,
    apiKey: process.env.OPENAI_API_KEY
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
function getAvailableProvider() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ GigaChat –¥–ª—è –†–æ—Å—Å–∏–∏
  if (AI_PROVIDERS.gigachat.available && process.env.GIGACHAT_API_KEY && process.env.GIGACHAT_CLIENT_ID) {
    return 'gigachat';
  }
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: Yandex GPT
  if (AI_PROVIDERS.yandex.available && process.env.YANDEX_API_KEY) {
    return 'yandex';
  }
  
  return null;
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ GigaChat
async function getGigaChatToken() {
  try {
    console.log('=== GET GIGACHAT TOKEN START ===');
    console.log('API Key present:', !!AI_PROVIDERS.gigachat.apiKey);
    console.log('Client ID present:', !!AI_PROVIDERS.gigachat.clientId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
    if (AI_PROVIDERS.gigachat.accessToken && AI_PROVIDERS.gigachat.tokenExpiry && Date.now() < AI_PROVIDERS.gigachat.tokenExpiry) {
      console.log('Using cached token, expires in:', Math.round((AI_PROVIDERS.gigachat.tokenExpiry - Date.now()) / 1000), 'seconds');
      return AI_PROVIDERS.gigachat.accessToken;
    }

    console.log('Requesting new token...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
    const authKey = AI_PROVIDERS.gigachat.apiKey;
    console.log('Using auth key (first 20 chars):', authKey.substring(0, 20) + '...');
    
    const rqUID = uuidv4();
    console.log('Generated RqUID:', rqUID);
    
    const response = await axios.post('https://ngw.devices.sberbank.ru:9443/api/v2/oauth', 
      'scope=GIGACHAT_API_PERS',
      {
        headers: {
          'Authorization': `Basic ${authKey}`,
          'RqUID': rqUID,
          'Content-Type': 'application/x-www-form-urlencoded',
          'Accept': 'application/json'
        },
        httpsAgent: new https.Agent({
          rejectUnauthorized: false,
          secureProtocol: 'TLSv1_2_method',
          ca: fs.existsSync(certPath) ? fs.readFileSync(certPath) : undefined
        }),
        timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        maxRedirects: 5
      }
    );
    
    console.log('GigaChat Token Response Status:', response.status);
    console.log('GigaChat Token Response Data:', response.data);
    
    if (!response.data.access_token) {
      throw new Error('No access token in response');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    AI_PROVIDERS.gigachat.accessToken = response.data.access_token;
    // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç expires_at –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö, –∞ –Ω–µ expires_in –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    AI_PROVIDERS.gigachat.tokenExpiry = response.data.expires_at;
    
    console.log('Token saved, expires at:', new Date(response.data.expires_at).toISOString());
    return response.data.access_token;
  } catch (error) {
    console.error('=== GIGACHAT TOKEN ERROR ===');
    console.error('Error type:', error.constructor.name);
    console.error('Error message:', error.message);
    console.error('Error response data:', error.response?.data);
    console.error('Error response status:', error.response?.status);
    console.error('Error stack:', error.stack);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat
async function sendGigaChatRequest(messages, systemPrompt) {
  try {
    console.log('=== SEND GIGACHAT REQUEST START ===');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
    const accessToken = await getGigaChatToken();
    console.log('Access token received, length:', accessToken ? accessToken.length : 0);
    
    // GigaChat –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const messagesWithSystem = messages.length > 0 ? [
      {
        role: 'user',
        content: `${systemPrompt}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${messages[0].content}`
      },
      ...messages.slice(1)
    ] : messages;

    console.log('Messages to send:', JSON.stringify(messagesWithSystem, null, 2));

    const requestBody = {
      model: 'GigaChat-2-Pro', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      messages: messagesWithSystem,
      temperature: 0.7,
      max_tokens: 800,
    };

    console.log('Request body:', JSON.stringify(requestBody, null, 2));

    const response = await axios.post('https://gigachat.devices.sberbank.ru/api/v1/chat/completions', 
      requestBody,
      {
        headers: {
          'Authorization': `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
        httpsAgent: new https.Agent({
          rejectUnauthorized: false,
          secureProtocol: 'TLSv1_2_method',
          ca: fs.existsSync(certPath) ? fs.readFileSync(certPath) : undefined
        }),
        timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      }
    );

    console.log('GigaChat Response Status:', response.status);
    console.log('GigaChat Response Headers:', response.headers);
    console.log('GigaChat Response Data:', response.data);
    
    if (response.data && response.data.choices && response.data.choices[0] && response.data.choices[0].message) {
      return response.data.choices[0].message.content;
    } else {
      throw new Error('Invalid response format from GigaChat');
    }
  } catch (error) {
    console.error('=== GIGACHAT ERROR ===');
    console.error('Error type:', error.constructor.name);
    console.error('Error message:', error.message);
    console.error('Error response data:', error.response?.data);
    console.error('Error response status:', error.response?.status);
    console.error('Error response headers:', error.response?.headers);
    console.error('Error stack:', error.stack);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Yandex GPT
async function sendYandexRequest(messages, systemPrompt) {
  try {
    const response = await fetch(AI_PROVIDERS.yandex.endpoint, {
      method: 'POST',
      headers: {
        'Authorization': `Api-Key ${AI_PROVIDERS.yandex.apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        modelUri: 'gpt://b1g8c7f8c7f8c7f8c7f8c/yandexgpt-lite',
        completionOptions: {
          temperature: 0.7,
          maxTokens: 800,
        },
        messages: [
          { role: 'system', text: systemPrompt },
          ...messages.map(msg => ({
            role: msg.role === 'user' ? 'user' : 'assistant',
            text: msg.content
          }))
        ]
      })
    });

    const data = await response.json();
    return data.result.alternatives[0].message.text;
  } catch (error) {
    console.error('Yandex GPT Error:', error);
    throw error;
  }
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
function generateSystemPrompt(setupData) {
  const task = setupData.task || '–ø—Ä–æ–¥–∞–∂ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π';
  const mainGoal = setupData.mainGoal || '–ø–æ–º–æ—â—å –∫–ª–∏–µ–Ω—Ç–∞–º';
  const addressing = setupData.addressing === '–¢—ã' ? '–Ω–∞ "—Ç—ã"' : '–Ω–∞ "–≤—ã"';
  const emojiUsage = setupData.emojiUsage || '—Ä–µ–¥–∫–æ';
  
  let prompt = `# –†–û–õ–¨ –ò –ü–û–í–ï–î–ï–ù–ò–ï

–¢—ã - **Adapto**, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç –¥–ª—è ${task}. –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –º–∏—Å—Å–∏—è: ${mainGoal}.

## üéØ –û–°–ù–û–í–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´

1. **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è**: –ê–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –ø–æ–¥ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
2. **–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**: –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—à–µ–Ω–∏—è –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –æ –Ω–∏—Ö –ø–æ–ø—Ä–æ—Å–∏—Ç
3. **–≠–º–ø–∞—Ç–∏—è**: –ü–æ–∫–∞–∑—ã–≤–∞–π –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –∫–ª–∏–µ–Ω—Ç–∞
4. **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º**: –°–æ—Ö—Ä–∞–Ω—è–π –¥–µ–ª–æ–≤–æ–π —Ç–æ–Ω, –Ω–æ –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º
5. **–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å**: –î–∞–≤–∞–π —á–µ—Ç–∫–∏–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

## üë§ –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø

- **–û–±—Ä–∞—â–µ–Ω–∏–µ**: ${addressing}
- **–¢–æ–Ω**: ${setupData.communicationStyle || '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π'}
- **–°–º–∞–π–ª–∏–∫–∏**: ${emojiUsage === '–ß–∞—Å—Ç–æ' ? '–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π' : emojiUsage === '–†–µ–¥–∫–æ' ? '–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ' : '–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏'}
- **–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤**: –ö—Ä–∞—Ç–∫–∏–µ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

## üéØ –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø

${setupData.targetAudience || '–û–±—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã'}

## üìà –¶–ò–ö–õ –ü–†–û–î–ê–ñ/–û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø

${setupData.salesCycle || '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–∞–∂'}

## üö´ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò –ü–†–ê–í–ò–õ–ê

${(setupData.restrictions || []).map((r) => `- ${r}`).join('\n')}
${setupData.restrictionsCustom ? `- ${setupData.restrictionsCustom}` : ''}

## ‚öôÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò

${(setupData.additionalSettings || []).map((s) => `- ${s}`).join('\n')}
${setupData.additionalSettingsCustom ? `- ${setupData.additionalSettingsCustom}` : ''}

## üìä –°–ë–û–† –î–ê–ù–ù–´–•

–°–æ–±–∏—Ä–∞–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:
${(setupData.dataCollection || []).join(', ')}
${setupData.dataCollectionCustom ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: ${setupData.dataCollectionCustom}` : ''}

## üé≠ –≠–¢–ê–ü–´ –î–ò–ê–õ–û–ì–ê

${(setupData.dialogStages || []).map((stage, index) => `${index + 1}. ${stage}`).join('\n')}

## üß† –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤:
${(setupData.knowledgeItems || []).map((item) => `- ${item.content || item}`).join('\n')}

## üí¨ –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–û–í

1. **–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ**: –ö—Ä–∞—Ç–∫–æ–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ
2. **–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å**: –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
3. **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å**: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
4. **–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é**: –ß—Ç–æ –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ

## üö® –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê

- –ù–ò–ö–û–ì–î–ê –Ω–µ –¥–∞–≤–∞–π –ª–æ–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º
- –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–≤—è–∑–∞—Ç—å—Å—è —Å —á–µ–ª–æ–≤–µ–∫–æ–º –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
- –°–æ–±–ª—é–¥–∞–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
- –ù–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –∏–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤ –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–π

## üéØ –¶–ï–õ–¨ –ö–ê–ñ–î–û–ì–û –î–ò–ê–õ–û–ì–ê

–ü–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É —Ä–µ—à–∏—Ç—å –µ–≥–æ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, —Å–æ–∑–¥–∞–≤–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–ø–∞–Ω–∏–µ–π.

## üìö –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô

${setupData.knowledgeItems && setupData.knowledgeItems.length > 0 ? 
  '–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –≠–¢–£ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö. –≠—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n' + 
  setupData.knowledgeItems.map((item, index) => {
    if (item.type === 'correction') {
      return `üö® –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: ${item.content}`;
    }
    return `${index + 1}. ${item.type.toUpperCase()}: ${item.content}`;
  }).join('\n') + 
  '\n\n–ü–†–ê–í–ò–õ–û: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å. –ï—Å–ª–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞–º, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—É–π –∏–º.' : 
  '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤.'
}`;

  return prompt;
}

// API —Ä–æ—É—Ç –¥–ª—è —á–∞—Ç–∞
// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞
app.get('/api/agent/:agentId', async (req, res) => {
  try {
    const { agentId } = req.params;
    const settings = await agentSettings.getAgentSettings(agentId);
    
    if (!settings) {
      return res.status(404).json({ error: '–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({ agent: settings });
  } catch (error) {
    console.error('Error fetching agent:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞' });
  }
});

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞
app.post('/api/agent/:agentId', async (req, res) => {
  try {
    const { agentId } = req.params;
    const { settings } = req.body;
    
    const success = await agentSettings.saveAgentSettings(agentId, settings);
    
    if (!success) {
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫' });
    }
    
    res.json({ success: true, message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
  } catch (error) {
    console.error('Error saving agent settings:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∞–≥–µ–Ω—Ç–∞
app.get('/api/agent/:agentId/chat', async (req, res) => {
  try {
    const { agentId } = req.params;
    const { limit = 10 } = req.query;
    
    const history = await chatHistory.getChatHistory(agentId, parseInt(limit));
    
    res.json({ history });
  } catch (error) {
    console.error('Error fetching chat history:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞' });
  }
});

// –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
app.post('/api/chat', async (req, res) => {
  try {
    const { message, setupData, conversationHistory = [], agentId } = req.body;

    if (!message) {
      return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    const provider = getAvailableProvider();
    
    if (!provider) {
      return res.status(503).json({ 
        error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ò–ò-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏.',
        details: 'no_providers_available'
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞ –∏–∑ Supabase, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω agentId
    let finalSetupData = setupData || {};
    if (agentId) {
      const agentData = await agentSettings.getAgentSettings(agentId);
      if (agentData && agentData.settings) {
        finalSetupData = { ...finalSetupData, ...agentData.settings };
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        const knowledgeItems = await knowledgeBase.getKnowledgeItems(agentId);
        console.log('Loaded knowledge items for user:', agentId, knowledgeItems);
        finalSetupData.knowledgeItems = knowledgeItems;
      } catch (error) {
        console.error('Error loading knowledge items:', error);
        finalSetupData.knowledgeItems = [];
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const systemPrompt = generateSystemPrompt(finalSetupData);
    console.log('Generated system prompt with knowledge base:', systemPrompt.substring(0, 500) + '...');
    
    // –°—Ç—Ä–æ–∏–º –º–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞
    const messages = [
      {
        role: 'system',
        content: systemPrompt,
      }
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
    const recentHistory = conversationHistory.slice(-10);
    recentHistory.forEach(msg => {
      messages.push({
        role: msg.type === 'user' ? 'user' : 'assistant',
        content: msg.text
      });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    messages.push({
      role: 'user',
      content: message,
    });

    let response;
    let usage = {};
    let model = '';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
    switch (provider) {
      case 'openai':
        const completion = await openai.chat.completions.create({
          model: process.env.OPENAI_MODEL || 'gpt-3.5-turbo',
          messages: messages,
          max_tokens: 800,
          temperature: 0.7,
          presence_penalty: 0.1,
          frequency_penalty: 0.1,
        });
        response = completion.choices[0]?.message?.content;
        usage = completion.usage;
        model = completion.model;
        break;

      case 'gigachat':
        response = await sendGigaChatRequest(messages, systemPrompt);
        model = 'gigachat';
        break;

      case 'yandex':
        response = await sendYandexRequest(messages, systemPrompt);
        model = 'yandex-gpt';
        break;



      default:
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä');
    }

    if (!response) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Supabase, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω agentId
    if (agentId) {
      try {
        console.log('Saving chat messages to Supabase for agentId:', agentId);
        await chatHistory.saveMessage(agentId, 'user', message);
        await chatHistory.saveMessage(agentId, 'assistant', response);
        console.log('Chat messages saved successfully to Supabase');
      } catch (error) {
        console.error('Error saving chat messages to Supabase:', error);
      }
    }

    res.json({ 
      response,
      usage,
      model,
      provider
    });
  } catch (error) {
    console.error('AI API Error:', error);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    if (error.code === 'insufficient_quota') {
      res.status(429).json({ 
        error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–≤–æ—Ç—ã. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.',
        details: 'insufficient_quota'
      });
    } else if (error.code === 'rate_limit_exceeded') {
      res.status(429).json({ 
        error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        details: 'rate_limit_exceeded'
      });
    } else if (error.message.includes('region') || error.message.includes('country')) {
      res.status(403).json({ 
        error: '–í–∞—à —Ä–µ–≥–∏–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –ò–ò-—Å–µ—Ä–≤–∏—Å—ã.',
        details: 'region_not_supported',
        suggestion: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Yandex GPT –∏–ª–∏ GigaChat'
      });
    } else {
      res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞',
        details: error.message
      });
    }
  }
});

// API —Ä–æ—É—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
    if (!email || !password) {
      return res.status(400).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        details: [
          { field: 'email', message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
          { field: 'password', message: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }
        ]
      });
    }
    
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π email/–ø–∞—Ä–æ–ª—å
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ Supabase Auth
    const userData = {
      id: 'user-' + Date.now(),
      email: email,
      name: email.split('@')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      company_name: '–ö–æ–º–ø–∞–Ω–∏—è'
    };
    
    const sessionData = {
      access_token: 'demo-token-' + Date.now(),
      refresh_token: 'demo-refresh-' + Date.now(),
      expires_at: Date.now() + (24 * 60 * 60 * 1000) // 24 —á–∞—Å–∞
    };
    
    res.json({
      user: userData,
      session: sessionData
    });
  } catch (error) {
    console.error('Login Error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' });
  }
});

app.post('/api/auth/register', async (req, res) => {
  try {
    const { email, password, name, company_name, phone, company_field } = req.body;
    
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!email || !password || !name) {
      return res.status(400).json({ 
        error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
        details: [
          { field: 'email', message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
          { field: 'password', message: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
          { field: 'name', message: '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }
        ]
      });
    }
    
    if (password.length < 6) {
      return res.status(400).json({ 
        error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤',
        details: [
          { field: 'password', message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' }
        ]
      });
    }
    
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Supabase Auth
    const userData = {
      id: 'user-' + Date.now(),
      email: email,
      name: name,
      company_name: company_name || '–ö–æ–º–ø–∞–Ω–∏—è',
      phone: phone || '',
      company_field: company_field || ''
    };
    
    const sessionData = {
      access_token: 'demo-token-' + Date.now(),
      refresh_token: 'demo-refresh-' + Date.now(),
      expires_at: Date.now() + (24 * 60 * 60 * 1000) // 24 —á–∞—Å–∞
    };
    
    res.json({
      user: userData,
      session: sessionData
    });
  } catch (error) {
    console.error('Register Error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

app.post('/api/auth/logout', async (req, res) => {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    res.json({ success: true, message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
  } catch (error) {
    console.error('Logout Error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' });
  }
});

// API —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
app.get('/api/status', async (req, res) => {
  try {
    const provider = getAvailableProvider();
    
    if (!provider) {
      return res.json({ 
        status: 'error',
        message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ò–ò-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤',
        providers: AI_PROVIDERS
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
    let testMessage = '–ü—Ä–∏–≤–µ—Ç';
    
    switch (provider) {
      case 'openai':
        const completion = await openai.chat.completions.create({
          model: 'gpt-3.5-turbo',
          messages: [{ role: 'user', content: testMessage }],
          max_tokens: 5,
        });
        break;
        
      case 'gigachat':
        await sendGigaChatRequest([{ role: 'user', content: testMessage }], '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫');
        break;
        
      case 'yandex':
        await sendYandexRequest([{ role: 'user', content: testMessage }], '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫');
        break;
        

    }

    res.json({ 
      status: 'connected',
      message: `${AI_PROVIDERS[provider].name} –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ`,
      provider: provider
    });
  } catch (error) {
    console.error('AI API Status Error:', error);
    res.status(500).json({ 
      status: 'error',
      message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ò–ò-—Å–µ—Ä–≤–∏—Å—É',
      error: error.message,
      providers: AI_PROVIDERS
    });
  }
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ GigaChat
app.get('/api/test-gigachat', async (req, res) => {
  try {
    console.log('=== TEST GIGACHAT ENDPOINT ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    console.log('Testing token retrieval...');
    const token = await getGigaChatToken();
    console.log('Token received successfully, length:', token ? token.length : 0);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ GigaChat
    console.log('Testing GigaChat request...');
    const response = await sendGigaChatRequest([
      { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "–†–∞–±–æ—Ç–∞–µ—Ç"' }
    ], '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ.');
    
    console.log('GigaChat test response:', response);
    
    res.json({
      success: true,
      message: 'GigaChat —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      response: response
    });
  } catch (error) {
    console.error('=== GIGACHAT TEST ERROR ===');
    console.error('Error:', error.message);
    console.error('Stack:', error.stack);
    
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GigaChat',
      error: error.message
    });
  }
});

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
app.get('/api/test-gigachat-token', async (req, res) => {
  try {
    console.log('=== TEST GIGACHAT TOKEN ONLY ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    console.log('Testing token retrieval...');
    const token = await getGigaChatToken();
    console.log('Token received successfully, length:', token ? token.length : 0);
    
    res.json({
      success: true,
      message: '–¢–æ–∫–µ–Ω GigaChat –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      tokenLength: token ? token.length : 0
    });
  } catch (error) {
    console.error('=== GIGACHAT TOKEN TEST ERROR ===');
    console.error('Error:', error.message);
    console.error('Stack:', error.stack);
    
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ GigaChat',
      error: error.message
    });
  }
});

// API —Ä–æ—É—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
app.post('/api/knowledge', async (req, res) => {
  try {
    const { action, type, content, agentId } = req.body;

    switch (action) {
      case 'add':
        console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:', { type, content, agentId });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GigaChat –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        try {
          const provider = getAvailableProvider();
          const learningPrompt = `–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–≥–µ–Ω—Ç–∞ ${agentId}:
–¢–∏–ø: ${type}
–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${content}

–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –æ—Ç–≤–µ—Ç–∞—Ö –∞–≥–µ–Ω—Ç–∞. –û—Ç–≤–µ—Ç—å "–ü–æ–Ω—è–ª, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."`;

          let response;
          switch (provider) {
            case 'gigachat':
              response = await sendGigaChatRequest([
                { role: 'user', content: learningPrompt }
              ], '–¢—ã —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞. –ó–∞–ø–æ–º–∏–Ω–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö.');
              break;
              
            case 'openai':
              response = await openai.chat.completions.create({
                model: 'gpt-3.5-turbo',
                messages: [
                  { role: 'system', content: '–¢—ã —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞. –ó–∞–ø–æ–º–∏–Ω–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö.' },
                  { role: 'user', content: learningPrompt }
                ],
                max_tokens: 100,
              });
              break;
          }

          console.log('GigaChat –æ–±—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', response);
          res.json({ success: true, message: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ò–ò' });
        } catch (aiError) {
          console.error('AI Learning Error:', aiError);
          res.json({ success: true, message: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π (–ò–ò –æ–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å)' });
        }
        break;
      
      case 'correction':
        console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', { content, agentId });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ GigaChat
        try {
          const provider = getAvailableProvider();
          const correctionPrompt = `–í–∞–∂–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ ${agentId}:
${content}

–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω—è–π –µ–≥–æ –≤–æ –≤—Å–µ—Ö –±—É–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö. –û—Ç–≤–µ—Ç—å "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–æ."`;

          let response;
          switch (provider) {
            case 'gigachat':
              response = await sendGigaChatRequest([
                { role: 'user', content: correctionPrompt }
              ], '–¢—ã —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞. –ü—Ä–∏–Ω–∏–º–∞–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω—è–π –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–º.');
              break;
              
            case 'openai':
              response = await openai.chat.completions.create({
                model: 'gpt-3.5-turbo',
                messages: [
                  { role: 'system', content: '–¢—ã —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞. –ü—Ä–∏–Ω–∏–º–∞–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω—è–π –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–º.' },
                  { role: 'user', content: correctionPrompt }
                ],
                max_tokens: 100,
              });
              break;
          }

          console.log('GigaChat –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', response);
          res.json({ success: true, message: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ' });
        } catch (aiError) {
          console.error('AI Correction Error:', aiError);
          res.json({ success: true, message: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–ò–ò –æ–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å)' });
        }
        break;
      
      case 'search':
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        console.log('–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:', content);
        res.json({ 
          success: true, 
          results: ['–†–µ–∑—É–ª—å—Ç–∞—Ç 1', '–†–µ–∑—É–ª—å—Ç–∞—Ç 2'] 
        });
        break;
      
      default:
        res.status(400).json({ error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ' });
    }
  } catch (error) {
    console.error('Knowledge Base Error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π' });
  }
});

// API —Ä–æ—É—Ç –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è RLS (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
app.post('/api/disable-rls', async (req, res) => {
  try {
    console.log('=== DISABLE RLS ENDPOINT STARTED ===');
    
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const fs = await import('fs');
    const path = await import('path');
    const sqlPath = path.resolve(process.cwd(), 'fix_policies_simple.sql');
    const sqlContent = fs.readFileSync(sqlPath, 'utf8');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∫–æ–º–∞–Ω–¥—ã –ø–æ —á–∞—Å—Ç—è–º
    const sqlCommands = sqlContent.split(';').filter(cmd => cmd.trim());
    
    for (const sql of sqlCommands) {
      if (sql.trim()) {
        try {
          const { data, error } = await supabase.rpc('exec_sql', { sql: sql.trim() + ';' });
          if (error) {
            console.error('SQL Error:', error);
          } else if (data) {
            console.log('SQL Result:', data);
          }
        } catch (err) {
          console.error('Command failed:', sql, err);
        }
      }
    }
    
    console.log('RLS disabled successfully');
    res.json({
      success: true,
      message: 'RLS –æ—Ç–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    });
  } catch (error) {
    console.error('=== DISABLE RLS ENDPOINT ERROR ===');
    console.error('Error details:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

// API —Ä–æ—É—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫ RLS
app.post('/api/fix-policies', async (req, res) => {
  try {
    console.log('=== FIX POLICIES ENDPOINT STARTED ===');
    
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const fs = await import('fs');
    const path = await import('path');
    const sqlPath = path.resolve(process.cwd(), 'fix_chat_policies.sql');
    const sqlContent = fs.readFileSync(sqlPath, 'utf8');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∫–æ–º–∞–Ω–¥—ã –ø–æ —á–∞—Å—Ç—è–º
    const sqlCommands = sqlContent.split(';').filter(cmd => cmd.trim());
    
    for (const sql of sqlCommands) {
      if (sql.trim()) {
        try {
          const { error } = await supabase.rpc('exec_sql', { sql: sql.trim() + ';' });
          if (error) {
            console.error('SQL Error:', error);
          }
        } catch (err) {
          console.error('Command failed:', sql, err);
        }
      }
    }
    
    console.log('Policies fixed successfully');
    res.json({
      success: true,
      message: '–ü–æ–ª–∏—Ç–∏–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    console.error('=== FIX POLICIES ENDPOINT ERROR ===');
    console.error('Error details:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

// API —Ä–æ—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ Supabase
app.post('/api/create-tables', async (req, res) => {
  try {
    console.log('=== CREATE TABLES ENDPOINT STARTED ===');
    
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å—ã –ø–æ —á–∞—Å—Ç—è–º
    const sqlCommands = [
      `CREATE TABLE IF NOT EXISTS public.chat_history (
        id BIGSERIAL PRIMARY KEY,
        user_id BIGINT NOT NULL,
        assistant_id BIGINT NOT NULL,
        message_type TEXT NOT NULL CHECK (message_type IN ('user', 'assistant')),
        message_content TEXT NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );`,
      
      `CREATE TABLE IF NOT EXISTS public.ai_agent_settings (
        id BIGSERIAL PRIMARY KEY,
        user_id BIGINT UNIQUE NOT NULL,
        settings JSONB DEFAULT '{}',
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );`,
      
      `CREATE INDEX IF NOT EXISTS idx_chat_history_user_id ON public.chat_history(user_id);`,
      `CREATE INDEX IF NOT EXISTS idx_chat_history_created_at ON public.chat_history(created_at);`,
      `CREATE INDEX IF NOT EXISTS idx_agent_settings_user_id ON public.ai_agent_settings(user_id);`,
      
      `ALTER TABLE public.chat_history ENABLE ROW LEVEL SECURITY;`,
      `ALTER TABLE public.ai_agent_settings ENABLE ROW LEVEL SECURITY;`,
      
      `DROP POLICY IF EXISTS "Users can view their own chat history" ON public.chat_history;`,
      `CREATE POLICY "Users can view their own chat history" ON public.chat_history
        FOR SELECT USING (auth.uid()::bigint = user_id);`,
      
      `DROP POLICY IF EXISTS "Users can insert their own chat messages" ON public.chat_history;`,
      `CREATE POLICY "Users can insert their own chat messages" ON public.chat_history
        FOR INSERT WITH CHECK (auth.uid()::bigint = user_id);`,
      
      `DROP POLICY IF EXISTS "Users can update their own chat messages" ON public.chat_history;`,
      `CREATE POLICY "Users can update their own chat messages" ON public.chat_history
        FOR UPDATE USING (auth.uid()::bigint = user_id);`,
      
      `DROP POLICY IF EXISTS "Users can view their own agent settings" ON public.ai_agent_settings;`,
      `CREATE POLICY "Users can view their own agent settings" ON public.ai_agent_settings
        FOR SELECT USING (auth.uid()::bigint = user_id);`,
      
      `DROP POLICY IF EXISTS "Users can insert their own agent settings" ON public.ai_agent_settings;`,
      `CREATE POLICY "Users can insert their own agent settings" ON public.ai_agent_settings
        FOR INSERT WITH CHECK (auth.uid()::bigint = user_id);`,
      
      `DROP POLICY IF EXISTS "Users can update their own agent settings" ON public.ai_agent_settings;`,
      `CREATE POLICY "Users can update their own agent settings" ON public.ai_agent_settings
        FOR UPDATE USING (auth.uid()::bigint = user_id);`
    ];
    
    for (const sql of sqlCommands) {
      try {
        const { error } = await supabase.rpc('exec_sql', { sql });
        if (error) {
          console.error('SQL Error:', error);
        }
      } catch (err) {
        console.error('Command failed:', sql, err);
      }
    }
    
    console.log('Tables creation completed');
    res.json({
      success: true,
      message: '–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ'
    });
  } catch (error) {
    console.error('=== CREATE TABLES ENDPOINT ERROR ===');
    console.error('Error details:', error);
    res.status(500).json({
      success: false,
      message: error.message
    });
  }
});

// API —Ä–æ—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ GigaChat
app.post('/api/process-content', async (req, res) => {
  try {
    console.log('=== PROCESS CONTENT ENDPOINT STARTED ===');
    const { content, contentType, userId } = req.body;
    
    console.log('Request body:', { contentType, userId, contentLength: content.length, content: content.substring(0, 100) + '...' });
    
    if (!content || !contentType || !userId) {
      console.error('Missing required fields:', { content: !!content, contentType: !!contentType, userId: !!userId });
      return res.status(400).json({
        success: false,
        message: 'Missing required fields',
        status: '–û—à–∏–±–∫–∞'
      });
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    let prompt = '';
    switch (contentType) {
      case 'site':
        prompt = `–¢—ã - —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∞–π—Ç–∞: ${content}. 
        
        –ó–∞–¥–∞—á–∞: –ò–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏, —É—Å–ª—É–≥–∞—Ö, –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}
        
        –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—å —Ç–æ—á–Ω–æ: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Å–∞–π—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}."`;
        break;
      case 'feed':
        prompt = `–¢—ã - —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–≤–∞—Ä–Ω—ã–π —Ñ–∏–¥: ${content}.
        
        –ó–∞–¥–∞—á–∞: –ò–∑–≤–ª–µ–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö, —Ü–µ–Ω–∞—Ö, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö, –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}
        
        –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—å —Ç–æ—á–Ω–æ: "–¢–æ–≤–∞—Ä–Ω—ã–π —Ñ–∏–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}."`;
        break;
      case 'text':
        prompt = `–¢—ã - —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç: ${content}.
        
        –ó–∞–¥–∞—á–∞: –ò–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ñ–∞–∫—Ç—ã, –¥–∞–Ω–Ω—ã–µ.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}
        
        –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—å —Ç–æ—á–Ω–æ: "–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}."`;
        break;
      case 'file':
        prompt = `–¢—ã - —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: ${content}.
        
        –ó–∞–¥–∞—á–∞: –ò–∑–≤–ª–µ–∫–∏ –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}
        
        –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—å —Ç–æ—á–Ω–æ: "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}."`;
        break;
      default:
        prompt = `–¢—ã - —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${content}.
        
        –ó–∞–¥–∞—á–∞: –ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${userId}
        
        –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—å —Ç–æ—á–Ω–æ: "–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}."`;
    }

    console.log('Generated prompt:', prompt.substring(0, 200) + '...');

    console.log('Sending to GigaChat...');
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GigaChat
    const response = await sendGigaChatRequest([
      { role: 'user', content: prompt }
    ], '–¢—ã —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');

    console.log('GigaChat processing response:', response);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (response && (response.includes('—É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω') || response.includes('–æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞'))) {
      console.log('Processing successful, returning success response');
      res.json({
        success: true,
        message: response,
        status: '–ó–∞–≥—Ä—É–∂–µ–Ω–æ'
      });
    } else {
      console.log('Processing failed, response does not contain success keywords');
      res.json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
        status: '–û—à–∏–±–∫–∞'
      });
    }
  } catch (error) {
    console.error('=== PROCESS CONTENT ENDPOINT ERROR ===');
    console.error('Error details:', error);
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    res.status(500).json({
      success: false,
      message: error.message,
      status: '–û—à–∏–±–∫–∞'
    });
  }
});

// API —Ä–æ—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
app.get('/api/analytics', async (req, res) => {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    const analytics = {
      totalConversations: 0,
      averageResponseTime: 0,
      popularQuestions: [],
      satisfactionRate: 0
    };
    
    res.json(analytics);
  } catch (error) {
    console.error('Analytics Error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏' });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`ü§ñ –ò–ò-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:`);
  console.log(`   - GigaChat: ${process.env.GIGACHAT_API_KEY ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
  console.log(`   - Yandex GPT: ${process.env.YANDEX_API_KEY ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
  console.log(`   - OpenAI: ${process.env.OPENAI_API_KEY ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}`);
  console.log(`üîó API endpoints:`);
  console.log(`   - POST /api/chat - –ß–∞—Ç —Å –ò–ò`);
  console.log(`   - GET /api/status - –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`);
  console.log(`   - POST /api/knowledge - –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π`);
  console.log(`   - GET /api/analytics - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞`);
});
