-- üîí RLS –ê—É–¥–∏—Ç –∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
-- –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ Row Level Security –ø–æ–ª–∏—Ç–∏–∫

-- ============================================
-- 1. –ü–†–û–í–ï–†–ö–ê –ü–û–ö–†–´–¢–ò–Ø RLS
-- ============================================

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–º–µ—é—Ç RLS –≤–∫–ª—é—á–µ–Ω–Ω—ã–π
SELECT 
    schemaname,
    tablename,
    rowsecurity as rls_enabled,
    CASE 
        WHEN rowsecurity THEN '‚úÖ RLS –≤–∫–ª—é—á–µ–Ω'
        ELSE '‚ùå RLS –û–¢–ö–õ–Æ–ß–ï–ù - –£–Ø–ó–í–ò–ú–û–°–¢–¨!'
    END as status
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN (
    'users', 'projects', 'niches', 'user_niches', 'widget_settings', 
    'widget_development_settings', 'telegram_settings', 'dialogs', 
    'chat_history', 'chat_messages', 'knowledge_sources', 'knowledge_chunks', 
    'assistants', 'conversations', 'crm_clients', 'crm_deal_notes', 
    'crm_deals', 'crm_operators', 'crm_tasks', 'dialog_crm_connections', 
    'dialog_with_operators', 'faq_cache', 'help_requests', 
    'integration_dialogs', 'integration_messages', 'messages', 
    'messenger_contacts', 'niche_synonyms', 'notifications', 
    'notification_logs', 'project_members', 'prompt_logs', 'stories', 
    'telegram_bots', 'telegram_notifications', 'user_integrations', 
    'widget_api_keys', 'working_hours'
)
ORDER BY 
    CASE WHEN rowsecurity THEN 1 ELSE 0 END,
    tablename;

-- ============================================
-- 2. –ê–ù–ê–õ–ò–ó –ü–û–õ–ò–¢–ò–ö
-- ============================================

-- –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö RLS –ø–æ–ª–∏—Ç–∏–∫
SELECT 
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd as command,
    qual as condition,
    with_check as insert_condition,
    CASE 
        WHEN cmd = 'SELECT' THEN 'üîç –ß—Ç–µ–Ω–∏–µ'
        WHEN cmd = 'INSERT' THEN '‚ûï –í—Å—Ç–∞–≤–∫–∞'
        WHEN cmd = 'UPDATE' THEN '‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ'
        WHEN cmd = 'DELETE' THEN 'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ'
        WHEN cmd = 'ALL' THEN 'üîÑ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏'
        ELSE '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    END as operation_type,
    CASE 
        WHEN qual IS NULL AND with_check IS NULL THEN '‚ö†Ô∏è –ù–ï–¢ –£–°–õ–û–í–ò–ô - –û–ü–ê–°–ù–û!'
        WHEN qual LIKE '%auth.uid()%' THEN '‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç auth.uid()'
        WHEN qual LIKE '%user_id%' THEN '‚úÖ –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ user_id'
        ELSE '‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É'
    END as security_level
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, cmd, policyname;

-- ============================================
-- 3. –ü–†–û–í–ï–†–ö–ê –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô
-- ============================================

-- –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏
SELECT 
    'üö® –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨' as alert_type,
    schemaname,
    tablename,
    policyname,
    cmd,
    qual,
    '–ü–æ–ª–∏—Ç–∏–∫–∞ –±–µ–∑ —É—Å–ª–æ–≤–∏–π –∏–ª–∏ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π' as description
FROM pg_policies 
WHERE schemaname = 'public'
AND (
    qual IS NULL 
    OR qual = 'true'
    OR qual NOT LIKE '%auth.uid()%'
    OR qual NOT LIKE '%user_id%'
    OR qual LIKE '%OR%' -- –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–º
)
ORDER BY tablename, policyname;

-- ============================================
-- 4. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ò–¢–ò–ö
-- ============================================

-- –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
DO $$
DECLARE
    test_user_id UUID;
    test_user_email TEXT := 'test-rls-audit@example.com';
BEGIN
    -- –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞)
    IF NOT EXISTS (SELECT 1 FROM auth.users WHERE email = test_user_email) THEN
        INSERT INTO auth.users (
            id, 
            email, 
            encrypted_password, 
            email_confirmed_at, 
            created_at, 
            updated_at,
            aud,
            role
        ) VALUES (
            gen_random_uuid(),
            test_user_email,
            crypt('testpassword', gen_salt('bf')),
            now(),
            now(),
            now(),
            'authenticated',
            'authenticated'
        );
    END IF;
    
    -- –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    SELECT id INTO test_user_id FROM auth.users WHERE email = test_user_email;
    
    -- –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ users (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞)
    IF NOT EXISTS (SELECT 1 FROM public.users WHERE id = test_user_id) THEN
        INSERT INTO public.users (
            id,
            email,
            name,
            company_name,
            phone,
            created_at,
            updated_at
        ) VALUES (
            test_user_id,
            test_user_email,
            'Test RLS User',
            'Test Company',
            '+7 (999) 999-99-99',
            now(),
            now()
        );
    END IF;
    
    RAISE NOTICE '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: %', test_user_id;
END $$;

-- ============================================
-- 5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ê
-- ============================================

-- –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º (—ç—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–¥ —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)
-- –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RLS
CREATE OR REPLACE FUNCTION test_rls_policies()
RETURNS TABLE (
    table_name TEXT,
    test_result TEXT,
    details TEXT
) AS $$
DECLARE
    test_user_id UUID;
    test_user_email TEXT := 'test-rls-audit@example.com';
    rec RECORD;
    table_names TEXT[] := ARRAY[
        'users', 'dialogs', 'chat_messages', 'knowledge_sources', 
        'assistants', 'conversations'
    ];
    table_name TEXT;
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    SELECT id INTO test_user_id FROM auth.users WHERE email = test_user_email;
    
    IF test_user_id IS NULL THEN
        RETURN QUERY SELECT 'ERROR'::TEXT, 'FAIL'::TEXT, 'Test user not found'::TEXT;
        RETURN;
    END IF;
    
    -- –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    FOREACH table_name IN ARRAY table_names
    LOOP
        BEGIN
            -- –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            EXECUTE format('SELECT COUNT(*) FROM %I WHERE user_id = $1 OR id = $1', table_name) 
            INTO rec USING test_user_id;
            
            RETURN QUERY SELECT 
                table_name,
                'PASS'::TEXT,
                format('Can access own data: %s records', rec.count);
                
        EXCEPTION WHEN OTHERS THEN
            RETURN QUERY SELECT 
                table_name,
                'FAIL'::TEXT,
                format('Error: %s', SQLERRM);
        END;
    END LOOP;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ============================================
-- 6. –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
-- ============================================

-- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ RLS –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
SELECT 
    schemaname,
    tablename,
    policyname,
    cmd,
    CASE 
        WHEN qual LIKE '%auth.uid()%' THEN '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç auth.uid() - –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ'
        WHEN qual LIKE '%user_id%' THEN '–§–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ user_id - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ'
        ELSE '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞'
    END as performance_impact
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename;

-- ============================================
-- 7. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ
-- ============================================

-- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
SELECT 
    'üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò' as section,
    CASE 
        WHEN NOT EXISTS (
            SELECT 1 FROM pg_tables 
            WHERE schemaname = 'public' 
            AND tablename = 'users' 
            AND rowsecurity = true
        ) THEN '‚ùå –í–∫–ª—é—á–∏—Ç—å RLS –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã users'
        ELSE '‚úÖ RLS –≤–∫–ª—é—á–µ–Ω –¥–ª—è users'
    END as recommendation
UNION ALL
SELECT 
    'üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò',
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM pg_policies 
            WHERE schemaname = 'public' 
            AND qual IS NULL
        ) THEN '‚ùå –ù–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑ —É—Å–ª–æ–≤–∏–π'
        ELSE '‚úÖ –í—Å–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∏–º–µ—é—Ç —É—Å–ª–æ–≤–∏—è'
    END
UNION ALL
SELECT 
    'üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò',
    CASE 
        WHEN EXISTS (
            SELECT 1 FROM pg_policies 
            WHERE schemaname = 'public' 
            AND qual NOT LIKE '%auth.uid()%'
            AND qual NOT LIKE '%user_id%'
        ) THEN '‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑ user_id —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏'
        ELSE '‚úÖ –í—Å–µ –ø–æ–ª–∏—Ç–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
    END;

-- ============================================
-- 8. –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
-- ============================================

-- –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
SELECT 
    'üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ RLS' as report_section,
    COUNT(*) as total_tables,
    COUNT(*) FILTER (WHERE rowsecurity = true) as tables_with_rls,
    COUNT(*) FILTER (WHERE rowsecurity = false) as tables_without_rls,
    ROUND(
        COUNT(*) FILTER (WHERE rowsecurity = true) * 100.0 / COUNT(*), 
        2
    ) as rls_coverage_percent
FROM pg_tables 
WHERE schemaname = 'public' 
AND tablename IN (
    'users', 'projects', 'niches', 'user_niches', 'widget_settings', 
    'widget_development_settings', 'telegram_settings', 'dialogs', 
    'chat_history', 'chat_messages', 'knowledge_sources', 'knowledge_chunks', 
    'assistants', 'conversations', 'crm_clients', 'crm_deal_notes', 
    'crm_deals', 'crm_operators', 'crm_tasks', 'dialog_crm_connections', 
    'dialog_with_operators', 'faq_cache', 'help_requests', 
    'integration_dialogs', 'integration_messages', 'messages', 
    'messenger_contacts', 'niche_synonyms', 'notifications', 
    'notification_logs', 'project_members', 'prompt_logs', 'stories', 
    'telegram_bots', 'telegram_notifications', 'user_integrations', 
    'widget_api_keys', 'working_hours'
);

-- ============================================
-- 9. –û–ß–ò–°–¢–ö–ê –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•
-- ============================================

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
CREATE OR REPLACE FUNCTION cleanup_rls_test_data()
RETURNS TEXT AS $$
DECLARE
    test_user_id UUID;
    test_user_email TEXT := 'test-rls-audit@example.com';
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    SELECT id INTO test_user_id FROM auth.users WHERE email = test_user_email;
    
    IF test_user_id IS NOT NULL THEN
        -- –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        DELETE FROM public.users WHERE id = test_user_id;
        DELETE FROM auth.users WHERE id = test_user_id;
        
        RETURN '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã';
    ELSE
        RETURN '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
    END IF;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
