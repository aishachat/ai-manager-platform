import requests
import os
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('.env.local')

def get_gigachat_token():
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    
    auth_key = os.getenv('GIGACHAT_API_KEY')
    
    if not auth_key:
        print("‚ùå GIGACHAT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    payload = {
        'scope': 'GIGACHAT_API_PERS'
    }
    
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': 'ac160d04-0557-4dc0-bc66-8e7875d69102',
        'Authorization': f'Basic {auth_key}'
    }
    
    try:
        response = requests.post(url, headers=headers, data=payload, timeout=30)
        
        if response.status_code == 200:
            data = response.json()
            return data.get('access_token')
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def test_gigachat_chat():
    print("=== –¢–ï–°–¢ –ß–ê–¢–ê –° GIGACHAT (Python) ===")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = get_gigachat_token()
    
    if not token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return False
    
    print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:50]}...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª—è–º
    url = "https://gigachat.devices.sberbank.ru/api/v1/models"
    
    headers = {
        'Accept': 'application/json',
        'Authorization': f'Bearer {token}'
    }
    
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª—è–º...")
    
    try:
        response = requests.get(url, headers=headers, timeout=30)
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 200:
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª—è–º —É—Å–ø–µ—à–µ–Ω!")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç
            chat_url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
            
            payload = {
                "model": "GigaChat-2-Pro",
                "messages": [
                    {
                        "role": "user",
                        "content": "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: \"–†–∞–±–æ—Ç–∞–µ—Ç\""
                    }
                ],
                "temperature": 0.7,
                "max_tokens": 100
            }
            
            headers = {
                'Accept': 'application/json',
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json'
            }
            
            print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç...")
            
            response = requests.post(chat_url, headers=headers, json=payload, timeout=30)
            
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —á–∞—Ç–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç —á–∞—Ç–∞: {response.text}")
            
            if response.status_code == 200:
                data = response.json()
                if 'choices' in data and len(data['choices']) > 0:
                    message = data['choices'][0].get('message', {}).get('content', '')
                    print(f"‚úÖ –û—Ç–≤–µ—Ç GigaChat: {message}")
                    return True
                else:
                    print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —á–∞—Ç–∞")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {response.status_code}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª—è–º: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_gigachat_chat()
    
    if success:
        print("üéâ –¢–µ—Å—Ç —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("üí• –¢–µ—Å—Ç —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π!")

