import React, { useState, useEffect } from 'react';
import { 
  BarChart3, 
  MessageSquare, 
  Database, 
  Settings, 
  Zap, 
  Plus, 
  Send, 
  AlertTriangle,
  Globe,
  Link as LinkIcon,
  Edit as EditIcon,
  File as FileIcon,
  Trash2,
  Info,
  ChevronRight,
  ExternalLink,
  Menu,
  X,
  User,
  Building,
  Mail,
  Lock,
  Eye,
  EyeOff,
  CheckCircle,
  Upload,
  Download,
  Search,
  Filter,
  MoreHorizontal
} from 'lucide-react';

// UI Components
const Button = ({ children, className = '', onClick, disabled = false, variant = 'default', size = 'default', type = 'button', ...props }) => {
  const baseClasses = 'inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background';
  
  const variants = {
    default: 'bg-primary text-primary-foreground hover:bg-primary/90',
    destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
    outline: 'border border-input hover:bg-accent hover:text-accent-foreground',
    secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
    ghost: 'hover:bg-accent hover:text-accent-foreground',
    link: 'underline-offset-4 hover:underline text-primary'
  };

  const sizes = {
    default: 'h-10 py-2 px-4',
    sm: 'h-9 px-3 rounded-md',
    lg: 'h-11 px-8 rounded-md',
    icon: 'h-10 w-10'
  };

  const variantClass = variants[variant] || variants.default;
  const sizeClass = sizes[size] || sizes.default;

  return (
    <button
      type={type}
      className={`${baseClasses} ${variantClass} ${sizeClass} ${className}`}
      onClick={onClick}
      disabled={disabled}
      {...props}
    >
      {children}
    </button>
  );
};

const Input = ({ className = '', type = 'text', ...props }) => (
  <input
    type={type}
    className={`flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`}
    {...props}
  />
);

const Textarea = ({ className = '', ...props }) => (
  <textarea
    className={`flex min-h-[80px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`}
    {...props}
  />
);

const Card = ({ className = '', ...props }) => (
  <div className={`rounded-lg border bg-card text-card-foreground shadow-sm ${className}`} {...props} />
);

const CardHeader = ({ className = '', ...props }) => (
  <div className={`flex flex-col space-y-1.5 p-6 ${className}`} {...props} />
);

const CardTitle = ({ className = '', ...props }) => (
  <h3 className={`text-lg font-semibold leading-none tracking-tight ${className}`} {...props} />
);

const CardContent = ({ className = '', ...props }) => (
  <div className={`p-6 pt-0 ${className}`} {...props} />
);

const Select = ({ children, value, onValueChange, ...props }) => {
  return (
    <select
      value={value}
      onChange={(e) => onValueChange && onValueChange(e.target.value)}
      className="flex h-10 w-full items-center justify-between rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
      {...props}
    >
      {children}
    </select>
  );
};

export default function App() {
  // State
  const [isLoggedIn, setIsLoggedIn] = useState(() => {
    return localStorage.getItem('isLoggedIn') === 'true';
  });
  
  const [currentUser, setCurrentUser] = useState(() => {
    const stored = localStorage.getItem('currentUser');
    return stored ? JSON.parse(stored) : null;
  });
  
  const [activeSection, setActiveSection] = useState(() => {
    return localStorage.getItem('currentSection') || 'my-solo';
  });
  
  const [currentStep, setCurrentStep] = useState('login');
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [showPasswordField, setShowPasswordField] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [showNotification, setShowNotification] = useState(false);
  const [notificationMessage, setNotificationMessage] = useState('');
  const [showSetupWizard, setShowSetupWizard] = useState(false);
  const [setupStep, setSetupStep] = useState(1);
  const [showValidationMessage, setShowValidationMessage] = useState(false);
  const [showProgressBar, setShowProgressBar] = useState(false);
  const [showIntegrationModal, setShowIntegrationModal] = useState(false);
  const [selectedIntegration, setSelectedIntegration] = useState(null);
  const [showWidgetConstructor, setShowWidgetConstructor] = useState(false);
  
  // Состояния для попапа первого входа
  const [isFirstTimeUser, setIsFirstTimeUser] = useState(false);
  const [showModelSetupProgress, setShowModelSetupProgress] = useState(false);
  const [modelSetupTimer, setModelSetupTimer] = useState(300); // 5 минут = 300 секунд

  // Form data
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    name: '',
    company: '',
    phone: '',
    companyField: ''
  });

  const [formErrors, setFormErrors] = useState({});
  const [validationErrors, setValidationErrors] = useState({});

  // Функция форматирования номера телефона
  const formatPhoneNumber = (value) => {
    const phoneNumbers = value.replace(/\D/g, '');
    if (phoneNumbers.length === 0) return '';
    if (phoneNumbers.length <= 3) return `+7 (${phoneNumbers}`;
    if (phoneNumbers.length <= 6) return `+7 (${phoneNumbers.slice(0, 3)}) ${phoneNumbers.slice(3)}`;
    if (phoneNumbers.length <= 8) return `+7 (${phoneNumbers.slice(0, 3)}) ${phoneNumbers.slice(3, 6)}-${phoneNumbers.slice(6)}`;
    return `+7 (${phoneNumbers.slice(0, 3)}) ${phoneNumbers.slice(3, 6)}-${phoneNumbers.slice(6, 8)}-${phoneNumbers.slice(8, 10)}`;
  };

  // Функция валидации номера телефона
  const validatePhone = (phone) => {
    const phoneNumbers = phone.replace(/\D/g, '');
    if (!phone) return 'Номер телефона обязателен';
    if (phoneNumbers.length !== 11) return 'Номер телефона должен содержать 11 цифр';
    if (!phoneNumbers.startsWith('7')) return 'Номер должен начинаться с 7';
    return null;
  };

  // Setup data
  const [setupData, setSetupData] = useState({
    // Шаг 1: Цели Adapto
    task: '',
    mainGoal: '',
    customGoal: '',
    dealCycle: '',
    targetAudience: '',
    
    // Шаг 2: Правила общения
    addressing: 'Вы',
    communicationStyle: 'Профессиональный',
    restrictions: [],
    showCustomRestriction: false,
    customRestriction: '',
    communicationSettings: [],
    customCommunicationSetting: '',
    dataCollection: [],
    showCustomData: false,
    customData: '',
    clarificationQuestions: [],
    emojiUsage: 'Редко',
    
    // Шаг 3: Этапы диалога
    dialogStages: [
      'Поздоровайся и спроси имя клиента. Уточни его проблему и пойми текущую ситуацию пользователя',
      'Опиши коротко как решишь его задачу/назови наши преимущества, предложи товары по запросу',
      'Веди клиента к оформлению заказа/заявки',
      'Когда клиент готов оформить заказ, сделай итог заказа и пришли ссылку на оплату из базы знаний.',
      'Переведи клиента на менеджера для проверки оплаты и дальнейшей работы'
    ],
    dialogStagesModified: null, // null = не проверяли, true = изменено, false = не изменено
    
    // Для попапа первого входа - Шаг 4: База знаний
    knowledgeItems: [],
    selectedKnowledgeType: null,
    knowledgeInput: '',
    
    // Технические настройки модели
    modelProvider: 'gigachat',
    modelName: 'GigaChat:latest',
    systemPrompt: '',
    temperature: 0.7,
    maxTokens: 1000
  });

  // Chat and knowledge data
  const [chatHistory, setChatHistory] = useState([
    { type: 'assistant', text: 'Привет! Я ваш ИИ-ассистент Adapto. Как дела?' }
  ]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [botCorrection, setBotCorrection] = useState('');
  const [knowledgeItems, setKnowledgeItems] = useState([]);
  const [newKnowledgeItem, setNewKnowledgeItem] = useState({ type: 'text', content: '' });

  // Widget settings
  const [widgetSettings, setWidgetSettings] = useState({
    accentColor: '#1354FC',
    buttonColor: 'light',
    buttonText: 'Спросить ИИ',
    buttonSubtext: 'Задать вопрос',
    avatar: 'default',
    customButtonColor: '#1354FC',
    showCustomColorPicker: false,
    widgetLocation: 'default',
    // Widget positioning
    desktopBottomOffset: 20,
    desktopRightOffset: 20,
    mobileBottomOffset: 20,
    mobileRightOffset: 20,
    zIndex: 9999,
    // Welcome message
    welcomeMessages: ['Привет! Меня зовут Adapto, я ИИ ассистент.'],
    // Trigger question
    triggerQuestion: 'Задать вопрос',
    triggerQuestionEnabled: 'no',
    triggerQuestionDelay: 5,
    triggerQuestionText: 'Здравствуйте! Если появится вопрос, можете задать его в чате, я оперативно отвечу',
    triggerQuickReply: 'Задать вопрос',
    // Follow up message
    followUpMessage: 'no',
    followUpDelay: 10,
    followUpQuestion: 'Продолжим диалог?',
    followUpQuickReply: 'Расскажи подробнее',
    // Quick replies
    quickReplies: ['Расскажи подробнее'],
    privacyPolicyUrl: 'https://',
    dataTags: ['utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content', 'roistat_visit', 'gclid', 'fbclid'],
    excludedPages: []
  });

  // Menu items
  const menuItems = [
    { id: 'my-solo', label: 'Мой Adapto', icon: BarChart3 },
    { id: 'dashboard', label: 'Сводка', icon: BarChart3 },
    { id: 'dialogs', label: 'Диалоги', icon: MessageSquare },
    { id: 'knowledge', label: 'База знаний', icon: Database },
    { id: 'model-settings', label: 'Настройки модели', icon: Settings },
    { id: 'integrations', label: 'Интеграции', icon: Zap }
  ];

  // Notification function
  const showNotificationMessage = (message) => {
    setNotificationMessage(message);
    setShowNotification(true);
    setTimeout(() => setShowNotification(false), 3000);
  };

  // Проверка первого входа пользователя - только при регистрации
  useEffect(() => {
    if (isLoggedIn && currentUser) {
      const hasShownSetupWizard = localStorage.getItem('hasShownSetupWizard');
      const isNewUser = localStorage.getItem('isNewUser');
      
      // Показываем попап только если это новый пользователь и попап еще не показывался
      if (isNewUser === 'true' && !hasShownSetupWizard) {
        setIsFirstTimeUser(true);
        setShowSetupWizard(true);
        localStorage.removeItem('isNewUser'); // Убираем флаг нового пользователя
      }
    }
  }, [isLoggedIn, currentUser]);

  // Таймер для настройки модели
  useEffect(() => {
    let interval;
    if (showModelSetupProgress && modelSetupTimer > 0) {
      interval = setInterval(() => {
        setModelSetupTimer(prev => {
          if (prev <= 1) {
            setShowModelSetupProgress(false);
            setModelSetupTimer(300);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [showModelSetupProgress, modelSetupTimer]);

  // Auth functions
  const handleLogin = async (userData) => {
    try {
      const userWithId = { ...userData, id: Date.now() };
      setCurrentUser(userWithId);
      setIsLoggedIn(true);
      setActiveSection('my-solo');
      localStorage.setItem('currentUser', JSON.stringify(userWithId));
      localStorage.setItem('isLoggedIn', 'true');
      localStorage.setItem('currentSection', 'my-solo');
      showNotificationMessage('Успешный вход в систему!');
    } catch (error) {
      console.error('Login error:', error);
    }
  };

  const handleLoginSubmit = async (e) => {
    e.preventDefault();
    setFormErrors({});

    if (!formData.email || !formData.password) {
      setFormErrors({ general: 'Пожалуйста, заполните все поля' });
      return;
    }

    await handleLogin(formData);
  };

  const handleRegisterSubmit = async (e) => {
    e.preventDefault();
    setFormErrors({});

    // Валидация телефона
    const phoneError = validatePhone(formData.phone);
    if (phoneError) {
      setValidationErrors({ ...validationErrors, phone: phoneError });
      return;
    }

    const userData = {
      name: formData.name,
      company_name: formData.company,
      email: formData.email,
      phone: formData.phone,
      id: 'user-' + Date.now()
    };

    setCurrentUser(userData);
    setIsLoggedIn(true);
    setActiveSection('my-solo');
    localStorage.setItem('currentUser', JSON.stringify(userData));
    localStorage.setItem('isLoggedIn', 'true');
    localStorage.setItem('currentSection', 'my-solo');
    localStorage.setItem('isNewUser', 'true'); // Флаг нового пользователя
    showNotificationMessage('Регистрация успешна! Добро пожаловать в Adapto!');
    setFormData({ email: '', password: '', name: '', company: '', phone: '', companyField: '' });
    setValidationErrors({});
  };

  const handleLogout = () => {
    setIsLoggedIn(false);
    setCurrentUser(null);
    setActiveSection('my-solo');
    localStorage.removeItem('isLoggedIn');
    localStorage.removeItem('currentUser');
    localStorage.removeItem('currentSection');
    showNotificationMessage('Вы вышли из системы');
  };

  // Chat functions
  const handleSendMessage = () => {
    if (!currentMessage.trim()) return;
    
    const newMessage = { type: 'user', text: currentMessage };
    setChatHistory(prev => [...prev, newMessage]);
    setCurrentMessage('');
    
    setTimeout(() => {
      const botResponse = { type: 'assistant', text: 'Спасибо за ваше сообщение! Я обрабатываю ваш запрос.' };
      setChatHistory(prev => [...prev, botResponse]);
    }, 1000);
  };

  const handleBotCorrection = () => {
    if (!botCorrection.trim()) return;
    
    const correctionItem = {
      id: Date.now(),
      type: 'correction',
      content: botCorrection,
      status: 'completed'
    };
    
    setSetupData(prev => ({
      ...prev,
      knowledgeItems: [...prev.knowledgeItems, correctionItem]
    }));
    
    setBotCorrection('');
    showNotificationMessage('Исправление применено!');
  };

  // Knowledge base functions
  const handleAddKnowledgeItem = () => {
    if (!newKnowledgeItem.content.trim()) return;

    const item = {
      id: Date.now(),
      ...newKnowledgeItem,
      status: 'processing'
    };

    setKnowledgeItems(prev => [...prev, item]);
    setNewKnowledgeItem({ type: 'text', content: '' });
    showNotificationMessage('Элемент добавлен в базу знаний!');
  };

  const handleDeleteKnowledgeItem = (id) => {
    setKnowledgeItems(prev => prev.filter(item => item.id !== id));
    showNotificationMessage('Элемент удален из базы знаний');
  };

  // Integration functions
  const handleIntegrationClick = (integration) => {
    setSelectedIntegration(integration);
    setShowIntegrationModal(true);
  };

  // Widget functions
  const handleShowWidgetConstructor = () => {
    setShowWidgetConstructor(true);
  };

  // Render functions
  const renderContent = () => {
    switch (activeSection) {
      case 'my-solo':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-2xl font-bold">Мой Adapto</h1>
            </div>

            <div className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Настройте Adapto под себя</CardTitle>
                  <p className="text-gray-600">
                    Если заметите ошибку или захотите подправить ответ — нажмите кнопку «Исправить ошибку», 
                    и Adapto станет отвечать корректно
                  </p>
                  <div className="mt-4">
                    <Button onClick={() => setShowSetupWizard(true)}>
                      Настроить Adapto
                    </Button>
                  </div>
                </CardHeader>
              </Card>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Левая панель */}
                <div className="space-y-4">
                  {/* Поле для исправлений */}
                  <Card>
                    <CardHeader>
                      <CardTitle>Внесите исправления в бота</CardTitle>
                      <p className="text-gray-600 text-sm">
                        Если вы увидели ошибку в ответах Adapto – напишите правильный ответ здесь, 
                        и бот будет отвечать корректно
                      </p>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        <Textarea
                          value={botCorrection}
                          onChange={(e) => setBotCorrection(e.target.value)}
                          placeholder="Опишите, как должен отвечать бот в подобных ситуациях..."
                          className="min-h-[120px]"
                        />
                        <Button 
                          className="w-full"
                          onClick={handleBotCorrection}
                          disabled={!botCorrection.trim()}
                        >
                          Применить
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Правая панель - Чат */}
                <div className="space-y-4">
                  <Card>
                    <CardHeader>
                      <CardTitle>Протестируйте Adapto в действии</CardTitle>
                      <p className="text-gray-600">
                        Напишите любое сообщение и посмотрите, как отвечает ваш ИИ
                      </p>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        {/* Чат */}
                        <div className="border rounded-lg p-4 min-h-[400px] bg-gray-50 flex flex-col">
                          {/* Сообщения */}
                          <div className="flex-1 space-y-3 overflow-y-auto mb-4">
                            {chatHistory.map((message, index) => (
                              <div key={index} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                                <div className={`max-w-[80%] p-3 rounded-lg ${
                                  message.type === 'user' 
                                    ? 'bg-blue-600 text-white' 
                                    : 'bg-white border border-gray-200'
                                }`}>
                                  {message.text}
                                </div>
                              </div>
                            ))}
                          </div>
                          
                          {/* Поле ввода */}
                          <div className="flex gap-2">
                            <Input
                              value={currentMessage}
                              onChange={(e) => setCurrentMessage(e.target.value)}
                              placeholder="Введите сообщение..."
                              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                            />
                            <Button onClick={handleSendMessage} disabled={!currentMessage.trim()}>
                              <Send className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              </div>
            </div>
          </div>
        );

      case 'knowledge':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-2xl font-bold">База знаний</h1>
              <Button onClick={() => setShowSetupWizard(true)}>
                <Plus className="w-4 h-4 mr-2" />
                Добавить элемент
              </Button>
            </div>

            {/* Статистика */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Всего элементов</p>
                      <p className="text-2xl font-bold">{knowledgeItems.length + setupData.knowledgeItems.length}</p>
                    </div>
                    <Database className="w-8 h-8 text-blue-500" />
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Обработано</p>
                      <p className="text-2xl font-bold text-green-600">{knowledgeItems.filter(item => item.status === 'completed').length}</p>
                    </div>
                    <CheckCircle className="w-8 h-8 text-green-500" />
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">В обработке</p>
                      <p className="text-2xl font-bold text-yellow-600">{knowledgeItems.filter(item => item.status === 'processing').length}</p>
                    </div>
                    <Upload className="w-8 h-8 text-yellow-500" />
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Размер базы</p>
                      <p className="text-2xl font-bold">2.4 МБ</p>
                    </div>
                    <Settings className="w-8 h-8 text-gray-500" />
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Добавление нового элемента */}
            <Card>
              <CardHeader>
                <CardTitle>Добавить новый элемент</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex gap-4">
                    <Select value={newKnowledgeItem.type} onValueChange={(value) => setNewKnowledgeItem(prev => ({ ...prev, type: value }))}>
                      <option value="text">Текст</option>
                      <option value="url">URL</option>
                      <option value="file">Файл</option>
                    </Select>
                    
                    <div className="flex-1">
                      {newKnowledgeItem.type === 'text' && (
                        <Textarea
                          value={newKnowledgeItem.content}
                          onChange={(e) => setNewKnowledgeItem(prev => ({ ...prev, content: e.target.value }))}
                          placeholder="Введите текст для добавления в базу знаний..."
                        />
                      )}
                      {newKnowledgeItem.type === 'url' && (
                        <Input
                          value={newKnowledgeItem.content}
                          onChange={(e) => setNewKnowledgeItem(prev => ({ ...prev, content: e.target.value }))}
                          placeholder="https://example.com"
                        />
                      )}
                      {newKnowledgeItem.type === 'file' && (
                        <Input
                          type="file"
                          onChange={(e) => setNewKnowledgeItem(prev => ({ ...prev, content: e.target.files[0]?.name || '' }))}
                        />
                      )}
                    </div>
                    
                    <Button onClick={handleAddKnowledgeItem} disabled={!newKnowledgeItem.content.trim()}>
                      Добавить
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Список элементов */}
            <Card>
              <CardHeader>
                <CardTitle>Элементы базы знаний</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {[...setupData.knowledgeItems, ...knowledgeItems].map((item, index) => (
                    <div key={item.id || index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                          {item.type === 'site' && <Globe className="w-4 h-4 text-blue-600" />}
                          {item.type === 'url' && <LinkIcon className="w-4 h-4 text-blue-600" />}
                          {item.type === 'text' && <EditIcon className="w-4 h-4 text-blue-600" />}
                          {item.type === 'file' && <FileIcon className="w-4 h-4 text-blue-600" />}
                        </div>
                        <div>
                          <div className="font-medium text-sm">
                            {item.type === 'site' && 'Сайт'}
                            {item.type === 'url' && 'URL'}
                            {item.type === 'text' && 'Текст'}
                            {item.type === 'file' && 'Файл'}
                          </div>
                          <div className="text-xs text-gray-500 truncate max-w-xs">
                            {item.content}
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <div className={`text-xs px-2 py-1 rounded-full ${
                          item.status === 'completed' ? 'text-green-600 bg-green-100' :
                          item.status === 'processing' ? 'text-yellow-600 bg-yellow-100' :
                          'text-blue-600 bg-blue-100'
                        }`}>
                          {item.status === 'completed' ? 'Обработано' :
                           item.status === 'processing' ? 'Обработка' : 'Ожидание'}
                        </div>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          onClick={() => handleDeleteKnowledgeItem(item.id || index)}
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                  
                  {[...setupData.knowledgeItems, ...knowledgeItems].length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                      <Database className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                      <p>База знаний пока пуста</p>
                      <p className="text-sm">Добавьте первый элемент, чтобы начать</p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        );

      case 'dashboard':
        return (
          <div className="space-y-6">
            <h1 className="text-2xl font-bold">Сводка</h1>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Сообщений сегодня</p>
                      <p className="text-3xl font-bold text-blue-600">{chatHistory.length}</p>
                      <p className="text-xs text-green-600">+12% за неделю</p>
                    </div>
                    <MessageSquare className="w-8 h-8 text-blue-500" />
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Активных диалогов</p>
                      <p className="text-3xl font-bold text-green-600">24</p>
                      <p className="text-xs text-green-600">+5% за неделю</p>
                    </div>
                    <User className="w-8 h-8 text-green-500" />
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Конверсия</p>
                      <p className="text-3xl font-bold text-purple-600">8.2%</p>
                      <p className="text-xs text-red-600">-2% за неделю</p>
                    </div>
                    <BarChart3 className="w-8 h-8 text-purple-500" />
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600">Открытий виджета</p>
                      <p className="text-3xl font-bold text-orange-600">156</p>
                      <p className="text-xs text-green-600">+18% за неделю</p>
                    </div>
                    <Eye className="w-8 h-8 text-orange-500" />
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Графики и аналитика */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Активность по часам</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="h-64 flex items-end justify-between gap-2">
                    {Array.from({length: 24}, (_, i) => (
                      <div key={i} className="flex-1 bg-blue-200 rounded-t" style={{height: `${Math.random() * 100}%`}}></div>
                    ))}
                  </div>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle>Последние диалоги</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {[
                      { user: 'Анна М.', message: 'Какие у вас есть тарифы?', time: '2 мин назад' },
                      { user: 'Михаил К.', message: 'Как подключить интеграцию?', time: '5 мин назад' },
                      { user: 'Екатерина С.', message: 'Спасибо за помощь!', time: '12 мин назад' },
                      { user: 'Дмитрий П.', message: 'Не работает виджет', time: '15 мин назад' }
                    ].map((dialog, index) => (
                      <div key={index} className="flex items-center justify-between p-3 border border-gray-200 rounded-lg">
                        <div>
                          <p className="font-medium text-sm">{dialog.user}</p>
                          <p className="text-xs text-gray-600">{dialog.message}</p>
                        </div>
                        <span className="text-xs text-gray-500">{dialog.time}</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        );

      case 'model-settings':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-2xl font-bold">Настройки модели</h1>
            </div>

            {/* Шаг 1: Уточните цели Adapto */}
            <Card>
              <CardHeader>
                <CardTitle>Шаг 1: Уточните цели Adapto</CardTitle>
                <p className="text-gray-600">
                  Настройте основные цели и задачи вашего ИИ-агента
                </p>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* 1. Какую задачу должен выполнять Адапто? */}
                <div>
                  <label className="block mb-3 font-medium">1. Какую задачу должен выполнять Адапто?</label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    <button
                      onClick={() => setSetupData({...setupData, task: 'Продавать'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        setupData.task === 'Продавать' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium mb-1">Продавать</div>
                        <div className="text-sm text-gray-600">Помогать в продажах</div>
                      </div>
                    </button>
                    <button
                      onClick={() => setSetupData({...setupData, task: 'Консультировать'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        setupData.task === 'Консультировать' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium mb-1">Консультировать</div>
                        <div className="text-sm text-gray-600">Давать консультации</div>
                      </div>
                    </button>
                  </div>
                </div>

                {/* 2. Какая главная цель ии-агента? */}
                <div>
                  <label className="block mb-3 font-medium">2. Какая главная цель ии-агента?</label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {[
                      'Записать на консультацию',
                      'Продать продукт',
                      'Решить проблему клиента'
                    ].map(goal => (
                      <button
                        key={goal}
                        onClick={() => setSetupData({...setupData, mainGoal: goal})}
                        className={`p-4 rounded-lg border-2 transition-all ${
                          setupData.mainGoal === goal 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-lg font-medium">{goal}</div>
                        </div>
                      </button>
                    ))}
                    <button
                      onClick={() => setSetupData({...setupData, mainGoal: 'custom'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        setupData.mainGoal === 'custom' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Другое</div>
                        <div className="text-sm text-gray-600">Указать свою цель</div>
                      </div>
                    </button>
                  </div>
                  {setupData.mainGoal === 'custom' && (
                    <div className="mt-3">
                      <Input
                        value={setupData.customGoal || ''}
                        onChange={(e) => setSetupData({...setupData, customGoal: e.target.value})}
                        placeholder="Укажите вашу главную цель"
                        className="w-full"
                      />
                    </div>
                  )}
                </div>

                {/* 3. Какой цикл сделки у вас в компании? */}
                <div>
                  <label className="block mb-2 font-medium">3. Какой цикл сделки у вас в компании?</label>
                  <Textarea
                    value={setupData.dealCycle || ''}
                    onChange={(e) => setSetupData({...setupData, dealCycle: e.target.value})}
                    placeholder="Опишите цикл сделки в вашей компании..."
                    className="min-h-[100px]"
                  />
                </div>

                {/* 4. Целевая аудитория */}
                <div>
                  <label className="block mb-2 font-medium">4. Целевая аудитория</label>
                  <Textarea
                    value={setupData.targetAudience || ''}
                    onChange={(e) => setSetupData({...setupData, targetAudience: e.target.value})}
                    placeholder="Опишите вашу целевую аудиторию..."
                    className="min-h-[100px]"
                  />
                </div>
              </CardContent>
            </Card>

            {/* Шаг 2: Правила общения */}
            <Card>
              <CardHeader>
                <CardTitle>Шаг 2: Правила общения</CardTitle>
                <p className="text-gray-600">
                  Настройте стиль общения и ограничения для вашего ИИ-агента
                </p>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* 1. Обращение к пользователю */}
                <div>
                  <label className="block mb-3 font-medium">1. Обращение к пользователю</label>
                  <div className="flex gap-3">
                    <button 
                      onClick={() => setSetupData({...setupData, addressing: 'Ты'})}
                      className={`flex-1 border rounded-full h-12 transition-colors ${
                        setupData.addressing === 'Ты' ? 'bg-blue-600 text-white border-blue-600' : 'bg-white hover:bg-gray-50'
                      }`}
                    >
                      на "Ты"
                    </button>
                    <button 
                      onClick={() => setSetupData({...setupData, addressing: 'Вы'})}
                      className={`flex-1 border rounded-full h-12 transition-colors ${
                        setupData.addressing === 'Вы' ? 'bg-blue-600 text-white border-blue-600' : 'bg-white hover:bg-gray-50'
                      }`}
                    >
                      на "Вы"
                    </button>
                  </div>
                </div>

                {/* 2. Стиль общения */}
                <div>
                  <label className="block mb-3 font-medium">2. Стиль общения</label>
                  <div className="flex flex-wrap gap-3">
                    {[
                      { text: 'Дружелюбный', emoji: '😊' },
                      { text: 'Нейтральный', emoji: '😐' },
                      { text: 'Профессиональный', emoji: '💼' },
                      { text: 'Юмористический', emoji: '😄' }
                    ].map(t => (
                      <button 
                        key={t.text} 
                        onClick={() => setSetupData({...setupData, communicationStyle: t.text})} 
                        className={`px-6 py-3 rounded-full border flex items-center gap-2 ${
                          setupData.communicationStyle === t.text ? 'bg-blue-600 text-white border-blue-600' : 'bg-white hover:bg-gray-50'
                        }`}
                      >
                        <span>{t.emoji}</span>
                        <span>{t.text}</span>
                      </button>
                    ))}
                  </div>
                </div>

                {/* 3. Ограничения Адапто */}
                <div>
                  <label className="block mb-3 font-medium">3. Ограничения Адапто</label>
                  <div className="flex flex-wrap gap-2">
                    {[
                      'Не обсуждай цены',
                      'Не давай финансовых советов',
                      'Не консультируй по юридическим вопросам',
                      'Не разъясняй условия договоров',
                      'Не создавай обязательств от лица компании',
                      'Не подтверждай наличие товара или услуги'
                    ].map(restriction => (
                      <button
                        key={restriction}
                        onClick={() => {
                          const current = setupData.restrictions || [];
                          const newRestrictions = current.includes(restriction)
                            ? current.filter(r => r !== restriction)
                            : [...current, restriction];
                          setSetupData({...setupData, restrictions: newRestrictions});
                        }}
                        className={`px-4 py-2 rounded-full border-2 transition-all text-sm ${
                          (setupData.restrictions || []).includes(restriction)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {restriction}
                      </button>
                    ))}
                    <button
                      onClick={() => setSetupData({...setupData, showCustomRestriction: true})}
                      className="px-4 py-2 rounded-full border-2 border-gray-200 bg-white text-gray-700 hover:border-gray-300 text-sm"
                    >
                      Другое
                    </button>
                  </div>
                  {setupData.showCustomRestriction && (
                    <div className="mt-3 flex gap-2">
                      <Input
                        value={setupData.customRestriction || ''}
                        onChange={(e) => setSetupData({...setupData, customRestriction: e.target.value})}
                        placeholder="Введите ваше ограничение"
                        className="flex-1"
                      />
                      <Button 
                        onClick={() => {
                          if (setupData.customRestriction) {
                            const current = setupData.restrictions || [];
                            setSetupData({
                              ...setupData, 
                              restrictions: [...current, setupData.customRestriction],
                              customRestriction: '',
                              showCustomRestriction: false
                            });
                          }
                        }}
                        disabled={!setupData.customRestriction}
                      >
                        Добавить
                      </Button>
                    </div>
                  )}
                </div>

                {/* 4. Дополнительные настройки стиля общения */}
                <div>
                  <label className="block mb-3 font-medium">4. Дополнительные настройки стиля общения под вашу компанию</label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {[
                      'Не гарантировать результат',
                      'Пояснять ссылки перед отправкой',
                      'Проверять понимание ответа',
                      'Избегать длинных сообщений',
                      'Уточнять задачу в начале общения',
                      'Не оказывать давление на клиента',
                      'Предупреждать об ожидании ответа',
                      'Избегать споров',
                      'Отвечать от первого лица'
                    ].map(setting => (
                      <button
                        key={setting}
                        onClick={() => {
                          const current = setupData.communicationSettings || [];
                          const newSettings = current.includes(setting)
                            ? current.filter(s => s !== setting)
                            : [...current, setting];
                          setSetupData({...setupData, communicationSettings: newSettings});
                        }}
                        className={`p-3 rounded-lg border-2 transition-all text-left ${
                          (setupData.communicationSettings || []).includes(setting)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {setting}
                      </button>
                    ))}
                  </div>
                  <div className="mt-3">
                    <Input
                      value={setupData.customCommunicationSetting || ''}
                      onChange={(e) => setSetupData({...setupData, customCommunicationSetting: e.target.value})}
                      placeholder="Добавить свое правило общения"
                      className="w-full"
                    />
                  </div>
                </div>

                {/* 5. Сбор данных */}
                <div>
                  <label className="block mb-3 font-medium">5. Сбор данных</label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mb-3">
                    {[
                      'Имя',
                      'Номер телефона',
                      'Почта',
                      'Адрес доставки',
                      'Город',
                      'Возраст'
                    ].map(dataType => (
                      <button
                        key={dataType}
                        onClick={() => {
                          const current = setupData.dataCollection || [];
                          const newData = current.includes(dataType)
                            ? current.filter(d => d !== dataType)
                            : [...current, dataType];
                          setSetupData({...setupData, dataCollection: newData});
                        }}
                        className={`p-2 rounded-lg border-2 transition-all text-sm ${
                          (setupData.dataCollection || []).includes(dataType)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {dataType}
                      </button>
                    ))}
                  </div>
                  <div className="flex gap-3">
                    <button
                      onClick={() => setSetupData({...setupData, dataCollection: []})}
                      className={`px-4 py-2 rounded-lg border-2 transition-all ${
                        (setupData.dataCollection || []).length === 0
                          ? 'border-blue-500 bg-blue-50 text-blue-700' 
                          : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      Не собирать данные
                    </button>
                    <button
                      onClick={() => setSetupData({...setupData, showCustomData: true})}
                      className="px-4 py-2 rounded-lg border-2 border-gray-200 bg-white text-gray-700 hover:border-gray-300"
                    >
                      Добавить данные
                    </button>
                  </div>
                  {setupData.showCustomData && (
                    <div className="mt-3 flex gap-2">
                      <Input
                        value={setupData.customData || ''}
                        onChange={(e) => setSetupData({...setupData, customData: e.target.value})}
                        placeholder="Введите тип данных для сбора"
                        className="flex-1"
                      />
                      <Button 
                        onClick={() => {
                          if (setupData.customData) {
                            const current = setupData.dataCollection || [];
                            setSetupData({
                              ...setupData, 
                              dataCollection: [...current, setupData.customData],
                              customData: '',
                              showCustomData: false
                            });
                          }
                        }}
                        disabled={!setupData.customData}
                      >
                        Добавить
                      </Button>
                    </div>
                  )}
                </div>

                {/* 6. Уточнение и вопросы */}
                <div>
                  <label className="block mb-3 font-medium">6. Уточнение и вопросы</label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                    {[
                      'Если запрос неполный',
                      'Если клиент сомневается',
                      'Если есть риск ошибки',
                      'При выборе продукта или услуги',
                      'Если ответ зависит от тонкостей',
                      'Если клиент проявляет интерес к нескольким вариантам',
                      'Если клиент не понимает предложенное',
                      'Если требуется индивидуальный подбор',
                      'Если клиент задаёт вопросы вне своей компетенции',
                      'Если клиент спрашивает о вещах, которые требует специальных знаний',
                      'При оформлении заявки или заказа',
                      'Перед тем как оформить что-то важное',
                      'Если клиент долго молчит'
                    ].map(question => (
                      <button
                        key={question}
                        onClick={() => {
                          const current = setupData.clarificationQuestions || [];
                          const newQuestions = current.includes(question)
                            ? current.filter(q => q !== question)
                            : [...current, question];
                          setSetupData({...setupData, clarificationQuestions: newQuestions});
                        }}
                        className={`p-3 rounded-lg border-2 transition-all text-left text-sm ${
                          (setupData.clarificationQuestions || []).includes(question)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {question}
                      </button>
                    ))}
                  </div>
                </div>

                {/* 7. Отправка смайликов */}
                <div>
                  <label className="block mb-3 font-medium">7. Отправка смайликов</label>
                  <div className="flex gap-3">
                    {[
                      { text: 'Никогда', emoji: '😐' },
                      { text: 'Редко', emoji: '😊' },
                      { text: 'Часто', emoji: '😄' }
                    ].map(option => (
                      <button
                        key={option.text}
                        onClick={() => setSetupData({...setupData, emojiUsage: option.text})}
                        className={`flex-1 p-4 rounded-lg border-2 transition-all ${
                          setupData.emojiUsage === option.text
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-2xl mb-2">{option.emoji}</div>
                          <div className="font-medium">{option.text}</div>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Шаг 3: Этапы диалога */}
            <Card>
              <CardHeader>
                <CardTitle>Шаг 3: Этапы диалога</CardTitle>
                <p className="text-gray-600">
                  Опишите идеальный скрипт для вашего ИИ-агента
                </p>
              </CardHeader>
              <CardContent>
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                  <div className="flex items-start gap-3">
                    <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                      <span className="text-white text-sm">!</span>
                    </div>
                    <div>
                      <div className="font-medium text-blue-800 mb-1">Уделите время детальному описанию идеального скрипта</div>
                      <div className="text-sm text-blue-700">
                        Это очень важно для хорошей работы вашего ИИ-продажника. Вы сможете скорректировать поведение позже, но правильная настройка сейчас даст лучшие результаты сразу. Ниже представлен шаблон, который вам нужно адаптировать.
                      </div>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  {(setupData.dialogStages || [
                    'Поздоровайся и спроси имя клиента. Уточни его проблему и пойми текущую ситуацию пользователя',
                    'Опиши коротко как решишь его задачу/назови наши преимущества, предложи товары по запросу',
                    'Веди клиента к оформлению заказа/заявки',
                    'Когда клиент готов оформить заказ, сделай итог заказа и пришли ссылку на оплату из базы знаний.',
                    'Переведи клиента на менеджера для проверки оплаты и дальнейшей работы'
                  ]).map((stage, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-start gap-3">
                        <div className="w-6 h-6 bg-gray-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                          <span className="text-white text-sm">{index + 1}</span>
                        </div>
                        <div className="flex-1">
                          <Textarea
                            value={stage}
                            onChange={(e) => {
                              const newStages = [...(setupData.dialogStages || [])];
                              newStages[index] = e.target.value;
                              setSetupData({...setupData, dialogStages: newStages});
                            }}
                            className="w-full resize-none"
                            rows={2}
                          />
                        </div>
                        <Button 
                          variant="ghost" 
                          size="sm"
                          onClick={() => {
                            const newStages = [...(setupData.dialogStages || [])];
                            newStages.splice(index, 1);
                            setSetupData({...setupData, dialogStages: newStages});
                          }}
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                  
                  <Button 
                    variant="outline" 
                    onClick={() => {
                      const newStages = [...(setupData.dialogStages || []), 'Новый этап диалога'];
                      setSetupData({...setupData, dialogStages: newStages});
                    }}
                    className="w-full"
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Добавить этап
                  </Button>
                </div>

                {/* Предупреждение если не изменены этапы */}
                {!setupData.dialogStagesModified && (
                  <div className="mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <div className="flex items-start gap-3">
                      <div className="w-6 h-6 bg-yellow-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                        <span className="text-white text-sm">⚠</span>
                      </div>
                      <div>
                        <div className="font-medium text-yellow-800 mb-1">Вы не внесли никаких изменений</div>
                        <div className="text-sm text-yellow-700 mb-3">
                          Он не адаптирован под ваш бизнес это может сказаться на эффективности ии-агента.
                        </div>
                        <div className="flex gap-3">
                          <Button 
                            variant="outline"
                            onClick={() => setSetupData({...setupData, dialogStagesModified: true})}
                          >
                            Внести изменения
                          </Button>
                          <Button 
                            onClick={() => setSetupData({...setupData, dialogStagesModified: true})}
                          >
                            Продолжить без изменений
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Кнопки действий */}
            <div className="flex gap-4 justify-end">
              <Button variant="outline" onClick={() => showNotificationMessage('Тестирование модели запущено...')}>
                Протестировать
              </Button>
              <Button onClick={() => showNotificationMessage('Настройки сохранены!')}>
                Сохранить изменения
              </Button>
            </div>
          </div>
        );

      case 'dialogs':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-2xl font-bold">Диалоги</h1>
              <div className="flex gap-2">
                <Button variant="outline" size="sm">
                  <Filter className="w-4 h-4 mr-2" />
                  Фильтры
                </Button>
                <Button variant="outline" size="sm">
                  <Download className="w-4 h-4 mr-2" />
                  Экспорт
                </Button>
              </div>
            </div>

            {/* Поиск */}
            <Card>
              <CardContent className="p-4">
                <div className="flex gap-4">
                  <div className="flex-1">
                    <Input
                      placeholder="Поиск по диалогам..."
                      className="w-full"
                    />
                  </div>
                  <Button>
                    <Search className="w-4 h-4" />
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Список диалогов */}
            <div className="grid grid-cols-1 gap-4">
              {[
                {
                  id: 1,
                  user: 'Анна Морозова',
                  email: 'anna@example.com',
                  status: 'active',
                  lastMessage: 'Какие у вас есть тарифы?',
                  time: '2 минуты назад',
                  messages: 5
                },
                {
                  id: 2,
                  user: 'Михаил Козлов',
                  email: 'mikhail@example.com',
                  status: 'waiting',
                  lastMessage: 'Как подключить интеграцию с CRM?',
                  time: '15 минут назад',
                  messages: 3
                },
                {
                  id: 3,
                  user: 'Екатерина Смирнова',
                  email: 'kate@example.com',
                  status: 'closed',
                  lastMessage: 'Спасибо за помощь!',
                  time: '1 час назад',
                  messages: 12
                }
              ].map((dialog) => (
                <Card key={dialog.id} className="cursor-pointer hover:shadow-md transition-shadow">
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-4">
                        <div className="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                          <User className="w-5 h-5 text-gray-600" />
                        </div>
                        <div>
                          <h3 className="font-medium">{dialog.user}</h3>
                          <p className="text-sm text-gray-600">{dialog.email}</p>
                          <p className="text-sm text-gray-800 mt-1">{dialog.lastMessage}</p>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className={`inline-block px-2 py-1 rounded-full text-xs ${
                          dialog.status === 'active' ? 'bg-green-100 text-green-800' :
                          dialog.status === 'waiting' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {dialog.status === 'active' ? 'Активный' :
                           dialog.status === 'waiting' ? 'Ожидает' : 'Закрыт'}
                        </div>
                        <p className="text-xs text-gray-500 mt-1">{dialog.time}</p>
                        <p className="text-xs text-gray-500">{dialog.messages} сообщений</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );

      case 'integrations':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-2xl font-bold">Интеграции</h1>
              <Button onClick={handleShowWidgetConstructor}>
                <Plus className="w-4 h-4 mr-2" />
                Настроить виджет
              </Button>
            </div>

            {/* Популярные интеграции */}
            <div className="space-y-6">
              <div>
                <h2 className="text-lg font-semibold mb-4">Мессенджеры</h2>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {[
                    { id: 'telegram', name: 'Telegram', description: 'Чат-бот в Telegram', color: 'bg-blue-500' },
                    { id: 'whatsapp', name: 'WhatsApp', description: 'Интеграция с WhatsApp Business', color: 'bg-green-500' },
                    { id: 'vk', name: 'ВКонтакте', description: 'Сообщества ВК', color: 'bg-blue-600' }
                  ].map((integration) => (
                    <Card key={integration.id} className="cursor-pointer hover:shadow-md transition-shadow" onClick={() => handleIntegrationClick(integration.id)}>
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className={`w-10 h-10 ${integration.color} rounded-lg flex items-center justify-center`}>
                            <MessageSquare className="w-5 h-5 text-white" />
                          </div>
                          <div>
                            <h3 className="font-medium">{integration.name}</h3>
                            <p className="text-sm text-gray-600">{integration.description}</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>

              <div>
                <h2 className="text-lg font-semibold mb-4">CRM и продажи</h2>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {[
                    { id: 'amocrm', name: 'amoCRM', description: 'Синхронизация лидов', color: 'bg-purple-500' },
                    { id: 'bitrix24', name: 'Битрикс24', description: 'Интеграция с CRM', color: 'bg-orange-500' },
                    { id: 'salesforce', name: 'Salesforce', description: 'Управление клиентами', color: 'bg-blue-700' }
                  ].map((integration) => (
                    <Card key={integration.id} className="cursor-pointer hover:shadow-md transition-shadow" onClick={() => handleIntegrationClick(integration.id)}>
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className={`w-10 h-10 ${integration.color} rounded-lg flex items-center justify-center`}>
                            <Building className="w-5 h-5 text-white" />
                          </div>
                          <div>
                            <h3 className="font-medium">{integration.name}</h3>
                            <p className="text-sm text-gray-600">{integration.description}</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>

              <div>
                <h2 className="text-lg font-semibold mb-4">Веб-интеграции</h2>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {[
                    { id: 'widget', name: 'Виджет на сайт', description: 'HTML код для вставки', color: 'bg-green-600' },
                    { id: 'api', name: 'REST API', description: 'Программный интерфейс', color: 'bg-gray-700' },
                    { id: 'webhook', name: 'Webhook', description: 'Уведомления в реальном времени', color: 'bg-red-500' }
                  ].map((integration) => (
                    <Card key={integration.id} className="cursor-pointer hover:shadow-md transition-shadow" onClick={() => handleIntegrationClick(integration.id)}>
                      <CardContent className="p-4">
                        <div className="flex items-center gap-3">
                          <div className={`w-10 h-10 ${integration.color} rounded-lg flex items-center justify-center`}>
                            <Globe className="w-5 h-5 text-white" />
                          </div>
                          <div>
                            <h3 className="font-medium">{integration.name}</h3>
                            <p className="text-sm text-gray-600">{integration.description}</p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </div>
            </div>
          </div>
        );

      default:
        return <div className="text-center py-8 text-gray-500">Раздел в разработке</div>;
    }
  };

  // Auth screen
  if (!isLoggedIn) {
    // Для страницы входа используем новый дизайн
    if (currentStep === 'login') {
      return (
        <div className="min-h-screen flex">
          {/* Левая часть - форма входа */}
          <div className="w-1/2 bg-[#131313] flex flex-col">
            {/* Логотип сверху */}
            <div className="pt-10 flex justify-center">
              <img src="/logo.svg" alt="Adapto" className="h-8" />
            </div>
            
            {/* Форма входа */}
            <div className="flex-1 flex items-center justify-center p-8">
              <div className="w-full max-w-md space-y-8">
                <div className="text-center">
                  <h2 className="text-3xl font-bold text-white">Вход в Adapto</h2>
                </div>
                
                <div className="space-y-6">
                  <form onSubmit={handleLoginSubmit} className="space-y-6">
                    <div>
                      <label className="block text-sm font-medium mb-2 text-white">Email</label>
                      <Input
                        type="email"
                        value={formData.email}
                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                        placeholder="your@email.com"
                        required
                        className="h-12 rounded-[10px] border border-white border-opacity-20 bg-transparent text-white placeholder-gray-400 focus:border-white focus:border-opacity-40"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium mb-2 text-white">Пароль</label>
                      <Input
                        type="password"
                        value={formData.password}
                        onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                        placeholder="Введите пароль"
                        required
                        className="h-12 rounded-[10px] border border-white border-opacity-20 bg-transparent text-white placeholder-gray-400 focus:border-white focus:border-opacity-40"
                      />
                    </div>
                    
                    {formErrors.general && (
                      <div className="text-red-400 text-sm">{formErrors.general}</div>
                    )}
                    
                    <Button 
                      type="submit" 
                      className="w-full h-12 rounded-[10px] bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white"
                    >
                      Войти в аккаунт
                    </Button>
                    
                    <div className="text-center">
                      <button
                        type="button"
                        onClick={() => setCurrentStep('register')}
                        className="text-gray-300 hover:text-white text-sm"
                      >
                        Нет аккаунта? Зарегистрироваться
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
          
          {/* Правая часть - изображение с цитатой */}
          <div className="w-1/2 relative">
            <div 
              className="w-full h-full bg-cover bg-center bg-no-repeat"
              style={{
                backgroundImage: 'url(/login-background.png)'
              }}
            >
              <div className="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center">
                <div className="text-center text-white max-w-[500px] px-8">
                  <div className="mb-8">
                    <h3 className="text-3xl font-semibold mb-4 leading-tight">
                      В быстроменяющемся мире самое главное – это способность к адаптации.
                    </h3>
                    <p className="text-lg opacity-80">
                      Илон Маск, основатель xAI
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      );
    }
    
        // Для страницы регистрации используем новый дизайн
    return (
      <div className="min-h-screen flex">
        {/* Левая часть - форма регистрации */}
        <div className="w-1/2 bg-[#131313] flex flex-col">
          {/* Логотип сверху */}
          <div className="pt-10 flex justify-center">
            <img src="/logo.svg" alt="Adapto" className="h-8" />
          </div>
          
          {/* Форма регистрации */}
          <div className="flex-1 flex items-center justify-center p-8">
            <div className="w-full max-w-md space-y-8">
              <div className="text-center">
                <h2 className="text-3xl font-bold text-white">Регистрация</h2>
              </div>
              
              <div className="space-y-6">
                <form onSubmit={handleRegisterSubmit} className="space-y-6">
                  {/* Имя и Компания на одной линии */}
                  <div className="grid grid-cols-2 gap-5">
                    <div>
                      <label className="block text-sm font-medium mb-2 text-white">Имя</label>
                      <Input
                        type="text"
                        value={formData.name}
                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                        placeholder="Ваше имя"
                        required
                        className="h-12 rounded-[10px] border border-white border-opacity-20 bg-transparent text-white placeholder-gray-400 focus:border-white focus:border-opacity-40"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium mb-2 text-white">Компания</label>
                      <Input
                        type="text"
                        value={formData.company}
                        onChange={(e) => setFormData({ ...formData, company: e.target.value })}
                        placeholder="Название компании"
                        required
                        className="h-12 rounded-[10px] border border-white border-opacity-20 bg-transparent text-white placeholder-gray-400 focus:border-white focus:border-opacity-40"
                      />
                    </div>
                  </div>
                  
                  {/* Email и Телефон на одной линии */}
                  <div className="grid grid-cols-2 gap-5">
                    <div>
                      <label className="block text-sm font-medium mb-2 text-white">Email</label>
                      <Input
                        type="email"
                        value={formData.email}
                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                        placeholder="your@email.com"
                        required
                        className="h-12 rounded-[10px] border border-white border-opacity-20 bg-transparent text-white placeholder-gray-400 focus:border-white focus:border-opacity-40"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium mb-2 text-white">Номер телефона</label>
                      <Input
                        type="tel"
                        value={formData.phone}
                        onChange={(e) => {
                          const formatted = formatPhoneNumber(e.target.value);
                          setFormData({ ...formData, phone: formatted });
                          const error = validatePhone(formatted);
                          setValidationErrors({ ...validationErrors, phone: error });
                        }}
                        placeholder="+7 (999) 123-45-67"
                        required
                        className="h-12 rounded-[10px] border border-white border-opacity-20 bg-transparent text-white placeholder-gray-400 focus:border-white focus:border-opacity-40"
                      />
                    </div>
                  </div>
                  
                  {/* Ошибка валидации телефона */}
                  {validationErrors.phone && (
                    <div className="text-red-400 text-sm mt-1">{validationErrors.phone}</div>
                  )}
                  
                  <div>
                    <label className="block text-sm font-medium mb-2 text-white">Пароль</label>
                    <Input
                      type="password"
                      value={formData.password}
                      onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                      placeholder="Создайте пароль"
                      required
                      className="h-12 rounded-[10px] border border-white border-opacity-20 bg-transparent text-white placeholder-gray-400 focus:border-white focus:border-opacity-40"
                    />
                  </div>
                  
                  <Button 
                    type="submit" 
                    className="w-full h-12 rounded-[10px] bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white"
                  >
                    Создать аккаунт
                  </Button>
                  
                  <div className="text-center space-y-4">
                    <p className="text-xs text-gray-400 leading-relaxed">
                      Нажимая "Создать аккаунт", вы соглашаетесь с условиями Оферты и даете согласие на обработку персональных данных в соответствии с Политикой Конфиденциальности
                    </p>
                    <button
                      type="button"
                      onClick={() => setCurrentStep('login')}
                      className="text-gray-300 hover:text-white text-sm"
                    >
                      Уже есть аккаунт? Войти
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
        
        {/* Правая часть - изображение с цитатой */}
        <div className="w-1/2 relative">
          <div 
            className="w-full h-full bg-cover bg-center bg-no-repeat"
            style={{
              backgroundImage: 'url(/registration-background.png)'
            }}
          >
            <div className="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center">
              <div className="text-center text-white max-w-[500px] px-8">
                <div className="mb-8">
                  <h3 className="text-3xl font-semibold mb-4 leading-tight">
                    Сегодня мы находимся на заре новой эпохи, где главное — не сила, не размер, а скорость и адаптивность.
                  </h3>
                  <p className="text-lg opacity-80">
                    Джек Ма, основатель Alibaba
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Main dashboard
  return (
    <div className="h-screen flex bg-gray-50">
      {/* Notification */}
      {showNotification && (
        <div className="fixed top-4 right-4 z-50 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-300">
          {notificationMessage}
        </div>
      )}

      {/* Sidebar */}
      <div className={`fixed md:relative z-50 md:z-auto transform transition-transform duration-300 ease-in-out ${
        sidebarOpen ? 'translate-x-0' : '-translate-x-full'
      } md:translate-x-0 w-64 h-full bg-white border-r border-gray-200 flex flex-col`}>
        
        {/* Header */}
        <div className="p-4 border-b border-gray-200">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full flex items-center justify-center">
              <div className="flex items-center justify-center w-5 h-5">
                <div className="w-2 h-2 bg-white rounded-full mr-1"></div>
                <div className="w-1 h-1 bg-white rounded-full"></div>
              </div>
            </div>
            <div>
              <div className="font-medium">{currentUser?.name || 'Пользователь'}</div>
              <div className="text-xs text-gray-500">{currentUser?.company_name || 'Компания'}</div>
            </div>
          </div>
        </div>
        
        {/* Navigation */}
        <div className="flex-1 p-4">
          <nav className="space-y-2">
            {menuItems.map((item) => (
              <button
                key={item.id}
                onClick={() => {
                  setActiveSection(item.id);
                  localStorage.setItem('currentSection', item.id);
                  setSidebarOpen(false);
                }}
                className={`w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left transition-colors ${
                  activeSection === item.id 
                    ? 'bg-gray-100 text-gray-900' 
                    : 'hover:bg-gray-50 text-gray-700'
                }`}
              >
                <item.icon className="w-4 h-4" />
                {item.label}
              </button>
            ))}
          </nav>
        </div>

        {/* Footer */}
        <div className="p-4 border-t border-gray-200 space-y-2">
          <div className="space-y-1">
            <button 
              onClick={() => {
                setShowSetupWizard(true);
              }}
              className="w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left hover:bg-gray-50 transition-colors"
            >
              <Zap className="w-4 h-4" />
              <span className="text-sm">Настройка Adapto</span>
            </button>
            <button 
              onClick={() => window.open('/privacy-policy', '_blank')}
              className="w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left hover:bg-gray-50 transition-colors"
            >
              <Settings className="w-4 h-4" />
              <span className="text-sm">Правила и соглашения</span>
            </button>
            <button 
              onClick={() => window.open('/support', '_blank')}
              className="w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left hover:bg-gray-50 transition-colors"
            >
              <MessageSquare className="w-4 h-4" />
              <span className="text-sm">Чат с поддержкой</span>
            </button>
            <button 
              className="w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left hover:bg-gray-50 transition-colors" 
              onClick={handleLogout}
            >
              <ExternalLink className="w-4 h-4" />
              <span className="text-sm">Выйти</span>
            </button>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Mobile header */}
        <div className="md:hidden flex items-center gap-4 p-4 border-b border-gray-200 bg-white">
          <Button 
            variant="ghost" 
            size="sm"
            onClick={() => setSidebarOpen(true)}
          >
            <Menu className="w-4 h-4" />
          </Button>
          <h1 className="font-medium">Adapto AI Platform</h1>
        </div>

        {/* Content */}
        <main className="flex-1 overflow-auto p-6 bg-white">
          {renderContent()}
        </main>
      </div>

      {/* Widget Constructor Modal */}
      {showWidgetConstructor && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div className="absolute inset-0 bg-black/50" onClick={() => setShowWidgetConstructor(false)} />
          <div className="relative bg-white rounded-xl w-full max-w-4xl mx-4 max-h-[90vh] overflow-hidden flex flex-col">
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <div className="flex items-center gap-3">
                <button 
                  onClick={() => setShowWidgetConstructor(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  ←
                </button>
                <h3 className="text-xl font-semibold">Интеграции / Виджет</h3>
              </div>
              <button 
                onClick={() => {
                  navigator.clipboard.writeText('<script src="https://adapto.ai/widget.js"></script>');
                  showNotificationMessage('Скрипт скопирован!');
                }}
                className="bg-gray-100 hover:bg-gray-200 px-4 py-2 rounded-lg text-sm font-medium transition-colors"
              >
                Скопировать скрипт
              </button>
            </div>

            {/* Content */}
            <div className="flex-1 overflow-y-auto p-6">
              <div className="space-y-8">
                {/* Settings */}
                <div className="space-y-6">
                  {/* Accent Color */}
                  <div>
                    <label className="block text-sm font-medium mb-3">Акцентный цвет</label>
                    <div className="flex items-center gap-3">
                      <input 
                        type="text" 
                        value={widgetSettings.accentColor}
                        onChange={(e) => setWidgetSettings({...widgetSettings, accentColor: e.target.value})}
                        className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                        placeholder="HEX"
                      />
                      <input 
                        type="color" 
                        value={widgetSettings.accentColor}
                        onChange={(e) => setWidgetSettings({...widgetSettings, accentColor: e.target.value})}
                        className="w-10 h-10 rounded-lg border-2 border-gray-300 cursor-pointer"
                      />
                      <button 
                        onClick={() => setWidgetSettings({...widgetSettings, accentColor: '#1354FC'})}
                        className="text-gray-400 hover:text-gray-600"
                      >
                        ×
                      </button>
                    </div>
                  </div>

                  {/* Button Color */}
                  <div>
                    <label className="block text-sm font-medium mb-3">Цвет кнопки</label>
                    <div className="grid grid-cols-3 gap-3">
                      {[
                        { id: 'light', label: 'Светлый фон', bg: 'bg-white', border: 'border-blue-500', text: 'text-blue-500' },
                        { id: 'dark', label: 'Темный фон', bg: 'bg-gray-900', border: 'border-white', text: 'text-white' },
                        { id: 'custom', label: 'Задать свой цвет', bg: 'bg-gradient-to-r from-yellow-400 via-pink-500 to-blue-500', border: 'border-blue-500', text: 'text-white' }
                      ].map((style) => (
                        <button
                          key={style.id}
                          onClick={() => setWidgetSettings({...widgetSettings, buttonColor: style.id})}
                          className={`p-3 rounded-lg border-2 transition-all ${
                            widgetSettings.buttonColor === style.id 
                              ? 'border-blue-500 ring-2 ring-blue-200' 
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                        >
                          <div 
                            className={`w-[140px] h-[42px] rounded-xl flex items-center justify-center gap-2 mb-2 mx-auto ${
                              style.id === 'light' ? 'bg-white border-2 border-gray-300' :
                              style.id === 'dark' ? 'bg-gray-900' :
                              'bg-gradient-to-r from-yellow-400 via-pink-500 to-blue-500'
                            }`}
                            style={{
                              borderColor: style.id === 'light' ? widgetSettings.accentColor : 'transparent',
                              color: style.id === 'light' ? widgetSettings.accentColor : 'white'
                            }}
                          >
                            <div 
                              className="w-4 h-4 rounded-full opacity-80"
                              style={{ backgroundColor: style.id === 'light' ? widgetSettings.accentColor : 'currentColor' }}
                            ></div>
                            <span className="text-sm font-medium" style={{ maxWidth: '90px', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>
                              Спросить ИИ
                            </span>
                          </div>
                          <span className={`text-xs ${widgetSettings.buttonColor === style.id ? 'text-blue-600' : 'text-gray-600'}`}>
                            {style.label}
                          </span>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Button Text */}
                  <div>
                    <label className="block text-sm font-medium mb-3">Название кнопки</label>
                    <input 
                      type="text" 
                      value={widgetSettings.buttonText}
                      onChange={(e) => setWidgetSettings({...widgetSettings, buttonText: e.target.value})}
                      className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                      placeholder="Спросить ИИ"
                    />
                  </div>

                  {/* Avatar */}
                  <div>
                    <label className="block text-sm font-medium mb-3">Аватар Adapto</label>
                    <div className="grid grid-cols-2 gap-3">
                      <button
                        onClick={() => setWidgetSettings({...widgetSettings, avatar: 'default'})}
                        className={`p-3 rounded-lg border-2 transition-all ${
                          widgetSettings.avatar === 'default' 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full mx-auto mb-2 flex items-center justify-center">
                          <div className="flex items-center justify-center w-6 h-6">
                            <div className="w-3 h-3 bg-white rounded-full mr-1"></div>
                            <div className="w-1.5 h-1.5 bg-white rounded-full"></div>
                          </div>
                        </div>
                        <span className="text-xs text-center block">По умолчанию</span>
                      </button>
                      <button
                        onClick={() => document.getElementById('avatar-input')?.click()}
                        className={`p-3 rounded-lg border-2 transition-all ${
                          widgetSettings.avatar === 'custom' 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="w-12 h-12 bg-gray-200 rounded-full mx-auto mb-2 flex items-center justify-center">
                          <span className="text-gray-500">+</span>
                        </div>
                        <span className="text-xs text-center block">Загрузить</span>
                        <input 
                          id="avatar-input"
                          type="file" 
                          accept="image/*"
                          className="hidden" 
                          onChange={(e) => {
                            const file = e.target.files?.[0];
                            if (file) {
                              setWidgetSettings({...widgetSettings, avatar: 'custom'});
                              showNotificationMessage('Аватар загружен!');
                            }
                          }}
                        />
                      </button>
                    </div>
                  </div>
                </div>

                {/* Custom Color Picker */}
                {widgetSettings.buttonColor === 'custom' && (
                  <div>
                    <label className="block text-sm font-medium mb-3">Введите цвет для фона</label>
                    <div className="flex items-center gap-3">
                      <input 
                        type="text" 
                        value={widgetSettings.customButtonColor}
                        onChange={(e) => setWidgetSettings({...widgetSettings, customButtonColor: e.target.value})}
                        className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                        placeholder="HEX"
                      />
                      <input 
                        type="color" 
                        value={widgetSettings.customButtonColor}
                        onChange={(e) => setWidgetSettings({...widgetSettings, customButtonColor: e.target.value})}
                        className="w-10 h-10 rounded-lg border-2 border-gray-300 cursor-pointer"
                      />
                    </div>
                  </div>
                )}

                {/* Расположение виджета */}
                <div>
                  <label className="block text-sm font-medium mb-3">Расположение виджета</label>
                  <div className="grid grid-cols-2 gap-3">
                    <button
                      onClick={() => setWidgetSettings({...widgetSettings, widgetLocation: 'default'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetSettings.widgetLocation === 'default' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium mb-1">По умолчанию</div>
                        <div className="text-sm text-gray-600">Правый нижний угол</div>
                      </div>
                    </button>
                    <button
                      onClick={() => setWidgetSettings({...widgetSettings, widgetLocation: 'custom'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetSettings.widgetLocation === 'custom' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium mb-1">Настроить</div>
                        <div className="text-sm text-gray-600">Выбрать позицию</div>
                      </div>
                    </button>
                  </div>
                  
                  {/* Настройки расположения виджета */}
                  {widgetSettings.widgetLocation === 'custom' && (
                    <div className="mt-4 space-y-6 p-4 bg-gray-50 rounded-lg">
                      <div>
                        <h4 className="text-sm font-medium mb-3">Для компьютеров</h4>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-medium mb-2">Отступ снизу</label>
                            <input 
                              type="number" 
                              value={widgetSettings.desktopBottomOffset}
                              onChange={(e) => setWidgetSettings({...widgetSettings, desktopBottomOffset: parseInt(e.target.value)})}
                              className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                              min="0"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium mb-2">Отступ справа</label>
                            <input 
                              type="number" 
                              value={widgetSettings.desktopRightOffset}
                              onChange={(e) => setWidgetSettings({...widgetSettings, desktopRightOffset: parseInt(e.target.value)})}
                              className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                              min="0"
                            />
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <h4 className="text-sm font-medium mb-3">Для телефонов</h4>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-medium mb-2">Отступ снизу</label>
                            <input 
                              type="number" 
                              value={widgetSettings.mobileBottomOffset}
                              onChange={(e) => setWidgetSettings({...widgetSettings, mobileBottomOffset: parseInt(e.target.value)})}
                              className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                              min="0"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium mb-2">Отступ справа</label>
                            <input 
                              type="number" 
                              value={widgetSettings.mobileRightOffset}
                              onChange={(e) => setWidgetSettings({...widgetSettings, mobileRightOffset: parseInt(e.target.value)})}
                              className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                              min="0"
                            />
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Z-index</label>
                        <input 
                          type="number" 
                          value={widgetSettings.zIndex}
                          onChange={(e) => setWidgetSettings({...widgetSettings, zIndex: parseInt(e.target.value)})}
                          className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                          min="1"
                        />
                      </div>
                    </div>
                  )}
                </div>

                {/* Приветственное сообщение */}
                <div>
                  <label className="block text-sm font-medium mb-3">Приветственное сообщение</label>
                  <div className="space-y-3">
                    {widgetSettings.welcomeMessages.map((message, index) => (
                      <div key={index} className="flex gap-2">
                        <input 
                          type="text" 
                          value={message}
                          onChange={(e) => {
                            const newMessages = [...widgetSettings.welcomeMessages];
                            newMessages[index] = e.target.value;
                            setWidgetSettings({...widgetSettings, welcomeMessages: newMessages});
                          }}
                          className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                          placeholder="Приветственное сообщение"
                        />
                        <button 
                          onClick={() => {
                            const newMessages = widgetSettings.welcomeMessages.filter((_, i) => i !== index);
                            setWidgetSettings({...widgetSettings, welcomeMessages: newMessages});
                          }}
                          className="px-3 py-2 text-red-500 hover:text-red-700"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                    <button 
                      onClick={() => {
                        const newMessages = [...widgetSettings.welcomeMessages, ''];
                        setWidgetSettings({...widgetSettings, welcomeMessages: newMessages});
                      }}
                      className="text-blue-600 hover:text-blue-700 text-sm"
                    >
                      + Добавить сообщение
                    </button>
                  </div>
                </div>

                {/* Триггерный вопрос */}
                <div>
                  <label className="block text-sm font-medium mb-3">Триггерный вопрос</label>
                  <div className="grid grid-cols-2 gap-3 mb-4">
                    <button
                      onClick={() => setWidgetSettings({...widgetSettings, triggerQuestionEnabled: 'no'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetSettings.triggerQuestionEnabled === 'no' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Нет</div>
                      </div>
                    </button>
                    <button
                      onClick={() => setWidgetSettings({...widgetSettings, triggerQuestionEnabled: 'yes'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetSettings.triggerQuestionEnabled === 'yes' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Есть</div>
                      </div>
                    </button>
                  </div>
                  
                  {widgetSettings.triggerQuestionEnabled === 'yes' && (
                    <div className="space-y-4 p-4 bg-gray-50 rounded-lg">
                      <div>
                        <label className="block text-sm font-medium mb-2">Через какое время показать:</label>
                        <div className="flex items-center gap-2">
                          <input 
                            type="number" 
                            value={widgetSettings.triggerQuestionDelay}
                            onChange={(e) => setWidgetSettings({...widgetSettings, triggerQuestionDelay: parseInt(e.target.value)})}
                            className="w-20 p-2 border border-gray-300 rounded-lg text-sm"
                            min="1"
                          />
                          <span className="text-sm text-gray-600">сек</span>
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Вопрос:</label>
                        <textarea 
                          value={widgetSettings.triggerQuestionText}
                          onChange={(e) => setWidgetSettings({...widgetSettings, triggerQuestionText: e.target.value})}
                          className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                          rows="3"
                          placeholder="Введите вопрос"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Быстрые ответы:</label>
                        <div className="space-y-2">
                          {widgetSettings.quickReplies.map((reply, index) => (
                            <div key={index} className="flex gap-2">
                              <input 
                                type="text" 
                                value={reply}
                                onChange={(e) => {
                                  const newReplies = [...widgetSettings.quickReplies];
                                  newReplies[index] = e.target.value;
                                  setWidgetSettings({...widgetSettings, quickReplies: newReplies});
                                }}
                                className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                                placeholder="Быстрый ответ"
                              />
                              <button 
                                onClick={() => {
                                  const newReplies = widgetSettings.quickReplies.filter((_, i) => i !== index);
                                  setWidgetSettings({...widgetSettings, quickReplies: newReplies});
                                }}
                                className="px-3 py-2 text-red-500 hover:text-red-700"
                              >
                                ×
                              </button>
                            </div>
                          ))}
                          <button 
                            onClick={() => {
                              const newReplies = [...widgetSettings.quickReplies, ''];
                              setWidgetSettings({...widgetSettings, quickReplies: newReplies});
                            }}
                            className="text-blue-600 hover:text-blue-700 text-sm"
                          >
                            + Добавить быстрый ответ
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Follow up сообщение */}
                <div>
                  <label className="block text-sm font-medium mb-3">Follow up сообщение</label>
                  <p className="text-sm text-gray-600 mb-4">Сообщение, которое увидит пользователь, если выйдет из диалога</p>
                  <div className="grid grid-cols-2 gap-3 mb-4">
                    <button
                      onClick={() => setWidgetSettings({...widgetSettings, followUpMessage: 'no'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetSettings.followUpMessage === 'no' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Нет</div>
                      </div>
                    </button>
                    <button
                      onClick={() => setWidgetSettings({...widgetSettings, followUpMessage: 'yes'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetSettings.followUpMessage === 'yes' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Есть</div>
                      </div>
                    </button>
                  </div>
                  
                  {widgetSettings.followUpMessage === 'yes' && (
                    <div className="space-y-4 p-4 bg-gray-50 rounded-lg">
                      <div>
                        <label className="block text-sm font-medium mb-2">Через какое время показать:</label>
                        <div className="flex items-center gap-2">
                          <input 
                            type="number" 
                            value={widgetSettings.followUpDelay}
                            onChange={(e) => setWidgetSettings({...widgetSettings, followUpDelay: parseInt(e.target.value)})}
                            className="w-20 p-2 border border-gray-300 rounded-lg text-sm"
                            min="1"
                          />
                          <span className="text-sm text-gray-600">сек</span>
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Вопрос:</label>
                        <textarea 
                          value={widgetSettings.followUpQuestion}
                          onChange={(e) => setWidgetSettings({...widgetSettings, followUpQuestion: e.target.value})}
                          className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                          rows="3"
                          placeholder="Введите вопрос"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Быстрые ответы:</label>
                        <div className="space-y-2">
                          {widgetSettings.followUpQuickReply && (
                            <div className="flex gap-2">
                              <input 
                                type="text" 
                                value={widgetSettings.followUpQuickReply}
                                onChange={(e) => setWidgetSettings({...widgetSettings, followUpQuickReply: e.target.value})}
                                className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                                placeholder="Быстрый ответ"
                              />
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Ссылка на политику обработки персональных данных */}
                <div>
                  <label className="block text-sm font-medium mb-2">Ссылка на политику обработки персональных данных</label>
                  <input 
                    type="url" 
                    value={widgetSettings.privacyPolicyUrl}
                    onChange={(e) => setWidgetSettings({...widgetSettings, privacyPolicyUrl: e.target.value})}
                    className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                    placeholder="https://example.com/privacy"
                  />
                </div>

                {/* Какие метки собирать */}
                <div>
                  <label className="block text-sm font-medium mb-3">Какие метки собирать</label>
                  <div className="grid grid-cols-2 gap-2">
                    {[
                      'utm_source',
                      'utm_medium', 
                      'utm_campaign',
                      'utm_term',
                      'utm_content',
                      'roistat_visit',
                      'gclid',
                      'fbclid'
                    ].map(tag => (
                      <button
                        key={tag}
                        onClick={() => {
                          const current = widgetSettings.dataTags || [];
                          const newTags = current.includes(tag)
                            ? current.filter(t => t !== tag)
                            : [...current, tag];
                          setWidgetSettings({...widgetSettings, dataTags: newTags});
                        }}
                        className={`p-2 rounded-lg border-2 transition-all text-sm ${
                          (widgetSettings.dataTags || []).includes(tag)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {tag}
                      </button>
                    ))}
                  </div>
                  <div className="mt-3">
                    <button 
                      onClick={() => {
                        const newTag = prompt('Введите название метки:');
                        if (newTag && !widgetSettings.dataTags.includes(newTag)) {
                          const newTags = [...widgetSettings.dataTags, newTag];
                          setWidgetSettings({...widgetSettings, dataTags: newTags});
                        }
                      }}
                      className="text-blue-600 hover:text-blue-700 text-sm"
                    >
                      + Добавить метку
                    </button>
                  </div>
                </div>



                {/* Кнопки действий */}
                <div className="flex justify-end gap-3 pt-6 border-t">
                  <Button 
                    variant="outline"
                    onClick={() => {
                      // Открываем предосмотр в новой вкладке
                      const previewUrl = `http://localhost:3002/preview.html?settings=${encodeURIComponent(JSON.stringify(widgetSettings))}`;
                      window.open(previewUrl, '_blank');
                    }}
                  >
                    Предосмотр
                  </Button>
                  <Button 
                    onClick={() => {
                      // Сохраняем настройки
                      localStorage.setItem('widgetSettings', JSON.stringify(widgetSettings));
                      showNotificationMessage('Настройки виджета сохранены!');
                      setShowWidgetModal(false);
                    }}
                  >
                    Сохранить
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Integration Modal */}
      {showIntegrationModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
          <div className="bg-white rounded-xl p-6 max-w-lg w-full mx-4">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold">Настройка интеграции</h2>
              <Button variant="ghost" onClick={() => setShowIntegrationModal(false)}>
                <X className="w-4 h-4" />
              </Button>
            </div>
            
            <div className="space-y-4">
              <p className="text-gray-600">
                Интеграция с {selectedIntegration} будет настроена в ближайшее время.
              </p>
              
              <div className="flex gap-3">
                <Button onClick={() => {
                  setShowIntegrationModal(false);
                  showNotificationMessage('Заявка на интеграцию отправлена!');
                }}>
                  Запросить интеграцию
                </Button>
                <Button variant="outline" onClick={() => setShowIntegrationModal(false)}>
                  Отмена
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Setup Wizard Modal для первого входа */}
      {showSetupWizard && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
          <div className="bg-white rounded-xl p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold">Настройка вашего ИИ-агента</h2>
              <Button variant="ghost" onClick={() => setShowSetupWizard(false)}>
                <X className="w-4 h-4" />
              </Button>
            </div>

            {/* Прогресс-бар */}
            <div className="mb-8">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium">Шаг {setupStep} из 4</span>
                <span className="text-sm text-gray-500">{Math.round((setupStep / 4) * 100)}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${(setupStep / 4) * 100}%` }}
                ></div>
              </div>
            </div>

            {/* Содержимое шагов */}
            {setupStep === 1 && (
              <div className="space-y-6">
                <h3 className="text-xl font-semibold">Шаг 1: Уточните цели Adapto</h3>
                
                {/* 1. Какую задачу должен выполнять Адапто? */}
                <div>
                  <label className="block mb-3 font-medium">1. Какую задачу должен выполнять Адапто?</label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    <button
                      onClick={() => setSetupData({...setupData, task: 'Продавать'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        setupData.task === 'Продавать' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium mb-1">Продавать</div>
                        <div className="text-sm text-gray-600">Помогать в продажах</div>
                      </div>
                    </button>
                    <button
                      onClick={() => setSetupData({...setupData, task: 'Консультировать'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        setupData.task === 'Консультировать' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium mb-1">Консультировать</div>
                        <div className="text-sm text-gray-600">Давать консультации</div>
                      </div>
                    </button>
                  </div>
                </div>

                {/* 2. Какая главная цель ии-агента? */}
                <div>
                  <label className="block mb-3 font-medium">2. Какая главная цель ии-агента?</label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {[
                      'Записать на консультацию',
                      'Продать продукт',
                      'Решить проблему клиента'
                    ].map(goal => (
                      <button
                        key={goal}
                        onClick={() => setSetupData({...setupData, mainGoal: goal})}
                        className={`p-4 rounded-lg border-2 transition-all ${
                          setupData.mainGoal === goal 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-lg font-medium">{goal}</div>
                        </div>
                      </button>
                    ))}
                    <button
                      onClick={() => setSetupData({...setupData, mainGoal: 'custom'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        setupData.mainGoal === 'custom' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Другое</div>
                        <div className="text-sm text-gray-600">Указать свою цель</div>
                      </div>
                    </button>
                  </div>
                  {setupData.mainGoal === 'custom' && (
                    <div className="mt-3">
                      <Input
                        value={setupData.customGoal || ''}
                        onChange={(e) => setSetupData({...setupData, customGoal: e.target.value})}
                        placeholder="Укажите вашу главную цель"
                        className="w-full"
                      />
                    </div>
                  )}
                </div>

                {/* 3. Какой цикл сделки у вас в компании? */}
                <div>
                  <label className="block mb-2 font-medium">3. Какой цикл сделки у вас в компании?</label>
                  <Textarea
                    value={setupData.dealCycle || ''}
                    onChange={(e) => setSetupData({...setupData, dealCycle: e.target.value})}
                    placeholder="Опишите цикл сделки в вашей компании..."
                    className="min-h-[100px]"
                  />
                </div>

                {/* 4. Целевая аудитория */}
                <div>
                  <label className="block mb-2 font-medium">4. Целевая аудитория</label>
                  <Textarea
                    value={setupData.targetAudience || ''}
                    onChange={(e) => setSetupData({...setupData, targetAudience: e.target.value})}
                    placeholder="Опишите вашу целевую аудиторию..."
                    className="min-h-[100px]"
                  />
                </div>
              </div>
            )}

            {setupStep === 2 && (
              <div className="space-y-6">
                <h3 className="text-xl font-semibold">Шаг 2: Правила общения</h3>
                
                {/* 1. Обращение к пользователю */}
                <div>
                  <label className="block mb-3 font-medium">1. Обращение к пользователю</label>
                  <div className="flex gap-3">
                    <button 
                      onClick={() => setSetupData({...setupData, addressing: 'Ты'})}
                      className={`flex-1 border rounded-full h-12 transition-colors ${
                        setupData.addressing === 'Ты' ? 'bg-blue-600 text-white border-blue-600' : 'bg-white hover:bg-gray-50'
                      }`}
                    >
                      на "Ты"
                    </button>
                    <button 
                      onClick={() => setSetupData({...setupData, addressing: 'Вы'})}
                      className={`flex-1 border rounded-full h-12 transition-colors ${
                        setupData.addressing === 'Вы' ? 'bg-blue-600 text-white border-blue-600' : 'bg-white hover:bg-gray-50'
                      }`}
                    >
                      на "Вы"
                    </button>
                  </div>
                </div>

                {/* 2. Стиль общения */}
                <div>
                  <label className="block mb-3 font-medium">2. Стиль общения</label>
                  <div className="flex flex-wrap gap-3">
                    {[
                      { text: 'Дружелюбный', emoji: '😊' },
                      { text: 'Нейтральный', emoji: '😐' },
                      { text: 'Профессиональный', emoji: '💼' },
                      { text: 'Юмористический', emoji: '😄' }
                    ].map(t => (
                      <button 
                        key={t.text} 
                        onClick={() => setSetupData({...setupData, communicationStyle: t.text})} 
                        className={`px-6 py-3 rounded-full border flex items-center gap-2 ${
                          setupData.communicationStyle === t.text ? 'bg-blue-600 text-white border-blue-600' : 'bg-white hover:bg-gray-50'
                        }`}
                      >
                        <span>{t.emoji}</span>
                        <span>{t.text}</span>
                      </button>
                    ))}
                  </div>
                </div>

                {/* 3. Ограничения Адапто */}
                <div>
                  <label className="block mb-3 font-medium">3. Ограничения Адапто</label>
                  <div className="flex flex-wrap gap-2">
                    {[
                      'Не обсуждай цены',
                      'Не давай финансовых советов',
                      'Не консультируй по юридическим вопросам',
                      'Не разъясняй условия договоров',
                      'Не создавай обязательств от лица компании',
                      'Не подтверждай наличие товара или услуги'
                    ].map(restriction => (
                      <button
                        key={restriction}
                        onClick={() => {
                          const current = setupData.restrictions || [];
                          const newRestrictions = current.includes(restriction)
                            ? current.filter(r => r !== restriction)
                            : [...current, restriction];
                          setSetupData({...setupData, restrictions: newRestrictions});
                        }}
                        className={`px-4 py-2 rounded-full border-2 transition-all text-sm ${
                          (setupData.restrictions || []).includes(restriction)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {restriction}
                      </button>
                    ))}
                    <button
                      onClick={() => setSetupData({...setupData, showCustomRestriction: true})}
                      className="px-4 py-2 rounded-full border-2 border-gray-200 bg-white text-gray-700 hover:border-gray-300 text-sm"
                    >
                      Другое
                    </button>
                  </div>
                  {setupData.showCustomRestriction && (
                    <div className="mt-3 flex gap-2">
                      <Input
                        value={setupData.customRestriction || ''}
                        onChange={(e) => setSetupData({...setupData, customRestriction: e.target.value})}
                        placeholder="Введите ваше ограничение"
                        className="flex-1"
                      />
                      <Button 
                        onClick={() => {
                          if (setupData.customRestriction) {
                            const current = setupData.restrictions || [];
                            setSetupData({
                              ...setupData, 
                              restrictions: [...current, setupData.customRestriction],
                              customRestriction: '',
                              showCustomRestriction: false
                            });
                          }
                        }}
                        disabled={!setupData.customRestriction}
                      >
                        Добавить
                      </Button>
                    </div>
                  )}
                </div>

                {/* 4. Дополнительные настройки стиля общения */}
                <div>
                  <label className="block mb-3 font-medium">4. Дополнительные настройки стиля общения под вашу компанию</label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {[
                      'Не гарантировать результат',
                      'Пояснять ссылки перед отправкой',
                      'Проверять понимание ответа',
                      'Избегать длинных сообщений',
                      'Уточнять задачу в начале общения',
                      'Не оказывать давление на клиента',
                      'Предупреждать об ожидании ответа',
                      'Избегать споров',
                      'Отвечать от первого лица'
                    ].map(setting => (
                      <button
                        key={setting}
                        onClick={() => {
                          const current = setupData.communicationSettings || [];
                          const newSettings = current.includes(setting)
                            ? current.filter(s => s !== setting)
                            : [...current, setting];
                          setSetupData({...setupData, communicationSettings: newSettings});
                        }}
                        className={`p-3 rounded-lg border-2 transition-all text-left ${
                          (setupData.communicationSettings || []).includes(setting)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {setting}
                      </button>
                    ))}
                  </div>
                  <div className="mt-3">
                    <Input
                      value={setupData.customCommunicationSetting || ''}
                      onChange={(e) => setSetupData({...setupData, customCommunicationSetting: e.target.value})}
                      placeholder="Добавить свое правило общения"
                      className="w-full"
                    />
                  </div>
                </div>

                {/* 5. Сбор данных */}
                <div>
                  <label className="block mb-3 font-medium">5. Сбор данных</label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mb-3">
                    {[
                      'Имя',
                      'Номер телефона',
                      'Почта',
                      'Адрес доставки',
                      'Город',
                      'Возраст'
                    ].map(dataType => (
                      <button
                        key={dataType}
                        onClick={() => {
                          const current = setupData.dataCollection || [];
                          const newData = current.includes(dataType)
                            ? current.filter(d => d !== dataType)
                            : [...current, dataType];
                          setSetupData({...setupData, dataCollection: newData});
                        }}
                        className={`p-2 rounded-lg border-2 transition-all text-sm ${
                          (setupData.dataCollection || []).includes(dataType)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {dataType}
                      </button>
                    ))}
                  </div>
                  <div className="flex gap-3">
                    <button
                      onClick={() => setSetupData({...setupData, dataCollection: []})}
                      className={`px-4 py-2 rounded-lg border-2 transition-all ${
                        (setupData.dataCollection || []).length === 0
                          ? 'border-blue-500 bg-blue-50 text-blue-700' 
                          : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      Не собирать данные
                    </button>
                    <button
                      onClick={() => setSetupData({...setupData, showCustomData: true})}
                      className="px-4 py-2 rounded-lg border-2 border-gray-200 bg-white text-gray-700 hover:border-gray-300"
                    >
                      Добавить данные
                    </button>
                  </div>
                  {setupData.showCustomData && (
                    <div className="mt-3 flex gap-2">
                      <Input
                        value={setupData.customData || ''}
                        onChange={(e) => setSetupData({...setupData, customData: e.target.value})}
                        placeholder="Введите тип данных для сбора"
                        className="flex-1"
                      />
                      <Button 
                        onClick={() => {
                          if (setupData.customData) {
                            const current = setupData.dataCollection || [];
                            setSetupData({
                              ...setupData, 
                              dataCollection: [...current, setupData.customData],
                              customData: '',
                              showCustomData: false
                            });
                          }
                        }}
                        disabled={!setupData.customData}
                      >
                        Добавить
                      </Button>
                    </div>
                  )}
                </div>

                {/* 6. Уточнение и вопросы */}
                <div>
                  <label className="block mb-3 font-medium">6. Уточнение и вопросы</label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                    {[
                      'Если запрос неполный',
                      'Если клиент сомневается',
                      'Если есть риск ошибки',
                      'При выборе продукта или услуги',
                      'Если ответ зависит от тонкостей',
                      'Если клиент проявляет интерес к нескольким вариантам',
                      'Если клиент не понимает предложенное',
                      'Если требуется индивидуальный подбор',
                      'Если клиент задаёт вопросы вне своей компетенции',
                      'Если клиент спрашивает о вещах, которые требует специальных знаний',
                      'При оформлении заявки или заказа',
                      'Перед тем как оформить что-то важное',
                      'Если клиент долго молчит'
                    ].map(question => (
                      <button
                        key={question}
                        onClick={() => {
                          const current = setupData.clarificationQuestions || [];
                          const newQuestions = current.includes(question)
                            ? current.filter(q => q !== question)
                            : [...current, question];
                          setSetupData({...setupData, clarificationQuestions: newQuestions});
                        }}
                        className={`p-3 rounded-lg border-2 transition-all text-left text-sm ${
                          (setupData.clarificationQuestions || []).includes(question)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {question}
                      </button>
                    ))}
                  </div>
                </div>

                {/* 7. Отправка смайликов */}
                <div>
                  <label className="block mb-3 font-medium">7. Отправка смайликов</label>
                  <div className="flex gap-3">
                    {[
                      { text: 'Никогда', emoji: '😐' },
                      { text: 'Редко', emoji: '😊' },
                      { text: 'Часто', emoji: '😄' }
                    ].map(option => (
                      <button
                        key={option.text}
                        onClick={() => setSetupData({...setupData, emojiUsage: option.text})}
                        className={`flex-1 p-4 rounded-lg border-2 transition-all ${
                          setupData.emojiUsage === option.text
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-2xl mb-2">{option.emoji}</div>
                          <div className="font-medium">{option.text}</div>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {setupStep === 3 && (
              <div className="space-y-6">
                <h3 className="text-xl font-semibold">Шаг 3: Этапы диалога</h3>
                <p className="text-gray-600">Опишите идеальный скрипт</p>
                <p className="text-gray-600">Чем лучше вы опишите ваш скрипт, тем лучше ии-агент сможет выполнять задачи.</p>
                
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                  <div className="flex items-start gap-3">
                    <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                      <span className="text-white text-sm">!</span>
                    </div>
                    <div>
                      <div className="font-medium text-blue-800 mb-1">Уделите время детальному описанию идеального скрипта</div>
                      <div className="text-sm text-blue-700">
                        Это очень важно для хорошей работы вашего ИИ-продажника. Вы сможете скорректировать поведение позже, но правильная настройка сейчас даст лучшие результаты сразу. Ниже представлен шаблон, который вам нужно адаптировать.
                      </div>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  {(setupData.dialogStages || [
                    'Поздоровайся и спроси имя клиента. Уточни его проблему и пойми текущую ситуацию пользователя',
                    'Опиши коротко как решишь его задачу/назови наши преимущества, предложи товары по запросу',
                    'Веди клиента к оформлению заказа/заявки',
                    'Когда клиент готов оформить заказ, сделай итог заказа и пришли ссылку на оплату из базы знаний.',
                    'Переведи клиента на менеджера для проверки оплаты и дальнейшей работы'
                  ]).map((stage, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-start gap-3">
                        <div className="w-6 h-6 bg-gray-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                          <span className="text-white text-sm">{index + 1}</span>
                        </div>
                        <div className="flex-1">
                          <Textarea
                            value={stage}
                            onChange={(e) => {
                              const newStages = [...(setupData.dialogStages || [])];
                              newStages[index] = e.target.value;
                              setSetupData({...setupData, dialogStages: newStages, dialogStagesModified: true});
                            }}
                            className="w-full resize-none"
                            rows={2}
                          />
                        </div>
                        <Button 
                          variant="ghost" 
                          size="sm"
                          onClick={() => {
                            const newStages = [...(setupData.dialogStages || [])];
                            newStages.splice(index, 1);
                            setSetupData({...setupData, dialogStages: newStages, dialogStagesModified: true});
                          }}
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                  
                  <Button 
                    variant="outline" 
                    onClick={() => {
                      const newStages = [...(setupData.dialogStages || []), 'Новый этап диалога'];
                      setSetupData({...setupData, dialogStages: newStages, dialogStagesModified: true});
                    }}
                    className="w-full"
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Добавить этап
                  </Button>
                </div>

                {/* Предупреждение если не изменены этапы */}
                {setupData.dialogStagesModified === false && (
                  <div className="mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <div className="flex items-start gap-3">
                      <div className="w-6 h-6 bg-yellow-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                        <span className="text-white text-sm">⚠</span>
                      </div>
                      <div>
                        <div className="font-medium text-yellow-800 mb-1">Вы не внесли никаких изменений</div>
                        <div className="text-sm text-yellow-700 mb-3">
                          Он не адаптирован под ваш бизнес это может сказаться на эффективности ии-агента.
                        </div>
                        <div className="flex gap-3">
                          <Button 
                            variant="outline"
                            onClick={() => setSetupData({...setupData, dialogStagesModified: true})}
                          >
                            Внести изменения
                          </Button>
                          <Button 
                            onClick={() => setSetupData({...setupData, dialogStagesModified: true})}
                          >
                            Продолжить без изменений
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}

            {setupStep === 4 && (
              <div className="space-y-6">
                <h3 className="text-xl font-semibold">Шаг 4: Обучение Адапто</h3>
                <p className="text-gray-600">Загрузите минимум 1 ресурс с информацией о компании, чтобы Адапто смог обучиться на ней</p>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {[
                    { id: 'site', name: 'Сайт', description: 'Добавить URL вашего сайта', icon: Globe },
                    { id: 'feed', name: 'Товарный фид', description: 'Загрузить CSV/XML файл', icon: FileIcon },
                    { id: 'text', name: 'Написать самому', description: 'Ввести информацию вручную', icon: EditIcon },
                    { id: 'file', name: 'Файл', description: 'Загрузить документ', icon: Upload }
                  ].map((option) => (
                    <button
                      key={option.id}
                      onClick={() => setSetupData({...setupData, selectedKnowledgeType: option.id})}
                      className="p-4 border border-gray-200 rounded-lg hover:border-blue-300 transition-colors text-left"
                    >
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                          <option.icon className="w-5 h-5 text-blue-600" />
                        </div>
                        <div>
                          <div className="font-medium">{option.name}</div>
                          <div className="text-sm text-gray-600">{option.description}</div>
                        </div>
                      </div>
                    </button>
                  ))}
                </div>

                {/* Поле для ввода в зависимости от выбранного типа */}
                {setupData.selectedKnowledgeType && (
                  <div className="mt-6 p-4 border border-blue-200 rounded-lg bg-blue-50">
                    <h4 className="font-medium mb-3">
                      {setupData.selectedKnowledgeType === 'site' && 'Добавить URL сайта'}
                      {setupData.selectedKnowledgeType === 'feed' && 'Загрузить товарный фид'}
                      {setupData.selectedKnowledgeType === 'text' && 'Ввести информацию вручную'}
                      {setupData.selectedKnowledgeType === 'file' && 'Загрузить файл'}
                    </h4>
                    
                    {setupData.selectedKnowledgeType === 'site' && (
                      <div className="space-y-3">
                        <Input
                          value={setupData.knowledgeInput || ''}
                          onChange={(e) => setSetupData({...setupData, knowledgeInput: e.target.value})}
                          placeholder="https://example.com"
                          className="w-full"
                        />
                        <Button 
                          onClick={() => {
                            if (setupData.knowledgeInput) {
                              const newItems = [...(setupData.knowledgeItems || []), {
                                id: Date.now(),
                                type: 'site',
                                content: setupData.knowledgeInput,
                                status: 'processing'
                              }];
                              setSetupData({
                                ...setupData, 
                                knowledgeItems: newItems,
                                knowledgeInput: '',
                                selectedKnowledgeType: null
                              });
                            }
                          }}
                          disabled={!setupData.knowledgeInput}
                        >
                          Добавить сайт
                        </Button>
                      </div>
                    )}
                    
                    {setupData.selectedKnowledgeType === 'text' && (
                      <div className="space-y-3">
                        <Textarea
                          value={setupData.knowledgeInput || ''}
                          onChange={(e) => setSetupData({...setupData, knowledgeInput: e.target.value})}
                          placeholder="Введите информацию о вашей компании, продуктах, услугах..."
                          className="w-full min-h-[120px]"
                        />
                        <Button 
                          onClick={() => {
                            if (setupData.knowledgeInput) {
                              const newItems = [...(setupData.knowledgeItems || []), {
                                id: Date.now(),
                                type: 'text',
                                content: setupData.knowledgeInput,
                                status: 'processing'
                              }];
                              setSetupData({
                                ...setupData, 
                                knowledgeItems: newItems,
                                knowledgeInput: '',
                                selectedKnowledgeType: null
                              });
                            }
                          }}
                          disabled={!setupData.knowledgeInput}
                        >
                          Добавить текст
                        </Button>
                      </div>
                    )}
                    
                    {setupData.selectedKnowledgeType === 'file' && (
                      <div className="space-y-3">
                        <Input
                          type="file"
                          onChange={(e) => setSetupData({...setupData, knowledgeInput: e.target.files?.[0]?.name || ''})}
                          className="w-full"
                        />
                        <Button 
                          onClick={() => {
                            if (setupData.knowledgeInput) {
                              const newItems = [...(setupData.knowledgeItems || []), {
                                id: Date.now(),
                                type: 'file',
                                content: setupData.knowledgeInput,
                                status: 'processing'
                              }];
                              setSetupData({
                                ...setupData, 
                                knowledgeItems: newItems,
                                knowledgeInput: '',
                                selectedKnowledgeType: null
                              });
                            }
                          }}
                          disabled={!setupData.knowledgeInput}
                        >
                          Загрузить файл
                        </Button>
                      </div>
                    )}
                    
                    {setupData.selectedKnowledgeType === 'feed' && (
                      <div className="space-y-3">
                        <Input
                          type="file"
                          accept=".csv,.xml"
                          onChange={(e) => setSetupData({...setupData, knowledgeInput: e.target.files?.[0]?.name || ''})}
                          className="w-full"
                        />
                        <Button 
                          onClick={() => {
                            if (setupData.knowledgeInput) {
                              const newItems = [...(setupData.knowledgeItems || []), {
                                id: Date.now(),
                                type: 'feed',
                                content: setupData.knowledgeInput,
                                status: 'processing'
                              }];
                              setSetupData({
                                ...setupData, 
                                knowledgeItems: newItems,
                                knowledgeInput: '',
                                selectedKnowledgeType: null
                              });
                            }
                          }}
                          disabled={!setupData.knowledgeInput}
                        >
                          Загрузить фид
                        </Button>
                      </div>
                    )}
                  </div>
                )}

                {setupData.knowledgeItems && setupData.knowledgeItems.length > 0 && (
                  <div className="mt-4">
                    <h4 className="font-medium mb-2">Добавленные ресурсы:</h4>
                    <div className="space-y-2">
                      {setupData.knowledgeItems.map((item, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center gap-3">
                            <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                              {item.type === 'site' && <Globe className="w-4 h-4 text-blue-600" />}
                              {item.type === 'text' && <EditIcon className="w-4 h-4 text-blue-600" />}
                              {item.type === 'file' && <FileIcon className="w-4 h-4 text-blue-600" />}
                              {item.type === 'feed' && <FileIcon className="w-4 h-4 text-blue-600" />}
                            </div>
                            <span className="text-sm">{item.content}</span>
                          </div>
                          <div className="text-xs text-green-600">✓ Добавлено</div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Кнопки навигации */}
            <div className="flex justify-between mt-8">
              <Button 
                variant="outline" 
                onClick={() => setSetupStep(Math.max(1, setupStep - 1))}
                disabled={setupStep === 1}
              >
                Назад
              </Button>
              
              {setupStep < 4 ? (
                <Button 
                  onClick={() => {
                    if (setupStep === 3) {
                      // Проверяем, были ли изменения в этапах диалога
                      const originalStages = [
                        'Поздоровайся и спроси имя клиента. Уточни его проблему и пойми текущую ситуацию пользователя',
                        'Опиши коротко как решишь его задачу/назови наши преимущества, предложи товары по запросу',
                        'Веди клиента к оформлению заказа/заявки',
                        'Когда клиент готов оформить заказ, сделай итог заказа и пришли ссылку на оплату из базы знаний.',
                        'Переведи клиента на менеджера для проверки оплаты и дальнейшей работы'
                      ];
                      
                      const currentStages = setupData.dialogStages || [];
                      const hasChanges = currentStages.length !== originalStages.length || 
                        currentStages.some((stage, index) => stage !== originalStages[index]);
                      
                      if (!hasChanges) {
                        setSetupData({...setupData, dialogStagesModified: false});
                      } else {
                        setSetupData({...setupData, dialogStagesModified: true});
                        setSetupStep(setupStep + 1);
                      }
                    } else {
                      setSetupStep(setupStep + 1);
                    }
                  }}
                  disabled={
                    (setupStep === 1 && !setupData.task) ||
                    (setupStep === 2 && (!setupData.addressing || !setupData.communicationStyle)) ||
                    (setupStep === 3 && (!setupData.dialogStages || setupData.dialogStages.length === 0))
                  }
                >
                  Далее
                </Button>
              ) : (
                <Button 
                  onClick={() => {
                    localStorage.setItem('hasShownSetupWizard', 'true');
                    setShowSetupWizard(false);
                    setShowModelSetupProgress(true);
                  }}
                  disabled={!setupData.knowledgeItems || setupData.knowledgeItems.length === 0}
                >
                  Завершить настройку
                </Button>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Model Setup Progress Modal */}
      {showModelSetupProgress && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-white">
          <div className="text-center max-w-md mx-4">
            <div className="mb-8">
              <div className="w-16 h-16 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin mx-auto mb-4"></div>
              <h2 className="text-2xl font-bold text-gray-800 mb-2">Настраиваем модель</h2>
              <p className="text-gray-600 mb-4">Пожалуйста, подождите. Мы настраиваем вашу модель под ваши требования.</p>
              <div className="text-3xl font-bold text-blue-600 mb-4">
                {Math.floor(modelSetupTimer / 60)}:{(modelSetupTimer % 60).toString().padStart(2, '0')}
              </div>
              
              {/* Прогресс-бар с шагами */}
              <div className="space-y-3">
                <div className="flex items-center justify-between text-sm">
                  <span>Анализ целей и задач</span>
                  <span className="text-green-600">✓</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span>Настройка стиля общения</span>
                  <span className="text-green-600">✓</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span>Создание диалоговых сценариев</span>
                  <span className="text-green-600">✓</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span>Обучение на базе знаний</span>
                  <span className="text-blue-600">⏳</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span>Финальная настройка модели</span>
                  <span className="text-gray-400">○</span>
                </div>
              </div>
            </div>
            
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-1000"
                style={{ width: `${((300 - modelSetupTimer) / 300) * 100}%` }}
              ></div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

