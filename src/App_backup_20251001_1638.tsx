import React, { useState, useEffect, useRef } from 'react';
import { crmAPI } from './crm_api_functions.js';
import { getStories, getAllStories, addStory, updateStory, deleteStory } from './api/stories.js';
import crypto from 'crypto';


// CSS стили для иконок
const phoneIconGreenStyle = {
  color: 'rgb(22 163 74 / var(--tw-text-opacity, 1))'
};

const grayIconStyle = {
  filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)'
};

// Стили для иконок редактирования
const greenIconStyle = {
  filter: 'brightness(0) saturate(100%) invert(58%) sepia(96%) saturate(1234%) hue-rotate(87deg) brightness(119%) contrast(119%)'
};

// Простой зеленый цвет для иконки галки
const simpleGreenStyle = {
  // Убираем фильтры, используем CSS класс
};

const redIconStyle = {
  filter: 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(346deg) brightness(104%) contrast(97%)'
};
// import IntegrationHelper from './integrationHelper.js'; // УДАЛЕНО - используем новую систему ai-agent-system
// Новая система ai-agent-system интегрирована через API endpoints
// Система находится в: ai-agent-system.js + ai-agent-endpoints.js

// Импортируем инструменты разработчика только в режиме разработки
if (import.meta.env.DEV) {
  import('./developerTools.js');
}

// CSS для мигающего курсора и стилей поля поиска чата
const cursorStyle = `
  :root {
    --accent-color: #0084FF;
  }
  
  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }
  
  @keyframes pouring {
    from {
      background-position: 0 0;
    }
    to {
      background-position: 100% 0;
    }
  }
  
  @keyframes flash {
    0% {
      background: linear-gradient(90deg, var(--accent-color, #0084FF) 0%, var(--accent-color, #0084FF) 40%, #ffffff 50%, var(--accent-color, #0084FF) 60%, var(--accent-color, #0084FF) 100%);
      background-size: 200% 100%;
      background-position: -200% 0;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    100% {
      background: linear-gradient(90deg, var(--accent-color, #0084FF) 0%, var(--accent-color, #0084FF) 40%, #ffffff 50%, var(--accent-color, #0084FF) 60%, var(--accent-color, #0084FF) 100%);
      background-size: 200% 100%;
      background-position: 200% 0;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
  }
  
  .animate-flash {
    color: var(--accent-color, #0084FF);
    font-weight: 600;
    animation: flash 4s linear infinite;
  }

  /* Анимации для кружков в плашке перехвата диалога */
  @keyframes pulse-1 {
    0%, 80%, 100% { opacity: 0.25; }
    40% { opacity: 1; }
  }
  
  @keyframes pulse-2 {
    0%, 80%, 100% { opacity: 0.5; }
    40% { opacity: 1; }
  }
  
  @keyframes pulse-3 {
    0%, 80%, 100% { opacity: 1; }
    40% { opacity: 0.25; }
  }

  .animate-pulse-1 {
    animation: pulse-1 2s linear infinite;
  }
  
  .animate-pulse-2 {
    animation: pulse-2 2s linear infinite 0.3s;
  }
  
  .animate-pulse-3 {
    animation: pulse-3 2s linear infinite 0.6s;
  }
  
  /* Стили для поля поиска чата */
  .chat-search-input {
    border: 1px solid rgba(7, 15, 26, 0.1) !important;
    background-color: white !important;
    color: #8E8E93 !important;
    transition: all 0.2s ease;
  }
  
  .chat-search-input::placeholder {
    color: #8E8E93 !important;
  }
  
  .chat-search-input:focus {
    outline: none !important;
    border-color: transparent !important;
    background-color: #F9FAFB !important;
    color: #070F1A !important;
    box-shadow: none !important;
    ring: none !important;
  }
  
  .chat-search-input:focus::placeholder {
    color: #8E8E93 !important;
  }
  
  /* Стили для иконок в выпадающем меню пользователя */
  .user-dropdown button.group:hover img:not([style*="invert(27%)"]) {
    filter: brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(199deg) brightness(104%) contrast(101%) !important;
  }
`;

// Global styles for buttons and inputs
const BUTTON_STYLES = {
  // Blue button with shadows and 13px font
  blueButton: {
    fontSize: '13px',
    fontWeight: '500',
    boxShadow: 'rgba(95, 122, 143, 0.25) 0px 2px 3px, rgba(0, 0, 0, 0.11) -2px -2px 3px inset, rgba(255, 255, 255, 0.19) 2px 2px 3px inset'
  },
  // White/gray button with shadows
  whiteButton: {
    fontSize: '13px',
    fontWeight: '500',
    backgroundColor: '#F6F6F8',
    border: 'none',
    boxShadow: 'rgba(95, 122, 143, 0.25) 0px 1px 2px, rgb(255, 255, 255) 1px 1px 1px 0px inset'
  },
  // Disabled button
  disabledButton: {
    fontSize: '13px',
    fontWeight: '500',
    backgroundColor: '#F6F6F8',
    color: '#070F1A',
    border: 'none',
    boxShadow: 'rgba(95, 122, 143, 0.25) 0px 1px 2px, rgba(0, 0, 0, 0.03) -1px -1px 1px inset, rgb(255, 255, 255) 1px 1px 1px 0px inset'
  }
};

const INPUT_STYLES = {
  // Input field with shadows and 13px font
  inputField: {
    fontSize: '13px',
    border: 'none',
    boxShadow: 'rgba(95, 122, 143, 0.25) 0px 1px 2px, rgba(0, 0, 0, 0.03) -1px -1px 1px inset, rgb(255, 255, 255) 1px 1px 1px 0px inset'
  }
};

// Добавляем стили в head
if (typeof document !== 'undefined') {
  const style = document.createElement('style');
  style.textContent = cursorStyle;
  document.head.appendChild(style);
}

import { knowledgeBase, botCorrections as botCorrectionsAPI, testConnection, users, supabase, supabaseAdmin, chatHistory as chatHistoryAPI, agentSettings, modelSettings, userLimits as userLimitsAPI, dialogsDB, statsAPI } from './supabaseClient.js';
import { operatorStatusAPI } from './operatorStatusAPI.js';
import HourlyActivityChart from './components/HourlyActivityChart.jsx';
import ChannelStatistics from './components/ChannelStatistics.jsx';

// Конфигурация API
const API_CONFIG = {
  BASE_URL: import.meta.env.VITE_API_URL || 'https://adaptoai.ru',
  CHAT_ENDPOINT: '/api/chat/message',
  WIDGET_ENDPOINT: '/api/widget/chat',
  WEBSOCKET_ENDPOINT: '/dialogs'
};

// Унифицированная структура сообщения
const createUnifiedMessage = (data) => {
  const baseMessage = {
    id: data.id || `msg_${Date.now()}_${Math.random()}`,
    text: data.text || '',
    time: data.time || 'Только что',
    timestamp: data.timestamp || Date.now(),
    isTyping: data.isTyping || false
  };

  // Определяем тип отправителя
  if (data.type) {
    // Админский чат и диалоги
    baseMessage.type = data.type; // 'user', 'assistant', 'operator', 'system'
    baseMessage.sender_role = data.sender_role || data.type;
  } else if (data.isUser !== undefined) {
    // Виджет чат
    baseMessage.type = data.isUser ? 'user' : 'assistant';
    baseMessage.sender_role = data.isUser ? 'user' : 'assistant';
  }

  // Дополнительные поля для операторов
  if (data.operatorId || data.operatorName) {
    baseMessage.operatorId = data.operatorId;
    baseMessage.operatorName = data.operatorName;
    baseMessage.sender = data.sender || 'operator';
  }

  // Дополнительные поля
  if (data.isUser !== undefined) {
    baseMessage.isUser = data.isUser;
  }

  return baseMessage;
};

// Утилиты для работы с унифицированными сообщениями
const MessageUtils = {
  // Проверка является ли сообщение от пользователя
  isUserMessage: (message) => {
    return message.type === 'user' || message.isUser === true;
  },

  // Проверка является ли сообщение от оператора
  isOperatorMessage: (message) => {
    return message.type === 'operator' || message.sender_role === 'operator';
  },

  // Проверка является ли сообщение от ИИ
  isAssistantMessage: (message) => {
    return message.type === 'assistant' || (message.isUser === false && message.type !== 'operator');
  },

  // Проверка является ли сообщение системным
  isSystemMessage: (message) => {
    return message.type === 'system' || message.sender_role === 'system';
  },

  // Получение отображаемого имени отправителя
  getSenderName: (message) => {
    if (message.operatorName) return message.operatorName;
    if (message.type === 'user') return 'Пользователь';
    if (message.type === 'assistant') return 'ИИ-ассистент';
    if (message.type === 'operator') return 'Оператор';
    if (message.type === 'system') return 'Система';
    return 'Неизвестно';
  }
};

// Оптимизированные компоненты сообщений
const MessageComponent = React.memo(({ message, getMessageAlignment, getMessageOrder, getMessageStyle, getMessageFooter, aiAgentName }) => {
  return (
    <div className={`mb-4 ${getMessageAlignment(message)}`}>
      <div className={`max-w-[80%] ${getMessageOrder(message)}`}>
        <div className={`flex ${getMessageAlignment(message)} items-end`}>
          <div className={`max-w-[70%] p-3 text-[14px] ${getMessageStyle(message)}`}>
            {message.isTyping ? <TypingIndicator /> : message.text}
          </div>
        </div>
        {getMessageFooter(message)}
      </div>
    </div>
  );
});

// Виртуализированный список сообщений
const VirtualizedMessageList = React.memo(({ messages, getMessageAlignment, getMessageOrder, getMessageStyle, getMessageFooter, aiAgentName, containerRef }) => {
  const [visibleRange, setVisibleRange] = React.useState({ start: 0, end: 50 });
  const [containerHeight, setContainerHeight] = React.useState(0);
  const [itemHeight, setItemHeight] = React.useState(80);

  // Обновляем видимый диапазон при прокрутке
  const handleScroll = React.useCallback(() => {
    if (!containerRef.current) return;
    
    const scrollTop = containerRef.current.scrollTop;
    const start = Math.floor(scrollTop / itemHeight);
    const end = Math.min(start + Math.ceil(containerHeight / itemHeight) + 10, messages.length);
    
    setVisibleRange({ start, end });
  }, [containerHeight, itemHeight, messages.length]);

  // Обновляем размеры контейнера
  React.useEffect(() => {
    if (!containerRef.current) return;
    
    const updateDimensions = () => {
      const rect = containerRef.current.getBoundingClientRect();
      setContainerHeight(rect.height);
    };
    
    updateDimensions();
    window.addEventListener('resize', updateDimensions);
    return () => window.removeEventListener('resize', updateDimensions);
  }, []);

  // Обработчик прокрутки
  React.useEffect(() => {
    if (!containerRef.current) return;
    
    containerRef.current.addEventListener('scroll', handleScroll);
    return () => containerRef.current?.removeEventListener('scroll', handleScroll);
  }, [handleScroll]);

  // Показываем только видимые сообщения
  const visibleMessages = messages.slice(visibleRange.start, visibleRange.end);
  const offsetY = visibleRange.start * itemHeight;
  const totalHeight = messages.length * itemHeight;

  return (
    <div style={{ height: totalHeight, position: 'relative' }}>
      <div style={{ transform: `translateY(${offsetY}px)` }}>
        {visibleMessages.map((message, index) => (
          <MessageComponent
            key={message.id}
            message={message}
            getMessageAlignment={getMessageAlignment}
            getMessageOrder={getMessageOrder}
            getMessageStyle={getMessageStyle}
            getMessageFooter={getMessageFooter}
            aiAgentName={aiAgentName}
          />
        ))}
      </div>
    </div>
  );
});

// Общие утилиты для чатов
const ChatUtils = {
  // Создание индикатора загрузки
  createLoadingMessage: (type = 'assistant', isUser = false) => {
    return createUnifiedMessage({
      id: `loading_${Date.now()}_${Math.random()}`,
      type: type,
      text: '',
      time: 'Только что',
      timestamp: Date.now(),
      isTyping: true,
      isUser: isUser
    });
  },

  // Создание сообщения об ошибке
  createErrorMessage: (errorText = 'Извините, произошла ошибка при обработке вашего запроса. Попробуйте еще раз.') => {
    return createUnifiedMessage({
      id: `error_${Date.now()}_${Math.random()}`,
      type: 'assistant',
      text: errorText,
      time: 'Только что',
      timestamp: Date.now()
    });
  },

  // Удаление индикатора загрузки из массива сообщений
  removeLoadingMessage: (messages) => {
    return messages.filter(msg => !msg.isTyping);
  },

  // Добавление сообщения в массив с удалением индикатора загрузки
  addMessageAndRemoveLoading: (messages, newMessage) => {
    const withoutLoading = ChatUtils.removeLoadingMessage(messages);
    return [...withoutLoading, newMessage];
  },

  // Прокрутка к низу чата с задержкой
  scrollToBottom: (ref, delay = 100) => {
    setTimeout(() => {
      if (ref && ref.current) {
        ref.current.scrollTop = ref.current.scrollHeight;
      }
    }, delay);
  },

  // Обработка ошибок с уведомлением
  handleChatError: (error, showNotification) => {
    console.error('Chat error:', error);
    const errorMessage = error.message || 'Произошла неизвестная ошибка';
    if (showNotification) {
      showNotification(`❌ Ошибка: ${errorMessage}`);
    }
    return ChatUtils.createErrorMessage();
  },

  // Сохранение сообщения в БД с обработкой ошибок и retry логикой
  saveMessageToDB: async (userId, messageType, messageText, channel, chatHistoryAPI) => {
    return ChatUtils.retryRequest(async () => {
      await chatHistoryAPI.saveMessage(userId, messageType, messageText, channel);
    }, {
      maxRetries: 2,
      baseDelay: 500,
      retryCondition: (error) => {
        // Повторяем для сетевых ошибок и 5xx статусов
        return !error.response || error.response.status >= 500;
      }
    }).catch(error => {
      console.warn('Failed to save message to DB after retries:', error);
      // Не прерываем выполнение, только логируем ошибку
    });
  },

  // Оптимизированная загрузка истории чата с пагинацией
  loadChatHistoryOptimized: async (userId, channel, chatHistoryAPI, page = 1, limit = 50) => {
    try {
      const history = await chatHistoryAPI.getHistory(userId, channel, page, limit);
      return {
        messages: history || [],
        hasMore: (history || []).length === limit,
        page: page
      };
    } catch (error) {
      console.warn('Failed to load chat history:', error);
      return { messages: [], hasMore: false, page: 1 };
    }
  },

  // Дебаунс для поиска
  debounce: (func, wait) => {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  },

  // Мемоизация для тяжелых вычислений
  memoize: (fn) => {
    const cache = new Map();
    return (...args) => {
      const key = JSON.stringify(args);
      if (cache.has(key)) {
        return cache.get(key);
      }
      const result = fn(...args);
      cache.set(key, result);
      return result;
    };
  },

  // Retry логика для сетевых запросов
  retryRequest: async (requestFn, options = {}) => {
    const {
      maxRetries = 3,
      baseDelay = 1000,
      maxDelay = 10000,
      backoffFactor = 2,
      retryCondition = (error) => {
        // Повторяем для сетевых ошибок и 5xx статусов
        return !error.response || error.response.status >= 500;
      }
    } = options;

    let lastError;
    
    for (let attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        const result = await requestFn();
        return result;
      } catch (error) {
        lastError = error;
        
        // Если это последняя попытка или ошибка не подходит для retry
        if (attempt === maxRetries || !retryCondition(error)) {
          throw error;
        }
        
        // Вычисляем задержку с экспоненциальным backoff
        const delay = Math.min(
          baseDelay * Math.pow(backoffFactor, attempt),
          maxDelay
        );
        
        console.warn(`Request failed (attempt ${attempt + 1}/${maxRetries + 1}), retrying in ${delay}ms:`, error.message);
        
        // Ждем перед следующей попыткой
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    throw lastError;
  },

  // Retry для отправки сообщений
  retrySendMessage: async (sendFn, messageData, options = {}) => {
    return ChatUtils.retryRequest(async () => {
      return await sendFn(messageData);
    }, {
      maxRetries: 2,
      baseDelay: 500,
      retryCondition: (error) => {
        // Повторяем для сетевых ошибок, таймаутов и 5xx
        return !error.response || 
               error.response.status >= 500 || 
               error.code === 'NETWORK_ERROR' ||
               error.message.includes('timeout');
      },
      ...options
    });
  },

  // Retry для API запросов
  retryApiRequest: async (apiFn, options = {}) => {
    return ChatUtils.retryRequest(apiFn, {
      maxRetries: 3,
      baseDelay: 1000,
      retryCondition: (error) => {
        // Повторяем для сетевых ошибок и 5xx статусов
        return !error.response || error.response.status >= 500;
      },
      ...options
    });
  },

  // Retry для WebSocket соединений
  retryWebSocketConnection: (wsUrl, options = {}) => {
    const {
      maxRetries = 5,
      baseDelay = 2000,
      onConnect = () => {},
      onError = () => {},
      onRetry = () => {}
    } = options;

    let retryCount = 0;
    
    const connect = () => {
      try {
        const ws = new WebSocket(wsUrl);
        
        ws.onopen = () => {
          console.log('WebSocket connected successfully');
          retryCount = 0;
          onConnect(ws);
        };
        
        ws.onerror = (error) => {
          console.error('WebSocket error:', error);
          onError(error);
          
          if (retryCount < maxRetries) {
            retryCount++;
            const delay = baseDelay * Math.pow(2, retryCount - 1);
            console.log(`WebSocket retry ${retryCount}/${maxRetries} in ${delay}ms`);
            
            setTimeout(() => {
              onRetry(retryCount);
              connect();
            }, delay);
          } else {
            console.error('WebSocket max retries exceeded');
          }
        };
        
        ws.onclose = (event) => {
          if (!event.wasClean && retryCount < maxRetries) {
            retryCount++;
            const delay = baseDelay * Math.pow(2, retryCount - 1);
            console.log(`WebSocket reconnecting ${retryCount}/${maxRetries} in ${delay}ms`);
            
            setTimeout(() => {
              onRetry(retryCount);
              connect();
            }, delay);
          }
        };
        
        return ws;
      } catch (error) {
        console.error('WebSocket connection error:', error);
        onError(error);
        return null;
      }
    };
    
    return connect();
  }
};

// Offline режим для чатов
const OfflineManager = {
  // Проверка статуса сети
  isOnline: () => navigator.onLine,
  
  // Ключи для localStorage
  KEYS: {
    OFFLINE_MESSAGES: 'offline_messages',
    CHAT_HISTORY_CACHE: 'chat_history_cache',
    NETWORK_STATUS: 'network_status',
    LAST_SYNC: 'last_sync'
  },

  // Сохранение сообщения в offline режиме
  saveOfflineMessage: (message, channel = 'admin') => {
    try {
      const offlineMessages = OfflineManager.getOfflineMessages();
      const messageWithMeta = {
        ...message,
        channel,
        timestamp: Date.now(),
        offline: true,
        synced: false
      };
      
      offlineMessages.push(messageWithMeta);
      localStorage.setItem(OfflineManager.KEYS.OFFLINE_MESSAGES, JSON.stringify(offlineMessages));
      
      console.log('💾 Message saved offline:', messageWithMeta);
      return messageWithMeta;
    } catch (error) {
      console.error('Failed to save offline message:', error);
      return null;
    }
  },

  // Получение offline сообщений
  getOfflineMessages: () => {
    try {
      const messages = localStorage.getItem(OfflineManager.KEYS.OFFLINE_MESSAGES);
      return messages ? JSON.parse(messages) : [];
    } catch (error) {
      console.error('Failed to get offline messages:', error);
      return [];
    }
  },

  // Очистка отправленных offline сообщений
  clearOfflineMessages: () => {
    try {
      localStorage.removeItem(OfflineManager.KEYS.OFFLINE_MESSAGES);
      console.log('🧹 Offline messages cleared');
    } catch (error) {
      console.error('Failed to clear offline messages:', error);
    }
  },

  // Синхронизация offline сообщений
  syncOfflineMessages: async (sendFn, chatHistoryAPI) => {
    if (!OfflineManager.isOnline()) {
      console.log('📴 Still offline, skipping sync');
      return;
    }

    const offlineMessages = OfflineManager.getOfflineMessages();
    if (offlineMessages.length === 0) {
      console.log('✅ No offline messages to sync');
      return;
    }

    console.log(`🔄 Syncing ${offlineMessages.length} offline messages...`);

    for (const message of offlineMessages) {
      try {
        if (message.synced) continue;

        // Отправляем сообщение
        await sendFn(message);
        
        // Сохраняем в БД
        await chatHistoryAPI.saveMessage(
          message.userId || 'offline_user',
          message.type || 'user',
          message.text,
          message.channel || 'admin'
        );

        // Отмечаем как синхронизированное
        message.synced = true;
        message.syncedAt = Date.now();
        
        console.log('✅ Message synced:', message.id);
      } catch (error) {
        console.error('❌ Failed to sync message:', message.id, error);
        // Не удаляем сообщение, попробуем позже
      }
    }

    // Обновляем localStorage
    localStorage.setItem(OfflineManager.KEYS.OFFLINE_MESSAGES, JSON.stringify(offlineMessages));
    
    // Удаляем синхронизированные сообщения
    const unsyncedMessages = offlineMessages.filter(msg => !msg.synced);
    localStorage.setItem(OfflineManager.KEYS.OFFLINE_MESSAGES, JSON.stringify(unsyncedMessages));
    
    console.log(`🎉 Sync completed. ${offlineMessages.length - unsyncedMessages.length} messages synced, ${unsyncedMessages.length} remaining`);
  },

  // Кэширование истории чата
  cacheChatHistory: (messages, channel = 'admin') => {
    try {
      const cache = {
        messages,
        channel,
        timestamp: Date.now(),
        version: '1.0'
      };
      
      localStorage.setItem(
        `${OfflineManager.KEYS.CHAT_HISTORY_CACHE}_${channel}`,
        JSON.stringify(cache)
      );
      
      console.log(`💾 Chat history cached for ${channel}:`, messages.length, 'messages');
    } catch (error) {
      console.error('Failed to cache chat history:', error);
    }
  },

  // Получение кэшированной истории
  getCachedChatHistory: (channel = 'admin') => {
    try {
      const cache = localStorage.getItem(`${OfflineManager.KEYS.CHAT_HISTORY_CACHE}_${channel}`);
      if (!cache) return null;
      
      const parsed = JSON.parse(cache);
      
      // Проверяем актуальность кэша (24 часа)
      const isExpired = Date.now() - parsed.timestamp > 24 * 60 * 60 * 1000;
      if (isExpired) {
        localStorage.removeItem(`${OfflineManager.KEYS.CHAT_HISTORY_CACHE}_${channel}`);
        return null;
      }
      
      console.log(`📱 Using cached chat history for ${channel}:`, parsed.messages.length, 'messages');
      return parsed.messages;
    } catch (error) {
      console.error('Failed to get cached chat history:', error);
      return null;
    }
  },

  // Обновление статуса сети
  updateNetworkStatus: (isOnline) => {
    try {
      localStorage.setItem(OfflineManager.KEYS.NETWORK_STATUS, JSON.stringify({
        isOnline,
        timestamp: Date.now()
      }));
    } catch (error) {
      console.error('Failed to update network status:', error);
    }
  },

  // Получение статуса сети
  getNetworkStatus: () => {
    try {
      const status = localStorage.getItem(OfflineManager.KEYS.NETWORK_STATUS);
      return status ? JSON.parse(status) : { isOnline: true, timestamp: Date.now() };
    } catch (error) {
      console.error('Failed to get network status:', error);
      return { isOnline: true, timestamp: Date.now() };
    }
  }
};

// Утилиты безопасности для чата
const SECURITY_CONFIG = {
  MAX_MESSAGE_LENGTH: 4000,
  MIN_MESSAGE_LENGTH: 1,
  RATE_LIMIT_WINDOW: 60000, // 1 минута
  RATE_LIMIT_MAX_MESSAGES: 10,
  ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'br', 'p'],
  DANGEROUS_PATTERNS: [
    /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
    /javascript:/gi,
    /on\w+\s*=/gi,
    /<iframe/gi,
    /<object/gi,
    /<embed/gi
  ]
};

// Rate limiting storage
const rateLimitStorage = new Map();

// Валидация сообщения
const validateMessage = (message) => {
  const errors = [];
  
  if (!message || typeof message !== 'string') {
    errors.push('Сообщение должно быть строкой');
    return { isValid: false, errors };
  }
  
  const trimmedMessage = message.trim();
  
  if (trimmedMessage.length < SECURITY_CONFIG.MIN_MESSAGE_LENGTH) {
    errors.push('Сообщение не может быть пустым');
  }
  
  if (trimmedMessage.length > SECURITY_CONFIG.MAX_MESSAGE_LENGTH) {
    errors.push(`Сообщение слишком длинное (максимум ${SECURITY_CONFIG.MAX_MESSAGE_LENGTH} символов)`);
  }
  
  // Проверка на опасные паттерны
  for (const pattern of SECURITY_CONFIG.DANGEROUS_PATTERNS) {
    if (pattern.test(trimmedMessage)) {
      errors.push('Сообщение содержит недопустимый контент');
      break;
    }
  }
  
  return {
    isValid: errors.length === 0,
    errors,
    sanitizedMessage: trimmedMessage
  };
};

// Санитизация HTML
const sanitizeMessage = (message) => {
  if (!message || typeof message !== 'string') return '';
  
  // Удаляем все HTML теги кроме разрешенных
  let sanitized = message.replace(/<(?![\/]?(?:b|i|em|strong|br|p)(?:\s|>))/gi, '&lt;');
  sanitized = sanitized.replace(/(?<![\/])(?:b|i|em|strong|br|p)(?=\s|>)/gi, (match) => match.toLowerCase());
  
  // Экранируем специальные символы
  sanitized = sanitized
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;')
    .replace(/\//g, '&#x2F;');
  
  return sanitized;
};

// Анимированный индикатор загрузки
const TypingIndicator = () => (
  <div className="flex items-center space-x-1">
    <div className="flex space-x-1">
      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
    </div>
  </div>
);

// Проверка rate limit
const checkRateLimit = (userId) => {
  const now = Date.now();
  const userKey = `user_${userId}`;
  
  if (!rateLimitStorage.has(userKey)) {
    rateLimitStorage.set(userKey, { count: 1, resetTime: now + SECURITY_CONFIG.RATE_LIMIT_WINDOW });
    return { allowed: true, remaining: SECURITY_CONFIG.RATE_LIMIT_MAX_MESSAGES - 1 };
  }
  
  const userLimit = rateLimitStorage.get(userKey);
  
  if (now > userLimit.resetTime) {
    // Сброс лимита
    rateLimitStorage.set(userKey, { count: 1, resetTime: now + SECURITY_CONFIG.RATE_LIMIT_WINDOW });
    return { allowed: true, remaining: SECURITY_CONFIG.RATE_LIMIT_MAX_MESSAGES - 1 };
  }
  
  if (userLimit.count >= SECURITY_CONFIG.RATE_LIMIT_MAX_MESSAGES) {
    return { 
      allowed: false, 
      remaining: 0, 
      resetTime: userLimit.resetTime 
    };
  }
  
  userLimit.count++;
  return { 
    allowed: true, 
    remaining: SECURITY_CONFIG.RATE_LIMIT_MAX_MESSAGES - userLimit.count 
  };
};

// Отладочный код для проверки импорта
console.log('supabase:', supabase);
console.log('chatHistoryAPI:', chatHistoryAPI);
console.log('chatHistoryAPI.clearChatHistory:', chatHistoryAPI.clearChatHistory);
// import { processContent } from './gigaChatAPI.js'; // Удалено - используем RAG систему
import { 
  BarChart3, 
  MessageSquare, 
  Database, 
  Settings, 
  Zap, 
  Plus,
  Users, 
  Send, 
  AlertTriangle,
  Globe,
  Link as LinkIcon,
  Edit as EditIcon,
  File as FileIcon,
  Trash2,
  Info,
  ChevronRight,
  ExternalLink,
  Menu,
  X,
  User,
  Building,
  Mail,
  Lock,
  Eye,
  EyeOff,
  CheckCircle,
  Upload,
  Download,
  Search,
  Filter,
  MoreHorizontal,
  MoreVertical,
  Home,
  HelpCircle,
  Link,
  File,
  Calendar,
  FileText,
  FileSpreadsheet,
  Clock,
  Phone,
  Hash,
  CreditCard,
  Bell
} from 'lucide-react';

// Компонент анимированной печати

// UI Components
const Button = ({ children, className = '', onClick, disabled = false, variant = 'default', size = 'default', type = 'button' as const, ...props }) => {
  const baseClasses = 'inline-flex items-center justify-center rounded-[10px] font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background';
  
  const variants = {
    default: 'bg-primary text-primary-foreground hover:bg-primary/90',
    destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
    outline: 'border border-input hover:bg-accent hover:text-accent-foreground',
    secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
    ghost: 'hover:bg-accent hover:text-accent-foreground',
    link: 'underline-offset-4 hover:underline text-primary'
  };

  const sizes = {
    default: 'h-10 py-2 px-4',
    sm: 'h-9 px-3 rounded-[10px]',
    lg: 'h-11 px-8 rounded-[10px]',
    icon: 'h-10 w-10'
  };

  const variantClass = variants[variant] || variants.default;
  const sizeClass = sizes[size] || sizes.default;

  return (
    <button
      type={type}
      className={`${baseClasses} ${variantClass} ${sizeClass} ${className}`}
      onClick={onClick}
      disabled={disabled}
      {...props}
    >
      {children}
    </button>
  );
};

const Input = ({ className = '', type = 'text', style = {}, ...props }) => (
  <input
    type={type}
    className={`flex h-[34px] w-full rounded-[10px] bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-[#070F1A]/60 focus:outline-none focus:ring-0 focus:placeholder:text-[#070F1A]/40 disabled:cursor-not-allowed disabled:opacity-50 ${className}`}
    style={{ ...INPUT_STYLES.inputField, ...style }}
    {...props}
  />
);

const Textarea = ({ className = '', style = {}, ...props }) => (
  <textarea
    className={`flex min-h-[124px] w-full rounded-[10px] bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-[#070F1A]/60 focus:outline-none focus:ring-0 focus:placeholder:text-[#070F1A]/40 disabled:cursor-not-allowed disabled:opacity-50 ${className}`}
    style={{ ...INPUT_STYLES.inputField, ...style }}
    {...props}
  />
);

const Card = ({ className = '', ...props }) => (
  <div className={`rounded-[15px] border bg-card text-card-foreground ${className}`} {...props} />
);

const CardHeader = ({ className = '', ...props }) => (
  <div className={`flex flex-col space-y-1.5 p-6 ${className}`} {...props} />
);

const CardTitle = ({ className = '', ...props }) => (
  <h3 className={`text-lg font-semibold leading-none tracking-tight ${className}`} {...props} />
);

const CardContent = ({ className = '', ...props }) => (
  <div className={`p-6 pt-0 ${className}`} {...props} />
);

const Select = ({ children, value, onValueChange, ...props }: { children: React.ReactNode, value: string, onValueChange?: (value: string) => void, [key: string]: any }) => {
  return (
    <select
      value={value}
      onChange={(e) => onValueChange && onValueChange(e.target.value)}
      className="flex h-10 w-full items-center justify-between rounded-[10px] border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
      {...props}
    >
      {children}
    </select>
  );
};

// Функция для генерации UUID в браузере
function generateUUID() {
  // Fallback для браузера - всегда используем наш генератор
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

export default function App() {

  // Добавляем CSS анимацию для индикатора печати
  React.useEffect(() => {
    const style = document.createElement('style');
    style.textContent = `
      @keyframes typing-bounce {
        0%, 60%, 100% {
          transform: translateY(0) scale(1);
          opacity: 0.3;
        }
        30% {
          transform: translateY(-12px) scale(1.1);
          opacity: 1;
        }
      }
      
      input::placeholder {
        opacity: 1;
        transition: opacity 0.2s ease;
      }
      input:focus::placeholder {
        opacity: 0.3;
      }
    `;
    document.head.appendChild(style);
    
    return () => {
      document.head.removeChild(style);
    };
  }, []);

  // State - БЕЗ localStorage, проверка через Supabase session
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [isLoadingAuth, setIsLoadingAuth] = useState(true); // Флаг загрузки авторизации
  
  const [activeSection, setActiveSection] = useState(() => {
    return localStorage.getItem('currentSection') || 'main';
  });
  
  // Система ролей и переключения для тестирования
  const [debugMode, setDebugMode] = useState(false);
  const [originalUser, setOriginalUser] = useState(null);
  
  // Плашка "Вступить в диалог"
  const [showJoinDialogPlaque, setShowJoinDialogPlaque] = useState(false);
  
  const isOperator = currentUser?.role === 'operator';
  
  const [currentStep, setCurrentStep] = useState('login');
  const [currentSlide, setCurrentSlide] = useState(0);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  
  // Отладочная информация для слайдера
  console.log('Состояние слайдера:', { currentStep, currentSlide });
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [showPasswordField, setShowPasswordField] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [showNotification, setShowNotification] = useState(false);
  const [notificationMessage, setNotificationMessage] = useState('');
  const [systemNotification, setSystemNotification] = useState('');
  const [showSystemNotification, setShowSystemNotification] = useState(false);
  const [showSetupWizard, setShowSetupWizard] = useState(false);
  const [stories, setStories] = useState([]);
  const [showStoriesModal, setShowStoriesModal] = useState(false);
  const dialogChatRef = useRef(null);
  const [editingStory, setEditingStory] = useState(null);
  const [newStoryTitle, setNewStoryTitle] = useState('');
  const [newStoryImage, setNewStoryImage] = useState('');
  const [setupStep, setSetupStep] = useState(1);
  const [setupProgress, setSetupProgress] = useState(0);
  const [completedSteps, setCompletedSteps] = useState([]);
  const [expandedStep, setExpandedStep] = useState(null);
  const [showSetupGuide, setShowSetupGuide] = useState(true);
  const [showValidationMessage, setShowValidationMessage] = useState(false);
  const [showProgressBar, setShowProgressBar] = useState(false);
  const [showIntegrationModal, setShowIntegrationModal] = useState(false);
  const [selectedIntegration, setSelectedIntegration] = useState(null);
  const [showWidgetConstructor, setShowWidgetConstructor] = useState(false);
  const [showWidgetModal, setShowWidgetModal] = useState(false);
  const [showProfileModal, setShowProfileModal] = useState(false);
  const [profileTab, setProfileTab] = useState('personal');
  const [showUserDropdown, setShowUserDropdown] = useState(false);
  const [theme, setTheme] = useState('light');
  const [messageCount, setMessageCount] = useState(500);
  const [paymentPeriod, setPaymentPeriod] = useState('monthly'); // 'monthly' или 'quarterly'
  const [expandedMenus, setExpandedMenus] = useState([]);
  const [teamDropdownOpen, setTeamDropdownOpen] = useState(null);

  // Закрытие выпадающего меню команды при клике вне его
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (teamDropdownOpen && !event.target.closest('.relative')) {
        setTeamDropdownOpen(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [teamDropdownOpen]);

  // 🔐 ПРОВЕРКА СЕССИИ ПРИ ЗАГРУЗКЕ ПРИЛОЖЕНИЯ (БЕЗ localStorage!)
  useEffect(() => {
    const initializeAuth = async () => {
      try {
        console.log('🔄 Проверка сессии Supabase...');
        const { checkSession } = await import('./utils/auth.js');
        const { user, isLoggedIn: loggedIn } = await checkSession();
        
        if (loggedIn && user) {
          console.log('✅ Сессия активна, пользователь:', user);
          setCurrentUser({
            ...user,
            role: user.role || 'user'
          });
          setIsLoggedIn(true);
          setCurrentStep('dashboard');
          setActiveSection('main');
        } else {
          console.log('❌ Нет активной сессии');
          setCurrentUser(null);
          setIsLoggedIn(false);
          setCurrentStep('login');
        }
      } catch (error) {
        console.error('Ошибка инициализации авторизации:', error);
        setCurrentUser(null);
        setIsLoggedIn(false);
        setCurrentStep('login');
      } finally {
        setIsLoadingAuth(false);
      }
    };

    initializeAuth();
  }, []);

  // 🔄 ПОДПИСКА НА ИЗМЕНЕНИЯ СЕССИИ
  useEffect(() => {
    const setupAuthListener = async () => {
      const { onAuthStateChange } = await import('./utils/auth.js');
      const subscription = onAuthStateChange(({ event, user }) => {
        console.log('🔄 Auth state changed:', event, user ? 'User: ' + user.id : 'No user');
        
        if (event === 'SIGNED_IN' && user) {
          // Только обновляем если user данные полные (есть из таблицы users)
          if (user.project_id) {
            console.log('✅ SIGNED_IN with full user data');
            setCurrentUser({
              ...user,
              role: user.role || 'user'
            });
            setIsLoggedIn(true);
            if (!isLoggedIn) {
              setCurrentStep('dashboard');
            }
          } else {
            console.log('⚠️ SIGNED_IN but user data incomplete, waiting for full data...');
          }
        } else if (event === 'SIGNED_OUT') {
          console.log('❌ SIGNED_OUT');
          setCurrentUser(null);
          setIsLoggedIn(false);
          setCurrentStep('login');
        } else if (event === 'USER_UPDATED' && user) {
          console.log('🔄 USER_UPDATED');
          // Обновляем данные пользователя если они пришли
          if (user.project_id && isLoggedIn) {
            setCurrentUser({
              ...user,
              role: user.role || 'user'
            });
          }
        }
      });

      return () => {
        subscription.unsubscribe();
      };
    };

    setupAuthListener();
  }, [isLoggedIn]);

  // Загрузка сторис при входе пользователя
  useEffect(() => {
    if (isLoggedIn && currentUser) {
      loadStories();
    }
  }, [isLoggedIn, currentUser]);

  // Проверка токена приглашения при загрузке
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    const inviter = urlParams.get('inviter');
    
    if (token && inviter) {
      setInviteToken(token);
      setInviterId(inviter);
      setCurrentStep('register-operator');
    }
  }, []);

  // Проверка и исправление ролей при загрузке приложения
  useEffect(() => {
    if (isLoggedIn && currentUser) {
      // Если пользователь не админ, но имеет роль admin - исправляем
      if (currentUser.role === 'admin' && currentUser.email !== 'admin@adapto.ai') {
        console.log('Исправляем роль пользователя с admin на user:', currentUser.email);
        const correctedUser = { ...currentUser, role: 'user' };
        setCurrentUser(correctedUser);
        // БЕЗ localStorage - роль в базе
        showNotificationMessage('Роль пользователя исправлена на "user"');
      }
    }
  }, [isLoggedIn, currentUser]);

  // Функция расчета стоимости тарифа с сообщениями
  const calculatePrice = (tariffName, messages, period = 'monthly') => {
    const tariffs = {
      "Старт": 2490,
      "Про": 5490,
      "Бизнес": 14990
    };
    const costPerDialog = 3;     // себестоимость диалога
    const markup = 3;            // наценка
    const messagesPerDialog = 5;
    
    const basePrice = tariffs[tariffName];      // цена тарифа уже включает 500 сообщений
    if (messages < 500) {
      messages = 500;                           // минимум 500
    }
    const extraMessages = messages - 500;       // сколько сообщений сверху
    const dialogsExtra = extraMessages / messagesPerDialog;
    const extraCost = dialogsExtra * costPerDialog * markup;
    const monthlyPrice = basePrice + extraCost;
    
    // При оплате на 3 месяца применяем скидку 15%
    if (period === 'quarterly') {
      return Math.round(monthlyPrice * 0.85);
    }
    
    return Math.round(monthlyPrice);
  };
  const [activeStatisticsTab, setActiveStatisticsTab] = useState('general');
  const [showMetricInfoModal, setShowMetricInfoModal] = useState(false);
  const [currentMetricInfo, setCurrentMetricInfo] = useState(null);
  const [showHelpModal, setShowHelpModal] = useState(false);
  const [hoveredMetricId, setHoveredMetricId] = useState(null);
  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });
  
  // Состояния для Telegram бота
  const [showTelegramModal, setShowTelegramModal] = useState(false);
  const [telegramBotToken, setTelegramBotToken] = useState('');
  const [isConnectingTelegramBot, setIsConnectingTelegramBot] = useState(false);
  const [telegramBotConnected, setTelegramBotConnected] = useState(false);
  const [telegramBotStats, setTelegramBotStats] = useState(null);
  const [hoveredMenuId, setHoveredMenuId] = useState(null);
  const [hoveredSubId, setHoveredSubId] = useState(null);
  
  // CRM states
  const [crmActiveTab, setCrmActiveTab] = useState('deals');
  const [crmViewMode, setCrmViewMode] = useState('kanban');
  const [crmSortOrder, setCrmSortOrder] = useState('newest');
  const [crmSelectedDeal, setCrmSelectedDeal] = useState(null);
  const [crmSidebarOpen, setCrmSidebarOpen] = useState(false);
  const [editingField, setEditingField] = useState(null);
  const [editedClientData, setEditedClientData] = useState({});
  const [editingLeadQuality, setEditingLeadQuality] = useState(false);
  // Inline editing for dialog client info (safe, controlled inputs)
  const [dialogEditingField, setDialogEditingField] = useState<null | 'name' | 'phone' | 'email' | 'address' | 'company' | 'notes'>(null);
  const [dialogEditingValue, setDialogEditingValue] = useState<string>('');
  
  // Team invite email state
  const [teamInviteEmail, setTeamInviteEmail] = useState('');
  
  // Invite token state for operator registration
  const [inviteToken, setInviteToken] = useState(null);
  const [inviterId, setInviterId] = useState(null);

  const startDialogEdit = (field: 'name' | 'phone' | 'email' | 'address' | 'company' | 'notes', currentValue: string = '') => {
    setDialogEditingField(field);
    setDialogEditingValue(currentValue || '');
  };

  const saveDialogEdit = () => {
    if (!selectedDialog) {
      setDialogEditingField(null);
      setDialogEditingValue('');
      return;
    }
    const value = (dialogEditingValue || '').trim();
    if (!value) {
      setDialogEditingField(null);
      setDialogEditingValue('');
      return;
    }
    if (dialogEditingField === 'phone') {
      const phoneOk = /^\+?[0-9\s()\-]{7,}$/.test(value);
      if (!phoneOk) {
        setDialogEditingField(null);
        setDialogEditingValue('');
        return;
      }
    }
    switch (dialogEditingField) {
      case 'name':
        setSelectedDialog(prev => prev ? { ...prev, name: value } : prev);
        break;
      case 'phone':
        setSelectedDialog(prev => prev ? { ...prev, phone: value } : prev);
        break;
      case 'email':
        setSelectedDialog(prev => prev ? { ...prev, email: value } : prev);
        break;
      case 'address':
        setSelectedDialog(prev => prev ? { ...prev, address: value } : prev);
        break;
      case 'company':
        setSelectedDialog(prev => prev ? { ...prev, company: value } : prev);
        break;
      case 'notes':
        setSelectedDialog(prev => prev ? { ...prev, notes: value } : prev);
        break;
      default:
        break;
    }
    setDialogEditingField(null);
    setDialogEditingValue('');
  };

  const cancelDialogEdit = () => {
    setDialogEditingField(null);
    setDialogEditingValue('');
  };
  const [selectedClient, setSelectedClient] = useState(null);
  const [clientSidebarOpen, setClientSidebarOpen] = useState(false);
  const [createDealModalOpen, setCreateDealModalOpen] = useState(false);
  const [createTaskModalOpen, setCreateTaskModalOpen] = useState(false);
  const [showTaskModal, setShowTaskModal] = useState(false);
  const [newTaskTitle, setNewTaskTitle] = useState('');
  const [newDeal, setNewDeal] = useState({
    title: '',
    stage: 'Новые',
    leadQuality: 'warm',
    amount: '',
    client: {
      name: '',
      email: '',
      phone: '',
      company: '',
      address: ''
    },
    notes: ''
  });
  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    assignee: 'operator-1',
    assigneeName: 'Анна Петрова',
    priority: 'medium',
    dueDate: '',
    dealId: '',
    notes: ''
  });
  const [editingStatus, setEditingStatus] = useState(null);
  const [editingAssignee, setEditingAssignee] = useState(null);
  const [draggedDeal, setDraggedDeal] = useState(null);
  const [dragOverColumn, setDragOverColumn] = useState(null);
  
  // Фильтры CRM
  const [crmLeadQualityFilter, setCrmLeadQualityFilter] = useState([]); // [], ['hot'], ['warm'], ['cold'], ['hot', 'warm'], etc.
  const [crmContactFilter, setCrmContactFilter] = useState('all'); // all, with_contacts, without_contacts
  const [crmOwnerFilter, setCrmOwnerFilter] = useState([]); // [], ['ai'], ['operator-1'], ['operator-2'], ['ai', 'operator-1'], etc.
  
  // Состояние для редактирования заметок
  const [editingNotes, setEditingNotes] = useState(false);
  const [editedNotes, setEditedNotes] = useState('');
  
  // Состояние для редактирования заметок задач
  const [editingTaskNotes, setEditingTaskNotes] = useState(false);
  const [editingTaskDeadline, setEditingTaskDeadline] = useState(false);
  const [editedTaskDeadline, setEditedTaskDeadline] = useState('');
  const [editingTaskDescription, setEditingTaskDescription] = useState(false);
  const [editedTaskDescription, setEditedTaskDescription] = useState('');

  // Функции редактирования полей клиента
  const handleEditField = (field, currentValue) => {
    setEditingField(field);
    setEditedClientData(prev => ({ ...prev, [field]: currentValue }));
  };

  const handleSaveField = (field) => {
    if (crmSelectedDeal) {
      const updatedClient = {
        ...crmSelectedDeal.client,
        [field]: editedClientData[field]
      };
      
      setCrmSelectedDeal(prev => ({
        ...prev,
        client: updatedClient
      }));

      // Обновляем данные в списке сделок
      setDeals(prev => prev.map(deal => 
        deal.id === crmSelectedDeal.id 
          ? { ...deal, client: updatedClient }
          : deal
      ));

      // Синхронизируем данные с диалогом, если есть связь
      if (crmSelectedDeal.dialogId) {
        syncClientData(updatedClient, crmSelectedDeal.dialogId);
      }
    }
    setEditingField(null);
  };

  const handleCancelEdit = () => {
    setEditingField(null);
    setEditedClientData({});
  };

  // Функция сохранения качества лида
  const handleSaveLeadQuality = (newQuality) => {
    if (crmSelectedDeal) {
      setDeals(prev => prev.map(deal => 
        deal.id === crmSelectedDeal.id 
          ? { ...deal, leadQuality: newQuality }
          : deal
      ));
      setCrmSelectedDeal(prev => ({ ...prev, leadQuality: newQuality }));
    }
    setEditingLeadQuality(false);
  };

  // Функция отмены редактирования качества лида
  const handleCancelLeadQualityEdit = () => {
    setEditingLeadQuality(false);
  };

  // Функция открытия деталей клиента
  const openClientDetails = (client) => {
    setSelectedClient(client);
    setClientSidebarOpen(true);
  };

  // Функция удаления сделки
  const handleDeleteDeal = (dealId) => {
    if (window.confirm('Вы уверены, что хотите удалить эту сделку?')) {
      setDeals(prev => prev.filter(deal => deal.id !== dealId));
      if (crmSelectedDeal && crmSelectedDeal.id === dealId) {
        setCrmSidebarOpen(false);
        setCrmSelectedDeal(null);
      }
    }
  };

  // Функция удаления клиента
  const handleDeleteClient = (clientId) => {
    if (window.confirm('Вы уверены, что хотите удалить этого клиента?')) {
      // Здесь можно добавить логику удаления клиента
      console.log('Удаление клиента:', clientId);
      setClientSidebarOpen(false);
      setSelectedClient(null);
    }
  };

  // Функция отправки приглашения участника
  const handleInviteMember = async (email) => {
    try {
      // Генерируем уникальный токен для приглашения
      const inviteToken = crypto.randomBytes(32).toString('hex');
      
      // Создаем приглашение в БД (здесь должен быть API вызов)
      const inviteData = {
        email: email,
        projectId: currentUser?.id, // Используем ID пользователя как projectId
        invitedBy: currentUser?.id,
        role: 'operator',
        inviteToken: inviteToken,
        inviteExpiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 дней
      };

      // TODO: Заменить на реальный API вызов
      console.log('Отправка приглашения:', inviteData);
      
      // Создаем ссылку для регистрации
      const inviteLink = `${window.location.origin}/register?token=${inviteToken}&inviter=${currentUser?.id}`;
      
      // TODO: Отправить email с приглашением
      // await sendInviteEmail(email, inviteLink);
      
      // Показываем уведомление
      setNotificationMessage(`Приглашение отправлено на ${email}`);
      setShowNotification(true);
      
      // Очищаем поле
      setTeamInviteEmail('');
      
      // Скрываем уведомление через 3 секунды
      setTimeout(() => {
        setShowNotification(false);
      }, 3000);
      
    } catch (error) {
      console.error('Ошибка отправки приглашения:', error);
      setNotificationMessage('Ошибка при отправке приглашения');
      setShowNotification(true);
      setTimeout(() => {
        setShowNotification(false);
      }, 3000);
    }
  };

  // Функция создания сделки из диалога
  const createDealFromDialog = async (dialog) => {
    try {
      // Определяем качество лида на основе статуса диалога
      let leadQuality = 'cold';
      if (dialog.status === 'taken' || dialog.status === 'resolved_by_operator') {
        leadQuality = 'hot';
      } else if (dialog.status === 'waiting') {
        leadQuality = 'warm';
      }

      const dealData = {
        title: `Лид из диалога: ${dialog.name || 'Без имени'}`,
        description: `Автоматически создано из диалога. Источник: ${dialog.source}. Статус диалога: ${dialog.status}`,
        amount: 0,
        currency: 'RUB',
        stage: 'Новые',
        probability: 0,
        source: 'chat_dialog',
        priority: 'medium',
        lead_quality: leadQuality,
        has_contacts: !!(dialog.email || dialog.phone),
        is_resolved: false,
        owner_type: dialog.assignedTo ? 'operator' : 'ai',
        owner_name: dialog.assignedTo ? 'Анна Петрова' : 'ИИ-агент',
        client_id: null,
        dialog_id: dialog.id
      };

      if (currentUser) {
        try {
          const createdDeal = await crmAPI.createDeal(currentUser?.id, dealData);
          console.log('✅ Сделка создана в БД:', createdDeal);
          
          // помечаем диалог как добавленный в CRM
          try { 
            await dialogsDB.updateDialog(dialog.id, { is_added_to_crm: true }); 
            console.log('✅ Диалог помечен как добавленный в CRM');
          } catch (e) {
            console.warn('⚠️ Не удалось пометить диалог как добавленный в CRM:', e);
          }
          
          const newDeal = {
            id: createdDeal.id,
            title: dealData.title,
            company: '',
            amount: dealData.amount,
            days: 0,
            stage: dealData.stage,
            leadQuality: dealData.lead_quality,
            hasContacts: dealData.has_contacts,
            owner: dealData.owner_type,
            ownerName: dealData.owner_name,
            isResolved: dealData.is_resolved,
            client: {
              name: dialog.name || '',
              email: dialog.email || '',
              phone: dialog.phone || '',
              company: ''
            },
            notes: dealData.description,
            createdDate: new Date().toISOString().split('T')[0],
            lastContact: new Date().toISOString().split('T')[0],
            dialogId: dialog.id
          };
          
          setDeals(prev => [newDeal, ...prev]);
              // Помечаем диалог как добавленный в CRM
              setDialogsData(prev => prev.map(d => d.id === dialog.id ? { ...d, isAddedToCRM: true } : d));
              setSelectedDialog(prev => prev && prev.id === dialog.id ? { ...prev, isAddedToCRM: true } : prev);
          
          // Показываем уведомление
          setNotificationMessage('Сделка создана из диалога');
          setShowNotification(true);
          setTimeout(() => setShowNotification(false), 3000);
          
          return createdDeal;
        } catch (error) {
          console.error('❌ Ошибка создания сделки в БД:', error);
          
          // Fallback к локальному созданию
          const localDeal = {
            id: `local-${Date.now()}`,
            title: dealData.title,
            company: '',
            amount: dealData.amount,
            days: 0,
            stage: dealData.stage,
            leadQuality: dealData.lead_quality,
            hasContacts: dealData.has_contacts,
            owner: dealData.owner_type,
            ownerName: dealData.owner_name,
            isResolved: dealData.is_resolved,
            client: {
              name: dialog.name || '',
              email: dialog.email || '',
              phone: dialog.phone || '',
              company: ''
            },
            notes: dealData.description,
            createdDate: new Date().toISOString().split('T')[0],
            lastContact: new Date().toISOString().split('T')[0],
            dialogId: dialog.id
          };
          
          console.log('⚠️ Создана локальная сделка:', localDeal);
          
          setDeals(prev => [localDeal, ...prev]);
          
          // Показываем уведомление
          setNotificationMessage('Сделка создана локально (ошибка БД)');
          setShowNotification(true);
          setTimeout(() => setShowNotification(false), 3000);
          
          return localDeal;
        }
      }
    } catch (error) {
      console.error('Error creating deal from dialog:', error);
    }
  };

  // Функция синхронизации данных клиента между CRM и диалогами
  const syncClientData = (clientData, dialogId) => {
    // Обновляем диалог с новыми данными клиента
    setDialogsData(prev => prev.map(dialog => 
      dialog.id === dialogId 
        ? { 
            ...dialog, 
            name: clientData.name,
            email: clientData.email,
            phone: clientData.phone
          }
        : dialog
    ));

    // Обновляем связанные сделки
    setDeals(prev => prev.map(deal => 
      deal.dialogId === dialogId
        ? {
            ...deal,
            client: {
              ...deal.client,
              name: clientData.name,
              email: clientData.email,
              phone: clientData.phone
            }
          }
        : deal
    ));
  };

  // Функция для обновления статистики при изменении диалогов
  const updateDialogStatistics = async (dialogId, action, additionalData = {}) => {
    try {
      if (!currentUser?.id) return;

      // Обновляем локальную статистику
      const dialog = dialogsData.find(d => d.id === dialogId);
      if (!dialog) return;

      let statsUpdate = {};
      
      switch (action) {
        case 'created':
          statsUpdate = {
            dialogsTotal: statisticsAggregates.dialogsTotal + 1,
            messagesTotal: statisticsAggregates.messagesTotal + (dialog.messages?.length || 0)
          };
          break;
          
        case 'taken':
          statsUpdate = {
            handoverTotal: statisticsAggregates.handoverTotal + 1
          };
          break;
          
        case 'resolved':
          statsUpdate = {
            resolvedTotal: statisticsAggregates.resolvedTotal + 1
          };
          break;
          
        case 'converted':
          statsUpdate = {
            convertedTotal: statisticsAggregates.convertedTotal + 1
          };
          break;
          
        case 'message_added':
          statsUpdate = {
            messagesTotal: statisticsAggregates.messagesTotal + 1,
            avgMessagesPerDialog: Math.round(
              (statisticsAggregates.messagesTotal + 1) / Math.max(statisticsAggregates.dialogsTotal, 1)
            )
          };
          break;
      }

      // Обновляем локальное состояние
      setStatisticsAggregates(prev => ({
        ...prev,
        ...statsUpdate
      }));

      // Отправляем обновление в БД (если есть API для статистики)
      try {
        await statsAPI.updateDialogMetrics(currentUser.id, {
          dialogId,
          action,
          timestamp: new Date().toISOString(),
          ...additionalData
        });
      } catch (e) {
        console.warn('Failed to update dialog metrics in DB:', e);
      }

    } catch (error) {
      console.error('Error updating dialog statistics:', error);
    }
  };

  // Функция удаления диалога
  const handleDeleteDialog = (dialogId) => {
    if (window.confirm('Вы уверены, что хотите удалить этот диалог? Это действие нельзя отменить.')) {
      setDialogsData(prev => prev.filter(dialog => dialog.id !== dialogId));
      
      // Если удаляемый диалог сейчас выбран, сбрасываем выбор
      if (selectedDialog && selectedDialog.id === dialogId) {
        setSelectedDialog(null);
      }
      
      // Показываем уведомление об успешном удалении
      setNotificationMessage('Диалог успешно удален');
      setShowNotification(true);
      setTimeout(() => setShowNotification(false), 3000);
    }
  };

  // Функция перезагрузки CRM данных
  const reloadCRMData = async () => {
    if (!currentUser?.id) return;
    
    try {
      console.log('Reloading CRM data for user:', currentUser.id);
      
      // Загружаем клиентов
      const clients = await crmAPI.getClients(currentUser.id);
      console.log('Reloaded clients:', clients);
      
      // Загружаем сделки
      const deals = await crmAPI.getDeals(currentUser.id);
      console.log('Reloaded deals:', deals);
      
      // Загружаем задачи
      const tasks = await crmAPI.getTasks(currentUser.id);
      console.log('Reloaded tasks:', tasks);
      
      // Преобразуем данные в формат, ожидаемый фронтендом
      const formattedDeals = deals.map(deal => ({
        id: deal.id,
        title: deal.title,
        company: deal.crm_clients?.company || '',
        amount: deal.amount || 0,
        days: 0, // Локальное поле для фронтенда
        stage: deal.stage || 'Новые',
        leadQuality: deal.lead_quality || 'medium',
        hasContacts: !!(deal.crm_clients?.email || deal.crm_clients?.phone),
        owner: deal.owner || 'ai',
        ownerName: deal.owner_name || 'ИИ-агент',
        isResolved: deal.is_resolved || false,
        client: {
          name: deal.crm_clients?.name || '',
          email: deal.crm_clients?.email || '',
          phone: deal.crm_clients?.phone || '',
          company: deal.crm_clients?.company || ''
        },
        notes: deal.description || '',
        createdDate: deal.created_at ? deal.created_at.split('T')[0] : new Date().toISOString().split('T')[0],
        lastContact: deal.created_at ? deal.created_at.split('T')[0] : new Date().toISOString().split('T')[0],
        dialogId: deal.dialog_id
      }));
      
      const formattedTasks = tasks.map(task => ({
        id: task.id,
        title: task.title,
        description: task.description || '',
        assignee: task.assignee || 'operator-1',
        assigneeName: task.assignee_name || 'Анна Петрова',
        priority: task.priority || 'medium',
        status: task.status || 'pending',
        dueDate: task.due_date || '',
        dealId: task.deal_id || '',
        notes: task.result || '',
        createdBy: task.created_by || 'ИИ-агент',
        createdDate: task.created_at ? task.created_at.split('T')[0] : new Date().toLocaleDateString('ru-RU')
      }));
      
      // Обновляем состояние
      setDeals(formattedDeals);
      setTasks(formattedTasks);
      setClients(clients);
      
      console.log('CRM data reloaded successfully');
    } catch (error) {
      console.error('Error reloading CRM data:', error);
    }
  };

  // Функция создания сделки
  const handleCreateDeal = async () => {
    try {
      const dealData = {
        title: newDeal.title || `Сделка #${Date.now().toString().slice(-4)}`,
        stage: newDeal.stage,
        lead_quality: newDeal.leadQuality,
        amount: parseFloat(newDeal.amount) || 0,
        days: 0,
        owner: isOperator ? 'operator-1' : 'ai',
        owner_name: isOperator ? 'Анна Петрова' : 'ИИ-агент',
        is_resolved: false,
        description: newDeal.notes,
        client_id: null,
        dialog_id: null
      };
      
      if (currentUser) {
        const createdDeal = await crmAPI.createDeal(currentUser?.id, dealData);
        console.log('Deal created in Supabase:', createdDeal);
        
        // Обновляем локальное состояние
        const newDealObj = {
          id: createdDeal.id,
          title: dealData.title,
          company: newDeal.client.company || '',
          amount: dealData.amount,
          days: dealData.days,
          stage: dealData.stage,
          leadQuality: dealData.lead_quality,
          hasContacts: !!(newDeal.client.email || newDeal.client.phone),
          owner: dealData.owner,
          ownerName: dealData.owner_name,
          isResolved: dealData.is_resolved,
          client: newDeal.client,
          notes: dealData.description,
          createdDate: new Date().toISOString().split('T')[0],
          lastContact: new Date().toISOString().split('T')[0],
          dialogId: dealData.dialog_id || ''
        };
        setDeals(prev => [newDealObj, ...prev]);
      }
      
      // Сброс формы
      setNewDeal({
        title: '',
        stage: 'Новые',
        leadQuality: 'medium',
        amount: '',
        client: { name: '', email: '', phone: '', company: '' },
        notes: '',
        dialogId: null
      });
      setCreateDealModalOpen(false);
      
    } catch (error) {
      console.error('Error creating deal:', error);
      // Fallback к локальному созданию
      const deal = {
        id: `deal-${Date.now()}`,
        title: newDeal.title || `Сделка #${Date.now().toString().slice(-4)}`,
        stage: newDeal.stage,
        leadQuality: newDeal.leadQuality,
        amount: parseFloat(newDeal.amount) || 0,
        days: 0,
        owner: isOperator ? 'operator-1' : 'ai',
        ownerName: isOperator ? 'Анна Петрова' : 'ИИ-агент',
        isResolved: false,
        client: newDeal.client,
        notes: newDeal.notes,
        createdDate: new Date().toISOString().split('T')[0],
        lastContact: new Date().toISOString().split('T')[0],
        dialogId: null
      };
      setDeals(prev => [deal, ...prev]);
      setNewDeal({
        title: '',
        stage: 'Новые',
        leadQuality: 'medium',
        amount: '',
        client: { name: '', email: '', phone: '', company: '' },
        notes: '',
        dialogId: null
      });
      setCreateDealModalOpen(false);
    }
  };

  // Функция создания задачи
  const handleCreateTask = async () => {
    try {
      const taskData = {
        title: newTask.title || `Задача #${Date.now().toString().slice(-4)}`,
        description: newTask.description,
        assignee: newTask.assignee,
        assignee_name: newTask.assigneeName,
        priority: newTask.priority,
        status: 'Новые',
        due_date: newTask.dueDate,
        deal_id: newTask.dealId,
        result: newTask.notes,
        created_by: isOperator ? 'Анна Петрова' : 'ИИ-агент'
      };
      
      if (currentUser) {
        const createdTask = await crmAPI.createTask(currentUser?.id, taskData);
        console.log('Task created in Supabase:', createdTask);
        
        // Обновляем локальное состояние
        const newTaskObj = {
          ...taskData,
          id: createdTask.id,
          assigneeName: taskData.assignee_name,
          dueDate: taskData.due_date,
          dealId: taskData.deal_id,
          notes: taskData.result,
          createdBy: taskData.created_by,
          createdDate: new Date().toLocaleDateString('ru-RU')
        };
        setTasks(prev => [newTaskObj, ...prev]);
      }
      
      // Сброс формы
      setNewTask({
        title: '',
        description: '',
        assignee: 'operator-1',
        assigneeName: 'Анна Петрова',
        priority: 'medium',
        dueDate: '',
        dealId: '',
        notes: ''
      });
      setCreateTaskModalOpen(false);
      
    } catch (error) {
      console.error('Error creating task:', error);
      // Fallback к локальному созданию
      const task = {
        id: `task-${Date.now()}`,
        title: newTask.title || `Задача #${Date.now().toString().slice(-4)}`,
        description: newTask.description,
        assignee: newTask.assignee,
        assigneeName: newTask.assigneeName,
        priority: newTask.priority,
        status: 'Новые',
        dueDate: newTask.dueDate,
        dealId: newTask.dealId,
        notes: newTask.notes,
        createdBy: isOperator ? 'Анна Петрова' : 'ИИ-агент',
        createdDate: new Date().toLocaleDateString('ru-RU')
      };
      setTasks(prev => [task, ...prev]);
      setNewTask({
        title: '',
        description: '',
        assignee: 'operator-1',
        assigneeName: 'Анна Петрова',
        priority: 'medium',
        dueDate: '',
        dealId: '',
        notes: ''
      });
      setCreateTaskModalOpen(false);
    }
  };

  // Функции для смены статусов и ответственных
  const handleStatusChange = (dealId, newStatus) => {
    setDeals(prev => prev.map(deal => 
      deal.id === dealId ? { ...deal, stage: newStatus } : deal
    ));
    setEditingStatus(null);
  };

  const handleAssigneeChange = (dealId, newAssignee) => {
    setDeals(prev => prev.map(deal => 
      deal.id === dealId ? { ...deal, ownerName: newAssignee } : deal
    ));
    setEditingAssignee(null);
  };

  const [editedTaskNotes, setEditedTaskNotes] = useState('');
  
  // Состояния для системы задач
  const [tasks, setTasks] = useState([
    {
      id: 'task-1',
      title: 'Позвонить клиенту Ивану Петрову',
      description: 'Обсудить детали проекта по разработке сайта',
      assignee: 'operator-1',
      assigneeName: 'Анна Петрова',
      priority: 'high',
      status: 'pending',
      dueDate: '2024-01-22T10:00:00Z',
      dealId: 'deal-1',
      notes: 'Клиент заинтересован в мобильной версии',
      createdBy: 'admin',
      createdDate: '2024-01-21T15:30:00Z'
    },
    {
      id: 'task-2',
      title: 'Подготовить коммерческое предложение',
      description: 'Для ООО "ТехноСфера" по разработке корпоративного сайта',
      assignee: 'operator-1',
      assigneeName: 'Анна Петрова',
      priority: 'medium',
      status: 'in_progress',
      dueDate: '2024-01-23T14:00:00Z',
      dealId: 'deal-1',
      notes: 'Включить интеграцию с CRM и мобильную версию',
      createdBy: 'ai',
      createdDate: '2024-01-21T16:00:00Z'
    }
  ]);
  
  const [editingTask, setEditingTask] = useState(null);
  const [selectedTask, setSelectedTask] = useState(null);
  const [taskSidebarOpen, setTaskSidebarOpen] = useState(false);
  
  // Состояния для drag & drop задач
  const [draggedTask, setDraggedTask] = useState(null);
  const [dragOverTaskColumn, setDragOverTaskColumn] = useState(null);
  const [isDragging, setIsDragging] = useState(false);
  
  // Состояния для кастомных дропдаунов CRM
  const [crmDropdowns, setCrmDropdowns] = useState({
    leadQuality: false,
    contact: false,
    owner: false,
    sortOrder: false,
    dealStage: false,
    leadQualityDeal: false
  });
  
  // Состояния для выпадающих списков исполнителей
  const [executorDropdowns, setExecutorDropdowns] = useState({
    deal: false,
    task: false
  });
  
  // Функция для переключения дропдаунов
  const toggleCrmDropdown = (dropdownName) => {
    setCrmDropdowns(prev => {
      // Если открываем новый фильтр, закрываем все остальные
      if (!prev[dropdownName]) {
        return {
          leadQuality: false,
          contact: false,
          owner: false,
          sortOrder: false,
          dealStage: false,
          leadQualityDeal: false,
          [dropdownName]: true
        };
      }
      // Если закрываем текущий фильтр
      return {
      ...prev,
        [dropdownName]: false
      };
    });
  };

  // Функция для переключения выпадающих списков исполнителей
  const toggleExecutorDropdown = (dropdownName) => {
    setExecutorDropdowns(prev => ({
      ...prev,
      [dropdownName]: !prev[dropdownName]
    }));
  };
  
  // Закрытие дропдаунов при клике вне их области
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (!event.target.closest('.crm-dropdown')) {
        setCrmDropdowns({
          leadQuality: false,
          contact: false,
          owner: false,
          sortOrder: false,
          dealStage: false,
          leadQualityDeal: false
        });
      }
      // Закрытие выпадающего списка качества лида
      if (!event.target.closest('.lead-quality-dropdown')) {
        setEditingLeadQuality(false);
      }
      // Закрытие выпадающих списков исполнителей
      if (!event.target.closest('.executor-dropdown')) {
        setExecutorDropdowns({
          deal: false,
          task: false
        });
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);
  
  // Функция для обновления стадии сделки
  const updateDealStage = (dealId, newStage) => {
    setDeals(prevDeals => 
      prevDeals.map(deal => 
        deal.id === dealId 
          ? { ...deal, stage: newStage }
          : deal
      )
    );
  };

  // Функция для сохранения заметок
  const saveNotes = () => {
    if (crmSelectedDeal) {
      setDeals(prevDeals => 
        prevDeals.map(deal => 
          deal.id === crmSelectedDeal.id 
            ? { ...deal, notes: editedNotes }
            : deal
        )
      );
      setCrmSelectedDeal(prev => prev ? { ...prev, notes: editedNotes } : null);
      setEditingNotes(false);
    }
  };

  // Функция для начала редактирования заметок
  const startEditingNotes = () => {
    setEditedNotes(crmSelectedDeal?.notes || '');
    setEditingNotes(true);
  };

  // Функция для отмены редактирования
  const cancelEditingNotes = () => {
    setEditingNotes(false);
    setEditedNotes('');
  };

  // Функции для работы с задачами
  const createTask = (taskData) => {
    const newTask = {
      id: `task-${Date.now()}`,
      ...taskData,
      status: 'pending',
      createdDate: new Date().toISOString(),
      createdBy: 'admin' // В реальном приложении берется из auth
    };
    setTasks(prevTasks => [...prevTasks, newTask]);
    setShowTaskModal(false);
    setNewTaskTitle('');
  };

  const updateTask = (taskId, updates) => {
    setTasks(prevTasks => 
      prevTasks.map(task => 
        task.id === taskId ? { ...task, ...updates } : task
      )
    );
  };

  const deleteTask = (taskId) => {
    setTasks(prevTasks => prevTasks.filter(task => task.id !== taskId));
    setTaskSidebarOpen(false);
    setSelectedTask(null);
  };

  const openTaskDetails = (task) => {
    setSelectedTask(task);
    setTaskSidebarOpen(true);
    setEditedTaskNotes(task.notes || '');
    setEditingTaskNotes(false);
  };
  
  // Функции для редактирования заметок задач
  const startEditingTaskNotes = () => {
    setEditingTaskNotes(true);
    setEditedTaskNotes(selectedTask.notes || '');
  };
  
  const cancelEditingTaskNotes = () => {
    setEditingTaskNotes(false);
    setEditedTaskNotes(selectedTask.notes || '');
  };
  
  const saveTaskNotes = () => {
    if (selectedTask) {
      updateTask(selectedTask.id, { notes: editedTaskNotes });
      setSelectedTask({ ...selectedTask, notes: editedTaskNotes });
      setEditingTaskNotes(false);
    }
  };

  // Функции для редактирования дедлайна задач
  const startEditingTaskDeadline = () => {
    setEditingTaskDeadline(true);
    setEditedTaskDeadline(selectedTask.dueDate || '');
  };
  
  const cancelEditingTaskDeadline = () => {
    setEditingTaskDeadline(false);
    setEditedTaskDeadline(selectedTask.dueDate || '');
  };
  
  const saveTaskDeadline = () => {
    if (selectedTask) {
      updateTask(selectedTask.id, { dueDate: editedTaskDeadline });
      setSelectedTask({ ...selectedTask, dueDate: editedTaskDeadline });
      setEditingTaskDeadline(false);
    }
  };

  // Функции для редактирования описания задач
  const startEditingTaskDescription = () => {
    setEditingTaskDescription(true);
    setEditedTaskDescription(selectedTask.description || '');
  };
  
  const cancelEditingTaskDescription = () => {
    setEditingTaskDescription(false);
    setEditedTaskDescription(selectedTask.description || '');
  };
  
  const saveTaskDescription = () => {
    if (selectedTask) {
      updateTask(selectedTask.id, { description: editedTaskDescription });
      setSelectedTask({ ...selectedTask, description: editedTaskDescription });
      setEditingTaskDescription(false);
    }
  };

  const getTasksByStatus = (status) => {
    return tasks.filter(task => task.status === status);
  };

  // Функции для drag & drop задач
  const handleTaskDragStart = (e, task) => {
    console.log('Drag start:', task);
    setDraggedTask(task);
    setIsDragging(true);
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/plain', task.id);
  };

  const handleTaskDragOver = (e, status) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    setDragOverTaskColumn(status);
    console.log('Drag over column:', status);
  };

  const handleTaskDragLeave = () => {
    setDragOverTaskColumn(null);
  };

  const handleTaskDrop = (e, newStatus) => {
    e.preventDefault();
    console.log('Drop event triggered:', { draggedTask, newStatus });
    
    if (draggedTask && draggedTask.status !== newStatus) {
      console.log(`Перемещение задачи "${draggedTask.title}" из ${draggedTask.status} в ${newStatus}`);
      updateTask(draggedTask.id, { status: newStatus });
    }
    
    setDraggedTask(null);
    setDragOverTaskColumn(null);
    setIsDragging(false);
  };

  const handleTaskDragEnd = () => {
    setDraggedTask(null);
    setDragOverTaskColumn(null);
    setIsDragging(false);
  };

  // Функция для определения качества лида на основе анализа сообщения
  const analyzeLeadQuality = (message, clientInfo) => {
    const text = message.toLowerCase();
    const hasEmail = clientInfo.email && clientInfo.email.trim() !== '';
    const hasPhone = clientInfo.phone && clientInfo.phone.trim() !== '';
    const hasName = clientInfo.name && clientInfo.name.trim() !== '' && clientInfo.name !== 'Аноним';
    
    // Ключевые слова для определения коммерческого намерения
    const hotKeywords = [
      'заказать', 'купить', 'нужен', 'требуется', 'хочу', 'интересно',
      'разработка', 'создание', 'стоимость', 'цена', 'бюджет', 'сроки',
      'коммерческое предложение', 'договор', 'оплата', 'заключить'
    ];
    
    const warmKeywords = [
      'интересно', 'расскажите', 'подробнее', 'информация', 'возможности',
      'услуги', 'что можете', 'как работает', 'примеры работ'
    ];
    
    const coldKeywords = [
      'привет', 'здравствуйте', 'вопрос', 'спасибо', 'понял', 'ясно'
    ];
    
    // Проверяем наличие ключевых слов
    const hasHotKeywords = hotKeywords.some(keyword => text.includes(keyword));
    const hasWarmKeywords = warmKeywords.some(keyword => text.includes(keyword));
    const hasColdKeywords = coldKeywords.some(keyword => text.includes(keyword));
    
    // Логика определения качества
    if (hasHotKeywords && (hasEmail && hasPhone)) {
      return 'hot'; // Горячий - есть коммерческое намерение + полные контакты
    } else if (hasHotKeywords && (hasEmail || hasPhone)) {
      return 'warm'; // Теплый - есть намерение + частичные контакты
    } else if (hasWarmKeywords && (hasEmail || hasPhone)) {
      return 'warm'; // Теплый - есть интерес + контакты
    } else if (hasHotKeywords || hasWarmKeywords) {
      return 'warm'; // Теплый - есть интерес, но нет контактов
    } else {
      return 'cold'; // Холодный - только общие вопросы
    }
  };

  // Функция для фильтрации сделок
  const getFilteredDeals = () => {
    return deals.filter(deal => {
      // Фильтр по качеству лида
      if (crmLeadQualityFilter.length > 0 && !crmLeadQualityFilter.includes(deal.leadQuality)) {
        return false;
      }
      
      // Фильтр по наличию контактов
      if (crmContactFilter === 'with_contacts' && !deal.hasContacts) {
        return false;
      }
      if (crmContactFilter === 'without_contacts' && deal.hasContacts) {
        return false;
      }
      
      // Фильтр по владельцу
      if (crmOwnerFilter.length > 0 && !crmOwnerFilter.includes(deal.owner)) {
        return false;
      }
      
      return true;
    });
  };

  // Состояние для сделок CRM (загружается из БД)
  const [deals, setDeals] = useState([]);
  const [clients, setClients] = useState([]);
  
  // Состояние для попапа клиента
  const [crmClientSidebarOpen, setCrmClientSidebarOpen] = useState(false);
  const [selectedCrmClient, setSelectedCrmClient] = useState(null);
  
  // Состояния для Telegram уведомлений
  const [telegramApiKey, setTelegramApiKey] = useState('');
  const [isConnectingTelegram, setIsConnectingTelegram] = useState(false);
  const [telegramConnected, setTelegramConnected] = useState(false);
  const [telegramSettings, setTelegramSettings] = useState(null);
  const [activeNotificationTab, setActiveNotificationTab] = useState('new_messages');

  // Состояния для личной информации
  const [personalInfo, setPersonalInfo] = useState({
    name: currentUser?.name || '',
    email: currentUser?.email || '',
    company: currentUser?.company_name || '',
    phone: currentUser?.phone || '',
    newPassword: '',
    confirmPassword: ''
  });
  const [originalPersonalInfo, setOriginalPersonalInfo] = useState({
    name: currentUser?.name || '',
    email: currentUser?.email || '',
    company: currentUser?.company_name || '',
    phone: currentUser?.phone || ''
  });
  
  // Состояние для лимитов пользователя
  const [userLimits, setUserLimits] = useState({
    daysRemaining: 7,
    tokensRemaining: 1000,
    tokensUsed: 0,
    totalTokens: 1000,
    tierType: 'free',
    isExpired: false
  });

  // Refs для автоматической прокрутки чата
  const chatHistoryRef = useRef(null);
  const widgetChatRef = useRef(null);

  // Функция для прокрутки к низу чата
  const scrollToBottom = (ref) => {
    if (ref.current) {
      // Используем requestAnimationFrame для более плавной прокрутки
      requestAnimationFrame(() => {
        ref.current.scrollTop = ref.current.scrollHeight;
      });
    }
  };

  // Функция для генерации уникального timestamp
  let lastTimestamp = 0;
  const getUniqueTimestamp = () => {
    const now = Date.now();
    if (now <= lastTimestamp) {
      lastTimestamp += 1;
    } else {
      lastTimestamp = now;
    }
    return lastTimestamp;
  };

  // Прокрутка к низу при загрузке страницы в чат разделах
  useEffect(() => {
    if (activeSection === 'my-adapto' && chatHistoryRef.current) {
      ChatUtils.scrollToBottom(chatHistoryRef, 500);
    } else if (activeSection === 'widget-dev' && widgetChatRef.current) {
      ChatUtils.scrollToBottom(widgetChatRef, 500);
    }
  }, [activeSection]);

  // Загружаем настройки Telegram при входе в раздел уведомлений
  useEffect(() => {
    if ((profileTab === 'notifications' || activeSection === 'notifications') && isLoggedIn && currentUser) {
      loadTelegramSettings();
    }
  }, [profileTab, activeSection, isLoggedIn, currentUser]);

  // Загружаем статус Telegram бота при входе в раздел мессенджеров
  useEffect(() => {
    if (activeSection === 'messengers' && isLoggedIn && currentUser) {
      loadTelegramBotStatus();
    }
  }, [activeSection, isLoggedIn, currentUser]);

  // Загружаем настройки автопереключения при входе в раздел расширений
  useEffect(() => {
    if (activeSection === 'model-extensions' && isLoggedIn) {
      loadAutoswitchSettings();
    }
  }, [activeSection, isLoggedIn]);

  
  // Состояние для проверки доступа
  const [userAccess, setUserAccess] = useState({
    hasAccess: true,
    isExpired: false,
    reason: null
  });
  
  // Состояния для отслеживания несохраненных изменений
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [showUnsavedChangesModal, setShowUnsavedChangesModal] = useState(false);
  const [pendingNavigation, setPendingNavigation] = useState(null);
  
  // Состояния для интеграций
  const [integrations, setIntegrations] = useState([
    { id: 'widget', name: 'Виджет на сайт', description: 'Настройте виджет и вставьте скрипт на сайт', icon: 'group-36.svg', installed: false },
    { id: 'whatsapp', name: 'WhatsApp', description: 'Подключите ИИ-бота к WhatsApp Business', icon: 'group-37.svg', installed: false },
    { id: 'telegram', name: 'Telegram', description: 'Подключите ИИ-бота к Telegram', icon: 'group-38.svg', installed: false },
    { id: 'vk', name: 'Вконтакте', description: 'Установите в своем сообществе ИИ-агента', icon: 'group-39.svg', installed: false },
    { id: 'bitrix', name: 'Битрикс24', description: 'Подключите CRM для передачи лидов', icon: 'group-41.svg', installed: false },
    { id: 'amo', name: 'amoCRM', description: 'Подключите CRM для передачи лидов', icon: 'group-42.svg', installed: false },
    { id: 'instagram', name: 'Instagram*', description: 'Внедрите ИИ-бота прямиком в Директ', icon: 'group-43.svg', installed: false },
    { id: 'yclients', name: 'Yclients', description: 'Интегрируйте Adapto в Yclients', icon: 'group-40.svg', installed: false }
  ]);

  const [showUninstallModal, setShowUninstallModal] = useState(false);
  const [integrationToUninstall, setIntegrationToUninstall] = useState(null);
  
  // Состояния для попапа первого входа
  const [isFirstTimeUser, setIsFirstTimeUser] = useState(false);
  const [showModelSetupProgress, setShowModelSetupProgress] = useState(false);
  const [modelSetupTimer, setModelSetupTimer] = useState(300); // 5 минут = 300 секунд


  // Form data
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    name: '',
    company: '',
    phone: '',
    companyField: ''
  });

  const [formErrors, setFormErrors] = useState({});
  const [validationErrors, setValidationErrors] = useState({});

  // Функция форматирования номера телефона
  const formatPhoneNumber = (value) => {
    const phoneNumbers = value.replace(/\D/g, '');
    if (phoneNumbers.length === 0) return '';
    
    // Если пользователь ввел номер, начинающийся с 7, убираем его и форматируем
    let cleanNumbers = phoneNumbers;
    if (phoneNumbers.startsWith('7') && phoneNumbers.length > 1) {
      cleanNumbers = phoneNumbers.slice(1);
    }
    
    if (cleanNumbers.length <= 3) return `+7 (${cleanNumbers}`;
    if (cleanNumbers.length <= 6) return `+7 (${cleanNumbers.slice(0, 3)}) ${cleanNumbers.slice(3)}`;
    if (cleanNumbers.length <= 8) return `+7 (${cleanNumbers.slice(0, 3)}) ${cleanNumbers.slice(3, 6)}-${cleanNumbers.slice(6)}`;
    return `+7 (${cleanNumbers.slice(0, 3)}) ${cleanNumbers.slice(3, 6)}-${cleanNumbers.slice(6, 8)}-${cleanNumbers.slice(8, 10)}`;
  };

  // Функции для системы операторов
  const handleSwitchRole = (role) => {
    // Проверяем, что пользователь имеет право переключать роли
    if (currentUser?.role !== 'super_admin' && currentUser?.role !== 'admin') {
      showNotificationMessage('У вас нет прав для переключения ролей');
      return;
    }

    if (role === 'operator') {
      // Сохраняем оригинального пользователя
      if (!originalUser) {
        setOriginalUser(currentUser);
      }
      // Переключаемся на оператора
      setCurrentUser({
        ...currentUser,
        role: 'operator'
      });
    } else if (role === 'admin') {
      // Возвращаемся к админу
      if (originalUser) {
        setCurrentUser(originalUser);
        setOriginalUser(null);
      } else {
        setCurrentUser({
          ...currentUser,
          role: 'admin'
        });
      }
    } else if (role === 'user') {
      // Переключаемся на обычного пользователя
      setCurrentUser({
        ...currentUser,
        role: 'user'
      });
    }
  };

  // Функция для вступления в диалог (перехват)
  const handleJoinDialog = async (dialogId) => {
    // Находим диалог для получения информации
    const dialog = dialogsData.find(d => d.id === dialogId);
    
    // Проверяем, не перехвачен ли диалог другим оператором
    if (dialog && dialog.assignedTo && dialog.assignedTo !== currentUser?.id) {
      setNotificationMessage('Диалог уже перехвачен другим оператором');
      setShowNotification(true);
      setTimeout(() => setShowNotification(false), 3000);
      return;
    }
    
    // Перехватываем диалог
    setDialogsData(prev => prev.map(dialog => 
      dialog.id === dialogId 
        ? { 
            ...dialog, 
            status: 'taken', 
            assignedTo: currentUser?.id || 'current_operator',
            canTakeover: false,
            need_handover: false,
            lastMessage: 'Диалог перехвачен оператором',
            interceptedBy: currentUser?.id || 'current_operator',
            interceptedAt: new Date().toISOString()
          }
        : dialog
    ));
    
    setSelectedDialog(prev => 
      prev && prev.id === dialogId 
        ? { 
            ...prev, 
            status: 'taken', 
            assignedTo: currentUser?.id || 'current_operator',
            canTakeover: false,
            need_handover: false,
            interceptedBy: currentUser?.id || 'current_operator',
            interceptedAt: new Date().toISOString()
          }
        : prev
    );
    
    // Показываем уведомление об успешном перехвате
    setNotificationMessage('Диалог успешно перехвачен');
    setShowNotification(true);
    setTimeout(() => setShowNotification(false), 3000);
    
    // Скрываем плашку перехвата
    setShowJoinDialogPlaque(false);
    
    // Интеграция с CRM - создаем сделку при перехвате диалога
    if (dialog && (dialog.email || dialog.phone)) {
      try {
        await createDealFromDialog(dialog);
        console.log('✅ Лид автоматически создан в CRM при перехвате диалога:', dialogId);
      } catch (error) {
        console.warn('⚠️ Не удалось автоматически создать лид в CRM при перехвате:', error);
      }
    }
    
    showNotificationMessage('Диалог перехвачен. Теперь вы можете отвечать клиенту.');
    
    // Синхронизируем с БД
    try {
      dialogsDB.updateDialog(dialogId, {
        status: 'taken',
        assigned_to: currentUser?.id || null,
        need_handover: false,
        last_message_at: new Date().toISOString()
      });
    } catch (e) {
      console.warn('Failed to sync join to DB:', e);
    }

    // Отправляем Telegram уведомление о перехвате диалога
    if (dialog) {
      const message = `🤖 Диалог ID: ${dialogId}\n👤 Клиент: ${dialog.user || 'Неизвестно'}\n📞 ${dialog.phone || dialog.email || 'Нет контактов'}\n⚡ Статус: Перехвачен оператором`;
      sendTelegramNotification(message, 'operator_takeover');
    }
  };

  const handleTakeoverDialog = async (dialogId) => {
    // Находим диалог для получения информации
    const dialog = dialogsData.find(d => d.id === dialogId);
    
    // Проверяем, не перехвачен ли диалог другим оператором
    if (dialog && dialog.assignedTo && dialog.assignedTo !== currentUser?.id) {
      setNotificationMessage('Диалог уже перехвачен другим оператором');
      setShowNotification(true);
      setTimeout(() => setShowNotification(false), 3000);
      return;
    }
    
    // Создаем системное сообщение о перехвате
    const takeoverMessage = {
      id: `takeover_${dialogId}_${Date.now()}`,
      type: 'system',
      sender_role: 'system',
      text: `Диалог перехвачен оператором ${currentUser?.email || 'Оператор'}`,
      time: 'только что',
      timestamp: Date.now(),
      isSystemMessage: true
    };
    
    setDialogsData(prev => prev.map(dialog => 
      dialog.id === dialogId 
        ? { 
            ...dialog, 
            status: 'taken', 
            assignedTo: currentUser?.id || 'current_operator',
            canTakeover: false,
            need_handover: false,
            lastMessage: 'Диалог взят в работу',
            // Добавляем системное сообщение
            messages: [...(dialog.messages || []), takeoverMessage],
            // Устанавливаем флаг оператора
            isOperatorActive: true,
            operatorId: currentUser?.id || 'current_operator'
          }
        : dialog
    ));
    
    setSelectedDialog(prev => 
      prev && prev.id === dialogId 
        ? { 
            ...prev, 
            status: 'taken', 
            assignedTo: currentUser?.id || 'current_operator',
            canTakeover: false,
            need_handover: false,
            // Добавляем системное сообщение
            messages: [...(prev.messages || []), takeoverMessage],
            // Устанавливаем флаг оператора
            isOperatorActive: true,
            operatorId: currentUser?.id || 'current_operator'
          }
        : prev
    );
    
    // Синхронизируем с БД
    try {
      dialogsDB.updateDialog(dialogId, {
        status: 'taken',
        assigned_to: currentUser?.id || null,
        need_handover: false,
        last_message_at: new Date().toISOString()
      });
    } catch (e) {
      console.warn('Failed to sync takeover to DB:', e);
    }

    // Автоматически создаем лид в CRM при перехвате диалога оператором
    if (dialog && (dialog.email || dialog.phone)) {
      try {
        await createDealFromDialog(dialog);
        console.log('✅ Лид автоматически создан в CRM при перехвате диалога:', dialogId);
      } catch (error) {
        console.warn('⚠️ Не удалось автоматически создать лид в CRM при перехвате:', error);
      }
    }

    // Обновляем статистику
    await updateDialogStatistics(dialogId, 'taken', {
      operatorId: currentUser?.id,
      channel: dialog?.channel || dialog?.source
    });

    // Отправляем Telegram уведомление о перехвате диалога
    if (dialog) {
      const message = `🤖 Диалог ID: ${dialogId}\n👤 Клиент: ${dialog.user || 'Неизвестно'}\n📞 ${dialog.phone || dialog.email || 'Нет контактов'}\n⚡ Статус: Перехвачен оператором`;
      sendTelegramNotification(message, 'operator_takeover');
    }
  };

  // Функция для создания тестового диалога
  const createTestDialog = async (source, firstMessage, needHandover = false) => {
    // Определяем источник диалога
    const dialogSource = source.includes('Виджет') ? 'widget' : source.includes('Тестирование') ? 'admin' : source;
    
    // Проверяем, есть ли уже активный тестовый диалог от админа в локальном состоянии
    let existingDialog = dialogsData.find(d => 
      d.isTest && 
      d.source === dialogSource && 
      d.owner === 'admin' && 
      (d.status === 'active' || d.status === 'waiting')
    );
    
    // Если не нашли в локальном состоянии, проверяем БД
    if (!existingDialog && currentUser?.id) {
      try {
        const dbDialogs = await dialogsDB.getDialogsByUser(currentUser.id);
        existingDialog = dbDialogs.find(d => 
          d.isTest && 
          d.source === dialogSource && 
          d.owner === 'admin' && 
          (d.status === 'active' || d.status === 'waiting')
        );
        
        // Если нашли в БД, добавляем в локальное состояние
        if (existingDialog && !dialogsData.find(d => d.id === existingDialog.id)) {
          setDialogsData(prev => [existingDialog, ...prev]);
        }
      } catch (error) {
        console.warn('Failed to check existing dialogs in DB:', error);
      }
    }
    
    if (existingDialog) {
      // Обновляем существующий диалог
      const existingMessages = existingDialog.messages || [];
      
      // Проверяем, не дублируется ли сообщение (проверка по тексту и времени последнего сообщения)
      const isDuplicate = existingMessages.some(msg => 
        msg.text === firstMessage && 
        msg.isUser === true &&
        (Date.now() - (msg.id || 0) < 5000) // Менее 5 секунд назад
      );
      
      const updatedDialog = {
        ...existingDialog,
        lastMessage: firstMessage,
        time: 'Только что',
        lastContact: new Date().toISOString(),
        need_handover: needHandover || existingDialog.need_handover,
        status: needHandover ? 'waiting' : existingDialog.status,
        priority: needHandover ? 'high' : existingDialog.priority,
        messages: isDuplicate ? existingMessages : [
          ...existingMessages,
          {
            id: Date.now(),
            text: firstMessage,
            isUser: true,
            time: 'Только что'
          }
        ],
        messageCount: isDuplicate ? existingDialog.messageCount : (existingDialog.messageCount || 0) + 1
      };
      
      // Обновляем диалог в списке
      setDialogsData(prev => prev.map(dialog => 
        dialog.id === existingDialog.id ? updatedDialog : dialog
      ));
      
      // Обновляем выбранный диалог если он тот же
      setSelectedDialog(prev => 
        prev && prev.id === existingDialog.id ? updatedDialog : prev
      );
      
      // Сохраняем сообщение в БД только если оно не дубликат
      if (!isDuplicate) {
        try {
          await chatHistoryAPI.saveMessage(currentUser.id, 'user', firstMessage, 'widget');
        } catch (e) {
          console.warn('Failed to save message to DB:', e);
        }
      }
      
      console.log('Существующий тестовый диалог обновлен:', existingDialog.id);
      return updatedDialog;
    }
    
    // Создаем новый диалог только если нет существующего
    const dialogId = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c == 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
    const testDialog = {
      id: dialogId,
      client: {
        name: 'Тестовый пользователь',
        email: null,
        phone: null,
        company: 'Тестовая компания'
      },
      title: `Тест: "${firstMessage.substring(0, 30)}${firstMessage.length > 30 ? '...' : ''}"`,
      stage: 'Новый',
      leadQuality: 'Горячий',
      amount: 0,
      days: 0,
      hasContacts: true,
      owner: 'admin',
      ownerName: 'Администратор',
      isResolved: false,
      notes: `Тестовый диалог из раздела "${source}". Первое сообщение: "${firstMessage}"`,
      createdDate: new Date().toISOString(),
      lastContact: new Date().toISOString(),
      dialogId: dialogId,
      status: needHandover ? 'waiting' : 'active',
      assignedTo: null,
      canTakeover: true,
      need_handover: needHandover,
      priority: needHandover ? 'high' : 'low',
      isTest: true, // Флаг для тестового диалога
      lastMessage: firstMessage,
      // Добавляем поля для корректного отображения
      user: 'Тестовый пользователь',
      email: null, // Для тестовых диалогов email не указываем
      phone: null, // Для тестовых диалогов телефон не указываем
      source: source.includes('Виджет') ? 'widget' : source.includes('Тестирование') ? 'admin' : source,
      time: 'Только что',
      // Добавляем массив сообщений с реальным сообщением
      messages: [
        {
          id: 1,
          text: firstMessage,
          isUser: true,
          time: 'Только что'
        }
      ],
      // Добавляем поля для загрузки сообщений из БД
      messageCount: 1
    };
    
    try {
      // Сохраняем диалог в базу данных
      if (currentUser?.id) {
        const saved = await dialogsDB.createTestDialog(currentUser.id, testDialog);
        if (saved && saved.id) {
          // Обновляем локальный id под фактический id из БД (например, UUID)
          testDialog.id = saved.id;
          testDialog.dialogId = saved.id;
          
          // Сохраняем сообщение в БД
          try {
            await chatHistoryAPI.saveMessage(currentUser.id, 'user', firstMessage, 'widget');
          } catch (e) {
            console.warn('Failed to save message to DB:', e);
          }
        }
      }
      console.log('Новый тестовый диалог создан:', dialogId);
    } catch (error) {
      console.error('Ошибка при сохранении тестового диалога:', error);
    }
    
    // Добавляем диалог в список
    setDialogsData(prev => [testDialog, ...prev]);
    // Если сейчас открыт раздел диалогов, показываем "Все" чтобы не скрывать тестовый диалог
    setActiveChatTab('all');
    
    // Автоматически создаем лид в CRM если есть контактные данные
    if (testDialog.email || testDialog.phone) {
      try {
        await createDealFromDialog(testDialog);
        console.log('✅ Лид автоматически создан в CRM для диалога:', testDialog.id);
      } catch (error) {
        console.warn('⚠️ Не удалось автоматически создать лид в CRM:', error);
      }
    }

    // Обновляем статистику
    await updateDialogStatistics(testDialog.id, 'created', {
      source: testDialog.source,
      needHandover: needHandover
    });
    
    return testDialog;
  };

  const handleReleaseDialog = (dialogId) => {
    setDialogsData(prev => prev.map(dialog => 
      dialog.id === dialogId 
        ? { 
            ...dialog, 
            status: 'waiting', 
            assignedTo: null,
            canTakeover: true 
          }
        : dialog
    ));
    // Синхронизируем с БД
    try {
      dialogsDB.updateDialog(dialogId, {
        status: 'waiting',
        assigned_to: null,
        need_handover: false
      });
    } catch (e) {
      console.warn('Failed to sync release to DB:', e);
    }
  };

  const handleCloseDialog = async (dialogId) => {
    setDialogsData(prev => prev.map(dialog => 
      dialog.id === dialogId 
        ? { 
            ...dialog, 
            status: 'resolved', 
            assignedTo: dialog.assignedTo,
            canTakeover: false,
            priority: null
          }
        : dialog
    ));
    
    // Интеграция с CRM - обновляем сделку при закрытии диалога
    try {
      await crmAPI.updateDealFromDialog(dialogId, 'closed', 'Диалог закрыт оператором');
      console.log('CRM: Сделка обновлена при закрытии диалога');
    } catch (error) {
      console.error('Ошибка обновления сделки при закрытии диалога:', error);
    }
    
    // Синхронизируем с БД
    try {
      dialogsDB.updateDialog(dialogId, {
        status: 'resolved_by_operator',
        need_handover: false
      });
    } catch (e) {
      console.warn('Failed to sync close to DB:', e);
    }
  };

  const handleConfirmCloseDialog = () => {
    if (dialogToClose) {
      handleCloseDialog(dialogToClose);
      setShowCloseDialogPopup(false);
      setDialogToClose(null);
    }
  };

  const handleConfirmDeleteDialog = () => {
    if (dialogToDelete) {
      // Удаляем диалог из интерфейса
      setDialogsData(prev => prev.filter(dialog => dialog.id !== dialogToDelete));
      
      // Если удаляемый диалог сейчас выбран, сбрасываем выбор
      if (selectedDialog && selectedDialog.id === dialogToDelete) {
        setSelectedDialog(null);
      }
      
      // Синхронизируем с БД - удаляем диалог
      try {
        dialogsDB.deleteDialog(dialogToDelete);
      } catch (e) {
        console.warn('Failed to sync delete to DB:', e);
      }
      
      setShowDeleteDialogPopup(false);
      setDialogToDelete(null);
    }
  };

  // Функция группировки диалогов по каналам
  const groupDialogsByChannel = (dialogs) => {
    const grouped = {
      widget: [],
      telegram: [],
      whatsapp: [],
      vk: [],
      instagram: [],
      admin: [],
      other: []
    };

    dialogs.forEach(dialog => {
      const channel = dialog.channel || dialog.source || 'other';
      if (grouped[channel]) {
        grouped[channel].push(dialog);
      } else {
        grouped.other.push(dialog);
      }
    });

    // Сортируем каждый канал по времени последнего сообщения
    Object.keys(grouped).forEach(channel => {
      grouped[channel].sort((a, b) => {
        const timeA = new Date(a.last_message_at || a.created_at || 0).getTime();
        const timeB = new Date(b.last_message_at || b.created_at || 0).getTime();
        return timeB - timeA; // Новые сверху
      });
    });

    return grouped;
  };

  // Функция для получения уникальных диалогов (убираем дубликаты)
  const getUniqueDialogs = (dialogs) => {
    const uniqueMap = new Map();
    
    dialogs.forEach(dialog => {
      const key = dialog.uniqueKey || `${dialog.channel}_${dialog.user_id}_${dialog.id}`;
      
      if (!uniqueMap.has(key)) {
        uniqueMap.set(key, dialog);
      } else {
        // Если диалог уже есть, берем более новый
        const existing = uniqueMap.get(key);
        const existingTime = new Date(existing.last_message_at || existing.created_at || 0).getTime();
        const currentTime = new Date(dialog.last_message_at || dialog.created_at || 0).getTime();
        
        if (currentTime > existingTime) {
          uniqueMap.set(key, dialog);
        }
      }
    });
    
    return Array.from(uniqueMap.values());
  };

  // Функция для фильтрации диалогов по статусу и каналу
  // Дебаунсированный поиск для диалогов
  const debouncedSearch = ChatUtils.debounce((query) => {
    setSearchQuery(query);
  }, 300);

  // Функция для фильтрации диалогов (мемоизированная)
  const getFilteredDialogs = ChatUtils.memoize(() => {
    let filtered = dialogsData;

    // Фильтрация по статусу
    if (activeChatTab === 'active') {
      if (isOperator) {
        // Для оператора "Мои" - только перехваченные диалоги
        filtered = filtered.filter(dialog => 
          dialog.status === 'taken' && dialog.assignedTo === (currentUser?.id || 'current_operator')
        );
      } else {
        // Для админа "Активные" - активные и ожидающие
        filtered = filtered.filter(dialog => 
          dialog.status === 'active' || dialog.status === 'waiting'
        );
      }
    } else if (activeChatTab === 'closed') {
      filtered = filtered.filter(dialog => 
        dialog.status === 'closed' || dialog.status === 'resolved' || dialog.status === 'resolved_by_operator'
      );
    }

    // Фильтрация по каналу
    if (activeChannelFilter !== 'all') {
      filtered = filtered.filter(dialog => 
        (dialog.channel || dialog.source) === activeChannelFilter
      );
    }

    // Поиск по содержимому
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase().trim();
      filtered = filtered.filter(dialog => {
        // Поиск по имени пользователя
        if (dialog.user && dialog.user.toLowerCase().includes(query)) {
          return true;
        }
        // Поиск по email
        if (dialog.email && dialog.email.toLowerCase().includes(query)) {
          return true;
        }
        // Поиск по последнему сообщению
        if (dialog.lastMessage && dialog.lastMessage.toLowerCase().includes(query)) {
          return true;
        }
        // Поиск по содержимому сообщений
        if (dialog.messages && dialog.messages.some(message => 
          message.text && message.text.toLowerCase().includes(query)
        )) {
          return true;
        }
        return false;
      });
    }

    return filtered;
  });

  // Мемоизированные функции для отображения сообщений
  const getMessageAlignment = ChatUtils.memoize((message) => {
    if (MessageUtils.isUserMessage(message) || MessageUtils.isOperatorMessage(message)) {
      return 'flex justify-end';
    }
    return 'flex justify-start'; // AI и system слева
  });

  const getMessageOrder = ChatUtils.memoize((message) => {
    if (MessageUtils.isUserMessage(message) || MessageUtils.isOperatorMessage(message)) {
      return 'order-2';
    }
    return 'order-1';
  });

  const getMessageStyle = ChatUtils.memoize((message) => {
    if (MessageUtils.isUserMessage(message)) {
      return 'bg-blue-600 text-white rounded-[20px] rounded-br-[4px]';
    }
    if (MessageUtils.isOperatorMessage(message)) {
      return 'bg-green-600 text-white rounded-[20px] rounded-br-[4px]';
    }
    if (MessageUtils.isSystemMessage(message)) {
      return 'bg-gray-400 text-white rounded-[20px] rounded-bl-[4px]';
    }
    if (MessageUtils.isAssistantMessage(message)) {
      return 'bg-[#EFEFEF] text-[#070F1A] rounded-[20px] rounded-bl-[4px]';
    }
    return 'bg-[#EFEFEF] text-[#070F1A] rounded-[20px] rounded-bl-[4px]';
  });

  const getMessageFooter = ChatUtils.memoize((message) => {
    if (MessageUtils.isAssistantMessage(message)) {
      return (
        <div className="mt-[5px] ml-11">
          <p className="text-[9px] text-[#8E8E93]">
            {aiAgentName} • {message.time || 'Только что'}
          </p>
        </div>
      );
    }
    if (MessageUtils.isOperatorMessage(message)) {
      return (
        <div className="mt-[5px] mr-11 text-right">
          <p className="text-[9px] text-[#8E8E93]">
            {MessageUtils.getSenderName(message)} • {message.time || 'Только что'}
          </p>
        </div>
      );
    }
    if (MessageUtils.isSystemMessage(message)) {
      return (
        <div className="mt-[5px] ml-11">
          <p className="text-[9px] text-[#8E8E93]">
            Система • {message.time || 'Только что'}
          </p>
        </div>
      );
    }
    return null;
  });

  // Функция для отправки сообщений от оператора в диалогах
  const handleSendDialogMessage = async () => {
    if (!currentUser?.id || !selectedDialog?.id) return;
    
    // Валидация сообщения
    const validation = validateMessage(messageText);
    if (!validation.isValid) {
      showNotificationMessage(`❌ Ошибка валидации: ${validation.errors.join(', ')}`);
      return;
    }
    
    // Проверка rate limit
    const rateLimit = checkRateLimit(currentUser.id);
    if (!rateLimit.allowed) {
      const resetTime = new Date(rateLimit.resetTime).toLocaleTimeString();
      showNotificationMessage(`❌ Слишком много сообщений. Попробуйте снова в ${resetTime}`);
      return;
    }
    
    // Санитизация сообщения
    const sanitizedMessage = sanitizeMessage(validation.sanitizedMessage);
    
    try {
      // Создаем сообщение от оператора
      const operatorMessage = createUnifiedMessage({
        id: `operator_${Date.now()}_${Math.random()}`,
        text: sanitizedMessage,
        type: 'operator',
        sender_role: 'operator',
        isUser: false,
        sender: 'operator',
        time: 'Только что',
        timestamp: getUniqueTimestamp(),
        operatorId: currentUser?.id || 'current_operator',
        operatorName: currentUser?.email || 'Оператор'
      });
      
      // Обновляем локальные сообщения диалога
      setSelectedDialog(prev => prev ? {
        ...prev,
        messages: [...(prev.messages || []), operatorMessage],
        lastMessage: messageText,
        time: 'Только что'
      } : prev);
      
      // Обновляем диалог в списке
      setDialogsData(prev => prev.map(dialog => 
        dialog.id === selectedDialog.id 
          ? { 
              ...dialog, 
              messages: [...(dialog.messages || []), operatorMessage],
              lastMessage: messageText,
              time: 'Только что'
            }
          : dialog
      ));
      
      // Сохраняем сообщение в базу данных как сообщение оператора
      await chatHistoryAPI.saveMessage(currentUser.id, 'operator', messageText, 'dialog');
      
      // Очищаем поле ввода
      setMessageText('');
      
      // Обновляем статистику
      await updateDialogStatistics(selectedDialog.id, 'message_added', {
        senderType: 'operator',
        messageLength: messageText.length
      });
      
      showNotificationMessage('Сообщение отправлено');
      
    } catch (error) {
      console.error('Error sending dialog message:', error);
      showNotificationMessage('Ошибка при отправке сообщения');
    }
  };

  // Функции для работы с Telegram ботом
  const handleConnectTelegramBot = async () => {
    if (!telegramBotToken.trim()) {
      setNotificationMessage('Введите API токен бота');
      setShowNotification(true);
      setTimeout(() => setShowNotification(false), 3000);
      return;
    }

    if (!currentUser?.id) {
      setNotificationMessage('Ошибка аутентификации');
      setShowNotification(true);
      setTimeout(() => setShowNotification(false), 3000);
      return;
    }

    setIsConnectingTelegramBot(true);
    
    try {
      const response = await fetch(`${API_CONFIG.BASE_URL}/api/messenger/telegram/connect`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          botToken: telegramBotToken,
          userId: currentUser.id
        })
      });

      const data = await response.json();

      if (data.success) {
        setTelegramBotConnected(true);
        setShowTelegramModal(false);
        setNotificationMessage('Telegram бот успешно подключен!');
        setShowNotification(true);
        setTimeout(() => setShowNotification(false), 3000);
        
        // Загружаем статистику бота
        await loadTelegramBotStatus();
      } else {
        setNotificationMessage(data.error || 'Ошибка подключения бота');
        setShowNotification(true);
        setTimeout(() => setShowNotification(false), 3000);
      }
    } catch (error) {
      console.error('Ошибка подключения Telegram бота:', error);
      setNotificationMessage('Ошибка подключения бота');
      setShowNotification(true);
      setTimeout(() => setShowNotification(false), 3000);
    } finally {
      setIsConnectingTelegramBot(false);
    }
  };

  // Загрузка статуса Telegram бота
  const loadTelegramBotStatus = async () => {
    if (!currentUser?.id) return;

    try {
      const response = await fetch(`${API_CONFIG.BASE_URL}/api/messenger/telegram/status?userId=${currentUser.id}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (response.ok) {
        const data = await response.json();
        setTelegramBotConnected(data.connected);
        setTelegramBotStats(data.stats);
      }
    } catch (error) {
      console.error('Error loading Telegram bot status:', error);
    }
  };

  // Функция загрузки сторис
  const loadStories = async () => {
    try {
      const storiesData = await getStories();
      setStories(storiesData);
    } catch (error) {
      console.error('Ошибка при загрузке сторис:', error);
      // В случае ошибки используем дефолтные сторис
      setStories([
        {
          id: '1',
          title: 'Возможности Adapto',
          image_url: '/Frame 137.png',
          order_index: 1
        },
        {
          id: '2', 
          title: 'Обзор платформы',
          image_url: '/Frame 137-1.png',
          order_index: 2
        },
        {
          id: '3',
          title: 'История Adapto', 
          image_url: '/Frame 137-2.png',
          order_index: 3
        },
        {
          id: '4',
          title: 'Техническая поддержка',
          image_url: '/Frame 137-3.png', 
          order_index: 4
        },
        {
          id: '5',
          title: 'Наш тг-канал',
          image_url: '/Frame 137-4.png',
          order_index: 5
        }
      ]);
    }
  };

  // Функции для управления сторис
  const handleAddStory = async () => {
    if (!newStoryTitle.trim() || !newStoryImage.trim()) {
      showNotificationMessage('Заполните все поля');
      return;
    }

    try {
      const newStory = {
        title: newStoryTitle,
        image_url: newStoryImage,
        order_index: stories.length + 1,
        is_active: true
      };

      await addStory(newStory);
      await loadStories();
      setNewStoryTitle('');
      setNewStoryImage('');
      setShowStoriesModal(false);
      showNotificationMessage('Сторис добавлена успешно');
    } catch (error) {
      console.error('Ошибка при добавлении сторис:', error);
      showNotificationMessage('Ошибка при добавлении сторис');
    }
  };

  const handleEditStory = async (storyId, updates) => {
    try {
      await updateStory(storyId, updates);
      await loadStories();
      setEditingStory(null);
      showNotificationMessage('Сторис обновлена успешно');
    } catch (error) {
      console.error('Ошибка при обновлении сторис:', error);
      showNotificationMessage('Ошибка при обновлении сторис');
    }
  };

  const handleDeleteStory = async (storyId) => {
    if (!confirm('Вы уверены, что хотите удалить эту сторис?')) {
      return;
    }

    try {
      await deleteStory(storyId);
      await loadStories();
      showNotificationMessage('Сторис удалена успешно');
    } catch (error) {
      console.error('Ошибка при удалении сторис:', error);
      showNotificationMessage('Ошибка при удалении сторис');
    }
  };

  // Функции для работы с Telegram уведомлениями
  const handleConnectTelegram = async () => {
    if (!telegramApiKey.trim()) {
      setNotificationMessage('Введите API ключ');
      setShowNotification(true);
      setTimeout(() => setShowNotification(false), 3000);
      return;
    }

    if (!currentUser?.id) {
      console.log('❌ Нет currentUser.id:', currentUser);
      setNotificationMessage('Ошибка аутентификации');
      setShowNotification(true);
      setTimeout(() => setShowNotification(false), 3000);
      return;
    }

    console.log('🔗 Подключаем Telegram с userId:', currentUser.id);

    setIsConnectingTelegram(true);
    
    try {
      const response = await fetch('${API_CONFIG.BASE_URL}/api/telegram/connect', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          apiKey: telegramApiKey,
          userId: currentUser?.id
        })
      });

      const data = await response.json();

      if (data.success) {
        setTelegramConnected(true);
        // Сначала загружаем настройки
        await loadTelegramSettings();
        
        // Автоматически связываем user_id с chat_id
        try {
          const linkResponse = await fetch('${API_CONFIG.BASE_URL}/api/telegram/link-user', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              chatId: telegramSettings?.chat_id || '466811672', // Fallback на известный chat_id
              userId: currentUser?.id
            })
          });
          
          if (linkResponse.ok) {
            console.log('✅ User ID связан с Chat ID');
            // Перезагружаем настройки после связывания
            await loadTelegramSettings();
          }
        } catch (error) {
          console.error('Ошибка связывания user_id с chat_id:', error);
        }
        
        setNotificationMessage('Telegram бот успешно подключен!');
        setShowNotification(true);
        setTimeout(() => setShowNotification(false), 3000);
        
        // Отправляем уведомление в Telegram о успешном подключении
        const welcomeMessage = `🎉 Telegram бот успешно подключен!\n\n✅ Настройки сохранены\n📱 Уведомления активированы\n🔔 Типы уведомлений: новые сообщения, перехваты оператором, критические уведомления, ежедневные отчеты\n\nСистема готова к работе!`;
        await sendTelegramNotification(welcomeMessage, 'system_alerts');
      } else {
        setNotificationMessage(data.error || 'Ошибка подключения');
        setShowNotification(true);
        setTimeout(() => setShowNotification(false), 3000);
      }
    } catch (error) {
      console.error('Ошибка подключения Telegram:', error);
      setNotificationMessage('Ошибка подключения к серверу');
      setShowNotification(true);
      setTimeout(() => setShowNotification(false), 3000);
    } finally {
      setIsConnectingTelegram(false);
    }
  };

  const loadTelegramSettings = async () => {
    try {
      const response = await fetch(`${API_CONFIG.BASE_URL}/api/telegram/settings?userId=${currentUser?.id}`);
      const data = await response.json();
      
      if (data.success && data.settings) {
        setTelegramSettings(data.settings);
        setTelegramConnected(true);
      }
    } catch (error) {
      console.error('Ошибка загрузки настроек Telegram:', error);
    }
  };

  const updateNotificationSettings = async (enabled, notificationTypes) => {
    try {
      const response = await fetch('${API_CONFIG.BASE_URL}/api/telegram/settings', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: currentUser?.id,
          enabled,
          notificationTypes
        })
      });

      const data = await response.json();
      
      if (data.success) {
        setTelegramSettings(data.settings);
        setNotificationMessage('Настройки обновлены');
        setShowNotification(true);
        setTimeout(() => setShowNotification(false), 3000);
      }
    } catch (error) {
      console.error('Ошибка обновления настроек:', error);
    }
  };

  const toggleNotificationType = async (type) => {
    console.log('Toggle notification type:', type, 'Current settings:', telegramSettings);
    
    if (!telegramSettings) {
      console.log('No telegram settings found, creating default');
      // Если настроек нет, создаем базовые
      const defaultTypes = ['new_messages', 'operator_takeover', 'system_alerts', 'daily_reports'];
      const newTypes = defaultTypes.includes(type)
        ? defaultTypes.filter(t => t !== type)
        : [...defaultTypes, type];
      
      await updateNotificationSettings(true, newTypes);
      return;
    }

    const currentTypes = telegramSettings.notification_types || [];
    const newTypes = currentTypes.includes(type)
      ? currentTypes.filter(t => t !== type)
      : [...currentTypes, type];

    await updateNotificationSettings(telegramSettings.enabled, newTypes);
  };

  // Функция для отправки Telegram уведомлений
  const sendTelegramNotification = async (message, type = 'operator_takeover') => {
    try {
      console.log('📤 Отправляем Telegram уведомление:', { 
        userId: currentUser?.id, 
        type, 
        message: message.substring(0, 50) + '...',
        telegramSettings: telegramSettings
      });

      // Если настройки не загружены, пытаемся загрузить их
      if (!telegramSettings || !telegramSettings.chat_id) {
        console.log('🔄 Перезагружаем настройки Telegram...');
        await loadTelegramSettings();
      }

      const response = await fetch('${API_CONFIG.BASE_URL}/api/telegram/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: currentUser?.id,
          message: message,
          type: type
        })
      });

      const responseData = await response.json();
      
      if (!response.ok) {
        console.error('❌ Ошибка отправки Telegram уведомления:', responseData);
        setNotificationMessage(`Ошибка Telegram: ${responseData.error || response.statusText}`);
        setShowNotification(true);
        setTimeout(() => setShowNotification(false), 5000);
      } else {
        console.log('✅ Telegram уведомление отправлено:', responseData);
      }
    } catch (error) {
      console.error('❌ Ошибка отправки Telegram уведомления:', error);
      setNotificationMessage(`Ошибка Telegram: ${error.message}`);
      setShowNotification(true);
      setTimeout(() => setShowNotification(false), 5000);
    }
  };

  // Функция для генерации ежедневного отчета
  const generateDailyReport = () => {
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    const yesterdayStr = yesterday.toLocaleDateString('ru-RU');
    
    // Подсчитываем статистику за вчера
    const totalDialogs = dialogsData.length;
    const newToday = dialogsData.filter(dialog => {
      const dialogDate = new Date(dialog.createdDate);
      return dialogDate.toDateString() === yesterday.toDateString();
    }).length;
    
    const resolved = dialogsData.filter(dialog => dialog.isResolved).length;
    const waiting = dialogsData.filter(dialog => dialog.status === 'waiting').length;
    
    // Подсчитываем сообщения (примерные данные)
    const totalMessages = chatMessages.length;
    const successfulResponses = Math.round(totalMessages * 0.93); // 93% успешных
    const handedToOperator = dialogsData.filter(dialog => dialog.need_handover).length;
    
    // Примерные метрики активности
    const uniqueVisitors = Math.round(newToday * 3); // примерная оценка
    const conversionRate = Math.round((resolved / Math.max(newToday, 1)) * 100);
    const avgResponseTime = "2.3 сек";

    const report = `📊 ЕЖЕДНЕВНЫЙ ОТЧЕТ - ${yesterdayStr}

💬 ДИАЛОГИ:
• Всего диалогов: ${totalDialogs}
• Новых вчера: ${newToday}
• Решено вопросов: ${resolved}
• Требуют внимания: ${waiting}

🤖 ИИ:
• Обработано сообщений: ${totalMessages}
• Успешных ответов: ${successfulResponses} (93%)
• Передано оператору: ${handedToOperator}

📈 АКТИВНОСТЬ:
• Уникальных посетителей: ${uniqueVisitors}
• Конверсия в лиды: ${conversionRate}%
• Среднее время ответа: ${avgResponseTime}`;

    return report;
  };

  // Функция для отправки ежедневного отчета
  const sendDailyReport = async () => {
    try {
      const response = await fetch('${API_CONFIG.BASE_URL}/api/telegram/daily-report', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId: currentUser?.id
        })
      });

      if (response.ok) {
        showNotificationMessage('Ежедневный отчет отправлен в Telegram');
      } else {
        showNotificationMessage('Ошибка отправки отчета');
      }
    } catch (error) {
      console.error('Ошибка отправки ежедневного отчета:', error);
      showNotificationMessage('Ошибка отправки отчета');
    }
  };

  // Функция загрузки настроек автопереключения
  const loadAutoswitchSettings = async () => {
    try {
      const response = await fetch('${API_CONFIG.BASE_URL}/api/autoswitch/settings');
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setAutoswitchSettings(data.settings);
        }
      }
    } catch (error) {
      console.error('Ошибка загрузки настроек автопереключения:', error);
    }
  };

  // Функции для личной информации
  const hasPersonalChanges = () => {
    return personalInfo.name !== originalPersonalInfo.name ||
           personalInfo.email !== originalPersonalInfo.email ||
           personalInfo.company !== originalPersonalInfo.company ||
           personalInfo.phone !== originalPersonalInfo.phone ||
           personalInfo.newPassword !== '' ||
           personalInfo.confirmPassword !== '';
  };

  const handleSavePersonalInfo = async () => {
    if (!hasPersonalChanges()) return;

    // Валидация пароля
    if (personalInfo.newPassword && personalInfo.newPassword !== personalInfo.confirmPassword) {
      setNotificationMessage('Пароли не совпадают');
      setShowNotification(true);
      return;
    }

    try {
      // Здесь будет API запрос для сохранения данных
      console.log('Сохранение личной информации:', personalInfo);
      
      // Обновляем currentUser
      setCurrentUser(prev => ({
        ...prev,
        name: personalInfo.name,
        email: personalInfo.email,
        company: personalInfo.company,
        phone: personalInfo.phone
      }));

      // Обновляем оригинальные данные
      setOriginalPersonalInfo({
        name: personalInfo.name,
        email: personalInfo.email,
        company: personalInfo.company,
        phone: personalInfo.phone
      });

      // Очищаем поля пароля
      setPersonalInfo(prev => ({
        ...prev,
        newPassword: '',
        confirmPassword: ''
      }));

      setNotificationMessage('Изменения сохранены');
      setShowNotification(true);
    } catch (error) {
      console.error('Ошибка сохранения:', error);
      setNotificationMessage('Ошибка сохранения');
      setShowNotification(true);
    }
  };

  // Функция валидации номера телефона
  const validatePhone = (phone) => {
    const phoneNumbers = phone.replace(/\D/g, '');
    if (!phone) return 'Номер телефона обязателен';
    if (phoneNumbers.length !== 11) return 'Номер телефона должен содержать 11 цифр';
    if (!phoneNumbers.startsWith('7')) return 'Номер должен начинаться с 7';
    return null;
  };

  // Функция для генерации аватара
  const generateAvatar = (name) => {
    if (!name) return { color: '#3B82F6', letter: 'П' };
    
    const colors = [
      '#3B82F6', '#EF4444', '#10B981', '#F59E0B', 
      '#8B5CF6', '#EC4899', '#06B6D4', '#84CC16'
    ];
    
    const letter = name.charAt(0).toUpperCase();
    const colorIndex = name.charCodeAt(0) % colors.length;
    
    return { color: colors[colorIndex], letter };
  };

  // Setup data
  const [setupData, setSetupData] = useState({
    // Шаг 1: Цели Adapto
    task: '',
    mainGoal: '',
    mainGoalCustom: '',
    customGoal: '',
    dealCycle: '',
    targetAudience: '',
    
    // Шаг 2: Правила общения
    addressing: 'Вы',
    communicationStyle: 'Профессиональный',
    restrictions: [],
    showCustomRestriction: false,
    customRestriction: '',
    communicationSettings: [],
    showCustomCommunicationSetting: false,
    customCommunicationSetting: '',
    dataCollection: [],
    showCustomData: false,
    customData: '',
    clarificationQuestions: [],
    showCustomClarificationQuestion: false,
    customClarificationQuestion: '',
    emojiUsage: 'Никогда',
    editingStage: null,
    
    // Шаг 3: Этапы диалога
    dialogStages: [
      '🎯 УСТАНОВЛЕНИЕ КОНТАКТА: Поздоровайся тепло, представься как ИИ-помощник. Спроси имя клиента и как дела. Создай дружелюбную атмосферу.',
      '🔍 ВЫЯСНЕНИЕ ПОТРЕБНОСТЕЙ: Задавай открытые вопросы о проблемах клиента, целях и ситуации. Уточни детали: бюджет, сроки, приоритеты.',
      '💡 ПРЕЗЕНТАЦИЯ И ЗАКРЫТИЕ: Предложи решение на основе потребностей. Расскажи о преимуществах и выгодах. При возражениях - выясни причину и предложи альтернативы. Когда готов - подведи итоги и предложи оформить заказ.'
    ],
    dialogStagesModified: null, // null = не проверяли, true = изменено, false = не изменено
    
    // Для попапа первого входа - Шаг 4: База знаний
    knowledgeItems: [],
    selectedKnowledgeType: null,
    knowledgeInput: '',
    
    // Технические настройки модели
    modelProvider: 'gigachat',
    modelName: 'GigaChat:latest',
    systemPrompt: '',
    temperature: 0.7,
    maxTokens: 1000,
    customInstructions: '',
    enableRag: true,
    enableValidation: true,
    enableMonitoring: true
  });

  // Chat and knowledge data
  const [chatHistory, setChatHistory] = useState([
    { type: 'assistant', text: 'Привет! Я ваш ИИ-ассистент Adapto. Как дела?', time: 'Только что', timestamp: Date.now() },
    { type: 'user', text: 'Привет! Расскажи о ваших услугах', time: 'Только что', timestamp: Date.now() },
    { type: 'assistant', text: 'Конечно! Мы предоставляем широкий спектр услуг по разработке и поддержке IT-решений.', time: '1 мин назад', timestamp: Date.now() - 60000 }
  ]);

  // Новая система ai-agent-system
  const [aiAgentInitialized, setAiAgentInitialized] = useState(false);
  const [currentMessage, setCurrentMessage] = useState('');
  const [botCorrection, setBotCorrection] = useState('');
  const [botCorrections, setBotCorrections] = useState([]);
  const [hiddenCorrections, setHiddenCorrections] = useState(new Set());
  const [selectedCorrections, setSelectedCorrections] = useState(new Set());
  const [activeCorrections, setActiveCorrections] = useState(new Set()); // По умолчанию все корректировки выключены
  const [showAddCorrectionForm, setShowAddCorrectionForm] = useState(false);
  const [newCorrectionText, setNewCorrectionText] = useState('');
  const [isUpdatingCorrections, setIsUpdatingCorrections] = useState(false);
  const [isUpdatingDialog, setIsUpdatingDialog] = useState(false);
  const [showDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);
  const [showScriptModal, setShowScriptModal] = useState(false);
  const [hasKnowledgeBase, setHasKnowledgeBase] = useState(false);
  const [knowledgeItems, setKnowledgeItems] = useState([]);
  const [newKnowledgeItem, setNewKnowledgeItem] = useState({ type: 'text', content: '', nicheId: '' });
  const [availableNiches, setAvailableNiches] = useState([]);
  const [selectedNicheId, setSelectedNicheId] = useState('');
  const [currentNicheSynonyms, setCurrentNicheSynonyms] = useState([]);
  // Нормализация и цвет/лейбл для ниш
  const normalize = (s: string = '') => s.toLowerCase().trim();
  const getNicheDisplayName = (name: string = ''): string => {
    // Показываем оригинальное название из базы данных без переименования
    return name || 'Без ниши';
  };
  const getNicheColorByName = (name: string = ''): string => {
    const n = normalize(name);
    if (n.includes('детейлин')) return '#56AAF7'; // голубой
    if (n.includes('красот') || n.includes('уход')) return '#FF6FAE'; // розовый
    if (n.includes('образован')) return '#FFA64D'; // оранжевый
    if (n.includes('медицин') || n.includes('стоматолог')) return '#0084FF'; // синий
    if (n.includes('ecom') || n.includes('e-comm') || n.includes('ecomm') || (n.includes('интернет') && n.includes('магаз'))) return '#8EE38A'; // светло-зеленый
    if (n.includes('айти') || n.includes('it') || n.includes('дизайн')) return '#8B5CF6'; // фиолетовый
    if (n.includes('маркетинг') || n.includes('реклам')) return '#B19CD9'; // фиолетово-светлый
    if (n.includes('детск')) return '#FFD84D'; // желтый
    if (n.includes('ресторан')) return '#FF8A80'; // светло-красный
    if (n.includes('отел') || n.includes('кемпинг')) return '#34C759'; // зеленый
    if (n.includes('спорт')) return '#FF3B30'; // красный
    return '#E5E6E7';
  };
  const getNicheColor = (nicheId: string): string => {
    const niche = availableNiches.find(n => n.id === nicheId);
    return getNicheColorByName(niche?.name || '');
  };

  useEffect(() => {
    (async () => {
      try {
        const { data, error } = await supabase
          .from('niches')
          .select('id, name')
          .order('name', { ascending: true });
        if (!error) setAvailableNiches(data || []);
      } catch (e) {}
    })();
  }, []);

  // Загрузка сохраненной ниши из таблицы user_niches по project_id
  useEffect(() => {
    (async () => {
      try {
        if (!currentUser?.id || !currentUser?.project_id) return;
        console.log('=== LOADING NICHE FROM USER_NICHES ===');
        console.log('Current user ID:', currentUser.id);
        console.log('Current project ID:', currentUser.project_id);
        
        // Загружаем нишу из таблицы user_niches
        const { data: userNiche, error: nicheError } = await supabase
          .from('user_niches')
          .select('niche_id')
          .eq('project_id', currentUser.project_id)
          .single();
        
        if (!nicheError && userNiche?.niche_id) {
          console.log('Niche loaded from user_niches:', userNiche.niche_id);
          setSelectedNicheId(userNiche.niche_id);
          setNewKnowledgeItem(prev => ({
            ...prev,
            nicheId: userNiche.niche_id
          }));
        } else {
          // Fallback: загружаем из настроек агента
          console.log('Loading niche from agent settings as fallback');
          const settings = await agentSettings.getAgentSettings(currentUser.id);
          const nicheIdFromSettings = settings?.niche_id || settings?.settings?.nicheId || '';
          
          if (nicheIdFromSettings) {
            console.log('Niche loaded from agent settings:', nicheIdFromSettings);
            setSelectedNicheId(nicheIdFromSettings);
            setNewKnowledgeItem(prev => ({
              ...prev,
              nicheId: nicheIdFromSettings
            }));
          }
        }
      } catch (e) {
        console.error('Error loading niche:', e);
      }
    })();
  }, [currentUser?.id, currentUser?.project_id]);

  // Синонимы больше не редактируем из UI; показ из БД можно оставить/скрыть
  useEffect(() => {
    setCurrentNicheSynonyms([]);
  }, [selectedNicheId]);

  // Сохранение выбранной ниши сразу при выборе
  const handleSelectNiche = async (nicheId) => {
    try {
      console.log('=== SELECTING NICHE ===');
      console.log('Selected nicheId:', nicheId);
      console.log('Current user ID:', currentUser?.id);
      
      setSelectedNicheId(nicheId);
      // По умолчанию подставляем выбранную нишу в новый источник
      setNewKnowledgeItem(prev => {
        const updated = { ...prev, nicheId };
        console.log('Updated newKnowledgeItem:', updated);
        return updated;
      });
      
      // Сохраняем нишу в таблицу user_niches с project_id
      if (currentUser?.project_id) {
        // Удаляем старую запись если есть
        await supabase
          .from('user_niches')
          .delete()
          .eq('project_id', currentUser.project_id);
        
        // Добавляем новую запись
        if (nicheId && nicheId.trim() !== '') {
          const { error: insertError } = await supabase
            .from('user_niches')
            .insert({
              project_id: currentUser.project_id,
              niche_id: nicheId,
              created_at: new Date().toISOString()
            });
          
          if (insertError) {
            console.error('Error saving niche:', insertError);
            throw insertError;
          }
        }
        console.log('Niche saved to user_niches table');
      }
      
      // Также обновляем настройки агента для совместимости
      const existing = await agentSettings.getAgentSettings(currentUser.id);
      const mergedSettings = {
        ...(existing?.settings || {}),
        nicheId
      };
      await agentSettings.saveAgentSettings(currentUser.id, mergedSettings);
      
      showNotificationMessage('✅ Ниша сохранена');
    } catch (e) {
      console.error('Ошибка сохранения ниши:', e);
      showNotificationMessage('❌ Не удалось сохранить нишу');
    }
  };

  // Убрали добавление/удаление синонимов из UI
  const [processingProgress, setProcessingProgress] = useState({});

  // Функция для обновления статистики при изменении периода
  const updateStatisticsForPeriod = async (startDate, endDate) => {
    if (!currentUser?.id) return;
    
    try {
      const agg = await statsAPI.getAggregates(currentUser.id, startDate, endDate);
      if (agg) {
        setStatisticsAggregates(agg);
      }
    } catch (e) {
      console.warn('Failed to update statistics for period:', e);
    }
  };
  const [statisticsAggregates, setStatisticsAggregates] = useState({
    dialogsTotal: 0,
    messagesTotal: 0,
    resolvedTotal: 0,
    handoverTotal: 0,
    convertedTotal: 0,
    avgMessagesPerDialog: 0,
    conversionRate: 0,
    // Новые метрики
    widget_opens: 0,
    bounce_rate: 0,
    customer_engagement: 0,
    resolved_questions: 0,
    escalation_rate: 0,
    avg_response_time: 0,
    avg_resolution_time: 0,
    ai_effectiveness_score: 0,
    help_request_rate: 0
  });
  const [selectedKnowledgeItem, setSelectedKnowledgeItem] = useState(null);
  const [showSitePopup, setShowSitePopup] = useState(false);
  const [showFeedPopup, setShowFeedPopup] = useState(false);
  const [showFilePopup, setShowFilePopup] = useState(false);
  const [showTextPopup, setShowTextPopup] = useState(false);
  const [showKnowledgeDetailsPopup, setShowKnowledgeDetailsPopup] = useState(false);
  const [selectedKnowledgeDetails, setSelectedKnowledgeDetails] = useState(null);
  
  // Обработчик клика вне области для закрытия выпадающего меню
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (selectedKnowledgeItem && !event.target.closest('.dropdown-menu')) {
        setSelectedKnowledgeItem(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [selectedKnowledgeItem]);

  // Загрузка диалогов из базы данных
  const loadDialogs = async () => {
    console.log('=== LOAD DIALOGS DEBUG ===');
    console.log('currentUser:', currentUser);
    console.log('currentUser?.id:', currentUser?.id);
    console.log('currentUser?.email:', currentUser?.email);
    
    if (!currentUser?.id) {
      console.log('Нет currentUser?.id, выходим');
      return;
    }
    
    try {
      console.log('Загружаем диалоги для пользователя:', currentUser?.id);
      
      // Загружаем диалоги (карточки CRM) из БД
      const dbDialogs = await dialogsDB.getDialogs(currentUser?.id, { limit: 200 });
      
      // Преобразуем под UI-структуру, сохраняя ключевые поля
      const uiDialogs = (dbDialogs || []).map(d => ({
        id: d.id,
        name: d.client_name || 'Клиент',
        email: d.client_email || '',
        phone: d.client_phone || '',
        source: d.source || 'admin',
        status: d.status || 'active',
        assignedTo: d.assigned_to || null,
        need_handover: d.need_handover || false,
        canTakeover: d.can_takeover !== false,
        isTest: !!d.is_test,
        lastMessage: d.description || '',
        time: d.last_message_at ? updateMessageTime(new Date(d.last_message_at).getTime()) : '',
        messages: d.messages || [],
        // Дополнительные поля для уникализации
        channel: d.channel,
        assistant_id: d.assistant_id,
        session_persistent_id: d.session_persistent_id,
        user_id: d.user_id,
        is_operator_takeover: d.is_operator_takeover,
        operator_id: d.operator_id,
        takeover_at: d.takeover_at,
        // Уникальный ключ для группировки
        uniqueKey: `${d.channel}_${d.user_id || d.assistant_id}_${d.session_persistent_id || d.id}`
      }));
      
      // Убираем дубликаты диалогов
      const uniqueDialogs = getUniqueDialogs(uiDialogs);
      console.log('Unique dialogs:', uniqueDialogs.length, 'from', uiDialogs.length);
      
      // Группируем диалоги по каналам для лучшей организации
      const groupedDialogs = groupDialogsByChannel(uniqueDialogs);
      console.log('Grouped dialogs:', groupedDialogs);
      
      setDialogsData(uniqueDialogs);
      setGroupedDialogs(groupedDialogs);

      // Загружаем агрегаты метрик
      try {
        const agg = await statsAPI.getAggregates(currentUser.id, dateRange.start, dateRange.end);
        if (agg) {
          setStatisticsAggregates(agg);
        }
      } catch (e) {
        console.warn('Failed to load aggregates:', e);
      }

      // Загружаем диалоги из admin канала (для истории чата)
      const adminHistory = await chatHistoryAPI.getChatHistory(currentUser?.id, 'admin', 50);
      console.log('Admin диалоги загружены:', adminHistory);
      
      // Загружаем диалоги из widget канала (для раздела Виджет разработка)
      const widgetHistory = await chatHistoryAPI.getChatHistory(currentUser?.id, 'widget', 50);
      console.log('Widget диалоги загружены:', widgetHistory);
      
      // Преобразуем admin диалоги для chatHistory
      const formattedAdminHistory = adminHistory.map(msg => ({
        type: msg.role === 'user' ? 'user' : 'assistant',
        text: msg.message_content,
        time: updateMessageTime(new Date(msg.created_at).getTime()),
        timestamp: new Date(msg.created_at).getTime(),
        id: `loaded_${msg.id}_${Date.now()}`
      })).sort((a, b) => (a.timestamp || 0) - (b.timestamp || 0));
      
      // Преобразуем widget диалоги для chatMessages
      const formattedWidgetHistory = widgetHistory.map(msg => ({
        id: msg.id,
        text: msg.message_content,
        isUser: msg.role === 'user',
        time: updateMessageTime(new Date(msg.created_at).getTime()),
        timestamp: new Date(msg.created_at).getTime()
      })).sort((a, b) => (a.timestamp || 0) - (b.timestamp || 0));
      
      console.log('Форматированные admin диалоги:', formattedAdminHistory);
      console.log('Форматированные widget диалоги:', formattedWidgetHistory);
      
      // Предотвращаем дублирование - удаляем дубликаты по содержанию и времени
      const uniqueAdminHistory = formattedAdminHistory.filter((msg, index, arr) => {
        return arr.findIndex(m => m.text === msg.text && Math.abs(m.timestamp - msg.timestamp) < 1000) === index;
      });
      
      const uniqueWidgetHistory = formattedWidgetHistory.filter((msg, index, arr) => {
        return arr.findIndex(m => m.text === msg.text && Math.abs(m.timestamp - msg.timestamp) < 1000) === index;
      });
      
      setChatHistory(uniqueAdminHistory);
      setChatMessages(uniqueWidgetHistory);
      
      // Прокручиваем к низу после загрузки истории
      ChatUtils.scrollToBottom(chatHistoryRef, 200);
      ChatUtils.scrollToBottom(widgetChatRef, 200);
      
      console.log('Диалоги успешно загружены и отформатированы');
      
    } catch (error) {
      console.error('Ошибка при загрузке диалогов:', error);
    }
  };

  // Offline режим - мониторинг статуса сети
  useEffect(() => {
    const handleOnline = () => {
      console.log('🌐 Network online - starting sync');
      setIsOnline(true);
      setShowOfflineIndicator(false);
      OfflineManager.updateNetworkStatus(true);
      
      // Синхронизируем offline сообщения
      OfflineManager.syncOfflineMessages(
        async (message) => {
          // Функция отправки сообщения для синхронизации
          if (message.channel === 'admin') {
            return await sendMessageToAiAgent(message.text, message.userId, message.assistantId, []);
          } else if (message.channel === 'widget') {
            // Логика для виджета
            return await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.WIDGET_ENDPOINT}`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                key: `adapto_${message.userId}_${Date.now()}`,
                message: message.text,
                conversationHistory: []
              })
            });
          }
        },
        chatHistoryAPI
      );
    };

    const handleOffline = () => {
      console.log('📴 Network offline');
      setIsOnline(false);
      setShowOfflineIndicator(true);
      OfflineManager.updateNetworkStatus(false);
    };

    // Обновляем счетчик offline сообщений
    const updateOfflineCount = () => {
      const offlineMessages = OfflineManager.getOfflineMessages();
      setOfflineMessageCount(offlineMessages.filter(msg => !msg.synced).length);
    };

    // Слушаем события сети
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    // Обновляем счетчик при загрузке
    updateOfflineCount();
    
    // Периодически обновляем счетчик
    const interval = setInterval(updateOfflineCount, 5000);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      clearInterval(interval);
    };
  }, [currentUser?.id]);

  // WebSocket для обновлений диалогов в реальном времени
  useEffect(() => {
    if (!currentUser?.id) return;

    // Создаем WebSocket подключение с retry логикой
    const wsUrl = API_CONFIG.BASE_URL.replace('http', 'ws') + API_CONFIG.WEBSOCKET_ENDPOINT + `/${currentUser.id}`;
    
    const ws = ChatUtils.retryWebSocketConnection(wsUrl, {
      maxRetries: 5,
      baseDelay: 2000,
      onConnect: (ws) => {
        console.log('🔌 WebSocket подключен для диалогов');
      },
      onError: (error) => {
        console.error('❌ WebSocket ошибка:', error);
      },
      onRetry: (retryCount) => {
        console.log(`🔄 WebSocket переподключение ${retryCount}/5`);
      }
    });
    
    if (ws) {
      ws.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          console.log('📨 Получено обновление диалогов:', data);
          
          switch (data.type) {
            case 'dialog_created':
            case 'dialog_updated':
              // Перезагружаем диалоги при изменениях
              loadDialogs();
              break;
            case 'message_added':
              // Обновляем конкретный диалог
              setDialogsData(prev => prev.map(dialog => 
                dialog.id === data.dialogId 
                  ? { ...dialog, lastMessage: data.message, time: 'только что' }
                  : dialog
              ));
              break;
            case 'dialog_taken':
              // Обновляем статус диалога при перехвате
              setDialogsData(prev => prev.map(dialog => 
                dialog.id === data.dialogId 
                  ? { ...dialog, status: 'taken', assignedTo: data.operatorId }
                  : dialog
              ));
              break;
          }
        } catch (error) {
          console.error('❌ Ошибка обработки WebSocket сообщения:', error);
        }
      };
    }
    
    ws.onclose = () => {
      console.log('🔌 WebSocket отключен');
      // Переподключаемся через 5 секунд
      setTimeout(() => {
        if (currentUser?.id) {
          console.log('🔄 Переподключение WebSocket...');
        }
      }, 5000);
    };
    
    return () => {
      ws.close();
    };
  }, [currentUser?.id]);

  // Загружаем диалоги при изменении пользователя
  useEffect(() => {
    if (currentUser?.id) {
      loadDialogs();
      // loadUserLimits(); // Временно отключено
      
      // Даем полный доступ без проверки лимитов
      setUserAccess({
        hasAccess: true,
        isExpired: false,
        reason: null
      });
    }
  }, [currentUser]);


  // Загрузка лимитов пользователя
  const loadUserLimits = async () => {
    if (!currentUser?.id) return;
    
    try {
      const response = await fetch(`${API_CONFIG.BASE_URL}/api/user-limits/${currentUser?.id}`);
      if (response.ok) {
        const limits = await response.json();
        setUserLimits(limits);
        
        // Проверяем доступ только если limits не null
        if (limits) {
          const hasAccess = !limits.isExpired && limits.daysRemaining > 0 && limits.tokensRemaining > 0;
          setUserAccess({
            hasAccess,
            isExpired: limits.isExpired,
            reason: limits.isExpired ? 'trial_expired' : 
                    limits.daysRemaining <= 0 ? 'days_expired' :
                    limits.tokensRemaining <= 0 ? 'tokens_expired' : null
          });
        } else {
          // Если лимитов нет, даем полный доступ
          setUserAccess({
            hasAccess: true,
            isExpired: false,
            reason: null
          });
        }
      } else {
        // Если лимитов нет, создаем их
        const createResponse = await fetch('${API_CONFIG.BASE_URL}/api/user-limits', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId: currentUser?.id })
        });
        
        if (createResponse.ok) {
          const newLimits = await createResponse.json();
          setUserLimits(newLimits);
          setUserAccess({
            hasAccess: true,
            isExpired: false,
            reason: null
          });
        }
      }
    } catch (error) {
      console.error('Error loading user limits:', error);
    }
  };

  // Обработчик клика вне области для закрытия выпадающего меню пользователя
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (showUserDropdown && !event.target.closest('.user-dropdown')) {
        setShowUserDropdown(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showUserDropdown]);

  // Загружаем корректировки из localStorage при инициализации
  // Убираем загрузку из localStorage - теперь загружаем только из Supabase при входе пользователя
  // useEffect(() => {
  //   const savedCorrections = localStorage.getItem('botCorrections');
  //   if (savedCorrections) {
  //     try {
  //       const parsedCorrections = JSON.parse(savedCorrections);
  //       setBotCorrections(parsedCorrections);
  //     } catch (error) {
  //       console.error('Error parsing saved corrections:', error);
  //     }
  //   }
  // }, []);

  // Переключение на dashboard при загрузке, если пользователь уже вошел
  useEffect(() => {
    if (isLoggedIn && currentUser && currentStep === 'login') {
      console.log('Пользователь уже вошел, переключаемся на dashboard');
      setCurrentStep('dashboard');
    }
  }, [isLoggedIn, currentUser, currentStep]);

  // Автоматическая смена слайдов для страниц входа и регистрации
  const slideImages = ['/Frame 126.png', '/Frame 127.png', '/Frame 128.png', '/Frame 129.png', '/Frame 130.png'];
  
  useEffect(() => {
    if (currentStep === 'login' || currentStep === 'register') {
      console.log('Слайдер активен, текущий слайд:', currentSlide, 'URL:', slideImages[currentSlide]);
      const interval = setInterval(() => {
        setIsTransitioning(true);
        setTimeout(() => {
          setCurrentSlide((prev) => (prev + 1) % 5);
          setIsTransitioning(false);
        }, 300);
      }, 4500);

      return () => clearInterval(interval);
    }
  }, [currentStep, currentSlide]);

  const [sitePopupTab, setSitePopupTab] = useState('full'); // 'full' или 'selective'
  const [siteUrl, setSiteUrl] = useState('');
  const [selectedPages, setSelectedPages] = useState(['']);
  const [siteUrlError, setSiteUrlError] = useState('');
  const [selectedPagesErrors, setSelectedPagesErrors] = useState(['']);
  
  // Feed popup states
  const [feedUrl, setFeedUrl] = useState('');
  const [feedUrlError, setFeedUrlError] = useState('');
  
  // File popup states
  const [selectedFiles, setSelectedFiles] = useState([]);
  const [uploadedFiles, setUploadedFiles] = useState([]);
  
  // Text popup states
  const [textContent, setTextContent] = useState('');
  const [textContentError, setTextContentError] = useState('');

  // Dashboard states
  const [showCalendar, setShowCalendar] = useState(false);
  const [showExport, setShowExport] = useState(false);
  const [dateRange, setDateRange] = useState({ start: null, end: null });
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [selectedDates, setSelectedDates] = useState([]);
  const [activeQuickSelect, setActiveQuickSelect] = useState(null);
  const [dateStartInput, setDateStartInput] = useState('');
  const [dateEndInput, setDateEndInput] = useState('');
  const [dateStartError, setDateStartError] = useState(false);
  const [dateEndError, setDateEndError] = useState(false);

  const formatDateInputValue = (value) => {
    const digits = (value || '').replace(/\D/g, '').slice(0, 8);
    let out = digits;
    if (digits.length > 4) {
      out = `${digits.slice(0, 2)}.${digits.slice(2, 4)}.${digits.slice(4)}`;
    } else if (digits.length > 2) {
      out = `${digits.slice(0, 2)}.${digits.slice(2)}`;
    }
    return out;
  };

  const isValidDateDmy = (str) => {
    const m = /^([0-3]\d)\.([0-1]\d)\.(\d{4})$/.exec(str);
    if (!m) return false;
    const d = parseInt(m[1], 10);
    const mo = parseInt(m[2], 10);
    const y = parseInt(m[3], 10);
    if (mo < 1 || mo > 12) return false;
    if (d < 1 || d > 31) return false;
    const dt = new Date(y, mo - 1, d);
    return dt.getFullYear() === y && dt.getMonth() === mo - 1 && dt.getDate() === d;
  };

  const parseDmyToDate = (str) => {
    if (!isValidDateDmy(str)) return null;
    const [d, m, y] = str.split('.').map((v) => parseInt(v, 10));
    return new Date(y, m - 1, d);
  };

  // Dialogs states
  const [selectedDialog, setSelectedDialog] = useState(null);
  const [messageText, setMessageText] = useState('');
  const [activeChatTab, setActiveChatTab] = useState('all'); // 'all', 'active', 'closed'
  const [activeChannelFilter, setActiveChannelFilter] = useState('all'); // 'all', 'widget', 'telegram', 'whatsapp', 'vk', 'instagram', 'admin'
  const [searchQuery, setSearchQuery] = useState(''); // Поиск по содержимому диалогов
  const [activeDialogsTab, setActiveDialogsTab] = useState('chats'); // 'chats', 'analytics', 'settings'
  
  // Offline режим состояния
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [offlineMessageCount, setOfflineMessageCount] = useState(0);
  const [showOfflineIndicator, setShowOfflineIndicator] = useState(false);
  const [openWidgetSections, setOpenWidgetSections] = useState({
    sections: false,
    styling: false,
    triggers: false
  });
  const [activeWidgetTab, setActiveWidgetTab] = useState('main'); // 'main', 'chat', 'form'
  
  // Widget states
  const [showAILabel, setShowAILabel] = useState(true);
  const [logoType, setLogoType] = useState('default'); // 'default' or 'custom'
  const [customLogo, setCustomLogo] = useState<string | null>(null);
  const [customLogoName, setCustomLogoName] = useState<string>('');
  const [aiAgentName, setAiAgentName] = useState('Адапто');
  const [managerPhotoType, setManagerPhotoType] = useState('none'); // 'none' or 'add'
  const [managerPhotos, setManagerPhotos] = useState<string[]>([]);
  const [statusText, setStatusText] = useState('Отвечаем до 3-х минут');
  const [showStatus, setShowStatus] = useState(true);
  const [welcomeMessage, setWelcomeMessage] = useState('Доброго дня! Чем мы можем помочь?');
  const [chatMessages, setChatMessages] = useState([
    { id: 1, text: 'Здравствуйте! Чем могу помочь?', isUser: false, time: 'Только что' }
  ]);

  // Автоматическая прокрутка к низу при добавлении новых сообщений в основной чат
  useEffect(() => {
    if (activeSection === 'my-adapto' && chatHistoryRef.current) {
      ChatUtils.scrollToBottom(chatHistoryRef);
    }
  }, [chatHistory, activeSection]);

  // Автоматическая прокрутка к низу при добавлении новых сообщений в widget чат
  useEffect(() => {
    if (activeSection === 'widget-dev' && widgetChatRef.current) {
      ChatUtils.scrollToBottom(widgetChatRef);
    }
  }, [chatMessages, activeSection]);

  const [formTrigger, setFormTrigger] = useState('before'); // 'never', 'before', 'during', 'timer', 'after_answer'
  const [showFormDropdown, setShowFormDropdown] = useState(false);
  const [selectedFormFields, setSelectedFormFields] = useState<string[]>([]);
  const [formFields, setFormFields] = useState([
    { id: 1, type: 'name', label: 'Имя', placeholder: 'Введите ваше имя', required: true },
    { id: 2, type: 'email', label: 'Эл. почта', placeholder: 'Введите вашу почту', required: true },
    { id: 3, type: 'phone', label: 'Телефон', placeholder: 'Введите ваш телефон', required: false },
    { id: 4, type: 'company', label: 'Название компании', placeholder: 'Введите название компании', required: false },
    { id: 5, type: 'position', label: 'Должность', placeholder: 'Введите вашу должность', required: false },
    { id: 6, type: 'website', label: 'Веб-сайт', placeholder: 'Введите адрес сайта', required: false },
    { id: 7, type: 'city', label: 'Город', placeholder: 'Введите ваш город', required: false },
    { id: 8, type: 'age', label: 'Возраст', placeholder: 'Введите ваш возраст', required: false }
  ]);
  const [privacyPolicyLink, setPrivacyPolicyLink] = useState('');
  const [formTitle, setFormTitle] = useState('Пожалуйста заполните форму');
  const [formTimerSeconds, setFormTimerSeconds] = useState(30);
  const [showForm, setShowForm] = useState(false);
  const [widgetFormData, setWidgetFormData] = useState<{[key: string]: string}>({});
  const [widgetOpenTime, setWidgetOpenTime] = useState<number | null>(null);
  const [isFormSubmitting, setIsFormSubmitting] = useState(false);
  const [policyAccepted, setPolicyAccepted] = useState(false);
  
  // Widget preview state
  const [widgetPreviewOpen, setWidgetPreviewOpen] = useState(true);
  const [widgetCurrentPage, setWidgetCurrentPage] = useState('home'); // 'home' или 'chat'
  
  // Состояния для плашки 3 функциональности
  const [showHumanButton, setShowHumanButton] = useState(false);
  const [showCompletionButton, setShowCompletionButton] = useState(false);
  const [showFollowUpMessage, setShowFollowUpMessage] = useState(false);
  const [showTriggerMessage, setShowTriggerMessage] = useState(false);
  const [widgetClosedTime, setWidgetClosedTime] = useState<number | null>(null);
  const [widgetOpenedTime, setWidgetOpenedTime] = useState<number | null>(null);
  const [aiReceivedResponse, setAiReceivedResponse] = useState(false); // Отслеживаем, получил ли ИИ ответ от клиента

  // Состояния для триггерных сообщений
  const [triggerMessagesEnabled, setTriggerMessagesEnabled] = useState(false);
  const [triggerMessages, setTriggerMessages] = useState([
    {
      id: 1,
      timeDelay: 5,
      message: 'У нас есть отличная акция',
      buttonText: 'Расскажи подробнее'
    }
  ]);

  // Состояния для догоняющих сообщений
  const [followUpMessagesEnabled, setFollowUpMessagesEnabled] = useState(false);
  const [followUpMessages, setFollowUpMessages] = useState([
    {
      id: 1,
      timeDelay: 5,
      message: 'Продолжим диалог?',
      buttonText: 'Да'
    }
  ]);
  
  // Логика показа формы
  useEffect(() => {
    if (formTrigger === 'before' && widgetCurrentPage === 'chat' && !showForm) {
      // Небольшая задержка чтобы чат успел отобразиться
      setTimeout(() => {
        setShowForm(true);
      }, 100);
    }
  }, [formTrigger, widgetCurrentPage, showForm]);
  
  useEffect(() => {
    if (formTrigger === 'timer' && widgetPreviewOpen && !widgetOpenTime) {
      setWidgetOpenTime(Date.now());
    }
  }, [formTrigger, widgetPreviewOpen, widgetOpenTime]);
  
  useEffect(() => {
    if (formTrigger === 'timer' && widgetOpenTime && !showForm) {
      const timer = setTimeout(() => {
        if (widgetCurrentPage === 'chat') {
          setShowForm(true);
        }
      }, formTimerSeconds * 1000);
      
      return () => clearTimeout(timer);
    }
  }, [formTrigger, widgetOpenTime, showForm, formTimerSeconds, widgetCurrentPage]);
  
  // Сброс формы при переходе на главную страницу
  useEffect(() => {
    if (widgetCurrentPage === 'home') {
      setShowForm(false);
    }
  }, [widgetCurrentPage]);

  // Автоматически добавляем номер телефона когда выбрано любое значение кроме "Никогда"
  useEffect(() => {
    if (formTrigger !== 'never') {
      // Если номер телефона еще не добавлен, добавляем его
      setSelectedFormFields(prev => {
        if (!prev.includes('phone')) {
          return [...prev, 'phone'];
        }
        return prev;
      });
    }
  }, [formTrigger]);

  // Логика для триггерных сообщений: показываем ТОЛЬКО когда виджет закрыт
  useEffect(() => {
    if (triggerMessagesEnabled && triggerMessages.length > 0 && !widgetPreviewOpen && !showTriggerMessage) {
      const message = triggerMessages[0];
      const timer = setTimeout(() => {
        setShowTriggerMessage(true);
      }, message.timeDelay * 1000);
      return () => clearTimeout(timer);
    }
    // Если виджет открыт — скрываем триггерную плашку
    if (widgetPreviewOpen && showTriggerMessage) {
      setShowTriggerMessage(false);
    }
  }, [triggerMessagesEnabled, triggerMessages, widgetPreviewOpen, showTriggerMessage]);

  // Логика для догоняющих сообщений
  useEffect(() => {
    if (followUpMessagesEnabled && followUpMessages.length > 0 && widgetClosedTime && !showFollowUpMessage && !aiReceivedResponse) {
      const message = followUpMessages[0]; // Берем первое сообщение
      const timer = setTimeout(() => {
        setShowFollowUpMessage(true);
      }, message.timeDelay * 1000);
      
      return () => clearTimeout(timer);
    }
  }, [followUpMessagesEnabled, followUpMessages, widgetClosedTime, showFollowUpMessage, aiReceivedResponse]);

  // Загрузка настроек виджета при инициализации
  useEffect(() => {
    const loadWidgetSettings = async () => {
      if (!currentUser?.id) return;

      try {
        console.log('Загружаем настройки виджета для пользователя:', currentUser.id);
        
        // Загружаем напрямую через supabaseClient (как настройки модели)
        const { widgetDevelopmentSettings: widgetDevAPI } = await import('./supabaseClient.js');
        const savedSettings = await widgetDevAPI.getWidgetDevelopmentSettings(currentUser.id);
        
        if (savedSettings) {
          console.log('Настройки виджета загружены из БД:', savedSettings);
          
          // Обновляем состояние widgetDevelopmentSettings для новой структуры БД
          setWidgetSettings(prevSettings => ({
            ...prevSettings,
            // РАЗДЕЛЫ ВИДЖЕТА - Главная
            accentColor: savedSettings.accent_color || prevSettings.accentColor,
            buttonColor: savedSettings.button_color || prevSettings.buttonColor,
            buttonText: savedSettings.button_text || prevSettings.buttonText,
            buttonSubtext: savedSettings.button_subtext || prevSettings.buttonSubtext,
            avatar: savedSettings.avatar || prevSettings.avatar,
            customButtonColor: savedSettings.custom_button_color || prevSettings.customButtonColor,
            widgetLocation: savedSettings.widget_location || prevSettings.widgetLocation,
            
            // Позиционирование
            desktopBottomOffset: savedSettings.desktop_bottom_offset || prevSettings.desktopBottomOffset,
            desktopRightOffset: savedSettings.desktop_right_offset || prevSettings.desktopRightOffset,
            mobileBottomOffset: savedSettings.mobile_bottom_offset || prevSettings.mobileBottomOffset,
            mobileRightOffset: savedSettings.mobile_right_offset || prevSettings.mobileRightOffset,
            zIndex: savedSettings.z_index || prevSettings.zIndex,
            
            // Приветственные сообщения
            welcomeMessages: savedSettings.welcome_messages || prevSettings.welcomeMessages,
            
            // Триггерные вопросы
            triggerQuestion: savedSettings.trigger_question || prevSettings.triggerQuestion,
            triggerQuestionEnabled: savedSettings.trigger_question_enabled || prevSettings.triggerQuestionEnabled,
            triggerQuestionDelay: savedSettings.trigger_question_delay || prevSettings.triggerQuestionDelay,
            triggerQuestionText: savedSettings.trigger_question_text || prevSettings.triggerQuestionText,
            triggerQuickReply: savedSettings.trigger_quick_reply || prevSettings.triggerQuickReply,
            
            // Догоняющие сообщения
            followUpMessage: savedSettings.follow_up_message || prevSettings.followUpMessage,
            followUpDelay: savedSettings.follow_up_delay || prevSettings.followUpDelay,
            followUpQuestion: savedSettings.follow_up_question || prevSettings.followUpQuestion,
            followUpQuickReply: savedSettings.follow_up_quick_reply || prevSettings.followUpQuickReply,
            
            // Быстрые ответы
            quickReplies: savedSettings.quick_replies || prevSettings.quickReplies,
            
            // Политика конфиденциальности
            privacyPolicyUrl: savedSettings.privacy_policy_url || prevSettings.privacyPolicyUrl,
            
            // Теги данных
            dataTags: savedSettings.data_tags || prevSettings.dataTags,
            
            // Исключенные страницы
            excludedPages: savedSettings.excluded_pages || prevSettings.excludedPages,
            
            // Режим работы виджета
            widgetMode: savedSettings.widget_mode || prevSettings.widgetMode,
            
            // Быстрые вопросы
            quickQuestions: savedSettings.quick_questions || prevSettings.quickQuestions,
            
            // Настройки формы заявки
            leadFormEnabled: savedSettings.lead_form_enabled || prevSettings.leadFormEnabled,
            leadFormTitle: savedSettings.lead_form_title || prevSettings.leadFormTitle,
            leadFormDescription: savedSettings.lead_form_description || prevSettings.leadFormDescription,
            leadFormFields: savedSettings.lead_form_fields || prevSettings.leadFormFields,
            
            // Настройки внешнего вида
            widgetTheme: savedSettings.widget_theme || prevSettings.widgetTheme,
            widgetSize: savedSettings.widget_size || prevSettings.widgetSize,
            showAvatar: savedSettings.show_avatar !== undefined ? savedSettings.show_avatar : prevSettings.showAvatar,
            showTypingIndicator: savedSettings.show_typing_indicator !== undefined ? savedSettings.show_typing_indicator : prevSettings.showTypingIndicator,
            
            // Настройки эскалации
            escalationEnabled: savedSettings.escalation_enabled !== undefined ? savedSettings.escalation_enabled : prevSettings.escalationEnabled,
            escalationButtonText: savedSettings.escalation_button_text || prevSettings.escalationButtonText,
            escalationMessage: savedSettings.escalation_message || prevSettings.escalationMessage,
            escalationAutoAssign: savedSettings.escalation_auto_assign !== undefined ? savedSettings.escalation_auto_assign : prevSettings.escalationAutoAssign,
            
            // Настройки поведения
            autoOpenOnScroll: savedSettings.auto_open_on_scroll !== undefined ? savedSettings.auto_open_on_scroll : prevSettings.autoOpenOnScroll,
            autoOpenDelay: savedSettings.auto_open_delay || prevSettings.autoOpenDelay,
            showOnMobile: savedSettings.show_on_mobile !== undefined ? savedSettings.show_on_mobile : prevSettings.showOnMobile,
            
            // Настройки уведомлений
            notificationSound: savedSettings.notification_sound !== undefined ? savedSettings.notification_sound : prevSettings.notificationSound,
            notificationTitle: savedSettings.notification_title || prevSettings.notificationTitle,
            
            // Настройки аналитики
            trackEvents: savedSettings.track_events !== undefined ? savedSettings.track_events : prevSettings.trackEvents,
            trackConversions: savedSettings.track_conversions !== undefined ? savedSettings.track_conversions : prevSettings.trackConversions,
            
            // Логотип
            logoUrl: savedSettings.logo_url || prevSettings.logoUrl,
            logoName: savedSettings.logo_name || prevSettings.logoName,
            
            // Дополнительные поля
            suggestions: savedSettings.suggestions || prevSettings.suggestions
          }));
          
          // Обновляем отдельные переменные состояния для интерфейса
          if (savedSettings.ai_agent_name) setAiAgentName(savedSettings.ai_agent_name);
          if (savedSettings.show_ai_label !== undefined) setShowAILabel(savedSettings.show_ai_label);
          if (savedSettings.logo_type) setLogoType(savedSettings.logo_type);
          if (savedSettings.custom_logo) setCustomLogo(savedSettings.custom_logo);
          if (savedSettings.custom_logo_name) setCustomLogoName(savedSettings.custom_logo_name);
          if (savedSettings.widget_title) setWidgetTitle(savedSettings.widget_title);
          if (savedSettings.widget_description) setWidgetDescription(savedSettings.widget_description);
          if (savedSettings.questions) setQuestions(savedSettings.questions);
          if (savedSettings.button_title) setButtonTitle(savedSettings.button_title);
          if (savedSettings.button_description) setButtonDescription(savedSettings.button_description);
          
          // РАЗДЕЛЫ ВИДЖЕТА - Чат
          if (savedSettings.manager_photo_type) setManagerPhotoType(savedSettings.manager_photo_type);
          if (savedSettings.manager_photos) setManagerPhotos(savedSettings.manager_photos);
          if (savedSettings.status_text) setStatusText(savedSettings.status_text);
          if (savedSettings.show_status !== undefined) setShowStatus(savedSettings.show_status);
          if (savedSettings.welcome_message) setWelcomeMessage(savedSettings.welcome_message);
          
          // РАЗДЕЛЫ ВИДЖЕТА - Форма
          if (savedSettings.form_trigger) setFormTrigger(savedSettings.form_trigger);
          if (savedSettings.form_timer_seconds) setFormTimerSeconds(savedSettings.form_timer_seconds);
          if (savedSettings.form_fields) setFormFields(savedSettings.form_fields);
          if (savedSettings.selected_form_fields) setSelectedFormFields(savedSettings.selected_form_fields);
          if (savedSettings.form_title) setFormTitle(savedSettings.form_title);
          if (savedSettings.privacy_policy_link) setPrivacyPolicyLink(savedSettings.privacy_policy_link);
          
          // СТИЛИЗАЦИЯ ВИДЖЕТА
          if (savedSettings.widget_theme) setWidgetTheme(savedSettings.widget_theme);
          if (savedSettings.background_color) setBackgroundColor(savedSettings.background_color);
          if (savedSettings.selected_gradient !== undefined) setSelectedGradient(savedSettings.selected_gradient);
          if (savedSettings.accent_color) setAccentColor(savedSettings.accent_color);
          if (savedSettings.button_color) setButtonColor(savedSettings.button_color);
          if (savedSettings.desktop_bottom_offset) setDesktopBottomOffset(savedSettings.desktop_bottom_offset);
          if (savedSettings.desktop_right_offset) setDesktopRightOffset(savedSettings.desktop_right_offset);
          if (savedSettings.mobile_bottom_offset) setMobileBottomOffset(savedSettings.mobile_bottom_offset);
          if (savedSettings.mobile_right_offset) setMobileRightOffset(savedSettings.mobile_right_offset);
          
          // БЫСТРЫЕ ОТВЕТЫ И ТРИГГЕРЫ
          if (savedSettings.trigger_messages_enabled !== undefined) setTriggerMessagesEnabled(savedSettings.trigger_messages_enabled);
          if (savedSettings.trigger_messages) setTriggerMessages(savedSettings.trigger_messages);
          if (savedSettings.follow_up_messages) setFollowUpMessages(savedSettings.follow_up_messages);
          if (savedSettings.quick_replies) setWidgetSettings(prev => ({...prev, quickReplies: savedSettings.quick_replies}));
          
          console.log('Настройки виджета обновлены');
        } else {
          console.log('Настройки виджета не найдены в БД, используем значения по умолчанию');
        }
      } catch (error) {
        console.error('Ошибка при загрузке настроек виджета:', error);
      }
    };

    loadWidgetSettings();
  }, [currentUser?.id]);
  
  // Styling states
  const [widgetTheme, setWidgetTheme] = useState('white'); // 'white' or 'dark'
  const [backgroundColor, setBackgroundColor] = useState('linear-gradient(30deg, #52AEFF 0%, #096EFD 100%)');
  const [accentColor, setAccentColor] = useState('#0084FF');
  const [buttonColor, setButtonColor] = useState('#0084FF');
  
  // Escalation settings
  const [escalationEnabled, setEscalationEnabled] = useState(true);
  const [escalationButtonText, setEscalationButtonText] = useState('Поговорить с человеком');
  const [escalationMessage, setEscalationMessage] = useState('Ваш запрос передан оператору. Ожидайте ответа.');
  const [escalationAutoAssign, setEscalationAutoAssign] = useState(true);
  
  // Обновляем CSS переменную при изменении акцентного цвета
  useEffect(() => {
    document.documentElement.style.setProperty('--accent-color', accentColor);
  }, [accentColor]);
  const [selectedGradient, setSelectedGradient] = useState(1);
  const [showColorPicker, setShowColorPicker] = useState({
    background: false,
    accent: false,
    button: false
  });
  const [hue, setHue] = useState(0);
  const [saturation, setSaturation] = useState(100);
  const [lightness, setLightness] = useState(50);
  const [desktopBottomOffset, setDesktopBottomOffset] = useState(20);
  const [desktopRightOffset, setDesktopRightOffset] = useState(20);
  const [mobileBottomOffset, setMobileBottomOffset] = useState(20);
  const [mobileRightOffset, setMobileRightOffset] = useState(20);
  const [widgetTitle, setWidgetTitle] = useState('Здравствуйте! 👋 Чем мы можем помочь?');

  // Состояния для кнопок завершения диалога
  const [selectedCompletionButton, setSelectedCompletionButton] = useState('👍 Это помогло');
  const [selectedHumanButton, setSelectedHumanButton] = useState('Получить доп. помощь');

  // Функции для управления триггерными сообщениями
  const addTriggerMessage = () => {
    const newId = Math.max(...triggerMessages.map(m => m.id), 0) + 1;
    setTriggerMessages([...triggerMessages, {
      id: newId,
      timeDelay: 5,
      message: 'У нас есть отличная акция',
      buttonText: 'Расскажи подробнее'
    }]);
  };

  const removeTriggerMessage = (id: number) => {
    setTriggerMessages(triggerMessages.filter(m => m.id !== id));
  };

  const updateTriggerMessage = (id: number, field: string, value: any) => {
    // Ограничиваем количество слов в сообщении (максимум 15 слов)
    if (field === 'message' && typeof value === 'string') {
      const words = value.trim().split(/\s+/);
      if (words.length > 15) {
        value = words.slice(0, 15).join(' ');
      }
    }
    
    setTriggerMessages(triggerMessages.map(m => 
      m.id === id ? { ...m, [field]: value } : m
    ));
  };

  // Функции для управления догоняющими сообщениями
  const addFollowUpMessage = () => {
    const newId = Math.max(...followUpMessages.map(m => m.id), 0) + 1;
    setFollowUpMessages([...followUpMessages, {
      id: newId,
      timeDelay: 5,
      message: 'Продолжим диалог?',
      buttonText: 'Давай'
    }]);
  };

  const removeFollowUpMessage = (id: number) => {
    setFollowUpMessages(followUpMessages.filter(m => m.id !== id));
  };

  const updateFollowUpMessage = (id: number, field: string, value: any) => {
    // Ограничиваем количество слов в сообщении (максимум 15 слов)
    if (field === 'message' && typeof value === 'string') {
      const words = value.trim().split(/\s+/);
      if (words.length > 15) {
        value = words.slice(0, 15).join(' ');
      }
    }
    
    setFollowUpMessages(followUpMessages.map(m => 
      m.id === id ? { ...m, [field]: value } : m
    ));
  };

  // Закрытие палитры при клике вне области (отключено для лучшего UX)
  // useEffect(() => {
  //   const handleClickOutside = (event: MouseEvent) => {
  //     const target = event.target as HTMLElement;
  //     // Проверяем, что клик не по палитре и не по кнопке открытия палитры
  //     if (!target.closest('.color-picker-container') && 
  //         !target.closest('.color-picker-button') &&
  //         !target.closest('.color-picker-preview')) {
  //       setShowColorPicker({
  //         background: false,
  //         accent: false,
  //         button: false
  //       });
  //     }
  //   };

  //   document.addEventListener('click', handleClickOutside);
  //   return () => {
  //     document.removeEventListener('click', handleClickOutside);
  //   };
  // }, []);
  const [widgetDescription, setWidgetDescription] = useState('Выберите вопрос или задайте в чате свой');
  const [buttonTitle, setButtonTitle] = useState('Отправить сообщение');
  const [buttonDescription, setButtonDescription] = useState('Задавайте вопросы, мы всегда поможем');
  const [questions, setQuestions] = useState([
    { id: 1, text: 'Какой у вас тариф?', enabled: true },
    { id: 2, text: 'Как подключить интеграцию?', enabled: true },
    { id: 3, text: 'Сколько стоит подписка?', enabled: true }
  ]);
  // API key для персонального рендера виджета
  const [widgetApiKey, setWidgetApiKey] = useState<string | null>(null);
  const [showDeleteQuestionModal, setShowDeleteQuestionModal] = useState(false);
  const [questionToDelete, setQuestionToDelete] = useState<number | null>(null);

  // Widget functions
  const toggleQuestionEnabled = (questionId: number) => {
    setQuestions(prev => prev.map(q => 
      q.id === questionId ? { ...q, enabled: !q.enabled } : q
    ));
  };

  // Загружаем/создаём apiKey для текущего пользователя
  useEffect(() => {
    const fetchApiKey = async () => {
      try {
        if (!currentUser?.id) { setWidgetApiKey(null); return; }
        const res = await fetch(`${API_CONFIG.BASE_URL}/api/widget/key?userId=${currentUser.id}`, { credentials: 'include' });
        if (!res.ok) throw new Error('Failed to get api key');
        const data = await res.json();
        if (data?.apiKey) setWidgetApiKey(data.apiKey as string);
      } catch (e) {
        console.warn('Failed to fetch widget api key', e);
      }
    };
    fetchApiKey();
  }, [currentUser?.id]);


  const handleCopyScript = async () => {
    try {
      const script = generateWidgetCode();
      await navigator.clipboard.writeText(script);
      setShowScriptModal(true);
    } catch (error) {
      console.error('Ошибка при копировании:', error);
      showNotificationMessage('Ошибка при копировании скрипта');
    }
  };

  const saveWidgetSettings = async () => {
    console.log('=== НАЧАЛО СОХРАНЕНИЯ ВИДЖЕТА ===');
    console.log('currentUser:', currentUser);
    console.log('widgetApiKey:', widgetApiKey);
    console.log('formTrigger:', formTrigger);
    console.log('formTitle:', formTitle);
    console.log('selectedFormFields:', selectedFormFields);
    
    if (!currentUser?.id) {
      console.log('ОШИБКА: Нет пользователя');
      showNotificationMessage('Необходимо войти в систему');
      return;
    }

    try {
      console.log('Сохраняем настройки виджета в базу данных...');
      
      // Используем новую структуру БД с ВСЕМИ полями из интерфейса
      const widgetData = {
        // РАЗДЕЛЫ ВИДЖЕТА - Главная
        ai_agent_name: aiAgentName,
        show_ai_label: showAILabel,
        logo_type: logoType,
        custom_logo: customLogo,
        custom_logo_name: customLogoName,
        widget_title: widgetTitle,
        widget_description: widgetDescription,
        questions: questions,
        button_title: buttonTitle,
        button_description: buttonDescription,
        
        // РАЗДЕЛЫ ВИДЖЕТА - Чат
        manager_photo_type: managerPhotoType,
        manager_photos: managerPhotos,
        status_text: statusText,
        show_status: showStatus,
        welcome_message: welcomeMessage,
        
        // РАЗДЕЛЫ ВИДЖЕТА - Форма
        form_trigger: formTrigger,
        form_timer_seconds: formTimerSeconds,
        form_fields: formFields,
        selected_form_fields: selectedFormFields,
        form_title: formTitle,
        privacy_policy_link: privacyPolicyLink,
        
        // СТИЛИЗАЦИЯ ВИДЖЕТА
        widget_theme: widgetTheme,
        background_color: backgroundColor,
        selected_gradient: selectedGradient,
        accent_color: accentColor,
        
        // НАСТРОЙКИ ЭСКАЛАЦИИ
        escalation_enabled: escalationEnabled,
        escalation_button_text: escalationButtonText,
        escalation_message: escalationMessage,
        escalation_auto_assign: escalationAutoAssign,
        button_color: buttonColor,
        desktop_bottom_offset: desktopBottomOffset,
        desktop_right_offset: desktopRightOffset,
        mobile_bottom_offset: mobileBottomOffset,
        mobile_right_offset: mobileRightOffset,
        
        // БЫСТРЫЕ ОТВЕТЫ И ТРИГГЕРЫ
        trigger_messages_enabled: triggerMessagesEnabled,
        trigger_messages: triggerMessages,
        follow_up_messages: followUpMessages,
        quick_replies: widgetDevelopmentSettings.quickReplies
      };

      console.log('Данные для сохранения:', widgetData);
      console.log('user_id:', currentUser.id);

      // Отправляем JSON-настройки по apiKey на backend (единый источник для виджета)
      const key = widgetApiKey || (currentUser?.id ? `adapto_${currentUser.id}` : 'adapto_demo');
      console.log('Используем API ключ:', key);
      
      const res = await fetch('${API_CONFIG.BASE_URL}/api/widget/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ key, settings: {
          accentColor,
          buttonColor,
          widgetTheme,
          backgroundColor,
          selectedGradient,
          logoType,
          customLogo,
          customLogoName,
          aiAgentName,
          title: widgetTitle,
          description: widgetDescription,
          buttonTitle,
          buttonDescription,
          managerPhotoType,
          managerPhotos,
          statusText,
          showStatus,
          showAILabel,
          questions,
          showCompletionButton,
          selectedCompletionButton,
          showHumanButton,
          selectedHumanButton,
          formTrigger,
          formTitle,
          formTimerSeconds,
          selectedFormFields,
          formFields,
          privacyPolicyLink,
          desktopBottomOffset,
          desktopRightOffset,
          mobileBottomOffset,
          mobileRightOffset,
          triggerMessagesEnabled,
          triggerMessages,
          followUpMessagesEnabled,
          followUpMessages,
          quickReplies: widgetDevelopmentSettings.quickReplies,
          zIndex: widgetDevelopmentSettings.zIndex
        }})
      });
      
      if (!res.ok) {
        const responseText = await res.text();
        console.log('Ответ от API /api/widget/save:', res.status, responseText);
        throw new Error('Save failed: ' + responseText);
      }
      
      const responseText = await res.text();
      console.log('Ответ от API /api/widget/save:', res.status, responseText);
      
      // Дублируем сохранение в Supabase, чтобы после F5 раздел «виджет на сайт» подхватывал изменения
      try {
        const { widgetDevelopmentSettings: widgetDevAPI } = await import('./supabaseClient.js');
        await widgetDevAPI.saveWidgetDevelopmentSettings(currentUser.id, {
          ai_agent_name: aiAgentName,
          show_ai_label: showAILabel,
          logo_type: logoType,
          custom_logo: customLogo,
          custom_logo_name: customLogoName,
          widget_title: widgetTitle,
          widget_description: widgetDescription,
          questions,
          button_title: buttonTitle,
          button_description: buttonDescription,
          manager_photo_type: managerPhotoType,
          manager_photos: managerPhotos,
          status_text: statusText,
          show_status: showStatus,
          welcome_message: welcomeMessage,
          form_trigger: formTrigger,
          form_timer_seconds: formTimerSeconds,
          form_fields: formFields,
          selected_form_fields: selectedFormFields,
          form_title: formTitle,
          privacy_policy_link: privacyPolicyLink,
          widget_theme: widgetTheme,
          background_color: backgroundColor,
          selected_gradient: selectedGradient,
          accent_color: accentColor,
          button_color: buttonColor,
          desktop_bottom_offset: desktopBottomOffset,
          desktop_right_offset: desktopRightOffset,
          mobile_bottom_offset: mobileBottomOffset,
          mobile_right_offset: mobileRightOffset,
          trigger_messages_enabled: triggerMessagesEnabled,
          trigger_messages: triggerMessages,
          follow_up_messages: followUpMessages,
          quick_replies: widgetDevelopmentSettings.quickReplies,
          z_index: widgetDevelopmentSettings.zIndex,
          // Логотип
          logo_url: widgetDevelopmentSettings.logoUrl || '',
          logo_name: widgetDevelopmentSettings.logoName || ''
        });
      } catch (e) {
        console.warn('Не удалось сохранить настройки в Supabase (UI раздел):', e);
      }
      showNotificationMessage('✅ Настройки виджета сохранены!');
      setHasUnsavedChanges(false);

    } catch (error) {
      console.error('Ошибка при сохранении:', error);
      showNotificationMessage(`❌ Ошибка при сохранении: ${error.message}`);
    }
    
    console.log('=== КОНЕЦ СОХРАНЕНИЯ ВИДЖЕТА ===');
  };

  const deleteQuestion = (questionId: number) => {
    setQuestions(prev => prev.filter(q => q.id !== questionId));
    setShowDeleteQuestionModal(false);
    setQuestionToDelete(null);
  };

  const addQuestion = () => {
    if (questions.length >= 4) {
      showNotificationMessage('Максимальное количество вопросов: 4');
      return;
    }
    const newId = Math.max(...questions.map(q => q.id)) + 1;
    setQuestions(prev => [...prev, { id: newId, text: 'Новый вопрос', enabled: true }]);
  };

  const updateQuestionText = (questionId: number, newText: string) => {
    setQuestions(prev => prev.map(q =>
      q.id === questionId ? { ...q, text: newText } : q
    ));
  };

  // Logo upload handler
  const handleLogoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setCustomLogo(e.target?.result as string);
        setCustomLogoName(file.name);
      };
      reader.readAsDataURL(file);
    }
  };

  // Form functions
  const toggleFormField = (fieldType: string) => {
    setSelectedFormFields(prev => {
      if (prev.includes(fieldType)) {
        return prev.filter(type => type !== fieldType);
      } else if (prev.length < 4) {
        return [...prev, fieldType];
      }
      return prev;
    });
  };

  const updateFormFieldPlaceholder = (fieldId: number, newPlaceholder: string) => {
    setFormFields(prev => prev.map(field =>
      field.id === fieldId ? { ...field, placeholder: newPlaceholder } : field
    ));
  };

  const toggleFormFieldRequired = (fieldId: number) => {
    setFormFields(prev => prev.map(field =>
      field.id === fieldId ? { ...field, required: !field.required } : field
    ));
  };

  const validateUrl = (url: string) => {
    try {
      new URL(url);
      return false; // false означает "НЕТ ошибки" (корректный URL)
    } catch {
      return 'Введите корректную ссылку'; // строка означает "ЕСТЬ ошибка" (некорректный URL)
    }
  };

  // Styling functions
  const openColorPicker = (type: 'background' | 'accent' | 'button') => {
    // Close all other pickers
    setShowColorPicker({
      background: false,
      accent: false,
      button: false
    });
    
    // Get current color and convert to HSL
    let currentColor = '#0084FF';
    switch (type) {
      case 'background':
        currentColor = backgroundColor.includes('gradient') ? '#0084FF' : backgroundColor;
        break;
      case 'accent':
        currentColor = accentColor;
        break;
      case 'button':
        currentColor = buttonColor;
        break;
    }
    
    // Convert hex to HSL
    const hex = currentColor.replace('#', '');
    const r = parseInt(hex.substr(0, 2), 16) / 255;
    const g = parseInt(hex.substr(2, 2), 16) / 255;
    const b = parseInt(hex.substr(4, 2), 16) / 255;
    
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h = 0, s = 0, l = (max + min) / 2;
    
    if (max !== min) {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
        case g: h = (b - r) / d + 2; break;
        case b: h = (r - g) / d + 4; break;
      }
      h /= 6;
    }
    
    setHue(Math.round(h * 360));
    setSaturation(Math.round(s * 100));
    setLightness(Math.round(l * 100));
    
    // Open the specific picker
    setShowColorPicker(prev => ({
      ...prev,
      [type]: true
    }));
  };

  const hslToHex = (h: number, s: number, l: number) => {
    l /= 100;
    const a = s * Math.min(l, 1 - l) / 100;
    const f = (n: number) => {
      const k = (n + h / 30) % 12;
      const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
      return Math.round(255 * color).toString(16).padStart(2, '0');
    };
    return `#${f(0)}${f(8)}${f(4)}`;
  };

  const handleColorChange = (color: string, type: 'background' | 'accent' | 'button') => {
    switch (type) {
      case 'background':
        setBackgroundColor(color);
        setSelectedGradient(0); // Reset gradient when solid color is chosen
        break;
      case 'accent':
        setAccentColor(color);
        break;
      case 'button':
        setButtonColor(color);
        break;
    }
    // Не закрываем палитру автоматически - пользователь закроет её крестиком
    // setShowColorPicker(prev => ({
    //   ...prev,
    //   [type]: false
    // }));
  };

  const handleHSLChange = (newHue: number, newSaturation: number, newLightness: number, type: 'background' | 'accent' | 'button') => {
    setHue(newHue);
    setSaturation(newSaturation);
    setLightness(newLightness);
    
    const hexColor = hslToHex(newHue, newSaturation, newLightness);
    handleColorChange(hexColor, type);
  };

  const selectGradient = (gradientNumber: number) => {
    setSelectedGradient(gradientNumber);
    // Set background color based on gradient
    const gradientColors = [
      '#FFFFFF', // Default white
      'linear-gradient(30deg, #52AEFF 0%, #096EFD 100%)',
      'linear-gradient(30deg, #39E978 0%, #2A7344 100%)',
      'linear-gradient(30deg, #4C4C4C 0%, #282828 100%)',
      'linear-gradient(30deg, #D12020 0%, #8A2626 100%)',
      'linear-gradient(30deg, #D15820 0%, #8A4B26 100%)',
      'linear-gradient(30deg, #FDAB54 0%, #FA7F89 100%)',
      'linear-gradient(30deg, #A41AE8 0%, #60268A 100%)',
      'linear-gradient(30deg, #DAC887 0%, #EDAA24 100%)',
      'linear-gradient(30deg, #5675FF 0%, #1749BD 100%)',
      'linear-gradient(30deg, #28BCEE 0%, #27B0C2 100%)'
    ];
    setBackgroundColor(gradientColors[gradientNumber] || '#FFFFFF');
  };

  // Simple function to get hue from hex color
  const getHueFromColor = (hexColor: string) => {
    const hex = hexColor.replace('#', '');
    const r = parseInt(hex.substr(0, 2), 16) / 255;
    const g = parseInt(hex.substr(2, 2), 16) / 255;
    const b = parseInt(hex.substr(4, 2), 16) / 255;
    
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h = 0;
    
    if (max !== min) {
      const d = max - min;
      switch (max) {
        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
        case g: h = (b - r) / d + 2; break;
        case b: h = (r - g) / d + 4; break;
      }
      h /= 6;
    }
    
    return Math.round(h * 360);
  };

  // Convert HEX color to CSS filter for SVG icons
  const getColorFilter = (hexColor: string) => {
    // Convert hex to RGB
    const hex = hexColor.replace('#', '');
    const r = parseInt(hex.substr(0, 2), 16) / 255;
    const g = parseInt(hex.substr(2, 2), 16) / 255;
    const b = parseInt(hex.substr(4, 2), 16) / 255;
    
    // Convert RGB to HSL
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h, s, l = (max + min) / 2;
    
    if (max === min) {
      h = s = 0;
    } else {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r: h = (g - b) / d + (g < b ? 6 : 0); break;
        case g: h = (b - r) / d + 2; break;
        case b: h = (r - g) / d + 4; break;
      }
      h /= 6;
    }
    
    // Convert to CSS filter values
    const hue = Math.round(h * 360);
    const saturation = Math.round(s * 100);
    const lightness = Math.round(l * 100);
    
    // Improved filter calculation for better color accuracy
    const brightness = Math.round(100 + (lightness - 50) * 1.2);
    const contrast = Math.round(100 + (saturation - 50) * 0.5);
    
    return `invert(0%) sepia(100%) saturate(${Math.max(200, saturation * 3)}%) hue-rotate(${hue}deg) brightness(${brightness}%) contrast(${contrast}%)`;
  };

  const renderColorPicker = (type: 'background' | 'accent' | 'button') => {
    if (!showColorPicker[type]) return null;

    return (
      <div className={`color-picker-container absolute left-0 right-0 bg-white border border-[#070F1A]/10 rounded-[10px] shadow-lg z-[9999] p-[10px] w-[200px] bottom-full mb-1`}>
        {/* Крестик для закрытия - справа сверху от палитры */}
        <div className="absolute -top-2 w-6 h-6 cursor-pointer z-[10001] bg-white rounded-full flex items-center justify-center hover:bg-gray-100 transition-colors shadow-md border border-gray-200" style={{ left: '190px' }} onClick={(e) => {
          e.preventDefault();
          e.stopPropagation();
          setShowColorPicker({
            background: false,
            accent: false,
            button: false
          });
        }}>
          <svg width="12" height="12" viewBox="0 0 16 16" fill="none">
            <path d="M12 4L4 12M4 4L12 12" stroke="#8E8E93" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        </div>
        {/* Saturation/Lightness Area */}
        <div className="w-full pb-[75%] relative overflow-hidden mb-2">
          <div 
            className="absolute inset-0 cursor-crosshair"
            style={{ backgroundColor: `hsl(${hue}, 100%, 50%)` }}
            onMouseDown={(e) => {
              e.preventDefault();
              e.stopPropagation();
              const rect = e.currentTarget.getBoundingClientRect();
              const x = Math.max(0, Math.min(100, ((e.clientX - rect.left) / rect.width) * 100));
              const y = Math.max(0, Math.min(100, ((e.clientY - rect.top) / rect.height) * 100));
              handleHSLChange(hue, x, 100 - y, type);
              
              const handleMouseMove = (moveEvent: MouseEvent) => {
                const x = Math.max(0, Math.min(100, ((moveEvent.clientX - rect.left) / rect.width) * 100));
                const y = Math.max(0, Math.min(100, ((moveEvent.clientY - rect.top) / rect.height) * 100));
                handleHSLChange(hue, x, 100 - y, type);
              };
              
              const handleMouseUp = () => {
                document.removeEventListener('mousemove', handleMouseMove);
                document.removeEventListener('mouseup', handleMouseUp);
              };
              
              document.addEventListener('mousemove', handleMouseMove);
              document.addEventListener('mouseup', handleMouseUp);
            }}
          >
            <div 
              className="absolute inset-0"
              style={{ background: 'linear-gradient(to right, #fff, rgba(255,255,255,0))' }}
            >
              <div 
                className="absolute inset-0"
                style={{ background: 'linear-gradient(to top, #000, rgba(0,0,0,0))' }}
              >
                <div 
                  className="absolute w-2 h-2 rounded-[90px] border-2 border-white shadow-lg pointer-events-none"
                  style={{ 
                    top: `${100 - lightness}%`, 
                    left: `${saturation}%`,
                    transform: 'translate(-4px, -4px)'
                  }}
                />
              </div>
            </div>
          </div>
        </div>
        
        {/* Hue Slider */}
        <div className="relative h-[10px] overflow-hidden mb-2">
          <div 
            className="absolute inset-0 cursor-crosshair"
            style={{ 
              background: 'linear-gradient(to right, #f00 0%, #ff0 17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%)'
            }}
            onMouseDown={(e) => {
              e.preventDefault();
              e.stopPropagation();
              const rect = e.currentTarget.getBoundingClientRect();
              const x = Math.max(0, Math.min(100, ((e.clientX - rect.left) / rect.width) * 100));
              handleHSLChange(x * 3.6, saturation, lightness, type);
              
              const handleMouseMove = (moveEvent: MouseEvent) => {
                const x = Math.max(0, Math.min(100, ((moveEvent.clientX - rect.left) / rect.width) * 100));
                handleHSLChange(x * 3.6, saturation, lightness, type);
              };
              
              const handleMouseUp = () => {
                document.removeEventListener('mousemove', handleMouseMove);
                document.removeEventListener('mouseup', handleMouseUp);
              };
              
              document.addEventListener('mousemove', handleMouseMove);
              document.addEventListener('mouseup', handleMouseUp);
            }}
          >
            <div 
              className="absolute w-1 h-2 bg-white rounded-sm shadow-md pointer-events-none"
              style={{ 
                left: `${(hue / 360) * 100}%`,
                transform: 'translateX(-2px)',
                marginTop: '1px'
              }}
            ></div>
          </div>
        </div>
        
        {/* Color Inputs */}
        <div className="flex gap-1 mb-2">
          <div className="flex-1">
            <input
              type="text"
              value={hslToHex(hue, saturation, lightness).toUpperCase()}
              readOnly
              className="w-full text-[11px] p-1 border border-gray-300 rounded text-center"
            />
            <label className="block text-[11px] text-center text-gray-600 mt-1">HEX</label>
          </div>
          <div className="flex-1">
            <input
              type="number"
              value={Math.round(hue)}
              onChange={(e) => handleHSLChange(Number(e.target.value), saturation, lightness, type)}
              className="w-full text-[11px] p-1 border border-gray-300 rounded text-center"
            />
            <label className="block text-[11px] text-center text-gray-600 mt-1">H</label>
          </div>
          <div className="flex-1">
            <input
              type="number"
              value={Math.round(saturation)}
              onChange={(e) => handleHSLChange(hue, Number(e.target.value), lightness, type)}
              className="w-full text-[11px] p-1 border border-gray-300 rounded text-center"
            />
            <label className="block text-[11px] text-center text-gray-600 mt-1">S</label>
          </div>
          <div className="flex-1">
            <input
              type="number"
              value={Math.round(lightness)}
              onChange={(e) => handleHSLChange(hue, saturation, Number(e.target.value), type)}
              className="w-full text-[11px] p-1 border border-gray-300 rounded text-center"
            />
            <label className="block text-[11px] text-center text-gray-600 mt-1">L</label>
          </div>
        </div>
        
        {/* Preset Colors */}
        <div className="flex flex-wrap gap-1 pt-2 border-t border-gray-200">
          {[
            '#D0021B', '#F5A623', '#F8E71C', '#8B572A', '#7ED321', '#417505',
            '#BD10E0', '#9013FE', '#4A90E2', '#50E3C2', '#B8E986', '#000000',
            '#4A4A4A', '#9B9B9B', '#FFFFFF'
          ].map((color) => (
            <div
              key={color}
              className="w-4 h-4 rounded cursor-pointer border border-gray-300"
              style={{ backgroundColor: color }}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                const hex = color.replace('#', '');
                const r = parseInt(hex.substr(0, 2), 16) / 255;
                const g = parseInt(hex.substr(2, 2), 16) / 255;
                const b = parseInt(hex.substr(4, 2), 16) / 255;
                
                const max = Math.max(r, g, b);
                const min = Math.min(r, g, b);
                let h = 0, s = 0, l = (max + min) / 2;
                
                if (max !== min) {
                  const d = max - min;
                  s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                  switch (max) {
                    case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                    case g: h = (b - r) / d + 2; break;
                    case b: h = (r - g) / d + 4; break;
                  }
                  h /= 6;
                }
                
                handleHSLChange(Math.round(h * 360), Math.round(s * 100), Math.round(l * 100), type);
              }}
            ></div>
          ))}
        </div>
      </div>
    );
  };

  // Данные диалогов - для новых пользователей будут пустыми
  // Данные диалогов - пустой массив для новых пользователей
  const [dialogsData, setDialogsData] = useState([]);
  
  // Группированные диалоги по каналам
  const [groupedDialogs, setGroupedDialogs] = useState({
    widget: [],
    telegram: [],
    whatsapp: [],
    vk: [],
    instagram: [],
    admin: [],
    other: []
  });

  // Настройки автопереключения диалогов
  const [showAutoswitchPopup, setShowAutoswitchPopup] = useState(false);
  const [autoswitchSettings, setAutoswitchSettings] = useState({
    disableOnHumanIntervention: true,
    enableAfterOperatorSwitch: false,
    switchDelayMinutes: 5
  });

  // Попап подтверждения завершения диалога
  const [showCloseDialogPopup, setShowCloseDialogPopup] = useState(false);
  const [dialogToClose, setDialogToClose] = useState(null);

  // Попап подтверждения удаления диалога
  const [showDeleteDialogPopup, setShowDeleteDialogPopup] = useState(false);
  const [dialogToDelete, setDialogToDelete] = useState(null);


  // Widget settings
  const [widgetDevelopmentSettings, setWidgetSettings] = useState({
    accentColor: '#0084FF', // Основной цвет виджета
    buttonColor: 'custom', // Используем кастомный цвет
    buttonText: 'Написать нам',
    buttonSubtext: 'Задать вопрос',
    avatar: 'default',
    customButtonColor: '#0084FF', // Синий цвет кнопки
    showCustomColorPicker: false,
    widgetLocation: 'default',
    // Widget positioning
    desktopBottomOffset: 20,
    desktopRightOffset: 20,
    mobileBottomOffset: 20,
    mobileRightOffset: 20,
    zIndex: 9999,
    // Welcome message
    welcomeMessages: ['Привет! Меня зовут Adapto, я ИИ ассистент.'],
    // Trigger question
    triggerQuestion: 'Задать вопрос',
    triggerQuestionEnabled: 'no',
    triggerQuestionDelay: 5,
    triggerQuestionText: 'Здравствуйте! Если появится вопрос, можете задать его в чате, я оперативно отвечу',
    triggerQuickReply: 'Задать вопрос',
    // Follow up message
    followUpMessage: 'no',
    followUpDelay: 10,
    followUpQuestion: 'Продолжим диалог?',
    followUpQuickReply: 'Расскажи подробнее',
    // Quick replies
    quickReplies: ['Расскажи подробнее'],
    privacyPolicyUrl: 'https://',
    dataTags: ['utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content', 'roistat_visit', 'gclid', 'fbclid'],
    excludedPages: [],
    // Новые настройки для виджета
    // Режим работы виджета
    widgetMode: 'chat', // 'chat' или 'questions'
    // Быстрые вопросы
    quickQuestions: [
      { question: 'Как работает ваш сервис?', answer: 'Наш сервис использует ИИ для автоматизации общения с клиентами.' },
      { question: 'Сколько стоит?', answer: 'У нас есть несколько тарифных планов. Базовый план стоит 2990₽ в месяц.' },
      { question: 'Есть ли демо?', answer: 'Да, вы можете попробовать демо-версию бесплатно в течение 14 дней.' }
    ],
    // Настройки формы заявки
    leadFormEnabled: 'yes',
    leadFormTitle: 'Оставьте заявку',
    leadFormDescription: 'Мы свяжемся с вами в ближайшее время',
    leadFormFields: [
      { name: 'name', label: 'Имя', type: 'text', required: true },
      { name: 'phone', label: 'Телефон', type: 'tel', required: true },
      { name: 'email', label: 'Email', type: 'email', required: false }
    ],
    // Настройки внешнего вида
    widgetTheme: 'light', // 'light' или 'dark'
    widgetSize: 'medium', // 'small', 'medium', 'large'
    showAvatar: true,
    showTypingIndicator: true,
    
    // Настройки эскалации
    escalationEnabled: true,
    escalationButtonText: 'Поговорить с человеком',
    escalationMessage: 'Ваш запрос передан оператору. Ожидайте ответа.',
    escalationAutoAssign: true,
    // Настройки поведения
    autoOpenOnScroll: false,
    autoOpenDelay: 0,
    showOnMobile: true,
    // Настройки уведомлений
    notificationSound: true,
    notificationTitle: 'Новое сообщение',
    // Настройки аналитики
    trackEvents: true,
    trackConversions: true,
    // Логотип
    logoUrl: '',
    logoName: '',
    // Дополнительные поля из базы данных
    suggestions: [] // массив предложений
  });

  // Menu items with nested structure - зависит от роли пользователя
  const getMenuItems = () => {
    if (isOperator) {
      // Меню для оператора
      return [
        { id: 'available-dialogs', label: 'Доступные', icon: () => <img src="/Icon inbox.svg" alt="Доступные" className="w-5 h-5" /> },
        { id: 'dialogs', label: 'Диалоги', icon: () => <img src="/dialog.svg" alt="Диалоги" className="w-5 h-5" /> },
        { id: 'crm', label: 'CRM', icon: () => <img src="/crm.svg" alt="CRM" className="w-5 h-5" /> },
        { id: 'operator-statistics', label: 'Моя статистика', icon: () => <img src="/stat.svg" alt="Статистика" className="w-5 h-5" /> },
        { id: 'notifications', label: 'Уведомления', icon: () => <img src="/Icon inbox-1.svg" alt="Уведомления" className="w-5 h-5" /> }
      ];
    }

    // Проверяем роль пользователя
    const isAdmin = currentUser?.role === 'super_admin' || currentUser?.role === 'admin';
    
    if (isAdmin) {
      // Меню для администратора
      return [
        { id: 'statistics', label: 'Статистика', icon: () => <img src="/stat.svg" alt="Статистика" className="w-5 h-5" /> },
        { id: 'dialogs', label: 'Диалоги', icon: () => <img src="/dialog.svg" alt="Диалоги" className="w-5 h-5" /> },
        { id: 'crm', label: 'CRM', icon: () => <img src="/crm.svg" alt="CRM" className="w-5 h-5" /> },
        { 
          id: 'adapto-ai', 
          label: 'ИИ-агент', 
          icon: () => <img src="/ai.svg" alt="ИИ-агент" className="w-5 h-5" />,
          hasSubmenu: true,
          submenu: [
            { id: 'my-adapto', label: 'Тестирование', icon: () => <img src="/test.svg" alt="Тестирование" className="w-4 h-4" /> },
            { id: 'model-settings', label: 'Настройка модели', icon: () => <img src="/set.svg" alt="Настройка модели" className="w-4 h-4" /> },
            { id: 'model-extensions', label: 'Расширения', icon: () => <img src="/plugin.svg" alt="Расширения" className="w-4 h-4" /> }
          ]
        },
        { id: 'knowledge', label: 'База знаний', icon: () => <img src="/baza.svg" alt="База знаний" className="w-5 h-5" /> },
        { 
          id: 'integrations', 
          label: 'Интеграции', 
          icon: () => <img src="/inegra.svg" alt="Интеграции" className="w-5 h-5" />,
          hasSubmenu: true,
          submenu: [
            { id: 'widget-dev', label: 'Виджет на сайт', icon: () => <img src="/wiget.svg" alt="Виджет на сайт" className="w-4 h-4" /> },
            { id: 'messengers', label: 'Мессенджеры', icon: () => <img src="/mess.svg" alt="Мессенджеры" className="w-4 h-4" /> },
            { id: 'crm-systems', label: 'CRM-системы', icon: () => <img src="/crm2.svg" alt="CRM-системы" className="w-4 h-4" /> },
            { id: 'other-integrations', label: 'Сервисы', icon: () => <img src="/more.svg" alt="Сервисы" className="w-4 h-4" /> }
          ]
        },
        { id: 'team', label: 'Команда', icon: () => <img src="/team.svg" alt="Команда" className="w-5 h-5" /> },
        { id: 'stories-management', label: 'Управление сторис', icon: () => <img src="/stories.svg" alt="Сторисы" className="w-5 h-5" /> }
      ];
    } else {
      // Меню для обычных пользователей
      return [
        { id: 'statistics', label: 'Статистика', icon: () => <img src="/stat.svg" alt="Статистика" className="w-5 h-5" /> },
        { id: 'dialogs', label: 'Диалоги', icon: () => <img src="/dialog.svg" alt="Диалоги" className="w-5 h-5" /> },
        { id: 'crm', label: 'CRM', icon: () => <img src="/crm.svg" alt="CRM" className="w-5 h-5" /> },
        { 
          id: 'adapto-ai', 
          label: 'ИИ-агент', 
          icon: () => <img src="/ai.svg" alt="ИИ-агент" className="w-5 h-5" />,
          hasSubmenu: true,
          submenu: [
            { id: 'my-adapto', label: 'Тестирование', icon: () => <img src="/test.svg" alt="Тестирование" className="w-4 h-4" /> },
            { id: 'model-settings', label: 'Настройка модели', icon: () => <img src="/set.svg" alt="Настройка модели" className="w-4 h-4" /> },
            { id: 'model-extensions', label: 'Расширения', icon: () => <img src="/plugin.svg" alt="Расширения" className="w-4 h-4" /> }
          ]
        },
        { id: 'knowledge', label: 'База знаний', icon: () => <img src="/baza.svg" alt="База знаний" className="w-5 h-5" /> },
        { 
          id: 'integrations', 
          label: 'Интеграции', 
          icon: () => <img src="/inegra.svg" alt="Интеграции" className="w-5 h-5" />,
          hasSubmenu: true,
          submenu: [
            { id: 'widget-dev', label: 'Виджет на сайт', icon: () => <img src="/wiget.svg" alt="Виджет на сайт" className="w-4 h-4" /> },
            { id: 'messengers', label: 'Мессенджеры', icon: () => <img src="/mess.svg" alt="Мессенджеры" className="w-4 h-4" /> },
            { id: 'crm-systems', label: 'CRM-системы', icon: () => <img src="/crm2.svg" alt="CRM-системы" className="w-4 h-4" /> },
            { id: 'other-integrations', label: 'Сервисы', icon: () => <img src="/more.svg" alt="Сервисы" className="w-4 h-4" /> }
          ]
        },
        { id: 'team', label: 'Команда', icon: () => <img src="/team.svg" alt="Команда" className="w-5 h-5" /> },
        { id: 'operator-stats', label: 'Статистика', icon: () => <img src="/stats.svg" alt="Статистика" className="w-5 h-5" /> }
        // Обычные пользователи НЕ видят "Управление сторис"
      ];
    }
  };

  const menuItems = getMenuItems();

  // Notification function
  const showNotificationMessage = (message) => {
    setNotificationMessage(message);
    setShowNotification(true);
    setTimeout(() => setShowNotification(false), 3000);
  };

  // System notification function
  const showSystemNotificationMessage = (message) => {
    setSystemNotification(message);
    setShowSystemNotification(true);
    setTimeout(() => setShowSystemNotification(false), 4000);
  };

  // Функция для обработки навигации с проверкой несохраненных изменений
  const handleNavigation = (newSection) => {
    if (hasUnsavedChanges) {
      setPendingNavigation(newSection);
      setShowUnsavedChangesModal(true);
    } else {
      setActiveSection(newSection);
    }
  };

  // Функция для подтверждения навигации (отменить изменения)
  const confirmNavigation = () => {
    if (pendingNavigation) {
      setActiveSection(pendingNavigation);
      setHasUnsavedChanges(false);
    }
    setShowUnsavedChangesModal(false);
    setPendingNavigation(null);
  };

  // Функция для отмены навигации (сохранить изменения)
  const cancelNavigation = () => {
    setShowUnsavedChangesModal(false);
    setPendingNavigation(null);
  };

  // Данные для всех метрик статистики
  const metricsData = {
    'widget-opens': {
      title: 'Количество открытий виджета',
      description: 'Общее количество раз, когда пользователи открывали виджет на сайте.',
      formula: 'Сумма всех открытий виджета за период',
      explanation: 'Эта метрика показывает, насколько активно пользователи взаимодействуют с вашим виджетом. Высокое количество открытий указывает на хорошую видимость и привлекательность виджета.\n\nРекомендации:\n• Размещайте виджет на видных местах сайта\n• Используйте привлекательные цвета и анимации\n• Добавьте призыв к действию рядом с виджетом'
    },
    'dialog-count': {
      title: 'Количество диалогов',
      description: 'Общее число разговоров между пользователями и ИИ-агентом.',
      formula: 'Количество уникальных разговоров за период',
      explanation: 'Эта метрика показывает общую активность пользователей с вашим ИИ-агентом. Каждый диалог представляет уникальное взаимодействие клиента с системой.\n\nРекомендации:\n• Анализируйте тренды роста диалогов\n• Сравнивайте с количеством открытий виджета\n• Оптимизируйте приветственные сообщения для увеличения конверсии'
    },
    'message-count': {
      title: 'Количество сообщений',
      description: 'Общее количество всех сообщений, отправленных в разговорах между пользователями и ИИ-агентом.',
      formula: 'Сумма всех сообщений пользователей и ИИ-агента за период',
      explanation: 'Эта метрика показывает общую активность общения в вашей системе. Высокое количество сообщений указывает на вовлеченность пользователей и качество диалогов.\n\nРекомендации:\n• Анализируйте соотношение сообщений пользователей и ИИ-агента\n• Оптимизируйте длину ответов ИИ-агента\n• Улучшайте качество вопросов для более глубокого взаимодействия'
    },
    'avg-messages-per-dialog': {
      title: 'Среднее кол-во смс на диалог',
      description: 'Среднее число сообщений в одном разговоре между пользователем и ИИ-агентом.',
      formula: 'Общее количество сообщений / Количество диалогов',
      explanation: 'Эта метрика показывает глубину взаимодействия пользователей с ИИ-агентом. Высокое значение указывает на качественные диалоги и заинтересованность клиентов.\\n\\nРекомендации:\\n• Целевое значение: 5-10 сообщений на диалог\\n• Слишком мало сообщений - упростите вопросы\\n• Слишком много - оптимизируйте ответы ИИ-агента'
    },
    'conversion-rate': {
      title: 'Конверсия в основную цель',
      description: 'Процент разговоров, которые успешно достигли вашей основной бизнес-цели.',
      formula: '0 (converted chats) / 0 (total analyzed chats) × 100% = 0%',
      explanation: 'Эта метрика показывает эффективность ИИ-агента в достижении ваших бизнес-целей. Высокий процент конверсии означает, что агент успешно помогает клиентам.\\n\\nРекомендации:\\n• Целевое значение: 15-25% для большинства бизнесов\\n• Анализируйте неудачные диалоги для улучшения\\n• Настройте промпты под ваши конкретные цели'
    },
    'bounce-rate': {
      title: 'Процент отказов',
      description: 'Процент лидов, с которым ИИ пытался достичь основной цели, но клиент перестал отвечать.',
      formula: '0 (inconclusive leads) / 0 (total analyzed chats) × 100% = 0%',
      explanation: 'Эта метрика показывает процент клиентов, которые прекратили общение до достижения цели. Низкий процент отказов указывает на качественное взаимодействие.\\n\\nРекомендации:\\n• Целевое значение: менее 20%\\n• Анализируйте причины отказов\\n• Улучшайте первые сообщения и подход'
    },
    'customer-engagement': {
      title: 'Вовлечение клиента',
      description: 'Среднее количество сообщений, отправляемых клиентами в каждом разговоре.',
      formula: '0 (total messages) / 0 (total chats) = 0',
      explanation: 'Эта метрика показывает, насколько активно клиенты участвуют в диалоге. Высокое вовлечение указывает на интерес к продукту или услуге.\n\nРекомендации:\n• Целевое значение: 3-7 сообщений от клиента\n• Задавайте открытые вопросы\n• Показывайте заинтересованность в решении проблем клиента'
    },
    'resolved-questions': {
      title: 'Количество решенных вопросов',
      description: 'Количество разговоров, в которых ИИ-агент ответил, а клиент дал положительный отзыв или не запросил разговор с коллегой.',
      formula: 'Количество успешно завершенных разговоров'
    },
    'rejection-rate': {
      title: 'Коэффициент отклонений',
      description: 'Процент разговоров, где клиенты никогда не отвечали на первоначальные сообщения ИИ.',
      formula: '0 (no response chats) / 0 (total chats) × 100% = 0%'
    },
    'avg-response-time': {
      title: 'Средняя скорость ответа ИИ-агента',
      description: 'Среднее время, которое нужно ИИ-агенту, чтобы ответить на сообщение клиента',
      formula: '0.0 sec (sum of response times) / 0 (total AI responses) = 0 сек',
      explanation: 'Эта метрика показывает скорость работы ИИ-агента. Быстрые ответы улучшают пользовательский опыт и повышают конверсию.\\n\\nРекомендации:\\n• Целевое значение: менее 2 секунд\\n• Оптимизируйте промпты для более быстрых ответов\\n• Используйте кэширование для частых вопросов'
    },
    'avg-resolution-time': {
      title: 'Средняя скорость разрешения вопроса',
      description: 'Среднее время, которое необходимо ИИ-агенту для полного разрешения вопроса',
      formula: 'Время от первого сообщения до завершения разговора',
      explanation: 'Эта метрика показывает, насколько быстро ИИ-агент решает проблемы клиентов. Быстрое разрешение повышает удовлетворенность клиентов.\\n\\nРекомендации:\\n• Целевое значение: 2-5 минут\\n• Структурируйте ответы для быстрого решения\\n• Предоставляйте пошаговые инструкции'
    },
    'ai-effectiveness': {
      title: 'Оценка эффективности ИИ-агента',
      description: 'Общая оценка эффективности работы ИИ-агента на основе различных показателей качества.',
      formula: '(Точность ответов + Скорость работы + Удовлетворенность клиентов + Процент успешных разрешений) / 4',
      explanation: 'Эта метрика дает общую оценку качества работы ИИ-агента. Высокая оценка означает эффективную работу системы.\\n\\nРекомендации:\\n• Целевое значение: 8+ из 10\\n• Регулярно обновляйте базу знаний\\n• Анализируйте отзывы клиентов для улучшений'
    },
    'help-request-rate': {
      title: 'Процент чатов с запросом о помощи',
      description: 'Процент разговоров, где клиенты запросили передачу разговора человеку из общего количества разговоров.',
      formula: 'Количество чатов с запросом помощи / Общее количество чатов × 100%',
      explanation: 'Эта метрика показывает, насколько часто клиенты просят помощи человека. Низкий процент указывает на качественную работу ИИ-агента.\\n\\nРекомендации:\\n• Целевое значение: менее 5%\\n• Улучшайте промпты для сложных вопросов\\n• Добавляйте эскалацию к человеку при необходимости'
    }
  };

  // Function to open metric info modal
  const openMetricInfo = (metricInfo) => {
    setCurrentMetricInfo(metricInfo);
    setShowMetricInfoModal(true);
  };

  // Function to handle hover on metric icon
  const handleMetricHover = (metricId, event) => {
    const rect = event.target.getBoundingClientRect();
    setTooltipPosition({ x: rect.left + rect.width / 2, y: rect.top - 10 });
    setHoveredMetricId(metricId);
  };

  // Function to handle mouse leave
  const handleMetricLeave = () => {
    setHoveredMetricId(null);
  };

    // Function to generate trend indicator
  const generateTrendIndicator = (trend, value, inverted = false) => {
    const isPositive = inverted ? trend === 'down' : trend === 'up';
    return (
      <div className="flex items-end gap-1 ml-2">
        <svg 
          className={`w-3 h-3 ${isPositive ? 'text-green-600' : 'text-red-600'}`} 
          fill="none" 
          stroke="currentColor" 
          viewBox="0 0 24 24"
          style={{ paddingBottom: '0px', borderBottomWidth: '0px', height: '31px' }}
        >
          {isPositive ? (
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 10l7-7m0 0l7 7m-7-7v18" style={{ paddingBottom: '0px' }} />
          ) : (
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" style={{ paddingBottom: '0px' }} />
          )}
        </svg>
        <div className={`text-[11px] font-[500] ${isPositive ? 'text-green-600' : 'text-red-600'}`} style={{ height: '13px' }}>
          {value}
        </div>
      </div>
    );
  };

  // Function to generate progress bar with 50 sticks
  const generateProgressBar = (value, maxValue = 100, isRating = false, color = 'blue') => {
    const totalSticks = 50;
    let filledSticks;
    
    if (isRating) {
      // For rating: 10 points = 50 sticks, so 1 point = 5 sticks
      filledSticks = Math.round((value / 10) * totalSticks);
    } else {
      // For percentage: 100% = 50 sticks, so 1% = 0.5 sticks
      filledSticks = Math.round((value / maxValue) * totalSticks);
    }
    
    const colorMap = {
      blue: '#0084FF',
      purple: '#8B5CF6',
      green: '#10B981',
      orange: '#F59E0B',
      red: '#EF4444',
      indigo: '#6366F1'
    };
    
    const sticks = [];
    for (let i = 0; i < totalSticks; i++) {
      const isFilled = i < filledSticks;
      sticks.push(
        <div
          key={i}
          className={`w-[2px] h-[16px] rounded-[1px] ${
            isFilled ? '' : 'bg-[#D3D3D3]'
          }`}
          style={{
            position: 'absolute',
            left: `${i * 4}px`,
            top: '0px',
            backgroundColor: isFilled ? colorMap[color] : '#D3D3D3'
          }}
        />
      );
    }
    
    return (
      <div className="relative w-[200px] h-[16px] mt-2">
        {sticks}
      </div>
    );
  };

  // Generate widget code
  const generateWidgetCode = () => {
    const settings = {
      accentColor: widgetDevelopmentSettings.accentColor,
      buttonText: widgetDevelopmentSettings.buttonText,
      buttonStyle: widgetDevelopmentSettings.buttonColor || 'rectangle',
      buttonColor: widgetDevelopmentSettings.buttonColor || 'light',
      customButtonColor: widgetDevelopmentSettings.customButtonColor,
      widgetMode: widgetDevelopmentSettings.widgetMode,
      quickQuestions: widgetDevelopmentSettings.quickQuestions,
      leadFormEnabled: widgetDevelopmentSettings.leadFormEnabled,
      leadFormTitle: widgetDevelopmentSettings.leadFormTitle,
      leadFormDescription: widgetDevelopmentSettings.leadFormDescription,
      leadFormFields: widgetDevelopmentSettings.leadFormFields,
      welcomeMessages: widgetDevelopmentSettings.welcomeMessages,
      quickReplies: widgetDevelopmentSettings.quickReplies,
      logoUrl: widgetDevelopmentSettings.logoUrl,
      logoName: widgetDevelopmentSettings.logoName,
      suggestions: widgetDevelopmentSettings.suggestions,
      triggerQuestionEnabled: widgetDevelopmentSettings.triggerQuestionEnabled,
      triggerQuestionDelay: widgetDevelopmentSettings.triggerQuestionDelay,
      triggerQuestionText: widgetDevelopmentSettings.triggerQuestionText,
      followUpMessage: widgetDevelopmentSettings.followUpMessage,
      followUpDelay: widgetDevelopmentSettings.followUpDelay,
      followUpQuestion: widgetDevelopmentSettings.followUpQuestion,
      followUpQuickReply: widgetDevelopmentSettings.followUpQuickReply,
      privacyPolicyUrl: widgetDevelopmentSettings.privacyPolicyUrl,
      dataTags: widgetDevelopmentSettings.dataTags,
      widgetLocation: widgetDevelopmentSettings.widgetLocation,
      desktopBottomOffset: widgetDevelopmentSettings.desktopBottomOffset,
      desktopRightOffset: widgetDevelopmentSettings.desktopRightOffset,
      mobileBottomOffset: widgetDevelopmentSettings.mobileBottomOffset,
      mobileRightOffset: widgetDevelopmentSettings.mobileRightOffset,
      zIndex: widgetDevelopmentSettings.zIndex,
      avatar: widgetDevelopmentSettings.avatar
    };

    const encodedSettings = encodeURIComponent(JSON.stringify(settings));
    
    // Однострочный скрипт как у Tidio: один тег + data-key
    const userKey = widgetApiKey || (currentUser?.id ? `adapto_${currentUser.id}` : 'adapto_demo');
    // Для локальной разработки используем ngrok URL, для продакшена - ENV переменную
    const baseUrl = import.meta.env.PROD
      ? (import.meta.env.VITE_WIDGET_URL || 'https://your-domain.com')
      : 'https://666eefe9cca2.ngrok-free.app';
    return `<script src="${baseUrl}/adapto.js" data-key="${userKey}"></script>`;
  };

  // Open live preview in new tab using same widget script (identical to production embed)
  const openWidgetPreview = () => {
    const userKey = widgetApiKey || (currentUser?.id ? `adapto_${currentUser.id}` : 'adapto_demo');
    const url = `${API_CONFIG.BASE_URL}/widget-preview.html?key=${userKey}&noCache=1&ts=${Date.now()}`;
    window.open(url, '_blank', 'noopener,noreferrer');
  };

  // Export functions
  const exportToCSV = () => {
    const period = dateRange.start && dateRange.end 
      ? `${dateRange.start.toLocaleDateString()} - ${dateRange.end.toLocaleDateString()}`
      : 'Все время';
    
    const data = [
      ['Метрика', 'Значение', 'Период'],
      ['Количество диалогов', statisticsAggregates.dialogsTotal || 0, period],
      ['Количество сообщений', statisticsAggregates.messagesTotal || 0, period],
      ['Среднее сообщений на диалог', (statisticsAggregates.avgMessagesPerDialog || 0).toFixed(2), period],
      ['Открытий виджета', statisticsAggregates.widget_opens || 0, period],
      ['Конверсия в основную цель', `${Math.round(statisticsAggregates.conversionRate || 0)}%`, period],
      ['Процент отказов', `${Math.round(statisticsAggregates.bounce_rate || 0)}%`, period],
      ['Вовлечение клиента', `${Math.round(statisticsAggregates.customer_engagement || 0)}%`, period],
      ['Решенных вопросов', statisticsAggregates.resolved_questions || 0, period],
      ['Коэффициент отклонений', `${Math.round(statisticsAggregates.escalation_rate || 0)}%`, period],
      ['Средняя скорость ответа', `${Math.round(statisticsAggregates.avg_response_time || 0)}с`, period],
      ['Средняя скорость разрешения', `${Math.round(statisticsAggregates.avg_resolution_time || 0)}м`, period],
      ['Оценка эффективности ИИ', `${(statisticsAggregates.ai_effectiveness_score || 0).toFixed(1)}/10`, period],
      ['Процент запросов о помощи', `${Math.round(statisticsAggregates.help_request_rate || 0)}%`, period]
    ];
    
    const csvContent = data.map(row => row.join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `statistics_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const exportToXLS = () => {
    const period = dateRange.start && dateRange.end 
      ? `${dateRange.start.toLocaleDateString()} - ${dateRange.end.toLocaleDateString()}`
      : 'Все время';
    
    const data = [
      ['Метрика', 'Значение', 'Период'],
      ['Количество диалогов', statisticsAggregates.dialogsTotal || 0, period],
      ['Количество сообщений', statisticsAggregates.messagesTotal || 0, period],
      ['Среднее сообщений на диалог', (statisticsAggregates.avgMessagesPerDialog || 0).toFixed(2), period],
      ['Открытий виджета', statisticsAggregates.widget_opens || 0, period],
      ['Конверсия в основную цель', `${Math.round(statisticsAggregates.conversionRate || 0)}%`, period],
      ['Процент отказов', `${Math.round(statisticsAggregates.bounce_rate || 0)}%`, period],
      ['Вовлечение клиента', `${Math.round(statisticsAggregates.customer_engagement || 0)}%`, period],
      ['Решенных вопросов', statisticsAggregates.resolved_questions || 0, period],
      ['Коэффициент отклонений', `${Math.round(statisticsAggregates.escalation_rate || 0)}%`, period],
      ['Средняя скорость ответа', `${Math.round(statisticsAggregates.avg_response_time || 0)}с`, period],
      ['Средняя скорость разрешения', `${Math.round(statisticsAggregates.avg_resolution_time || 0)}м`, period],
      ['Оценка эффективности ИИ', `${(statisticsAggregates.ai_effectiveness_score || 0).toFixed(1)}/10`, period],
      ['Процент запросов о помощи', `${Math.round(statisticsAggregates.help_request_rate || 0)}%`, period]
    ];
    
    let xlsContent = '<table>';
    data.forEach(row => {
      xlsContent += '<tr>';
      row.forEach(cell => {
        xlsContent += `<td>${cell}</td>`;
      });
      xlsContent += '</tr>';
    });
    xlsContent += '</table>';
    
    const blob = new Blob([xlsContent], { type: 'application/vnd.ms-excel' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `statistics_${new Date().toISOString().split('T')[0]}.xls`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const exportDialogsToCSV = () => {
    const data = [
      ['Пользователь', 'Email', 'Источник', 'Статус', 'Последнее сообщение', 'Время', 'Количество сообщений']
    ];
    
    dialogsData.forEach(dialog => {
      data.push([
        dialog.user,
        dialog.email,
        dialog.source,
        dialog.status === 'active' ? 'Активный' : dialog.status === 'waiting' ? 'Ожидает' : 'Закрыт',
        dialog.lastMessage,
        dialog.time,
        dialog.messages.length.toString()
      ]);
    });
    
    const csvContent = data.map(row => row.join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `dialogs_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Функции экспорта CRM данных
  const exportCRMToCSV = () => {
    const data = [
      ['Название', 'Стадия', 'Качество лида', 'Сумма', 'Дни', 'Владелец', 'Статус', 'Дата создания', 'Клиент', 'Email', 'Телефон', 'Компания']
    ];
    
    deals.forEach(deal => {
      data.push([
        deal.title,
        deal.stage,
        deal.leadQuality,
        deal.amount.toString(),
        deal.days.toString(),
        deal.ownerName,
        deal.isResolved ? 'Завершена' : 'Активна',
        deal.createdDate,
        deal.client.name,
        deal.client.email,
        deal.client.phone,
        deal.client.company
      ]);
    });
    
    const csvContent = data.map(row => row.join(',')).join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `crm_deals_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const exportCRMToXLS = () => {
    const headers = ['Название', 'Стадия', 'Качество лида', 'Сумма', 'Дни', 'Владелец', 'Статус', 'Дата создания', 'Клиент', 'Email', 'Телефон', 'Компания'];
    const data = deals.map(deal => [
      deal.title,
      deal.stage,
      deal.leadQuality,
      deal.amount,
      deal.days,
      deal.ownerName,
      deal.isResolved ? 'Завершена' : 'Активна',
      deal.createdDate,
      deal.client.name,
      deal.client.email,
      deal.client.phone,
      deal.client.company
    ]);
    
    // Создаем простой HTML файл с таблицей для экспорта в Excel
    const htmlContent = `
      <html>
        <head>
          <meta charset="utf-8">
          <style>
            table { border-collapse: collapse; width: 100%; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
          </style>
        </head>
        <body>
          <table>
            <thead>
              <tr>
                ${headers.map(header => `<th>${header}</th>`).join('')}
              </tr>
            </thead>
            <tbody>
              ${data.map(row => `<tr>${row.map(cell => `<td>${cell}</td>`).join('')}</tr>`).join('')}
            </tbody>
          </table>
        </body>
      </html>
    `;
    
    const blob = new Blob([htmlContent], { type: 'application/vnd.ms-excel;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `crm_deals_${new Date().toISOString().split('T')[0]}.xls`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Функция экспорта диалога в текстовый файл
  const exportDialogToText = (dialog) => {
    if (!dialog) return;

    let textContent = `ДИАЛОГ: ${dialog.name || 'Без имени'}\n`;
    textContent += `====================================\n\n`;
    textContent += `Источник: ${dialog.source === 'vk' ? 'Вконтакте' : dialog.source}\n`;
    textContent += `Email: ${dialog.email || '—'}\n`;
    textContent += `Телефон: ${dialog.phone || '—'}\n`;
    textContent += `Время начала: ${dialog.startTime}\n`;
    textContent += `Последняя активность: ${dialog.lastActivity}\n`;
    textContent += `Статус: ${dialog.status}\n`;
    if (dialog.assignedTo) {
      textContent += `Ответственный: ${dialog.assignedTo === (currentUser?.id || 'current_operator') ? 'Вы' : 'Другой оператор'}\n`;
    }
    textContent += `\n==== СООБЩЕНИЯ ====\n\n`;

    if (dialog.messages && dialog.messages.length > 0) {
      dialog.messages.forEach((message) => {
        const sender = message.isUser ? dialog.name || 'Клиент' : 'ИИ-агент';
        textContent += `[${message.time}] ${sender}: ${message.text}\n\n`;
      });
    } else {
      textContent += 'Сообщений нет\n';
    }

    textContent += `\n==== ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ ====\n`;
    textContent += `Общее количество сообщений: ${dialog.messageCount}\n`;
    textContent += `Приоритет: ${dialog.priority || 'Не установлен'}\n`;
    textContent += `Можно перехватить: ${dialog.canTakeover ? 'Да' : 'Нет'}\n`;
    textContent += `\nЭкспортировано: ${new Date().toLocaleString('ru-RU')}\n`;

    const blob = new Blob([textContent], { type: 'text/plain;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `dialog_${dialog.name || 'unknown'}_${new Date().toISOString().split('T')[0]}.txt`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleChatFileUpload = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.multiple = true;
    input.accept = 'image/*,.pdf,.doc,.docx,.txt';
    input.onchange = (e) => {
      const files = Array.from((e.target as HTMLInputElement).files || []);
      console.log('Selected files:', files);
      // Здесь можно добавить логику для обработки файлов
    };
    input.click();
  };

  const handleSendMessage = async () => {
    if (!currentUser?.id) return;
    
    // Валидация сообщения
    const validation = validateMessage(messageText);
    if (!validation.isValid) {
      showNotificationMessage(`❌ Ошибка валидации: ${validation.errors.join(', ')}`);
      return;
    }
    
    // Проверка rate limit
    const rateLimit = checkRateLimit(currentUser.id);
    if (!rateLimit.allowed) {
      const resetTime = new Date(rateLimit.resetTime).toLocaleTimeString();
      showNotificationMessage(`❌ Слишком много сообщений. Попробуйте снова в ${resetTime}`);
      return;
    }
    
    // Санитизация сообщения
    const sanitizedMessage = sanitizeMessage(validation.sanitizedMessage);
    
    try {
      // Генерируем уникальный ID для сообщения
      const messageId = `user_${Date.now()}_${Math.random()}`;
      
      // Добавляем сообщение пользователя в локальное состояние
      const userMessage = createUnifiedMessage({
        id: messageId,
        type: 'user',
        text: sanitizedMessage,
        time: 'Только что',
        timestamp: getUniqueTimestamp()
      });
      setChatHistory(prev => [...prev, userMessage]);
      
      // Прокручиваем к низу чата
      ChatUtils.scrollToBottom(chatHistoryRef);
      
      // Очищаем поле ввода
      setMessageText('');
      
      // Проверяем статус сети
      if (!OfflineManager.isOnline()) {
        // Offline режим - сохраняем сообщение локально
        OfflineManager.saveOfflineMessage({
          id: messageId,
          text: sanitizedMessage,
          type: 'user',
          userId: currentUser.id,
          assistantId: currentUser.id
        }, 'admin');
        
        // Показываем уведомление об offline режиме
        showNotificationMessage('📴 Сообщение сохранено в offline режиме. Будет отправлено при восстановлении связи.');
        return;
      }
      
      // Online режим - обычная отправка
      // Сохраняем сообщение пользователя в базу данных
      await chatHistoryAPI.saveMessage(currentUser.id, 'user', messageText, 'admin');
      
      // Показываем индикатор загрузки
      const loadingMessage = ChatUtils.createLoadingMessage('assistant');
      setChatHistory(prev => [...prev, loadingMessage]);
      
      // Отправляем сообщение через новую систему ai-agent-system
      const assistantId = currentUser.id;
      const result = await sendMessageToAiAgent(sanitizedMessage, currentUser.id, assistantId, chatHistory);
      
      if (result.success) {
        // Создаем ответ от ИИ
        const aiMessage = createUnifiedMessage({
          id: `ai_${Date.now()}_${Math.random()}`,
          type: 'assistant',
          text: result.response || 'Извините, произошла ошибка',
          time: 'Только что',
          timestamp: getUniqueTimestamp()
        });
        
        // Добавляем сообщение и убираем индикатор загрузки
        setChatHistory(prev => ChatUtils.addMessageAndRemoveLoading(prev, aiMessage));
        
        // Сохраняем ответ ИИ в базу данных
        await ChatUtils.saveMessageToDB(currentUser.id, 'assistant', result.response || 'Извините, произошла ошибка', 'admin', chatHistoryAPI);
        
        // Прокручиваем к низу чата
        ChatUtils.scrollToBottom(chatHistoryRef);
      } else {
        // Показываем ошибку
        const errorMessage = ChatUtils.createErrorMessage('Извините, произошла ошибка при обработке сообщения');
        setChatHistory(prev => ChatUtils.addMessageAndRemoveLoading(prev, errorMessage));
        ChatUtils.scrollToBottom(chatHistoryRef);
      }
      
      // Старая логика удалена - используем новую систему ai-agent-system
      
    } catch (error) {
      const errorMessage = ChatUtils.handleChatError(error, showNotificationMessage);
      setChatHistory(prev => ChatUtils.addMessageAndRemoveLoading(prev, errorMessage));
      ChatUtils.scrollToBottom(chatHistoryRef);
    }
  };


  const handleWidgetChatSendMessage = async () => {
    if (!currentMessage.trim() || !currentUser?.id) return;
    
    try {
      // Загружаем корректировки перед отправкой
      const corrections = await botCorrectionsAPI.getCorrections(currentUser.id);
      
      // Добавляем сообщение пользователя в чат
      const newMessage = {
        id: getUniqueTimestamp(), 
        text: currentMessage, 
        isUser: true, 
        time: 'Только что',
        timestamp: getUniqueTimestamp()
      };
      setChatMessages(prev => [...prev, newMessage]);
      
      // Устанавливаем флаг, что ИИ получил ответ от клиента
      setAiReceivedResponse(true);
      
      // Скрываем кнопки при отправке нового сообщения пользователем
      setShowCompletionButton(false);
      setShowHumanButton(false);
      
      // Прокручиваем к низу виджета
      ChatUtils.scrollToBottom(widgetChatRef);
      
      // Локальный триггер формы по ключевым словам (в процессе диалога)
      try {
        const lc = String(currentMessage || '').toLowerCase();
        const formTriggers = [
          /заявк/,
          /записаться/,
          /консультац/,
          /остав(ить)?\s*(номер|телефон)/,
          /заполн(ить)?\s*форму/,
          /оформить\s*заявку/,
          /связаться/,
          /перезвонить/
        ];
        if (formTriggers.some(r => r.test(lc))) {
          setShowForm(true);
        }
      } catch (_) {}
      
      
      
      // Создаем тестовый диалог для раздела "Виджет на сайт" (без handover)
      await createTestDialog('Виджет на сайт', currentMessage);
      
      // Сохраняем сообщение в базу данных с каналом 'widget'
      await chatHistoryAPI.saveMessage(currentUser.id, 'user', currentMessage, 'widget');
      
      // Отправляем уведомление о новом сообщении от клиента
      const message = `💬 Новое сообщение от клиента\n\n👤 Клиент: Виджет\n💬 Сообщение: "${currentMessage}"\n🕒 Время: ${new Date().toLocaleString('ru-RU')}`;
      sendTelegramNotification(message, 'new_messages');
      
      // Очищаем поле ввода
      setCurrentMessage('');
      
      // Показываем индикатор загрузки
      const loadingMessage = ChatUtils.createLoadingMessage('assistant', false);
      setChatMessages(prev => [...prev, loadingMessage]);
      
      // Прокручиваем к низу виджета
      ChatUtils.scrollToBottom(widgetChatRef);
      
      // Подготавливаем данные для отправки
      // Фильтруем только активные корректировки
      const activeCorrectionsList = corrections.filter((_, index) => activeCorrections.has(index));
      
      const requestData = {
        message: currentMessage,
        conversationHistory: chatMessages,
        agentId: currentUser.id,
        setupData: {
          ...setupData,
          knowledgeItems: [
            ...(setupData.knowledgeItems || []),
            ...activeCorrectionsList.map(correction => ({
              type: 'correction',
              content: correction.correction || correction
            }))
          ]
        }
      };
      
      console.log('Sending widget request to API with corrections:', {
        loadedCorrections: corrections,
        activeCorrections: activeCorrectionsList,
        activeCorrectionsIndexes: Array.from(activeCorrections),
        knowledgeItems: requestData.setupData.knowledgeItems
      });
      
      // Отправляем запрос к виджету API
      const apiKey = `adapto_${currentUser.id}_${Date.now()}`;
      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.WIDGET_ENDPOINT}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          key: apiKey,
          message: currentMessage,
          conversationHistory: chatMessages.map(msg => ({
            role: msg.isUser ? 'user' : 'assistant',
            content: msg.text
          }))
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      const assistantResponse = data.answer || data.response || data.message || 'Извините, произошла ошибка.';
      
      // Если бэкенд просит показать форму — показываем
      if (data.showForm === true) {
        setShowForm(true);
      }
      
      // Удаляем сообщение загрузки и добавляем ответ
      setChatMessages(prev => {
        const withoutLoading = prev.filter(msg => !msg.isTyping);
        return [...withoutLoading, { 
          id: getUniqueTimestamp(), 
          text: assistantResponse, 
          isUser: false, 
          time: 'Только что',
          timestamp: getUniqueTimestamp()
        }];
      });
      
      // Прокручиваем к низу виджета
      ChatUtils.scrollToBottom(widgetChatRef);
      
      // Если бэкенд просит эскалацию — создаём диалог с need_handover=true
      if (data.handover === true) {
        try {
          // Создаем диалог с флагом need_handover
          const dialog = await createTestDialog('Виджет: требуется оператор', currentMessage, true);
          
          // Обновляем приоритет в БД
          if (dialog && dialog.id) {
            try {
              await dialogsDB.updateDialog(dialog.id, { priority: 'high' });
            } catch (e) {
              console.warn('Failed to update dialog priority:', e);
            }
          }
          
          // Создаем CRM-задачу с высоким приоритетом
          const { crmAPI } = await import('./crm_api_functions.js');
          await crmAPI.createTask(currentUser.id, {
            title: 'Запрос на помощь менеджера',
            description: `Автоэскалация из виджета: "${currentMessage.slice(0, 100)}"`,
            priority: 'high',
            status: 'pending',
            type: 'follow_up',
            notes: 'Создано автоматически системой при handover'
          });
        } catch (e) {
          console.error('Ошибка создания диалога/CRM-задачи для handover:', e);
        }
      }

      // Сохраняем ответ ИИ в базу данных
      await chatHistoryAPI.saveMessage(currentUser.id, 'assistant', assistantResponse, 'widget');
      
      // Обновляем лимиты пользователя после успешного ответа
      try {
        const updatedLimits = await userLimitsAPI.getUserLimits(currentUser.id);
        if (updatedLimits) {
          setUserLimits(updatedLimits);
          console.log('User limits updated (widget):', updatedLimits);
        }
      } catch (limitError) {
        console.log('Ошибка обновления лимитов (widget):', limitError.message);
      }
      
      // Показываем кнопки после ответа бота
      setShowCompletionButton(true);
      setShowHumanButton(true);
      
    } catch (error) {
      console.error('Error sending widget message:', error);
      
      // Удаляем сообщение загрузки и добавляем ошибку
      setChatMessages(prev => {
        const withoutLoading = prev.filter(msg => !msg.isTyping);
        return [...withoutLoading, { 
          id: getUniqueTimestamp(), 
          text: 'Извините, произошла ошибка при обработке вашего запроса. Попробуйте еще раз.', 
          isUser: false, 
          time: 'Только что',
          timestamp: getUniqueTimestamp()
        }];
      });
      
      showNotificationMessage('Ошибка при отправке сообщения');
    }
  };

  // Обработчики для виджета
  const handleWidgetOpen = () => {
    setWidgetPreviewOpen(true);
    setWidgetOpenedTime(Date.now());
    setWidgetClosedTime(null);
    setShowFollowUpMessage(false);
    setAiReceivedResponse(false); // Сбрасываем флаг при открытии виджета
  };

  // Отправка системного интента (например, «Это помогло», «позвать менеджера»)
  const sendWidgetIntentMessage = async (intentText) => {
    if (!currentUser?.id) return;
    
    // Валидация сообщения
    const validation = validateMessage(intentText);
    if (!validation.isValid) {
      showNotificationMessage(`❌ Ошибка валидации: ${validation.errors.join(', ')}`);
      return;
    }
    
    // Проверка rate limit
    const rateLimit = checkRateLimit(currentUser.id);
    if (!rateLimit.allowed) {
      const resetTime = new Date(rateLimit.resetTime).toLocaleTimeString();
      showNotificationMessage(`❌ Слишком много сообщений. Попробуйте снова в ${resetTime}`);
      return;
    }
    
    // Санитизация сообщения
    const sanitizedMessage = sanitizeMessage(validation.sanitizedMessage);
    
    try {
      const newMessage = createUnifiedMessage({
        id: getUniqueTimestamp(),
        text: sanitizedMessage,
        isUser: true,
        time: 'Только что',
        timestamp: getUniqueTimestamp()
      });
      setChatMessages(prev => [...prev, newMessage]);
      ChatUtils.scrollToBottom(widgetChatRef);

      // Отправляем запрос к виджету API с retry логикой
      const apiKey = `adapto_${currentUser.id}_${Date.now()}`;
      const data = await ChatUtils.retryApiRequest(async () => {
        const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.WIDGET_ENDPOINT}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            key: apiKey,
            message: sanitizedMessage,
            conversationHistory: chatMessages.map(msg => ({
              role: msg.isUser ? 'user' : 'assistant',
              content: msg.text
            }))
          })
        });
        
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        return await response.json();
      }, {
        maxRetries: 2,
        baseDelay: 1000,
        retryCondition: (error) => {
          return !error.response || 
                 error.response.status >= 500 || 
                 error.message.includes('timeout') ||
                 error.message.includes('NetworkError');
        }
      });

      if (data.showForm === true) setShowForm(true);

      // Если это запрос на помощь менеджера - создаем диалог с need_handover=true
      if (data.handover === true || intentText.toLowerCase().includes('менеджер') || intentText.toLowerCase().includes('помощь')) {
        try {
          // Создаем диалог с флагом need_handover
          const dialog = await createTestDialog('Виджет: запрос помощи', intentText, true);
          
          // Обновляем приоритет в БД
          if (dialog && dialog.id) {
            try {
              await dialogsDB.updateDialog(dialog.id, { priority: 'high' });
            } catch (e) {
              console.warn('Failed to update dialog priority:', e);
            }
          }
          
          // Создаем CRM-задачу
          const { crmAPI } = await import('./crm_api_functions.js');
          await crmAPI.createTask(currentUser.id, {
            title: 'Запрос на помощь менеджера',
            description: `Запрос помощи из виджета: "${intentText}"`,
            priority: 'high',
            status: 'pending',
            type: 'follow_up',
            notes: 'Создано автоматически системой при запросе помощи'
          });
        } catch (e) { 
          console.error('Ошибка создания диалога/CRM-задачи для запроса помощи:', e); 
        }
      }

      const assistantResponse = data.answer || data.response || data.message || 'Извините, произошла ошибка.';
      const aiMessage = createUnifiedMessage({
        id: getUniqueTimestamp(),
        text: assistantResponse,
        isUser: false,
        time: 'Только что',
        timestamp: getUniqueTimestamp()
      });
      
      setChatMessages(prev => ChatUtils.addMessageAndRemoveLoading(prev, aiMessage));
      ChatUtils.scrollToBottom(widgetChatRef);
      await ChatUtils.saveMessageToDB(currentUser.id, 'assistant', assistantResponse, 'widget', chatHistoryAPI);
    } catch (e) {
      const errorMessage = ChatUtils.handleChatError(e, showNotificationMessage);
      setChatMessages(prev => ChatUtils.addMessageAndRemoveLoading(prev, errorMessage));
      ChatUtils.scrollToBottom(widgetChatRef);
    }
  };

  const handleWidgetClose = () => {
    setWidgetPreviewOpen(false);
    setWidgetClosedTime(Date.now());
    setWidgetOpenedTime(null);
    setShowTriggerMessage(false);
  };

  const handleLikeMessage = (index) => {
    console.log('Liked message at index:', index);
    // Здесь можно добавить логику для отправки лайка в GigaChat
    showNotificationMessage('Ответ оценен положительно');
  };

  const handleDislikeMessage = (index) => {
    console.log('Disliked message at index:', index);
    // Здесь можно добавить логику для отправки дизлайка в GigaChat
    showNotificationMessage('Ответ оценен отрицательно');
  };

  const exportDialogsToXLS = () => {
    const headers = ['Пользователь', 'Email', 'Источник', 'Статус', 'Последнее сообщение', 'Время', 'Количество сообщений'];
    const data = dialogsData.map(dialog => [
      dialog.user,
      dialog.email,
      dialog.source,
      dialog.status === 'active' ? 'Активный' : dialog.status === 'waiting' ? 'Ожидает' : 'Закрыт',
      dialog.lastMessage,
      dialog.time,
      dialog.messages.length.toString()
    ]);
    
    // Создаем простой HTML файл с таблицей для экспорта в Excel
    const htmlContent = `
      <html>
        <head>
          <meta charset="utf-8">
          <title>Диалоги</title>

  // Calendar functions
  const handleQuickDateSelect = (type) => {
    try {
    console.log('handleQuickDateSelect called with type:', type);
    const today = new Date();
    let start, end;
    
    switch(type) {
      case 'today':
        start = new Date(today);
        end = new Date(today);
        break;
      case 'yesterday':
        const yesterday = new Date(today);
        yesterday.setDate(yesterday.getDate() - 1);
        start = yesterday;
        end = yesterday;
        break;
      case 'last7days':
        start = new Date(today);
        start.setDate(start.getDate() - 6);
        end = new Date(today);
        break;
      case 'last30days':
        start = new Date(today);
        start.setDate(start.getDate() - 29);
        end = new Date(today);
        break;
      case 'last90days':
        start = new Date(today);
        start.setDate(start.getDate() - 89);
        end = new Date(today);
        break;
      case 'thisMonth':
        start = new Date(today.getFullYear(), today.getMonth(), 1);
        end = new Date(today.getFullYear(), today.getMonth() + 1, 0);
        break;
      default:
          return;
      }
      
      // Проверяем валидность дат
      if (!start || !(start instanceof Date) || isNaN(start.getTime()) ||
          !end || !(end instanceof Date) || isNaN(end.getTime())) {
        console.error('Invalid dates generated:', { start, end });
        return;
    }
    
    console.log('Setting dateRange:', { start, end });
    setDateRange({ start, end });
    setSelectedDates([]);
    setActiveQuickSelect(type);
    console.log('activeQuickSelect set to:', type);
    } catch (error) {
      console.error('Error in handleQuickDateSelect:', error);
    }
  };

  const handleDateClick = (date) => {
    try {
      if (!date || !(date instanceof Date) || isNaN(date.getTime())) {
        console.warn('Invalid date in handleDateClick:', date);
        return;
    }
    
    // Сбрасываем активную быструю кнопку
    setActiveQuickSelect(null);
    
      // Если у нас уже есть начальная дата, устанавливаем конечную
      if (dateRange.start && !dateRange.end) {
        if (date >= dateRange.start) {
          setDateRange(prev => ({ ...prev, end: date }));
      } else {
          // Если выбранная дата раньше начальной, меняем местами
          setDateRange({ start: date, end: dateRange.start });
        }
      } else {
        // Начинаем новый диапазон
        setDateRange({ start: date, end: null });
        setSelectedDates([]);
      }
    } catch (error) {
      console.error('Error in handleDateClick:', error);
    }
  };

  const isDateSelected = (date) => {
    if (!date) return false;
    const dateStr = date.toISOString().split('T')[0];
    return selectedDates.includes(dateStr);
  };

  const isDateInRange = (date) => {
    try {
      if (!date || !(date instanceof Date) || isNaN(date.getTime())) {
        return false;
      }
      
      if (!dateRange.start || !(dateRange.start instanceof Date) || isNaN(dateRange.start.getTime())) {
        return false;
      }
      
    const dateStr = date.toISOString().split('T')[0];
    const startStr = dateRange.start.toISOString().split('T')[0];
      
      if (!dateRange.end || !(dateRange.end instanceof Date) || isNaN(dateRange.end.getTime())) {
        // Если конечная дата не выбрана, подсвечиваем только начальную
        return dateStr === startStr;
      }
      
    const endStr = dateRange.end.toISOString().split('T')[0];
    return dateStr >= startStr && dateStr <= endStr;
    } catch (error) {
      console.error('Error in isDateInRange:', error);
      return false;
    }
  };

  const nextMonth = () => {
    setCurrentMonth(prev => {
      const next = new Date(prev);
      next.setMonth(next.getMonth() + 1);
      return next;
    });
  };

  const prevMonth = () => {
    setCurrentMonth(prev => {
      const prevMonth = new Date(prev);
      prevMonth.setMonth(prevMonth.getMonth() - 1);
      return prevMonth;
    });
  };

  // Функция для генерации календарной сетки
  const generateCalendarDays = (month) => {
    try {
      if (!month || !(month instanceof Date) || isNaN(month.getTime())) {
        console.warn('Invalid month parameter:', month);
        return [];
      }
    
    const year = month.getFullYear();
    const monthIndex = month.getMonth();
    const firstDay = new Date(year, monthIndex, 1);
    const lastDay = new Date(year, monthIndex + 1, 0);
      
      // Начинаем с понедельника (1) вместо воскресенья (0)
      const firstDayOfWeek = firstDay.getDay();
    const startDate = new Date(firstDay);
      const daysToSubtract = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;
      startDate.setDate(startDate.getDate() - daysToSubtract);
    
    const days = [];
    const currentDate = new Date(startDate);
    
      // Генерируем 42 дня (6 недель)
    for (let i = 0; i < 42; i++) {
      days.push(new Date(currentDate));
      currentDate.setDate(currentDate.getDate() + 1);
    }
    
    return days;
    } catch (error) {
      console.error('Error in generateCalendarDays:', error);
      return [];
    }
  };

  const getDayClass = (date) => {
    try {
      if (!date || !(date instanceof Date) || isNaN(date.getTime())) {
        return "w-8 h-8 rounded hover:bg-gray-100 text-center text-xs cursor-pointer";
      }
      
      if (!currentMonth || !(currentMonth instanceof Date) || isNaN(currentMonth.getTime())) {
        return "w-8 h-8 rounded hover:bg-gray-100 text-center text-xs cursor-pointer";
      }
    
    const today = new Date();
    const isToday = date.toDateString() === today.toDateString();
    const isCurrentMonth = date.getMonth() === currentMonth.getMonth();
    const isInRange = isDateInRange(date);
    
      let classes = "w-8 h-8 rounded hover:bg-gray-100 text-center text-xs cursor-pointer transition-colors";
    
    if (!isCurrentMonth) {
      classes += " text-gray-300";
    } else if (isInRange) {
        if (date.toDateString() === dateRange.start?.toDateString() || 
            (dateRange.end && date.toDateString() === dateRange.end.toDateString())) {
          // Начальная или конечная дата диапазона
          classes += " bg-[#0084FF] text-white hover:bg-[#0073E6]";
        } else {
          // Даты в диапазоне
          classes += " bg-[#0084FF]/20 text-[#0084FF] hover:bg-[#0084FF]/30";
        }
    } else if (isToday) {
      classes += " bg-gray-200 text-gray-800";
    }
    
    return classes;
    } catch (error) {
      console.error('Error in getDayClass:', error);
      return "w-8 h-8 rounded hover:bg-gray-100 text-center text-xs cursor-pointer";
    }
  };
        </head>
        <body>
          <table border="1">
            <thead>
              <tr>${headers.map(h => `<th>${h}</th>`).join('')}</tr>
            </thead>
            <tbody>
              ${data.map(row => `<tr>${row.map(cell => `<td>${cell}</td>`).join('')}</tr>`).join('')}
            </tbody>
          </table>
        </body>
      </html>
    `;
    
    const blob = new Blob([htmlContent], { type: 'application/vnd.ms-excel' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `dialogs_${new Date().toISOString().split('T')[0]}.xls`;
    link.click();
  };

  // Проверка первого входа пользователя - только при регистрации
  useEffect(() => {
    if (isLoggedIn && currentUser) {
      const hasShownSetupWizard = localStorage.getItem('hasShownSetupWizard');
      const isNewUser = localStorage.getItem('isNewUser');
      
      // Показываем попап только если это новый пользователь и попап еще не показывался
      if (isNewUser === 'true' && !hasShownSetupWizard) {
        setIsFirstTimeUser(true);
        // setShowSetupWizard(true); // Отключен попап настройки ИИ-агента
        localStorage.removeItem('isNewUser'); // Убираем флаг нового пользователя
      }
    }
  }, [isLoggedIn, currentUser]);

  // Таймер для настройки модели
  useEffect(() => {
    let interval;
    if (showModelSetupProgress && modelSetupTimer > 0) {
      interval = setInterval(() => {
        setModelSetupTimer(prev => {
          if (prev <= 1) {
            setShowModelSetupProgress(false);
            setModelSetupTimer(300);
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [showModelSetupProgress, modelSetupTimer]);

  // Функция для получения или создания пользователя
  const getOrCreateUser = async () => {
    if (!isLoggedIn || !currentUser) return null;
    
    try {
      // Создаем пользователя на основе данных из формы
      const userData = {
        email: currentUser.email || `user${currentUser.id}@example.com`,
        name: currentUser.name || `User ${currentUser.id}`,
        company_name: currentUser.company_name || '',
        phone: currentUser.phone || '',
        company_field: currentUser.company_field || ''
      };
      
      const user = await users.createOrGetUser(currentUser.id, userData);
      return user;
    } catch (error) {
      console.error('Error getting/creating user:', error);
      return null;
    }
  };

  // Загрузка данных из Supabase при инициализации
  // Функции для работы с новой системой ai-agent-system
  const initializeAiAgent = async (userId, assistantId) => {
    try {
      console.log('🤖 Инициализация новой системы ai-agent-system...');
      
      // Получаем настройки агента
      const settingsResponse = await fetch(`${API_CONFIG.BASE_URL}/api/agent/settings/${assistantId}`, {
        headers: {
          'x-user-id': userId,
          'Content-Type': 'application/json'
        }
      });
      
      if (settingsResponse.ok) {
        const settings = await settingsResponse.json();
        console.log('✅ Настройки агента загружены:', settings);
      }
      
      // Получаем источники знаний
      const knowledgeResponse = await fetch('${API_CONFIG.BASE_URL}/api/knowledge/sources', {
        headers: {
          'x-user-id': userId,
          'Content-Type': 'application/json'
        }
      });
      
      if (knowledgeResponse.ok) {
        const knowledge = await knowledgeResponse.json();
        console.log('✅ База знаний загружена:', knowledge);
      }
      
      setAiAgentInitialized(true);
      console.log('🎉 Система ai-agent-system инициализирована!');
      
    } catch (error) {
      console.error('❌ Ошибка инициализации ai-agent-system:', error);
    }
  };

  const sendMessageToAiAgent = async (message, userId, assistantId, conversationHistory = []) => {
    return ChatUtils.retryApiRequest(async () => {
      // Формируем историю диалога для AI
      const formattedHistory = conversationHistory
        .filter(msg => msg.type === 'user' || msg.type === 'assistant')
        .map(msg => ({
          role: msg.type === 'user' ? 'user' : 'assistant',
          content: msg.text
        }));

      const response = await fetch(`${API_CONFIG.BASE_URL}${API_CONFIG.CHAT_ENDPOINT}`, {
        method: 'POST',
        headers: {
          'x-user-id': userId || currentUser?.id || 'test-user-id',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          message: message,
          assistantId: assistantId || userId || currentUser?.id || 'test-user-id',
          conversationId: `conv_${userId || currentUser?.id || 'test-user-id'}_${assistantId || userId || currentUser?.id || 'test-user-id'}`,
          conversationHistory: formattedHistory
        })
      });
      
      if (response.ok) {
        const result = await response.json();
        return result;
      } else {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
    }, {
      maxRetries: 2,
      baseDelay: 1000,
      retryCondition: (error) => {
        // Повторяем для сетевых ошибок, таймаутов и 5xx статусов
        return !error.response || 
               error.response.status >= 500 || 
               error.message.includes('timeout') ||
               error.message.includes('NetworkError');
      }
    }).catch(error => {
      console.error('❌ Ошибка отправки сообщения после retry:', error);
      return { success: false, error: error.message };
    });
  };

  useEffect(() => {
    const loadUserData = async () => {
      if (isLoggedIn && currentUser) {
        try {
          // Сначала тестируем подключение
          const connectionTest = await testConnection();
          console.log('Supabase connection test result:', connectionTest);
          
          if (!connectionTest) {
            console.warn('Supabase connection failed, using localStorage fallback');
            throw new Error('Connection failed');
          }

          // Получаем или создаем пользователя
          const user = await getOrCreateUser();
          if (!user) {
            console.warn('Failed to get/create user, using localStorage fallback');
            throw new Error('User creation failed');
          }

          // Загружаем корректировки из Supabase
          console.log('Loading corrections for user:', currentUser.id);
          const corrections = await botCorrectionsAPI.getCorrections(currentUser.id);
          console.log('Loaded corrections from Supabase:', corrections);
          console.log('Number of corrections loaded:', corrections.length);
          
          const formattedCorrections = corrections.map(item => ({
            id: item.id,
            correction: item.correction,
            created_at: item.created_at
          }));
          console.log('Formatted corrections:', formattedCorrections);
          setBotCorrections(formattedCorrections);
          console.log('botCorrections state set to:', formattedCorrections);

          // Загружаем элементы базы знаний из Supabase
          const knowledgeItems = await knowledgeBase.getKnowledgeItems(currentUser.id);
          setKnowledgeItems(knowledgeItems);
          setHasKnowledgeBase(knowledgeItems.length > 0);
          
          // Восстанавливаем selectedNicheId из первого элемента, если он есть
          if (knowledgeItems.length > 0 && knowledgeItems[0].nicheId && !selectedNicheId) {
            console.log('=== RESTORING NICHE FROM KNOWLEDGE ITEMS ===');
            console.log('First knowledge item:', knowledgeItems[0]);
            console.log('Restoring nicheId:', knowledgeItems[0].nicheId);
            setSelectedNicheId(knowledgeItems[0].nicheId);
            setNewKnowledgeItem(prev => ({ ...prev, nicheId: knowledgeItems[0].nicheId }));
          }
          
          // Добавляем элементы базы знаний в setupData для ИИ агента
          setSetupData(prev => ({
            ...prev,
            knowledgeItems: knowledgeItems.map(item => ({
              type: item.source_type || item.type,
              content: item.processed_content || item.original_content || item.content,
              structured_data: item.structured_data
            }))
          }));

          // Загружаем историю чата из Supabase
          try {
            console.log('Loading chat history for user:', currentUser.id);
            const chatHistoryData = await chatHistoryAPI.getChatHistory(currentUser.id);
            console.log('Loaded chat history:', chatHistoryData);
            if (chatHistoryData && chatHistoryData.length > 0) {
              const formattedHistory = chatHistoryData.map((item, index) => ({
                type: item.role === 'user' ? 'user' : 'assistant',
                text: item.message_content,
                time: updateMessageTime(item.created_at ? new Date(item.created_at).getTime() : Date.now()),
                timestamp: item.created_at ? new Date(item.created_at).getTime() : Date.now() + index,
                id: `loaded_${item.id || index}_${Date.now()}`
              }));
              console.log('Formatted chat history:', formattedHistory);
              setChatHistory(formattedHistory);
              // Прокручиваем к низу после загрузки истории
              ChatUtils.scrollToBottom(chatHistoryRef, 300);
            } else {
              console.log('No chat history found, using default welcome message');
              // Если истории нет, используем приветственное сообщение
              setChatHistory([
                { type: 'assistant', text: 'Привет! Я ваш ИИ-ассистент Adapto. Как дела?', time: 'Только что', timestamp: Date.now() }
              ]);
              // Прокручиваем к низу после установки приветственного сообщения
              ChatUtils.scrollToBottom(chatHistoryRef, 300);
            }
          } catch (error) {
            console.error('Error loading chat history:', error);
            // Fallback к приветственному сообщению
            setChatHistory([
              { type: 'assistant', text: 'Привет! Я ваш ИИ-ассистент Adapto. Как дела?' }
            ]);
            // Прокручиваем к низу после fallback
            ChatUtils.scrollToBottom(chatHistoryRef, 300);
          }

          // Загружаем CRM данные из Supabase
          try {
            console.log('Loading CRM data for user:', currentUser.id);
            console.log('Current user object:', currentUser);
            
            // Загружаем клиентов
            const clients = await crmAPI.getClients(currentUser.id);
            console.log('Loaded clients from Supabase:', clients);
            console.log('Clients count:', clients.length);
            console.log('First client:', clients[0]);
            
            // Загружаем сделки
            const deals = await crmAPI.getDeals(currentUser.id);
            console.log('Loaded deals from Supabase:', deals);
            console.log('Deals count:', deals.length);
            console.log('First deal:', deals[0]);
            
            // Загружаем задачи
            const tasks = await crmAPI.getTasks(currentUser.id);
            console.log('Loaded tasks from Supabase:', tasks);
            
            // Преобразуем данные в формат, ожидаемый фронтендом
            const formattedDeals = deals.map(deal => ({
              id: deal.id,
              title: deal.title,
              company: deal.crm_clients?.company || '',
              amount: deal.amount || 0,
              days: 0, // Локальное поле для фронтенда
              stage: deal.stage || 'Новые',
              leadQuality: deal.lead_quality || 'medium',
              hasContacts: !!(deal.crm_clients?.email || deal.crm_clients?.phone),
              owner: deal.owner || 'ai',
              ownerName: deal.owner_name || 'ИИ-агент',
              isResolved: deal.is_resolved || false,
              client: {
                name: deal.crm_clients?.name || '',
                email: deal.crm_clients?.email || '',
                phone: deal.crm_clients?.phone || '',
                company: deal.crm_clients?.company || ''
              },
              notes: deal.description || '',
              createdDate: deal.created_at ? deal.created_at.split('T')[0] : new Date().toISOString().split('T')[0],
              lastContact: deal.created_at ? deal.created_at.split('T')[0] : new Date().toISOString().split('T')[0], // Используем created_at вместо last_contact_at
              dialogId: deal.dialog_id
            }));
            
            const formattedTasks = tasks.map(task => ({
              id: task.id,
              title: task.title,
              description: task.description || '',
              assignee: task.assignee || 'operator-1',
              assigneeName: task.assignee_name || 'Анна Петрова',
              priority: task.priority || 'medium',
              status: task.status || 'Новые',
              dueDate: task.due_date ? task.due_date.split('T')[0] : '',
              dealId: task.deal_id,
              notes: task.result || '',
              createdBy: task.created_by || 'ИИ-агент',
              createdDate: task.created_at ? task.created_at.split('T')[0] : new Date().toLocaleDateString('ru-RU')
            }));
            
            // Обновляем состояние CRM данных
            console.log('Setting deals:', formattedDeals.length);
            console.log('Setting clients:', clients.length);
            console.log('Formatted deals:', formattedDeals);
            setDeals(formattedDeals);
            setTasks(formattedTasks);
            setClients(clients);
            
            console.log('CRM data loaded successfully:', {
              deals: formattedDeals.length,
              tasks: formattedTasks.length
            });
            
          } catch (error) {
            console.error('Error loading CRM data:', error);
            // Fallback к localStorage если Supabase недоступен
            const savedDeals = localStorage.getItem(`deals_${currentUser.id}`);
            if (savedDeals) {
              setDeals(JSON.parse(savedDeals));
            }
            
            const savedTasks = localStorage.getItem(`tasks_${currentUser.id}`);
            if (savedTasks) {
              setTasks(JSON.parse(savedTasks));
            }
          }
        } catch (error) {
          console.error('Error loading user data:', error);
          // Fallback к localStorage если Supabase недоступен
          const savedCorrections = localStorage.getItem(`botCorrections_${currentUser.id}`);
          if (savedCorrections) {
            setBotCorrections(JSON.parse(savedCorrections));
          }

          const savedKnowledgeItems = localStorage.getItem(`knowledgeItems_${currentUser.id}`);
          if (savedKnowledgeItems) {
            const items = JSON.parse(savedKnowledgeItems);
            setKnowledgeItems(items);
            setHasKnowledgeBase(items.length > 0);
            
            // Восстанавливаем selectedNicheId из первого элемента, если он есть
            if (items.length > 0 && items[0].nicheId && !selectedNicheId) {
              console.log('=== RESTORING NICHE FROM LOCALSTORAGE ===');
              console.log('First localStorage item:', items[0]);
              console.log('Restoring nicheId:', items[0].nicheId);
              setSelectedNicheId(items[0].nicheId);
              setNewKnowledgeItem(prev => ({ ...prev, nicheId: items[0].nicheId }));
            }
          }

          // Fallback: загружаем историю чата из localStorage
          const savedChatHistory = localStorage.getItem(`chatHistory_${currentUser.id}`);
          if (savedChatHistory) {
            setChatHistory(JSON.parse(savedChatHistory));
          } else {
            setChatHistory([
              { type: 'assistant', text: 'Привет! Я ваш ИИ-ассистент Adapto. Как дела?' }
            ]);
          }

          // Загружаем статус пользователя из базы данных
          try {
            const statusResult = await operatorStatusAPI.getOperatorStatus(currentUser.id);
            if (statusResult.success) {
              setIsOnline(statusResult.isOnline);
            } else {
              console.warn('Ошибка загрузки статуса пользователя, используем localStorage как fallback');
              const savedOperatorStatus = localStorage.getItem(`operatorStatus_${currentUser.id}`);
              if (savedOperatorStatus !== null) {
                setIsOnline(JSON.parse(savedOperatorStatus));
              }
            }
          } catch (error) {
            console.error('Ошибка загрузки статуса пользователя:', error);
            // Fallback to localStorage
            const savedOperatorStatus = localStorage.getItem(`operatorStatus_${currentUser.id}`);
            if (savedOperatorStatus !== null) {
              setIsOnline(JSON.parse(savedOperatorStatus));
            }
          }


          // Загружаем данные профиля пользователя
          try {
            console.log('Loading user profile data for:', currentUser.id);
            const { data: userProfile, error: profileError } = await supabase
              .from('users')
              .select('name, email, company_name, phone, company_field')
              .eq('id', currentUser.id)
              .single();
            
            if (profileError) {
              console.error('Error loading user profile:', profileError);
            } else if (userProfile) {
              console.log('Loaded user profile:', userProfile);
              // Обновляем состояние personalInfo
              setPersonalInfo({
                name: userProfile.name || currentUser.name || '',
                email: userProfile.email || currentUser.email || '',
                company: userProfile.company_name || '',
                phone: userProfile.phone || '',
                newPassword: '',
                confirmPassword: ''
              });
              setOriginalPersonalInfo({
                name: userProfile.name || currentUser.name || '',
                email: userProfile.email || currentUser.email || '',
                company: userProfile.company_name || '',
                phone: userProfile.phone || ''
              });
            }
          } catch (error) {
            console.error('Error loading user profile:', error);
          }

          // Инициализируем новую систему ai-agent-system
          if (currentUser && currentUser.id) {
            const assistantId = currentUser.id; // Используем ID пользователя как assistantId
            initializeAiAgent(currentUser.id, assistantId);
          }
        }
      }
    };

    loadUserData();
  }, [isLoggedIn, currentUser]);

  // Сохранение CRM данных в localStorage при изменениях
  useEffect(() => {
    if (currentUser && deals.length > 0) {
      localStorage.setItem(`deals_${currentUser.id}`, JSON.stringify(deals));
    }
  }, [deals, currentUser]);

  useEffect(() => {
    if (currentUser && tasks.length > 0) {
      localStorage.setItem(`tasks_${currentUser.id}`, JSON.stringify(tasks));
    }
  }, [tasks, currentUser]);

  // Сохранение статуса пользователя в базу данных при изменении
  useEffect(() => {
    if (currentUser && isOnline !== undefined) {
      // Сначала сохраняем в базу данных
      operatorStatusAPI.updateOperatorStatus(currentUser.id, isOnline)
        .then(result => {
          if (result.success) {
            console.log('Статус пользователя обновлен в базе данных:', result.isOnline);
          } else {
            console.warn('Ошибка обновления статуса в БД, сохраняем в localStorage:', result.error);
            localStorage.setItem(`operatorStatus_${currentUser.id}`, JSON.stringify(isOnline));
          }
        })
        .catch(error => {
          console.error('Ошибка обновления статуса:', error);
          // Fallback to localStorage
          localStorage.setItem(`operatorStatus_${currentUser.id}`, JSON.stringify(isOnline));
        });
    }
  }, [isOnline, currentUser]);

  // Проверка выполнения шагов в блоке "Запуск Adapto"
  useEffect(() => {
    if (!isLoggedIn || !currentUser) return;

    const checkStepCompletion = () => {
      const newCompletedSteps = [];

      // Шаг 1: Проверяем настройку ИИ-модели
      // Считаем шаг выполненным, если есть основные настройки
      if (setupData.task && setupData.mainGoal && setupData.addressing && setupData.communicationStyle) {
        newCompletedSteps.push(1);
      }

      // Шаг 2: Проверяем загрузку в базу знаний
      if (hasKnowledgeBase && knowledgeItems.length > 0) {
        newCompletedSteps.push(2);
      }

      // Шаг 3: Проверяем настройку виджета
      // Считаем шаг выполненным, если есть основные настройки виджета
      if (widgetDevelopmentSettings.accentColor && 
          widgetDevelopmentSettings.buttonText && 
          widgetDevelopmentSettings.buttonColor) {
        newCompletedSteps.push(3);
      }

      setCompletedSteps(newCompletedSteps);

      // Если все 3 шага выполнены, скрываем блок
      if (newCompletedSteps.length === 3) {
        setShowSetupGuide(false);
        // Сохраняем в localStorage, что пользователь завершил настройку
        localStorage.setItem(`setupCompleted_${currentUser.id}`, 'true');
      }
    };

    checkStepCompletion();
  }, [isLoggedIn, currentUser, setupData, hasKnowledgeBase, knowledgeItems, widgetDevelopmentSettings]);

  // Проверяем, завершил ли пользователь настройку ранее
  useEffect(() => {
    if (isLoggedIn && currentUser) {
      const setupCompleted = localStorage.getItem(`setupCompleted_${currentUser.id}`);
      if (setupCompleted === 'true') {
        setShowSetupGuide(false);
      }
    }
  }, [isLoggedIn, currentUser]);

  // Сохранение данных при изменении
  useEffect(() => {
    if (isLoggedIn && currentUser) {
      localStorage.setItem(`botCorrections_${currentUser.id}`, JSON.stringify(botCorrections));
    }
  }, [botCorrections, isLoggedIn, currentUser]);


  // Загружаем настройки модели при входе в раздел из базы данных
  useEffect(() => {
    const loadModelSettings = async () => {
      if (activeSection === 'model-settings' && isLoggedIn && currentUser) {
        try {
          // Загружаем настройки из базы данных
          console.log('Loading model settings from database for user:', currentUser.id);
          const dbSettings = await modelSettings.getModelSettings(currentUser.id);
          console.log('Loaded settings from DB:', dbSettings);
          
          if (dbSettings) {
            // Настройки уже в правильном формате благодаря обновленной функции getModelSettings
            console.log('Loaded settings from DB:', dbSettings);
            
            // Обновляем состояние с загруженными настройками
            setSetupData(prevData => ({
              ...prevData,
              ...dbSettings
            }));
            
            console.log('Model settings loaded and applied to state');
          } else {
            console.log('No model settings found in database, using defaults');
            // Используем дефолтные настройки
            const defaultSettings = modelSettings.getDefaultSettings();
            setSetupData(prevData => ({
              ...prevData,
              ...defaultSettings
            }));
          }
        } catch (error) {
          console.error('Error loading model settings:', error);
          showSystemNotificationMessage('❌ Ошибка при загрузке настроек из базы данных: ' + error.message);
          // В случае ошибки используем дефолтные настройки
          const defaultSettings = modelSettings.getDefaultSettings();
          setSetupData(prevData => ({
            ...prevData,
            ...defaultSettings
          }));
        }
      }
    };
    
    const loadWidgetSettings = async () => {
      if (activeSection === 'widget-development' && isLoggedIn && currentUser) {
        try {
          console.log('Loading widget settings from database for user:', currentUser.id);
          
          // Импортируем функцию из supabaseClient
          const { widgetDevelopmentSettings } = await import('./supabaseClient.js');
          const dbWidgetSettings = await widgetDevelopmentSettings.getWidgetDevelopmentSettings(currentUser.id);
          console.log('Loaded widget settings from DB:', dbWidgetSettings);
          
          if (dbWidgetSettings && Object.keys(dbWidgetSettings).length > 0) {
            console.log('=== LOADING WIDGET SETTINGS TO STATE ===');
            console.log('DB Settings:', dbWidgetSettings);
            
            // Загружаем настройки виджета из базы данных в widgetDevelopmentSettings
            const newWidgetSettings = {
              // Основные настройки виджета
              accentColor: dbWidgetSettings.accent_color || '#0084FF',
              buttonColor: dbWidgetSettings.button_color || 'custom',
              buttonText: dbWidgetSettings.button_text || 'Написать нам',
              buttonSubtext: dbWidgetSettings.button_subtext || 'Задать вопрос',
              avatar: dbWidgetSettings.avatar || 'default',
              customButtonColor: dbWidgetSettings.custom_button_color || '#0084FF',
              widgetLocation: dbWidgetSettings.widget_location || 'default',
              
              // Позиционирование
              desktopBottomOffset: dbWidgetSettings.desktop_bottom_offset || 20,
              desktopRightOffset: dbWidgetSettings.desktop_right_offset || 20,
              mobileBottomOffset: dbWidgetSettings.mobile_bottom_offset || 20,
              mobileRightOffset: dbWidgetSettings.mobile_right_offset || 20,
              zIndex: dbWidgetSettings.z_index || 9999,
              
              // Приветственные сообщения
              welcomeMessages: dbWidgetSettings.welcome_messages || ['Привет! Меня зовут Adapto, я ИИ ассистент.'],
              
              // Триггерные вопросы
              triggerQuestion: dbWidgetSettings.trigger_question || 'Задать вопрос',
              triggerQuestionEnabled: dbWidgetSettings.trigger_question_enabled || 'no',
              triggerQuestionDelay: dbWidgetSettings.trigger_question_delay || 5,
              triggerQuestionText: dbWidgetSettings.trigger_question_text || 'Здравствуйте! Если появится вопрос, можете задать его в чате, я оперативно отвечу',
              triggerQuickReply: dbWidgetSettings.trigger_quick_reply || 'Задать вопрос',
              
              // Догоняющие сообщения
              followUpMessage: dbWidgetSettings.follow_up_message || 'no',
              followUpDelay: dbWidgetSettings.follow_up_delay || 10,
              followUpQuestion: dbWidgetSettings.follow_up_question || 'Продолжим диалог?',
              followUpQuickReply: dbWidgetSettings.follow_up_quick_reply || 'Расскажи подробнее',
              
              // Быстрые ответы
              quickReplies: dbWidgetSettings.quick_replies || ['Расскажи подробнее'],
              
              // Политика конфиденциальности
              privacyPolicyUrl: dbWidgetSettings.privacy_policy_url || 'https://',
              
              // Теги данных
              dataTags: dbWidgetSettings.data_tags || ['utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content', 'roistat_visit', 'gclid', 'fbclid'],
              
              // Исключенные страницы
              excludedPages: dbWidgetSettings.excluded_pages || [],
              
              // Режим работы виджета
              widgetMode: dbWidgetSettings.widget_mode || 'chat',
              
              // Быстрые вопросы
              quickQuestions: dbWidgetSettings.quick_questions || [
                { question: 'Как работает ваш сервис?', answer: 'Наш сервис использует ИИ для автоматизации общения с клиентами.' },
                { question: 'Сколько стоит?', answer: 'У нас есть несколько тарифных планов. Базовый план стоит 2990₽ в месяц.' },
                { question: 'Есть ли демо?', answer: 'Да, вы можете попробовать демо-версию бесплатно в течение 14 дней.' }
              ],
              
              // Настройки формы заявки
              leadFormEnabled: dbWidgetSettings.lead_form_enabled === true || dbWidgetSettings.lead_form_enabled === 'yes',
              leadFormTitle: dbWidgetSettings.lead_form_title || 'Оставьте заявку',
              leadFormDescription: dbWidgetSettings.lead_form_description || 'Мы свяжемся с вами в ближайшее время',
              leadFormFields: dbWidgetSettings.lead_form_fields || [
                { name: 'name', label: 'Имя', type: 'text', required: true },
                { name: 'phone', label: 'Телефон', type: 'tel', required: true },
                { name: 'email', label: 'Email', type: 'email', required: false }
              ],
              
              // Настройки внешнего вида
              widgetTheme: dbWidgetSettings.widget_theme || 'light',
              widgetSize: dbWidgetSettings.widget_size || 'medium',
              showAvatar: dbWidgetSettings.show_avatar !== undefined ? dbWidgetSettings.show_avatar : true,
              showTypingIndicator: dbWidgetSettings.show_typing_indicator !== undefined ? dbWidgetSettings.show_typing_indicator : true,
              
              // Настройки поведения
              autoOpenOnScroll: dbWidgetSettings.auto_open_on_scroll !== undefined ? dbWidgetSettings.auto_open_on_scroll : false,
              autoOpenDelay: dbWidgetSettings.auto_open_delay || 0,
              showOnMobile: dbWidgetSettings.show_on_mobile !== undefined ? dbWidgetSettings.show_on_mobile : true,
              
              // Настройки уведомлений
              notificationSound: dbWidgetSettings.notification_sound !== undefined ? dbWidgetSettings.notification_sound : true,
              notificationTitle: dbWidgetSettings.notification_title || 'Новое сообщение',
              
              // Настройки аналитики
              trackEvents: dbWidgetSettings.track_events !== undefined ? dbWidgetSettings.track_events : true,
              trackConversions: dbWidgetSettings.track_conversions !== undefined ? dbWidgetSettings.track_conversions : true,
              
              // Логотип
              logoUrl: dbWidgetSettings.logo_url || '',
              logoName: dbWidgetSettings.logo_name || '',
              
              // Дополнительные поля
              suggestions: dbWidgetSettings.suggestions || []
            };
            
            console.log('New widget settings to set:', newWidgetSettings);
            setWidgetSettings(newWidgetSettings);
            console.log('Widget settings loaded successfully from database');
          } else {
            console.log('No widget settings found in database, using defaults');
          }
        } catch (error) {
          console.error('Error loading widget settings from database:', error);
          showSystemNotificationMessage('❌ Ошибка при загрузке настроек виджета из базы данных: ' + error.message);
        }
      }
    };
    
    loadModelSettings();
    loadWidgetSettings();
  }, [activeSection, isLoggedIn, currentUser]);

  // Загружаем данные базы знаний при входе в раздел
  useEffect(() => {
    if (activeSection === 'knowledge' && isLoggedIn && currentUser) {
      const savedKnowledgeItems = localStorage.getItem(`knowledgeItems_${currentUser.id}`);
      if (savedKnowledgeItems) {
        try {
          const items = JSON.parse(savedKnowledgeItems);
          setKnowledgeItems(items);
          setHasKnowledgeBase(items.length > 0);
          
          // Восстанавливаем selectedNicheId из первого элемента, если он есть
          if (items.length > 0 && items[0].nicheId && !selectedNicheId) {
            console.log('=== RESTORING NICHE FROM LOCALSTORAGE (SECTION) ===');
            console.log('First localStorage item:', items[0]);
            console.log('Restoring nicheId:', items[0].nicheId);
            setSelectedNicheId(items[0].nicheId);
            setNewKnowledgeItem(prev => ({ ...prev, nicheId: items[0].nicheId }));
          }
        } catch (error) {
          console.error('Error loading knowledge items:', error);
        }
      }
    }
  }, [activeSection, isLoggedIn, currentUser]);

  useEffect(() => {
    if (isLoggedIn && currentUser) {
      localStorage.setItem(`knowledgeItems_${currentUser.id}`, JSON.stringify(knowledgeItems));
      setHasKnowledgeBase(knowledgeItems.length > 0);
    }
  }, [knowledgeItems, isLoggedIn, currentUser]);

  // Автоматический скролл вниз при добавлении новых сообщений
  useEffect(() => {
    const chatContainer = document.querySelector('.chat-history-container');
    if (chatContainer) {
      chatContainer.scrollTop = chatContainer.scrollHeight;
    }
  }, [chatHistory]);

  useEffect(() => {
    const widgetChatContainer = document.querySelector('.widget-chat-container');
    if (widgetChatContainer) {
      widgetChatContainer.scrollTop = widgetChatContainer.scrollHeight;
    }
  }, [chatMessages]);

  // Функция для обновления времени сообщений
  const updateMessageTime = (timestamp) => {
    const now = new Date();
    const messageTime = new Date(timestamp);
    const diffInMinutes = Math.floor((now - messageTime) / (1000 * 60));
    
    if (diffInMinutes < 1) return 'Только что';
    if (diffInMinutes < 60) return `${diffInMinutes} мин назад`;
    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} ч назад`;
    return `${Math.floor(diffInMinutes / 1440)} дн назад`;
  };

  // Функция для определения заголовка даты
  const getDateHeader = (timestamp) => {
    const now = new Date();
    const messageDate = new Date(timestamp);
    
    // Сбрасываем время для сравнения только дат
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    const messageDay = new Date(messageDate.getFullYear(), messageDate.getMonth(), messageDate.getDate());
    
    if (messageDay.getTime() === today.getTime()) {
      return 'Сегодня';
    } else if (messageDay.getTime() === yesterday.getTime()) {
      return 'Вчера';
    } else {
      // Форматируем дату как "9 сентября"
      const months = [
        'января', 'февраля', 'марта', 'апреля', 'мая', 'июня',
        'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря'
      ];
      return `${messageDate.getDate()} ${months[messageDate.getMonth()]}`;
    }
  };

  // Обновляем время сообщений каждую минуту
  useEffect(() => {
    const interval = setInterval(() => {
      setChatHistory(prev => prev.map(msg => ({
        ...msg,
        time: msg.timestamp ? updateMessageTime(msg.timestamp) : msg.time
      })));
      
      setChatMessages(prev => prev.map(msg => ({
        ...msg,
        time: msg.timestamp ? updateMessageTime(msg.timestamp) : msg.time
      })));
    }, 60000); // Каждую минуту

    return () => clearInterval(interval);
  }, []);

  useEffect(() => {
    if (isLoggedIn && currentUser) {
      localStorage.setItem(`chatHistory_${currentUser.id}`, JSON.stringify(chatHistory));
    }
  }, [chatHistory, isLoggedIn, currentUser]);

  // Функция для получения всех зарегистрированных пользователей
  const getRegisteredUsers = () => {
    const users = localStorage.getItem('registeredUsers');
    return users ? JSON.parse(users) : [];
  };

  // Функция для сохранения зарегистрированных пользователей
  const saveRegisteredUsers = (users) => {
    localStorage.setItem('registeredUsers', JSON.stringify(users));
  };

  // Функция для очистки данных пользователя (для исправления ролей)
  const clearUserData = () => {
    localStorage.removeItem('currentUser');
    localStorage.removeItem('isLoggedIn');
    localStorage.removeItem('currentSection');
    setCurrentUser(null);
    setIsLoggedIn(false);
    setCurrentStep('login');
    showNotificationMessage('Данные пользователя очищены. Войдите заново.');
  };

  // Админские учетные данные (временно хардкод)
  const ADMIN_CREDENTIALS = {
    email: 'admin@adapto.ai',
    password: 'admin123',
    name: 'Администратор',
    role: 'super_admin',
    id: 'admin-uuid-12345'
  };

  // Функция входа для администратора
  const handleAdminLogin = async (email, password) => {
    if (email === ADMIN_CREDENTIALS.email && password === ADMIN_CREDENTIALS.password) {
      setCurrentUser(ADMIN_CREDENTIALS);
      setIsLoggedIn(true);
      setCurrentStep('dashboard');
      setActiveSection('main');
      localStorage.setItem('currentUser', JSON.stringify(ADMIN_CREDENTIALS));
      localStorage.setItem('isLoggedIn', 'true');
      localStorage.setItem('currentSection', 'main');
      showNotificationMessage('Вход в админ-панель выполнен успешно!');
      return true;
    }
    return false;
  };

  // 🔐 Auth functions БЕЗ localStorage
  const handleLogin = async (userData) => {
    try {
      // Используем данные пользователя из Supabase
      setCurrentUser({
        ...userData,
        role: userData.role || 'user'
      });
      setIsLoggedIn(true);
      setCurrentStep('dashboard');
      setActiveSection('main');
      showNotificationMessage('Успешный вход в систему!');
    } catch (error) {
      console.error('Login error:', error);
    }
  };

  const handleLoginSubmit = async (e) => {
    e.preventDefault();
    setFormErrors({});

    console.log('🔑 Login attempt:', { email: formData.email, hasPassword: !!formData.password });

    if (!formData.email || !formData.password) {
      console.error('❌ Missing email or password');
      setFormErrors({ general: 'Пожалуйста, заполните все поля' });
      return;
    }

    // Сначала проверяем админские учетные данные
    const isAdminLogin = await handleAdminLogin(formData.email, formData.password);
    if (isAdminLogin) {
      console.log('✅ Admin login successful');
      return;
    }

    try {
      console.log('🚀 Attempting Supabase login...');
      // Используем централизованную функцию login
      const { login } = await import('./utils/auth.js');
      const { success, user, error } = await login(formData.email, formData.password);

      if (!success) {
        console.error('❌ Login failed:', error);
        setFormErrors({ general: error });
        return;
      }

      console.log('✅ Login successful, user:', user);
      // Входим в систему с данными из базы
      await handleLogin(user);
    } catch (error) {
      console.error('❌ Login error:', error);
      setFormErrors({ general: 'Произошла ошибка при входе' });
    }
  };

  const handleRegisterSubmit = async (e) => {
    e.preventDefault();
    setFormErrors({});

    // Проверяем, что все поля заполнены
    if (!formData.name || !formData.company || !formData.email || !formData.phone || !formData.password) {
      setFormErrors({ general: 'Пожалуйста, заполните все поля' });
      return;
    }

    // Валидация телефона
    const phoneError = validatePhone(formData.phone);
    if (phoneError) {
      setValidationErrors({ ...validationErrors, phone: phoneError });
      return;
    }

    try {
      console.log('🚀 ШАГ 1: Регистрация в Supabase Auth...');
      // 1. Регистрация в Supabase Auth (используем обычный клиент для auth)
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: formData.password,
      });

      if (authError) {
        console.error('❌ ШАГ 1 FAILED:', authError);
        // Проверяем на дублирование email
        if (authError.message.includes('already registered') || 
            authError.message.includes('already exists') ||
            authError.message.includes('User already registered')) {
          setFormErrors({ general: '⚠️ Этот email уже зарегистрирован. Перейдите на вкладку "Вход" и войдите в систему.' });
        } else {
          setFormErrors({ general: authError.message });
        }
        return;
      }

      if (!authData.user) {
        console.error('❌ ШАГ 1 FAILED: No user data');
        setFormErrors({ general: 'Не удалось создать пользователя' });
        return;
      }

      console.log('✅ ШАГ 1 OK: User created:', authData.user.id);
      console.log('Session:', authData.session ? 'Active' : 'Pending confirmation');

      console.log('🚀 ШАГ 2: Создание проекта...');
      // 2. Создаем проект (используем admin клиент для bypass RLS)
      const { data: project, error: projectError } = await supabaseAdmin
        .from('projects')
        .insert({
          name: formData.company || `${formData.name}'s Project`,
          description: `Проект пользователя ${formData.name}`,
          owner_id: authData.user.id
        })
        .select()
        .single();

      if (projectError) {
        console.error('❌ ШАГ 2 FAILED:', projectError);
        setFormErrors({ general: 'Ошибка при создании проекта: ' + projectError.message });
        return;
      }

      console.log('✅ ШАГ 2 OK: Project created:', project.id);

      console.log('🚀 ШАГ 3: Создание профиля пользователя...');
      // 3. Создаем или обновляем профиль пользователя с project_id
      const { error: profileError } = await supabaseAdmin
        .from('users')
        .upsert({
          id: authData.user.id,
          email: formData.email,
          name: formData.name,
          company_name: formData.company,
          phone: formData.phone,
          company_field: formData.companyField || null,
          project_id: project.id
        }, {
          onConflict: 'id'
        });

      if (profileError) {
        console.error('❌ ШАГ 3 FAILED:', profileError);
        setFormErrors({ general: 'Ошибка при создании профиля: ' + profileError.message });
        return;
      }

      console.log('✅ ШАГ 3 OK: User profile created');

      console.log('🚀 ШАГ 4: Добавление в команду проекта...');
      // 4. Добавляем пользователя в project_members
      const { error: memberError } = await supabaseAdmin
        .from('project_members')
        .upsert({
          project_id: project.id,
          user_id: authData.user.id,
          email: formData.email,
          role: 'owner'
        }, {
          onConflict: 'project_id,user_id'
        });

      if (memberError) {
        console.error('❌ ШАГ 4 FAILED:', memberError);
        setFormErrors({ general: 'Ошибка при добавлении в команду проекта: ' + memberError.message });
        return;
      }

      console.log('✅ ШАГ 4 OK: Added to project_members');

      console.log('🚀 ШАГ 5: Финализация регистрации...');
      // 5. Успешная регистрация
      const userData = {
        id: authData.user.id,
        name: formData.name,
        company_name: formData.company,
        email: formData.email,
        phone: formData.phone,
        company_field: formData.companyField || null,
        project_id: project.id,
        role: 'user'
      };

      // Сессия уже создана через supabase.auth.signUp
      setCurrentUser(userData);
      setIsLoggedIn(true);
      setCurrentStep('dashboard');
      setActiveSection('main');
      setIsFirstTimeUser(true);
      
      console.log('✅ ВСЕ ШАГИ ВЫПОЛНЕНЫ! Переход на dashboard...');
      showNotificationMessage('Регистрация успешна! Добро пожаловать в Adapto!');
      setFormData({ email: '', password: '', name: '', company: '', phone: '', companyField: '' });
      setValidationErrors({});

    } catch (error) {
      console.error('Registration error:', error);
      setFormErrors({ general: 'Произошла ошибка при регистрации' });
    }
  };

  // Функция регистрации оператора по приглашению
  const handleOperatorRegisterSubmit = async (e) => {
    e.preventDefault();
    setFormErrors({});

    // Проверяем, что все поля заполнены
    if (!formData.name || !formData.email || !formData.password) {
      setFormErrors({ general: 'Пожалуйста, заполните все поля' });
      return;
    }

    try {
      // 1. Регистрация в Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: formData.email,
        password: formData.password,
      });

      if (authError) {
        if (authError.message.includes('already registered') || authError.message.includes('already exists')) {
          setFormErrors({ general: 'Этот email уже зарегистрирован' });
        } else {
          setFormErrors({ general: authError.message });
        }
        return;
      }

      if (!authData.user) {
        setFormErrors({ general: 'Не удалось создать пользователя' });
        return;
      }

      // 2. Получаем project_id из приглашения (через inviterId)
      const { data: inviterData } = await supabase
        .from('users')
        .select('project_id')
        .eq('id', inviterId)
        .single();

      if (!inviterData?.project_id) {
        setFormErrors({ general: 'Не удалось определить проект' });
        return;
      }

      // 3. Создаем профиль оператора
      const { error: profileError } = await supabaseAdmin
        .from('users')
        .upsert({
          id: authData.user.id,
          email: formData.email,
          name: formData.name,
          project_id: inviterData.project_id,
          role: 'operator'
        }, {
          onConflict: 'id'
        });

      if (profileError) {
        console.error('Profile creation error:', profileError);
        setFormErrors({ general: 'Ошибка при создании профиля: ' + profileError.message });
        return;
      }

      // 4. Добавляем в project_members
      const { error: memberError } = await supabaseAdmin
        .from('project_members')
        .upsert({
          project_id: inviterData.project_id,
          user_id: authData.user.id,
          email: formData.email,
          role: 'member'
        }, {
          onConflict: 'project_id,user_id'
        });

      if (memberError) {
        console.error('Member creation error:', memberError);
      }

      // 5. Успешная регистрация
      const userData = {
        id: authData.user.id,
        name: formData.name,
        email: formData.email,
        project_id: inviterData.project_id,
        role: 'operator'
      };

      setCurrentUser(userData);
      setIsLoggedIn(true);
      setCurrentStep('dashboard');
      setActiveSection('main');
      showNotificationMessage('Регистрация оператора успешна! Добро пожаловать в команду!');
      setFormData({ email: '', password: '', name: '', company: '', phone: '', companyField: '' });
      setValidationErrors({});
      
      // Очищаем токены приглашения
      setInviteToken(null);
      setInviterId(null);
    } catch (error) {
      console.error('Operator registration error:', error);
      setFormErrors({ general: 'Произошла ошибка при регистрации' });
    }
  };

  const handleLogout = async () => {
    try {
      // Используем централизованную функцию logout
      const { logout } = await import('./utils/auth.js');
      const { success } = await logout();

      if (success) {
        setIsLoggedIn(false);
        setCurrentUser(null);
        setCurrentStep('login');
        setActiveSection('main');
        showNotificationMessage('Вы вышли из системы');
      }
    } catch (error) {
      console.error('Logout error:', error);
      // Всё равно выходим локально
      setIsLoggedIn(false);
      setCurrentUser(null);
      setCurrentStep('login');
      setActiveSection('main');
    }
  };



  const handleBotCorrection = async () => {
    if (!botCorrection.trim()) return;
    
    try {
      // Убеждаемся, что пользователь существует
      const user = await getOrCreateUser();
      if (!user) {
        showNotificationMessage('Ошибка: не удалось создать пользователя');
        return;
      }
      
      const success = await botCorrectionsAPI.addCorrection(currentUser.id, botCorrection);
      if (success) {
        const newCorrection = {
          id: generateUUID(),
          correction: botCorrection,
          created_at: new Date().toISOString()
        };
        setBotCorrections(prev => [...prev, newCorrection]);
        setBotCorrection('');
        showNotificationMessage('Корректировка добавлена!');
      } else {
        showNotificationMessage('Ошибка при добавлении корректировки');
      }
    } catch (error) {
      console.error('Error adding correction:', error);
      showNotificationMessage('Ошибка при добавлении корректировки');
    }
  };

  const removeCorrection = async (index) => {
    try {
      console.log('Removing correction at index:', index);
      const correctionToRemove = botCorrections[index];
      console.log('Correction to remove:', correctionToRemove);
      
      if (correctionToRemove && correctionToRemove.id) {
        console.log('Deleting correction with ID:', correctionToRemove.id);
        const success = await botCorrectionsAPI.deleteCorrection(correctionToRemove.id);
        console.log('Delete result:', success);
        
        if (success) {
          setBotCorrections(prev => prev.filter((_, i) => i !== index));
          showNotificationMessage('Корректировка удалена');
        } else {
          showNotificationMessage('Ошибка при удалении корректировки');
        }
      } else {
        console.log('No ID found, removing from local state only');
        // Если нет ID (локальная корректировка), просто удаляем из состояния
        setBotCorrections(prev => prev.filter((_, i) => i !== index));
        showNotificationMessage('Корректировка удалена');
      }
    } catch (error) {
      console.error('Error removing correction:', error);
      showNotificationMessage('Ошибка при удалении корректировки');
    }
  };

  const toggleCorrectionVisibility = (index) => {
    setHiddenCorrections(prev => {
      const newSet = new Set(prev);
      if (newSet.has(index)) {
        newSet.delete(index);
      } else {
        newSet.add(index);
      }
      return newSet;
    });
  };

  const toggleCorrectionSelection = (index) => {
    console.log(`toggleCorrectionSelection called with index: ${index}`);
    setSelectedCorrections(prev => {
      const newSet = new Set(prev);
      if (newSet.has(index)) {
        newSet.delete(index);
        console.log(`Removed index ${index} from selection`);
      } else {
        newSet.add(index);
        console.log(`Added index ${index} to selection`);
      }
      console.log('New selection set:', newSet);
      return newSet;
    });
  };

  const toggleCorrectionActivity = async (index) => {
    let newActiveSet;
    
    setActiveCorrections(prev => {
      const newSet = new Set(prev);
      if (newSet.has(index)) {
        newSet.delete(index);
      } else {
        newSet.add(index);
      }
      newActiveSet = newSet;
      return newSet;
    });
    
    // Отправляем состояние на сервер асинхронно после обновления state
    if (currentUser?.id && newActiveSet) {
      try {
        const activeArray = Array.from(newActiveSet);
        const response = await fetch(`${API_CONFIG.BASE_URL}/api/corrections/active/${currentUser.id}`, {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ activeCorrections: activeArray })
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('✅ Active corrections saved:', data);
      } catch (error) {
        console.error('❌ Error saving active corrections:', error);
        showNotificationMessage('Ошибка сохранения корректировок');
      }
    }
  };

  const [isAddingCorrection, setIsAddingCorrection] = useState(false);

  const handleAddCorrection = async () => {
    if (isAddingCorrection || !newCorrectionText.trim() || !currentUser?.id) return;
    
    setIsAddingCorrection(true);
    
    try {
      // Сохраняем в Supabase
      const success = await botCorrectionsAPI.addCorrection(currentUser.id, newCorrectionText.trim(), 'admin');
      
      if (success) {
        // Обновляем локальное состояние
        const newCorrection = {
          id: generateUUID(), // временный ID
          correction: newCorrectionText.trim(),
          created_at: new Date().toISOString()
        };
        setBotCorrections(prev => [...prev, newCorrection]);
        setNewCorrectionText('');
        setShowAddCorrectionForm(false);
        showNotificationMessage('Корректировка добавлена');
      } else {
        showNotificationMessage('Ошибка при добавлении корректировки');
      }
    } catch (error) {
      console.error('Error adding correction:', error);
      showNotificationMessage('Ошибка при добавлении корректировки');
    } finally {
      setIsAddingCorrection(false);
    }
  };

  const handleDeleteCorrections = async () => {
    if (!currentUser?.id) {
      showNotificationMessage('Ошибка: пользователь не авторизован');
      setShowDeleteConfirmModal(false);
      return;
    }

    const indicesToRemove = Array.from(selectedCorrections);
    if (indicesToRemove.length === 0) {
      setShowDeleteConfirmModal(false);
      return;
    }

    try {
      // Удаляем из БД по id там, где он есть
      for (const idx of indicesToRemove) {
        const correction = botCorrections[idx];
        if (correction && typeof correction.id === 'string' && correction.id) {
          try {
            await botCorrectionsAPI.deleteCorrection(correction.id);
          } catch (e) {
            console.error('deleteCorrection failed for id:', correction.id, e);
          }
        }
      }

      // Обновляем локальное состояние
      setBotCorrections(prev => prev.filter((_, i) => !indicesToRemove.includes(i)));
      setSelectedCorrections(new Set());
      setShowDeleteConfirmModal(false);
      showNotificationMessage('Корректировки удалены');
    } catch (error) {
      console.error('Error deleting corrections:', error);
      showNotificationMessage('Ошибка при удалении корректировок');
    }
  };

  // Knowledge base functions
  const handleAddKnowledgeItem = async (itemToAdd = null) => {
    console.log('handleAddKnowledgeItem called with:', itemToAdd);
    console.log('currentUser:', currentUser);
    console.log('currentUser?.id:', currentUser?.id);
    
    if (!currentUser?.id) {
      console.log('No currentUser.id, cannot add knowledge item');
      showNotificationMessage('Необходимо войти в систему');
      return;
    }
    
    const item = itemToAdd || newKnowledgeItem;
    
    console.log('Item to add:', item);
    console.log('Item nicheId:', item.nicheId);
    console.log('Selected niche ID:', selectedNicheId);
    
    if (!item.content.trim()) {
      console.log('Item content is empty, returning');
      return;
    }

    try {
      console.log('Getting or creating user...');
      // Убеждаемся, что пользователь существует
      const user = await getOrCreateUser();
      if (!user) {
        showNotificationMessage('Ошибка: не удалось создать пользователя');
        return;
      }
      
      const knowledgeItem = {
        ...item,
        status: 'Обработка',
        created_at: new Date().toISOString()
      };

      // Проверяем дубликаты в БД перед добавлением
      const existingItems = await knowledgeBase.getKnowledgeItems(currentUser.id);
      const isDuplicate = existingItems.some(existingItem => 
        existingItem.content === item.content && existingItem.type === item.type
      );
      
      if (isDuplicate) {
        showNotificationMessage('Этот элемент уже существует в базе знаний');
        return;
      }
      
      // Сначала добавляем элемент в таблицу со статусом "Обработка"
      const tempItem = {
        ...knowledgeItem,
        id: 'temp_' + generateUUID(),
        status: 'Обработка'
      };
      
      // Показываем индикатор времени обработки для сайтов
      if (item.type === 'site') {
        showNotificationMessage('🌐 Парсинг сайта... Ожидайте 2-5 минут');
        
        // Инициализируем прогресс
        updateProcessingProgress(tempItem.id, 10, 'Начинаем парсинг сайта...');
        
        // Показываем прогресс каждые 30 секунд
        const progressInterval = setInterval(() => {
          const currentProgress = processingProgress[tempItem.id]?.progress || 10;
          const newProgress = Math.min(currentProgress + 15, 90);
          updateProcessingProgress(tempItem.id, newProgress, '⏳ Парсинг продолжается... Загружаем товары и цены');
        }, 30000);
        
        // Очищаем интервал через 5 минут
        setTimeout(() => {
          clearInterval(progressInterval);
        }, 300000);
      } else {
        // Для других типов контента
        updateProcessingProgress(tempItem.id, 20, 'Обработка контента...');
      }
      setKnowledgeItems(prev => [...prev, tempItem]);
      setHasKnowledgeBase(true);
      showNotificationMessage('Элемент добавлен в базу знаний! Статус: Обработка');
      
      // Отправляем через новый API сервер
      console.log('Sending to API for processing and storage:', knowledgeItem);
      const response = await fetch('${API_CONFIG.BASE_URL}/api/knowledge/upload', {
        method: 'POST',
        headers: {
          'x-user-id': currentUser.id,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          sourceType: item.type,
          content: item.content,
          title: item.title || 'Загруженный контент',
          sourceUrl: item.url || null,
          nicheId: item.nicheId && item.nicheId.trim() !== '' ? item.nicheId : null
        })
      });
      
      const result = await response.json();
      console.log('API response:', result);
      
      if (!response.ok || !result.success) {
        console.error('Failed to process through API:', result);
        
        // Обновляем статус на "Ошибка"
        setKnowledgeItems(prev => prev.map(prevItem => 
          prevItem.id === tempItem.id 
            ? { ...prevItem, status: 'Ошибка' }
            : prevItem
        ));
        
        // Удаляем прогресс
        setProcessingProgress(prev => {
          const newProgress = { ...prev };
          delete newProgress[tempItem.id];
          return newProgress;
        });
        showNotificationMessage('Ошибка при обработке контента. Проверьте подключение к серверу.');
        return;
      }

      // Запускаем парсинг сайта через RAG систему
      if (item.type === 'site' || item.type === 'website') {
        console.log('Starting website parsing through RAG system...');
        try {
          const parseResult = await fetch('${API_CONFIG.BASE_URL}/api/parse-website', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              url: item.content,
              userId: currentUser.id,
              nicheId: item.nicheId || selectedNicheId
            })
          });
          
          const parseData = await parseResult.json();
          console.log('Website parsing result:', parseData);
          
          if (parseData.success) {
            console.log('✅ Website parsing completed successfully');
            console.log(`📝 Created ${parseData.data.chunksCount} chunks`);
          } else {
            console.log('❌ Website parsing failed:', parseData.error);
          }
        } catch (parseError) {
          console.error('❌ Error during website parsing:', parseError);
        }
      }

      // Если это сайт — показываем прогресс краулинга ссылок (пуллим список источников)
      try {
        if (item.type === 'site' || item.type === 'website') {
          const createdSourceId = result?.data?.id;
          if (createdSourceId) {
            let tries = 0;
            const poll = setInterval(async () => {
              tries += 1;
              try {
                const res = await fetch('${API_CONFIG.BASE_URL}/api/knowledge/sources', {
                  headers: { 'x-user-id': currentUser.id }
                });
                const payload = await res.json();
                const src = (payload?.data || []).find((s) => s.id === createdSourceId);
                const linksCount = Array.isArray(src?.structured_data?.links) ? src.structured_data.links.length : 0;
                if (linksCount > 0) {
                  updateProcessingProgress(tempItem.id, 95, `Найдено ссылок: ${linksCount}`);
                  clearInterval(poll);
                } else {
                  updateProcessingProgress(tempItem.id, Math.min((processingProgress[tempItem.id]?.progress || 40) + 5, 90), 'Краулинг ссылок...');
                }
              } catch (e) {}
              if (tries >= 20) clearInterval(poll);
            }, 5000);
          }
        }
      } catch (e) { console.warn('Crawl poll error', e); }

             // Ждем обработки ИИ (проверяем каждые 5 секунд)
             console.log('Waiting for AI processing...');
             let attempts = 0;
             const maxAttempts = item.type === 'site' ? 60 : 20; // 5 минут для сайтов, 1 минута для остального
             
             while (attempts < maxAttempts) {
               await new Promise(resolve => setTimeout(resolve, 5000)); // Ждем 5 секунд
               
               // Обновляем прогресс
               const progressPercent = Math.min(30 + (attempts * 2), 95);
               const timeElapsed = Math.floor(attempts * 5 / 60);
               const timeMessage = timeElapsed > 0 ? ` (${timeElapsed} мин)` : '';
               updateProcessingProgress(tempItem.id, progressPercent, `Обработка ИИ...${timeMessage}`);
               
               const updatedKnowledgeItems = await knowledgeBase.getKnowledgeItems(currentUser.id);
               
               // Ищем новый элемент по содержимому и времени создания
               const newItem = updatedKnowledgeItems.find(dbItem => 
                 dbItem.original_content === item.content && 
                 dbItem.source_type === item.type &&
                 new Date(dbItem.created_at) > new Date(Date.now() - 600000) // создан в последние 10 минут
               );
               
               if (newItem && newItem.processed_content && 
                   newItem.processed_content !== "Понял, информация сохранена." &&
                   (newItem.status === 'Обработано' || newItem.status === 'Загружено')) {
                 // Обработка завершена - заменяем временный элемент на реальный
                 updateProcessingProgress(tempItem.id, 100, 'Загружено');
                 setKnowledgeItems(prev => prev.map(prevItem => 
                   prevItem.id === tempItem.id 
                     ? { ...newItem, status: 'Загружено' }
                     : prevItem
                 ));
                 
                 // Удаляем прогресс через 2 секунды
                 setTimeout(() => {
                   setProcessingProgress(prev => {
                     const newProgress = { ...prev };
                     delete newProgress[tempItem.id];
                     return newProgress;
                   });
                 }, 2000);
                 
                 showNotificationMessage('✅ Контент успешно обработан ИИ!');
                 break;
               }
               
               attempts++;
             }
             
             if (attempts >= maxAttempts) {
               // Таймаут - оставляем статус "Обработка"
               setKnowledgeItems(prev => prev.map(prevItem => 
                 prevItem.id === tempItem.id 
                   ? { ...prevItem, status: 'Обработка (таймаут)' }
                   : prevItem
               ));
               
               // Удаляем прогресс
               setProcessingProgress(prev => {
                 const newProgress = { ...prev };
                 delete newProgress[tempItem.id];
                 return newProgress;
               });
               
               showNotificationMessage('⏳ Обработка занимает больше времени. Проверьте статус позже.');
             }
             
             // Сбрасываем состояние только если это не из попапа
             if (!itemToAdd) {
               setNewKnowledgeItem({ type: 'text', content: '', nicheId: '' });
             }
    } catch (error) {
      console.error('Error adding knowledge item:', error);
      showNotificationMessage('Ошибка при добавлении элемента');
    }
  };

  // Функция для обновления прогресса обработки
  const updateProcessingProgress = (itemId, progress, message) => {
    setProcessingProgress(prev => ({
      ...prev,
      [itemId]: {
        progress: progress,
        message: message,
        timestamp: Date.now()
      }
    }));
  };

  // Функция для получения статуса с прогрессом
  const getProcessingStatus = (item) => {
    if (item.status !== 'Обработка') {
      return item.status;
    }
    
    const progress = processingProgress[item.id];
    if (!progress) {
      return 'Обработка';
    }
    
    if (progress.progress >= 100) {
      return 'Загружено';
    }
    
    // Показываем время ожидания для сайтов
    if (item.type === 'site' && progress.progress < 50) {
      const elapsed = Math.floor((Date.now() - progress.timestamp) / 1000);
      const minutes = Math.floor(elapsed / 60);
      const seconds = elapsed % 60;
      return `Обработка: ${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
    
    return `Обработка: ${progress.progress}%`;
  };

  // Функция для автоматической проверки статуса обработки
  const checkProcessingStatus = async () => {
    const processingItems = knowledgeItems.filter(item => 
      item.status === 'Обработка' || item.status === 'Обработка (таймаут)'
    );
    
    if (processingItems.length === 0) return;
    
    try {
      const updatedItems = await knowledgeBase.getKnowledgeItems(currentUser.id);
      
      processingItems.forEach(processingItem => {
        // Ищем обновленный элемент в базе
        const updatedItem = updatedItems.find(dbItem => 
          (dbItem.id === processingItem.id) ||
          (dbItem.original_content === processingItem.content && 
           dbItem.source_type === processingItem.type &&
           new Date(dbItem.created_at) > new Date(Date.now() - 300000)) // создан в последние 5 минут
        );
        
        if (updatedItem && updatedItem.status === 'Загружено') {
          // Обновляем статус
          setKnowledgeItems(prev => prev.map(prevItem => 
            prevItem.id === processingItem.id 
              ? { ...updatedItem, status: 'Загружено' }
              : prevItem
          ));
          
          // Удаляем прогресс
          setProcessingProgress(prev => {
            const newProgress = { ...prev };
            delete newProgress[processingItem.id];
            return newProgress;
          });
          
          showNotificationMessage('✅ Контент успешно обработан!');
        }
      });
    } catch (error) {
      console.error('Error checking processing status:', error);
    }
  };

  // Автоматическая проверка статуса каждые 10 секунд
  useEffect(() => {
    const interval = setInterval(checkProcessingStatus, 10000);
    return () => clearInterval(interval);
  }, [knowledgeItems, currentUser?.id]);

  // Обновление времени каждую секунду для активных элементов
  useEffect(() => {
    const processingItems = knowledgeItems.filter(item => 
      item.status === 'Обработка' && processingProgress[item.id]
    );
    
    if (processingItems.length === 0) return;
    
    const interval = setInterval(() => {
      // Принудительно обновляем компонент для обновления времени
      setProcessingProgress(prev => ({ ...prev }));
    }, 1000);
    
    return () => clearInterval(interval);
  }, [knowledgeItems, processingProgress]);

  // Функция для обработки контента через GigaChat
  const processContentWithGigaChat = async (itemId, content, contentType, userId) => {
    try {
      console.log('Starting GigaChat processing for item:', itemId);
      
      // Показываем уведомление о начале обработки
      showNotificationMessage('Начинаем обработку контента через ИИ...');
      
      // Отправляем на обработку через GigaChat
      const result = await processContent(content, contentType, userId);
      
      if (result.success) {
        // Обновляем статус в базе данных
        const updatedItem = await knowledgeBase.updateKnowledgeItemStatus(itemId, result.status);
        
        if (updatedItem) {
          // Обновляем в локальном состоянии
          setKnowledgeItems(prev => prev.map(item => 
            item.id === itemId 
              ? { ...item, status: result.status }
              : item
          ));
          
          showNotificationMessage('Контент успешно обработан ИИ! Статус: Загружено');
        } else {
          showNotificationMessage('Ошибка при обновлении статуса');
        }
      } else {
        // Обновляем статус на "Ошибка"
        await knowledgeBase.updateKnowledgeItemStatus(itemId, 'Ошибка');
        setKnowledgeItems(prev => prev.map(item => 
          item.id === itemId 
            ? { ...item, status: 'Ошибка' }
            : item
        ));
        
        showNotificationMessage('Ошибка обработки контента ИИ');
      }
    } catch (error) {
      console.error('Error processing content with GigaChat:', error);
      
      // Обновляем статус на "Ошибка"
      await knowledgeBase.updateKnowledgeItemStatus(itemId, 'Ошибка');
      setKnowledgeItems(prev => prev.map(item => 
        item.id === itemId 
          ? { ...item, status: 'Ошибка' }
          : item
      ));
      
      showNotificationMessage('Ошибка обработки контента ИИ');
    }
  };

  const handleDeleteKnowledgeItem = async (id) => {
    try {
      const success = await knowledgeBase.deleteKnowledgeItem(id);
      if (success) {
        setKnowledgeItems(prev => prev.filter(item => item.id !== id));
        showNotificationMessage('Элемент удален из базы знаний');
      } else {
        showNotificationMessage('Ошибка при удалении элемента');
      }
    } catch (error) {
      console.error('Error deleting knowledge item:', error);
      showNotificationMessage('Ошибка при удалении элемента');
    }
  };

  const handleShowKnowledgeDetails = (item) => {
    setSelectedKnowledgeDetails(item);
    setShowKnowledgeDetailsPopup(true);
    setSelectedKnowledgeItem(null); // Закрываем выпадающее меню
  };


  const handleSitePopupOpen = () => {
    setShowSitePopup(true);
    setSiteUrl('');
    setSelectedPages(['']);
    setSiteUrlError('');
    setSelectedPagesErrors(['']);
    setSitePopupTab('full');
  };

  const handleSitePopupClose = () => {
    setShowSitePopup(false);
    setSiteUrl('');
    setSelectedPages(['']);
    setSiteUrlError('');
    setSelectedPagesErrors(['']);
  };

  const handleAddPage = () => {
    setSelectedPages(prev => [...prev, '']);
    setSelectedPagesErrors(prev => [...prev, '']);
  };

  const handleRemovePage = (index) => {
    setSelectedPages(prev => prev.filter((_, i) => i !== index));
    setSelectedPagesErrors(prev => prev.filter((_, i) => i !== index));
  };

  const handlePageChange = (index, value) => {
    setSelectedPages(prev => prev.map((page, i) => i === index ? value : page));
    const error = validateUrl(value);
    setSelectedPagesErrors(prev => prev.map((err, i) => i === index ? error : err));
  };

  const handleSiteUrlChange = (value) => {
    setSiteUrl(value);
    const error = validateUrl(value);
    setSiteUrlError(error);
  };

  const handleSiteImport = async () => {
    console.log('handleSiteImport called');
    console.log('sitePopupTab:', sitePopupTab);
    console.log('siteUrl:', siteUrl);
    console.log('selectedPages:', selectedPages);
    
    // Закрываем попап сразу после нажатия кнопки
    handleSitePopupClose();
    
    if (sitePopupTab === 'full') {
      const error = validateUrl(siteUrl);
      if (error) {
        setSiteUrlError(error);
        showNotificationMessage('Неверный URL сайта');
        return;
      }
      // Добавляем весь сайт
      const newItem = {
        type: 'site',
        content: siteUrl,
        status: 'Обработка'
      };
      console.log('Adding full site item:', newItem);
      await handleAddKnowledgeItem(newItem);
    } else {
      // Проверяем все страницы
      const errors = selectedPages.map(page => validateUrl(page));
      setSelectedPagesErrors(errors);
      
      if (errors.some(error => error)) {
        showNotificationMessage('Неверные URL страниц');
        return;
      }
      
      const validPages = selectedPages.filter(page => page.trim());
      if (validPages.length === 0) return;
      
      for (const page of validPages) {
        const newItem = {
          type: 'site',
          content: page,
          status: 'Обработка'
        };
        console.log('Adding page item:', newItem);
        await handleAddKnowledgeItem(newItem);
      }
    }
  };

  // Feed popup functions
  const handleFeedPopupOpen = () => {
    setShowFeedPopup(true);
    setFeedUrl('');
    setFeedUrlError('');
  };

  const handleFeedPopupClose = () => {
    setShowFeedPopup(false);
    setFeedUrl('');
    setFeedUrlError('');
  };

  const handleFeedUrlChange = (value) => {
    setFeedUrl(value);
    const error = validateUrl(value);
    setFeedUrlError(error);
  };

  const handleFeedImport = async () => {
    const error = validateUrl(feedUrl);
    if (error) {
      setFeedUrlError(error);
      return;
    }
    
    const newItem = {
      type: 'feed',
      content: feedUrl,
      status: 'Обработка'
    };
    await handleAddKnowledgeItem(newItem);
    handleFeedPopupClose();
  };

  // File popup functions
  const handleFilePopupOpen = () => {
    setShowFilePopup(true);
    setSelectedFiles([]);
    setUploadedFiles([]);
  };

  const handleFilePopupClose = () => {
    setShowFilePopup(false);
    setSelectedFiles([]);
    setUploadedFiles([]);
  };

  const handleFileSelect = (event) => {
    const files = Array.from(event.target.files);
    setSelectedFiles(files);
  };

  const handleRemoveFile = (index) => {
    setSelectedFiles(prev => prev.filter((_, i) => i !== index));
  };

  const handleFileUpload = async () => {
    if (selectedFiles.length === 0) return;
    
    if (!currentUser?.id) {
      showNotificationMessage('Необходимо войти в систему');
      return;
    }

    for (const file of selectedFiles) {
      try {
        // Показываем уведомление о начале обработки
        showNotificationMessage(`Начинаем обработку файла: ${file.name}`);
        
        // Создаем FormData для загрузки файла
        const formData = new FormData();
        formData.append('file', file);
        formData.append('userId', currentUser.id);
        formData.append('contentType', 'file');
        
        // Отправляем файл на сервер для обработки
        const response = await fetch('${API_CONFIG.BASE_URL}/api/upload-file', {
          method: 'POST',
          body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Добавляем элемент в локальное состояние
          const newItem = {
            id: result.knowledge_item?.id || generateUUID(),
            type: 'file',
            content: file.name,
            status: result.status || 'Загружено',
            processed_content: result.analysis,
            created_at: new Date().toISOString()
          };
          
          setKnowledgeItems(prev => [...prev, newItem]);
          setHasKnowledgeBase(true);
          showNotificationMessage(`✅ Файл ${file.name} успешно обработан!`);
        } else {
          showNotificationMessage(`❌ Ошибка обработки файла ${file.name}: ${result.message}`);
        }
      } catch (error) {
        console.error('File upload error:', error);
        showNotificationMessage(`❌ Ошибка загрузки файла ${file.name}`);
      }
    }
    
    handleFilePopupClose();
  };

  // Text popup functions
  const handleTextPopupOpen = () => {
    setShowTextPopup(true);
    setTextContent('');
    setTextContentError('');
  };

  const handleTextPopupClose = () => {
    setShowTextPopup(false);
    setTextContent('');
    setTextContentError('');
  };

  const handleTextContentChange = (value) => {
    setTextContent(value);
    if (!value.trim()) {
      setTextContentError('Поле обязательно для заполнения');
    } else {
      setTextContentError('');
    }
  };

  const handleTextImport = async () => {
    if (!textContent.trim()) {
      setTextContentError('Поле обязательно для заполнения');
      return;
    }
    
    const newItem = {
      type: 'text',
      content: textContent,
      status: 'Обработка'
    };
    await handleAddKnowledgeItem(newItem);
    handleTextPopupClose();
  };

  // Integration functions
  const handleIntegrationClick = (integration) => {
    setSelectedIntegration(integration);
    setShowIntegrationModal(true);
  };

  // Widget functions
  const handleShowWidgetConstructor = () => {
    setShowWidgetConstructor(true);
  };

  // Функции для интеграций
  const handleInstallIntegration = (integration) => {
    if (integration.id === 'widget') {
      setShowWidgetConstructor(true);
    } else {
      setSelectedIntegration(integration);
      setShowIntegrationModal(true);
    }
  };

  const handleUninstallIntegration = (integration) => {
    setIntegrationToUninstall(integration);
    setShowUninstallModal(true);
  };

  const confirmUninstall = () => {
    if (integrationToUninstall) {
      setIntegrations(prev => prev.map(item => 
        item.id === integrationToUninstall.id 
          ? { ...item, installed: false }
          : item
      ));
      setShowUninstallModal(false);
      setIntegrationToUninstall(null);
      showNotificationMessage('Интеграция удалена');
    }
  };

  const handleIntegrationSuccess = (integrationId) => {
    setIntegrations(prev => prev.map(item => 
      item.id === integrationId 
        ? { ...item, installed: true }
        : item
    ));
    setShowIntegrationModal(false);
    setSelectedIntegration(null);
    showNotificationMessage('Интеграция успешно установлена!');
  };

  // Render functions
  const renderContent = () => {
    switch (activeSection) {
              case 'main':
  return (
          <div className="p-0">
            {/* Заголовок */}
            <div className="text-left mb-[16px]">
              <h1 className="text-[20px] font-[500] text-[#070F1A]">
                Приветствуем вас, {currentUser?.name || currentUser?.email?.split('@')[0] || 'Пользователь'}! С чего начнем?
              </h1>
            </div>
            
            {/* Разделительная линия на всю ширину */}
            <div className="h-px bg-[#E5E7EB] mb-[50px]" style={{ marginLeft: '-32px', marginRight: '-32px' }}></div>

            {/* Сторисы */}
            <div className="mb-[50px]">
              <h2 className="text-[16px] font-[500] text-[#070F1A] mb-[20px]">Сторисы</h2>
              <div className="flex gap-4 overflow-x-auto pb-4">
                {stories.map((story) => (
                  <div key={story.id} className="flex-shrink-0 flex flex-col items-center">
                    <div className="w-[70px] h-[70px] border border-[#0084FF] rounded-[90px] flex items-center justify-center">
                      <div className="w-[64px] h-[64px] bg-white rounded-[90px] relative overflow-hidden">
                        <img 
                          src={story.image_url} 
                          alt={story.title} 
                          className="w-full h-full object-cover" 
                        />
                      </div>
                    </div>
                    <span className="text-[11px] font-[400] text-[#070F1A] text-center leading-tight mt-2">
                      {story.title.split(' ').map((word, index) => (
                        <span key={index}>
                          {word}
                          {index < story.title.split(' ').length - 1 && <br />}
                        </span>
                      ))}
                    </span>
                  </div>
                ))}
              </div>
            </div>

            {/* Блок "Запуск Adapto" */}
            {showSetupGuide && (
              <div className="mb-[50px]">
                <div className="flex items-center gap-3 mb-[20px]">
                  {/* Круговой прогресс-бар */}
                  <div className="relative w-[22px] h-[22px]">
                    <svg className="w-[22px] h-[22px]" viewBox="0 0 32 32" style={{ transform: 'rotate(-90deg)' }}>
                      {/* Фон */}
                      <circle cx="16" cy="16" r="14" fill="none" stroke="#E5E7EB" strokeWidth="4"/>
                      {/* Прогресс */}
                      <circle 
                        cx="16" cy="16" r="14" 
                        fill="none" 
                        stroke="#36C76A" 
                        strokeWidth="4"
                        strokeDasharray={`${2 * Math.PI * 14}`}
                        strokeDashoffset={`${2 * Math.PI * 14 * (1 - completedSteps.length / 3)}`}
                        strokeLinecap="round"
                        className="transition-all duration-500"
                      />
                    </svg>
                  </div>
                  <h2 className="text-[18px] font-[500] text-[#070F1A]">Запуск Adapto</h2>
                  <div className="flex items-center gap-[10px]">
                    <span className="text-[14px] text-[#8E8E93]">•</span>
                    <span className="text-[14px] text-[#8E8E93]">{completedSteps.length} / 3 шага</span>
                  </div>
                </div>

                {/* Основная плашка с шагами */}
                <div className="bg-white rounded-[20px] p-5 w-full">
                  <h3 className="text-[20px] font-[500] text-[#070F1A] mb-[34px]">Настройте и подключите ИИ-агента:</h3>
                  
                  <div className="w-full">
                    {/* Шаги на весь контейнер */}
                    <div className="w-full space-y-4 pb-0">
                      {/* Шаг 1 */}
                      <div className="rounded-[15px] p-0">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex items-center gap-[10px]">
                            {completedSteps.includes(1) ? (
                              <img src="/Checkbox.svg" alt="Выполнено" className="w-[16px] h-[16px]" />
                            ) : (
                              <img src="/Checkbox-1.svg" alt="Не выполнено" className="w-[16px] h-[16px]" />
                            )}
                            <h4 
                              className={`text-[16px] font-[500] cursor-pointer ${completedSteps.includes(1) ? 'line-through text-[#8E8E93]' : 'text-[#070F1A]'}`}
                              onClick={() => setExpandedStep(expandedStep === 1 ? null : 1)}
                            >
                              Настройте ИИ-модель под ваш бизнес
                            </h4>
                          </div>
                          <button
                            onClick={() => setExpandedStep(expandedStep === 1 ? null : 1)}
                            className="text-[#0084FF] hover:text-[#0073E6] transition-colors"
                          >
                            <img
                              src="/Bounds.svg"
                              alt="Раскрыть"
                              className={`w-[11px] h-[11px] transition-transform duration-300 ${expandedStep === 1 ? 'rotate-90' : ''}`}
                              style={{ filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)' }}
                            />
                          </button>
                        </div>
                        
                        {expandedStep === 1 && (
                          <div className="space-y-4">
                            <p className="text-[14px] text-[#8E8E93] leading-relaxed">
                              Настройте параметры вашей ИИ-модели: стиль общения, правила, ограничения и сценарии диалогов для эффективного взаимодействия с клиентами.
                            </p>
                            <button
                              onClick={() => setActiveSection('model-settings')}
                              className="h-[34px] w-full px-6 bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors"
                              style={BUTTON_STYLES.blueButton}
                            >
                              Настроить
                            </button>
            </div>
                        )}
                      </div>
                      <div className="h-px bg-[#E5E7EB] my-[15px]"></div>

                      {/* Шаг 2 */}
                      <div className="rounded-[15px] p-0">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex items-center gap-[10px]">
                            {completedSteps.includes(2) ? (
                              <img src="/Checkbox.svg" alt="Выполнено" className="w-[16px] h-[16px]" />
                            ) : (
                              <img src="/Checkbox-1.svg" alt="Не выполнено" className="w-[16px] h-[16px]" />
                            )}
                            <h4 
                              className={`text-[16px] font-[500] cursor-pointer ${completedSteps.includes(2) ? 'line-through text-[#8E8E93]' : 'text-[#070F1A]'}`}
                              onClick={() => setExpandedStep(expandedStep === 2 ? null : 2)}
                            >
                              Загрузите информацию о компании в базу знаний
                            </h4>
                          </div>
                          <button
                            onClick={() => setExpandedStep(expandedStep === 2 ? null : 2)}
                            className="text-[#0084FF] hover:text-[#0073E6] transition-colors"
                          >
                            <img
                              src="/Bounds.svg"
                              alt="Раскрыть"
                              className={`w-[11px] h-[11px] transition-transform duration-300 ${expandedStep === 2 ? 'rotate-90' : ''}`}
                              style={{ filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)' }}
                            />
                          </button>
                </div>
                
                        {expandedStep === 2 && (
                          <div className="space-y-4">
                            <p className="text-[14px] text-[#8E8E93] leading-relaxed">
                              Загрузите информацию о вашей компании, продуктах и услугах. Это позволит ИИ-боту давать точные и релевантные ответы вашим клиентам.
                            </p>
                            <button
                              onClick={() => setActiveSection('knowledge')}
                              className="h-[34px] w-full px-6 bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors"
                              style={BUTTON_STYLES.blueButton}
                            >
                              Загрузить
                            </button>
                      </div>
                        )}
                      </div>
                      <div className="h-px bg-[#E5E7EB] my-[15px]"></div>

                      {/* Шаг 3 */}
                      <div className="rounded-[15px] p-0">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex items-center gap-[10px]">
                            {completedSteps.includes(3) ? (
                              <img src="/Checkbox.svg" alt="Выполнено" className="w-[16px] h-[16px]" />
                            ) : (
                              <img src="/Checkbox-1.svg" alt="Не выполнено" className="w-[16px] h-[16px]" />
                            )}
                            <h4 
                              className={`text-[16px] font-[500] cursor-pointer ${completedSteps.includes(3) ? 'line-through text-[#8E8E93]' : 'text-[#070F1A]'}`}
                              onClick={() => setExpandedStep(expandedStep === 3 ? null : 3)}
                            >
                              Протестируйте и интегрируйте в каналы связи
                            </h4>
                    </div>
                          <button
                            onClick={() => setExpandedStep(expandedStep === 3 ? null : 3)}
                            className="text-[#0084FF] hover:text-[#0073E6] transition-colors"
                          >
                            <img
                              src="/Bounds.svg"
                              alt="Раскрыть"
                              className={`w-[11px] h-[11px] transition-transform duration-300 ${expandedStep === 3 ? 'rotate-90' : ''}`}
                              style={{ filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)' }}
                            />
                          </button>
                  </div>
              
                        {expandedStep === 3 && (
                          <div className="space-y-4">
                            <p className="text-[14px] text-[#8E8E93] leading-relaxed">
                              Протестируйте работу вашего ИИ-бота, задав ему различные вопросы. Убедитесь, что он корректно отвечает и применяет настройки.
                            </p>
                            <button
                              onClick={() => setActiveSection('my-solo')}
                              className="h-[34px] w-full px-6 bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors"
                              style={BUTTON_STYLES.blueButton}
                            >
                              Тестировать
                            </button>
                          </div>
                        )}
                      </div>
                </div>
                  </div>
                </div>
              </div>
            )}

            {/* Новый контейнер "Дашборд" */}
            <div className="mb-[50px]">
              <h2 className="text-[18px] font-[500] text-[#070F1A] mb-[20px]">Дашборд</h2>
              <div className="grid grid-cols-3 gap-4">
                {/* CRM */}
                <div 
                  className="rounded-[16px] p-6 cursor-pointer flex flex-col items-center text-center transition-all duration-200"
                  onClick={() => setActiveSection('crm')}
                  style={{
                    ...BUTTON_STYLES.whiteButton,
                    ':hover': {
                      backgroundColor: 'white',
                      boxShadow: '0 4px 8px rgba(0,0,0,0.15)'
                    }
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = 'white';
                    e.currentTarget.style.boxShadow = '0 4px 8px rgba(0,0,0,0.15)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = BUTTON_STYLES.whiteButton.backgroundColor;
                    e.currentTarget.style.boxShadow = BUTTON_STYLES.whiteButton.boxShadow;
                  }}
                >
                  <div className="w-[24px] h-[24px] flex items-center justify-center mb-[5px]">
                    <img src="./crm.svg" alt="CRM" className="w-[24px] h-[24px]" style={{ filter: 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(199deg) brightness(104%) contrast(101%)' }} />
                  </div>
                  <h3 className="text-[14px] font-[500] text-[#070F1A]">CRM</h3>
                </div>

                {/* Диалоги */}
                <div 
                  className="rounded-[16px] p-6 cursor-pointer flex flex-col items-center text-center transition-all duration-200"
                  onClick={() => setActiveSection('dialogs')}
                  style={{
                    ...BUTTON_STYLES.whiteButton,
                    ':hover': {
                      backgroundColor: 'white',
                      boxShadow: '0 4px 8px rgba(0,0,0,0.15)'
                    }
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = 'white';
                    e.currentTarget.style.boxShadow = '0 4px 8px rgba(0,0,0,0.15)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = BUTTON_STYLES.whiteButton.backgroundColor;
                    e.currentTarget.style.boxShadow = BUTTON_STYLES.whiteButton.boxShadow;
                  }}
                >
                  <div className="w-[24px] h-[24px] flex items-center justify-center mb-[5px]">
                    <img src="./dialog.svg" alt="Диалоги" className="w-[24px] h-[24px]" style={{ filter: 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(199deg) brightness(104%) contrast(101%)' }} />
                  </div>
                  <h3 className="text-[14px] font-[500] text-[#070F1A]">Диалоги</h3>
                </div>

                {/* Статистика */}
                <div 
                  className="rounded-[16px] p-6 cursor-pointer flex flex-col items-center text-center transition-all duration-200"
                  onClick={() => setActiveSection('statistics')}
                  style={{
                    ...BUTTON_STYLES.whiteButton,
                    ':hover': {
                      backgroundColor: 'white',
                      boxShadow: '0 4px 8px rgba(0,0,0,0.15)'
                    }
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = 'white';
                    e.currentTarget.style.boxShadow = '0 4px 8px rgba(0,0,0,0.15)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = BUTTON_STYLES.whiteButton.backgroundColor;
                    e.currentTarget.style.boxShadow = BUTTON_STYLES.whiteButton.boxShadow;
                  }}
                >
                  <div className="w-[24px] h-[24px] flex items-center justify-center mb-[5px]">
                    <img src="./stat.svg" alt="Статистика" className="w-[24px] h-[24px]" style={{ filter: 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(199deg) brightness(104%) contrast(101%)' }} />
                  </div>
                  <h3 className="text-[14px] font-[500] text-[#070F1A]">Статистика</h3>
                </div>
              </div>
            </div>

            {/* Блок "Мини-обучение по платформе" */}
            <div className="mt-[20px]">
              <h2 className="text-[20px] font-[500] text-[#070F1A] mb-[20px]">Мини-обучение по платформе</h2>
              <div className="w-full h-32 rounded-[15px] flex items-center justify-start cursor-pointer transition-all duration-300 p-0">
                <img src="/Frame 131.png" alt="Мини-обучение" className="w-[290px] h-[140px] object-contain" />
              </div>
            </div>
                </div>
        );

      case 'my-solo':
        return (
          <div className="space-y-6">
            {/* Заголовок и описание */}
            <h1 className="text-[20px] font-[500] text-[#070F1A]">Мой Adapto</h1>
            <p className="text-[#8E8E93] text-[14px]" style={{ marginTop: '12px' }}>
              Проверьте своего бота на знание скрипта и информации о вашей компании
            </p>

            {/* Два контейнера */}
            <div className="flex gap-[10px]">
              {/* Левый контейнер - поле для правок */}
              <div className="flex-1 bg-white rounded-[20px] flex flex-col" style={{ marginLeft: '-15px', marginRight: '10px', padding: '16px 16px 0px 16px' }}>
                {/* Предупреждение - показывается только если база знаний пуста */}
                {!hasKnowledgeBase && (
                  <div className="bg-[#FF3B30]/5 border border-[#FF3B30]/15 rounded-[15px] p-[15px] mb-6">
                    <div className="flex items-start gap-[11px]">
                      <img src="/alarm.svg" alt="Предупреждение" className="w-4 h-4 flex-shrink-0" style={{ filter: 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(340deg) brightness(104%) contrast(97%)' }} />
                      <div className="flex-1">
                        <h3 className="text-[#FF3B30] font-[500] text-base mb-[11px]">Предупреждение</h3>
                        <div className="flex justify-between items-center">
                          <p className="text-[#916464]/90 text-sm flex-1">
                            Вы не загрузили ничего в вашу базу знаний, ИИ-бот не готов к полноценной работе и будет отвечать некорректно!
                          </p>
                          <button className="text-[#FF3B30] font-[500] text-sm px-4 h-[34px] bg-[#FF3B30]/10 rounded-[12px] hover:bg-[#FF3B30]/20 transition-colors flex items-center ml-4">
                            Перейти в базу знаний
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Секция с корректировками */}
                <div className="flex-1 space-y-3 mb-6">
                  {botCorrections.map((correction, index) => (
                    <div key={index} className="flex items-center">
                      {/* Левая часть - номер */}
                      <div className="w-[40px] h-[40px] border border-[#070F1A]/10 rounded-[10px] flex items-center justify-center">
                        <span className="text-[#0084FF] font-semibold text-[14px]">{index + 1}</span>
                      </div>
                      {/* Отступ */}
                      <div className="w-[10px]"></div>
                      {/* Центральная часть - описание */}
                      <div className="flex-1 h-[40px] bg-[#F3F5F7] rounded-[10px] flex items-center px-[10px]">
                        <span className="text-[#070F1A] font-medium text-[14px] opacity-90">{correction.correction || correction}</span>
                      </div>
                      {/* Отступ */}
                      <div className="w-[10px]"></div>
                      {/* Правая часть - кнопка удаления */}
                      <div className="w-[40px] h-[40px] border border-[#070F1A]/10 rounded-[10px] flex items-center justify-center">
                        <button 
                          onClick={() => removeCorrection(index)}
                          className="w-[16px] h-[16px] flex items-center justify-center"
                        >
                          <img src="/traash.svg" alt="Удалить" className="w-[16px] h-[16px] text-red-500" style={{ filter: 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(346deg) brightness(104%) contrast(97%)' }} />
                        </button>
                      </div>
                    </div>
                  ))}
              </div>

                {/* Поле для корректировок - внизу */}
                <div className="relative">
                  <textarea
                    value={botCorrection}
                    onChange={(e) => setBotCorrection(e.target.value)}
                    placeholder="Если вы увидели ошибку в ответах – напишите правильный вариант здесь"
                    className="w-full h-[48px] border border-gray-300 rounded-[90px] px-[15px] py-[12px] text-[#8E8E93] text-[14px] resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 pr-[60px]"
                  />

                  <img 
                    src="/send-button.svg" 
                    alt="Отправить" 
                    className="absolute top-[5px] right-[5px] w-[38px] h-[38px] cursor-pointer" 
                    onClick={handleBotCorrection}
                  />
  </div>
              </div>

              {/* Правый контейнер - диалоговое окно */}
              <div className="w-[400px] bg-[#070F1A] rounded-[20px] p-0 flex flex-col" style={{ marginLeft: '15px', marginRight: '0px', height: '583px', flexShrink: 0 }}>
                {/* Заголовок "Тестирование Адапто" */}
                <div className="flex items-center justify-between mb-4 px-4 pt-4">
                  <div className="flex items-center gap-2">
                    <img src="/logo-testing.svg" alt="Тест" className="w-5 h-5" />
                    <h2 className="text-[18px] font-[500] text-white">Тестирование Адапто</h2>
  </div>
                  <button 
                    onClick={async () => {
                      if (currentUser?.id) {
                        try {
                          console.log('Attempting to clear chat history for user:', currentUser.id);
                          console.log('chatHistoryAPI object:', chatHistoryAPI);
                          console.log('clearChatHistory function:', chatHistoryAPI.clearChatHistory);
                          
                          if (typeof chatHistoryAPI.clearChatHistory !== 'function') {
                            throw new Error('clearChatHistory is not a function');
                          }
                          
                          const result = await chatHistoryAPI.clearChatHistory(currentUser.id);
                          console.log('Clear chat history result:', result);
                          
                          if (result) {
                            setChatHistory([
                              { type: 'assistant', text: 'Привет! Я ваш ИИ-ассистент Adapto. Как дела?', time: 'Только что', timestamp: Date.now() }
                            ]);
                            showNotificationMessage('История чата очищена');
                            // Прокручиваем к низу после очистки
                            ChatUtils.scrollToBottom(chatHistoryRef);
                          } else {
                            showNotificationMessage('Ошибка при очистке истории');
                          }
                        } catch (error) {
                          console.error('Error clearing chat history:', error);
                          showNotificationMessage('Ошибка при очистке истории: ' + error.message);
                        }
                      } else {
                        console.error('No current user ID available');
                        showNotificationMessage('Ошибка: пользователь не найден');
                      }
                    }}
                    className="text-white text-xs px-2 py-1 rounded hover:bg-white/10 transition-colors"
                    title="Очистить историю"
                  >
                    Очистить
                  </button>
                </div>

                {/* Диалог */}
                <div className="flex-1 flex flex-col">
                  {/* История диалога */}
                  <div ref={chatHistoryRef} className="flex-1 space-y-4 overflow-y-auto mb-4 chat-history-container" style={{ flexBasis: 0 }}>
                    
                    {/* DEBUG INFO */}
                    <div className="text-xs text-gray-500 p-2 bg-yellow-100 rounded">
                      DEBUG: chatHistory.length = {chatHistory.length}, currentUser.email = {currentUser?.email}, currentUser.id = {currentUser?.id}
                      <br />
                      chatHistory: {JSON.stringify(chatHistory.slice(0, 2))}
                    </div>
                    
                        <VirtualizedMessageList
                          messages={chatHistory}
                          getMessageAlignment={getMessageAlignment}
                          getMessageOrder={getMessageOrder}
                          getMessageStyle={getMessageStyle}
                          getMessageFooter={getMessageFooter}
                          aiAgentName={aiAgentName}
                          containerRef={chatHistoryRef}
                        />
                      </div>
                  
                  {/* Поле ввода - зафиксировано внизу */}
                  <div className="relative flex-shrink-0 px-0 pb-4">
  <input 
                      type="text"
                      value={currentMessage}
                      onChange={(e) => setCurrentMessage(e.target.value)}
                      placeholder="Нажмите, чтобы печатать"
                      className="w-full h-[48px] px-0 py-2 rounded-[90px] focus:outline-none focus:ring-2 focus:ring-blue-500 pr-[50px]"
                      style={{ 
                        border: '1px solid rgba(255, 255, 255, 0.1)', 
                        backgroundColor: '#070F1A',
                        color: '#8E8E93',
                        fontSize: '14px'
                      }}
                      onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    />
                    <img 
                      src="/send-button2.svg" 
                      alt="Отправить" 
                      className="absolute top-[5px] right-[5px] w-[38px] h-[38px] cursor-pointer" 
                      onClick={handleSendMessage}
                    />
                    </div>
                  </div>
            </div>
          </div>
          </div>
        );

      case 'knowledge':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <div>
                <h1 className="text-[20px] font-[500]">База знаний</h1>
                {(() => {
                  const filteredItems = knowledgeItems.filter(item => {
                    if (!selectedNicheId) return true;
                    return item.nicheId === selectedNicheId;
                  });
                  const totalItems = knowledgeItems.length;
                  const shownItems = filteredItems.length;
                  
                  if (totalItems > 0) {
                    return (
                      <p className="text-[12px] text-[#8E8E93] mt-1">
                        {selectedNicheId 
                          ? `Показано: ${shownItems} из ${totalItems} источников`
                          : `Всего источников: ${totalItems}`
                        }
                      </p>
                    );
                  }
                  return null;
                })()}
              </div>
            </div>

            

            {/* Линия под заголовком + таблица вплотную */}
            <div>
              <div className="border-b border-gray-200 mb-0" style={{ borderColor: '#E5E6E7', marginTop: '16px', marginLeft: '-24px', marginRight: '-24px', width: 'calc(100% + 48px)' }}></div>
              {/* Таблица с данными или пустое состояние */}
              {(() => {
                const filteredItems = knowledgeItems.filter(item => {
                  if (!selectedNicheId) return true;
                  return item.nicheId === selectedNicheId;
                });
                return filteredItems.length > 0;
              })() ? (
              <div className="border border-t-0 border-[#070F1A]/10 rounded-none overflow-hidden" style={{ marginLeft: '-24px', marginRight: '-24px', width: 'calc(100% + 48px)' }}>
                {/* Заголовки таблицы */}
                <div className="grid grid-cols-4 gap-4 px-[26px] py-4 border-b border-[#070F1A]/10 bg-gray-50">
                  <div className="font-[400] text-[14px] text-[#8E8E93]">Название</div>
                  <div className="font-[400] text-[14px] text-[#8E8E93] text-center">Ресурс</div>
                  <div className="font-[400] text-[14px] text-[#8E8E93]">Статус</div>
                  <div className="font-[400] text-[14px] text-[#8E8E93]"></div>
                </div>

                {/* Строки таблицы */}
                <div className="divide-y divide-[#070F1A]/10">
                  {knowledgeItems
                    .filter(item => {
                      // Если ниша не выбрана, показываем все источники
                      if (!selectedNicheId) return true;
                      // Если ниша выбрана, показываем только источники этой ниши
                      return item.nicheId === selectedNicheId;
                    })
                    .map((item, index) => (
                    <div key={item.id || index} className="grid grid-cols-4 gap-4 px-[26px] py-4 hover:bg-gray-50 transition-colors">
                      {/* Название */}
                      <div className={`text-[#070F1A] text-sm truncate font-[500] ${
                        item.status === 'Обработка' ? 'animate-pulse' : ''
                      }`}>
                        {(item.original_content || item.content || '').length > 50 ? `${(item.original_content || item.content || '').substring(0, 50)}...` : (item.original_content || item.content || '')}
                      </div>
                      
                      {/* Ресурс */}
                      <div className="flex items-center justify-center">
                        <div className="h-[24px] px-2 rounded-[7px] bg-gray-100 flex items-center gap-[2px]">
                          <img 
                            src={
                              (item.source_type || item.type) === 'site' ? '/global2.svg' :
                              (item.source_type || item.type) === 'feed' ? '/document-code.svg' :
                              (item.source_type || item.type) === 'text' ? '/edit-2.svg' :
                              '/document-copy.svg'
                            }
                            alt={item.type}
                            className="w-[10px] h-[10px]"
                          />
                          <span className="text-[12px] font-[400] text-[#070F1A]">
                            {(item.source_type || item.type) === 'site' && 'Сайт'}
                            {(item.source_type || item.type) === 'feed' && 'Товарный фид'}
                            {(item.source_type || item.type) === 'text' && 'Текст'}
                            {(item.source_type || item.type) === 'file' && 'Файл'}
                            {(item.source_type || item.type) === 'website' && 'Сайт'}
                          </span>
                        </div>
                      </div>
                      
                      {/* Статус */}
                      <div className="flex items-center">
                        <div className={`h-[24px] px-3 rounded-[50px] flex items-center gap-2 relative overflow-hidden ${
                          item.status === 'Загружено' ? 'bg-[#36C76A]/15 text-[#36C76A]' :
                          item.status === 'Обработка' ? 'bg-[#0084FF]/15 text-[#0084FF]' :
                          item.status === 'Ошибка' ? 'bg-[#FF3B30]/15 text-[#FF3B30]' :
                          'bg-[#0084FF]/15 text-[#0084FF]'
                        }`}>
                          {item.status === 'Обработка' && (
                            <div className="w-3 h-3 border-2 border-[#0084FF] border-t-transparent rounded-full animate-spin"></div>
                          )}
                          <span className="text-[12px] font-[400] relative z-10">
                            {getProcessingStatus(item)}
                          </span>
                          {/* Полоска прогресса */}
                          {item.status === 'Обработка' && processingProgress[item.id] && (
                            <div 
                              className="absolute inset-0 bg-[#0084FF]/20 transition-all duration-300 ease-out"
                              style={{ 
                                width: `${processingProgress[item.id].progress}%`,
                                left: 0,
                                top: 0,
                                height: '100%'
                              }}
                            />
                          )}
                        </div>
                      </div>
                      
                      {/* Кнопка действий */}
                      <div className="flex justify-end items-center gap-2">
                        <div className="relative dropdown-menu">
                          {selectedKnowledgeItem?.id === item.id && (
                            <div className="absolute right-8 top-0 bg-white border border-gray-200 rounded-[10px] shadow-lg z-[9999] w-[120px]">
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleShowKnowledgeDetails(item);
                                }}
                                className="w-full h-[34px] px-3 text-left text-[13px] text-[#070F1A] hover:bg-gray-50 rounded-t-[10px] transition-colors flex items-center gap-2"
                              >
                                <img src="/eye-open.svg" alt="Подробнее" className="w-4 h-4" />
                                Подробнее
                              </button>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleDeleteKnowledgeItem(item.id || index);
                                  setSelectedKnowledgeItem(null);
                                }}
                                className="w-full h-[34px] px-3 text-left text-[13px] text-red-600 hover:bg-red-50 rounded-b-[10px] transition-colors flex items-center gap-2"
                              >
                                <img src="/traash.svg" alt="Удалить" className="w-4 h-4" />
                                Удалить
                              </button>
                            </div>
                          )}
                          <button 
                            onClick={(e) => {
                              e.stopPropagation();
                              setSelectedKnowledgeItem(selectedKnowledgeItem?.id === item.id ? null : item);
                            }}
                            className="p-1 hover:bg-gray-100 rounded-[90px] transition-colors"
                          >
                            <MoreVertical className="w-4 h-4 text-gray-500" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              ) : (
              /* Пустое состояние */
              <div className="bg-[#F8F8FA] rounded-none border border-[#070F1A]/10 p-8 text-center" style={{ marginLeft: '-24px', marginRight: '-24px', width: 'calc(100% + 48px)', borderTopWidth: 0 }}>
                <div className="max-w-md mx-auto">
                  <span
                    className="w-8 h-8 mx-auto mb-4 inline-block"
                    style={{
                      backgroundColor: '#0084FF',
                      WebkitMaskImage: 'url(/baza.svg)',
                      maskImage: 'url(/baza.svg)',
                      WebkitMaskRepeat: 'no-repeat',
                      maskRepeat: 'no-repeat',
                      WebkitMaskSize: 'contain',
                      maskSize: 'contain',
                      WebkitMaskPosition: 'center',
                      maskPosition: 'center'
                    }}
                  />
                  <h3 className="text-[20px] font-medium mb-2" style={{ color: '#8E8E93', opacity: 0.7 }}>
                    {selectedNicheId 
                      ? `Нет источников для ниши "${availableNiches.find(n => n.id === selectedNicheId)?.name || 'Выбранная ниша'}"`
                      : 'База знаний пока пуста'
                    }
                  </h3>
                  <p className="text-sm mb-6" style={{ color: '#8E8E93', opacity: 0.7 }}>
                    {selectedNicheId 
                      ? 'Загрузите источники знаний для выбранной ниши или выберите другую нишу'
                      : 'Добавьте первый ресурс, чтобы начать работу с Adapto'
                    }
                  </p>
                </div>
              </div>
              )}
            </div>

            {/* Выбор ниши как плашка с табами */}
            <div className="relative rounded-[20px] border border-[#070F1A]/10 p-6 text-center bg-transparent overflow-hidden">
              {/* Цветной полукруг сверху (blur) */}
              <div
                className="absolute left-1/2 -translate-x-1/2 -top-10 w-[240px] h-[120px] rounded-b-[240px] blur-[120px] opacity-50 pointer-events-none"
                style={{ background: selectedNicheId ? getNicheColor(selectedNicheId) : '#E5E6E7', zIndex: 0 }}
              />
              <h3 className="text-[20px] font-[500] text-[#070F1A] mb-[10px]">
                {selectedNicheId
                  ? (<>
                      Ваша ниша: <span style={{ color: getNicheColor(selectedNicheId) }}>{getNicheDisplayName(availableNiches.find(n=>n.id===selectedNicheId)?.name || '')}</span>
                    </>)
                  : 'Ваша ниша'}
              </h3>
              <p className="text-[14px] text-[#8E8E93] mb-[30px]">Для улучшения качества работы системы базы знаний выберите свою нишу</p>
              <div className="relative z-10 flex flex-wrap justify-center gap-2">
                {([ {id:'', name:'Без ниши'}, ...availableNiches.slice(0,10).map(n=>({ ...n, name: getNicheDisplayName(n.name) })) ]).map((niche) => {
                  const isActive = (selectedNicheId || '') === (niche.id || '');
                  const nicheClr = niche.id ? getNicheColor(niche.id) : '#8EE38A';
                  const activeBg = isActive ? (niche.id ? nicheClr : '#070F1A') : 'transparent';
                  return (
                    <button
                      key={niche.id || 'none'}
                      onClick={() => handleSelectNiche(niche.id || '')}
                      className={`h-[34px] px-4 rounded-[90px] text-[13px] font-[500] border transition-colors`}
                      style={{
                        backgroundColor: activeBg,
                        color: isActive ? '#FFFFFF' : '#8E8E93',
                        borderColor: isActive ? activeBg : '#E5E6E7'
                      }}
                    >
                      {niche.name}
                    </button>
                  );
                })}
              </div>
            </div>

            {/* Ресурсы для добавления */}
              <div className="grid grid-cols-2 lg:grid-cols-4 gap-4" style={{ marginLeft: '1px', marginRight: '1px' }}>
              {/* Веб-сайт */}
              <div 
                className={`border border-[#070F1A]/10 bg-white rounded-[15px] group hover:-translate-y-[10px] transition-all duration-300 cursor-pointer overflow-hidden ${sidebarCollapsed ? 'h-[280px]' : 'h-[255px]'}`}
                onClick={handleSitePopupOpen}
              >
                <div className="w-full h-full flex flex-col">
                    <div className="w-full flex-shrink-0" style={{ borderRadius: '15px 15px 0 0' }}>
                      <img src="/Frame 2081.png" alt="Веб-сайт" className="w-[101%] h-auto" />
                    </div>
                  <div className="flex-1 p-[16px]">
                    <h3 className="text-[16px] font-medium text-[#070F1A] mb-1">Веб-сайт</h3>
                    <p className="text-[12px] text-[#8E8E93]">Предоставьте ссылку на сайт, чтобы обеспечить ИИ знаниями</p>
                  </div>
                </div>
              </div>

              {/* Товарный фид */}
              <div 
                className={`border border-[#070F1A]/10 bg-white rounded-[15px] group hover:-translate-y-[10px] transition-all duration-300 cursor-pointer overflow-hidden ${sidebarCollapsed ? 'h-[280px]' : 'h-[255px]'}`}
                onClick={handleFeedPopupOpen}
              >
                <div className="w-full h-full flex flex-col">
                  <div className="w-full flex-shrink-0" style={{ borderRadius: '15px 15px 0 0' }}>
                    <img src="/Frame 2082.png" alt="Товарный фид" className="w-[101%] h-auto" />
                  </div>
                  <div className="flex-1 p-[16px]">
                    <h3 className="text-[16px] font-medium text-[#070F1A] mb-1">Товарный фид</h3>
                    <p className="text-[12px] text-[#8E8E93]">Загрузите CSV/XML фид или ссылку на товарный каталог</p>
                  </div>
                </div>
              </div>

              {/* Файл */}
              <div 
                className={`border border-[#070F1A]/10 bg-white rounded-[15px] group hover:-translate-y-[10px] transition-all duration-300 cursor-pointer overflow-hidden ${sidebarCollapsed ? 'h-[280px]' : 'h-[255px]'}`}
                onClick={handleFilePopupOpen}
              >
                <div className="w-full h-full flex flex-col">
                  <div className="w-full flex-shrink-0" style={{ borderRadius: '15px 15px 0 0' }}>
                    <img src="/Frame 2083.png" alt="Файл" className="w-[101%] h-auto" />
                  </div>
                  <div className="flex-1 p-[16px]">
                    <h3 className="text-[16px] font-medium text-[#070F1A] mb-1">Файл</h3>
                    <p className="text-[12px] text-[#8E8E93]">Импортируйте знания из документов или файлов для обучения ИИ</p>
                  </div>
                </div>
              </div>

              {/* Текст */}
              <div 
                className={`border border-[#070F1A]/10 bg-white rounded-[15px] group hover:-translate-y-[10px] transition-all duration-300 cursor-pointer overflow-hidden ${sidebarCollapsed ? 'h-[280px]' : 'h-[255px]'}`}
                onClick={handleTextPopupOpen}
              >
                <div className="w-full h-full flex flex-col">
                  <div className="w-full flex-shrink-0" style={{ borderRadius: '15px 15px 0 0' }}>
                    <img src="/Frame 2084.png" alt="Текст" className="w-[101%] h-auto" />
                  </div>
                  <div className="flex-1 p-[16px]">
                    <h3 className="text-[16px] font-medium text-[#070F1A] mb-1">Текст</h3>
                    <p className="text-[12px] text-[#8E8E93]">Напишите текстом информацию, которую важно знать ИИ</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );

      case 'statistics':
        return (
          <div className="space-y-6">
            {/* Заголовок с календарем и экспортом */}
            <div className="flex justify-between items-center mb-4">
            <h1 className="text-[20px] font-[500]">Статистика</h1>
              <div className="flex gap-3">
                {/* Простой календарь */}
                <div className="relative">
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={() => {
                      console.log('Calendar button clicked');
                      setShowCalendar(!showCalendar);
                    }}
                    className="h-[34px] bg-[#0084FF] text-white rounded-[10px] border-none"
                    style={BUTTON_STYLES.blueButton}
                  >
                    <svg width="17" height="17" viewBox="0 0 23 23" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-[5px]">
                      <path fillRule="evenodd" clipRule="evenodd" d="M3.43597 4.18404C3 5.03969 3 6.15979 3 8.4V13.6C3 15.8402 3 16.9603 3.43597 17.816C3.81947 18.5686 4.43139 19.1805 5.18404 19.564C6.03969 20 7.15979 20 9.4 20H14.6C16.8402 20 17.9603 20 18.816 19.564C19.5686 19.1805 20.1805 18.5686 20.564 17.816C21 16.9603 21 15.8402 21 13.6V8.4C21 6.15979 21 5.03969 20.564 4.18404C20.1805 3.43139 19.5686 2.81947 18.816 2.43597C17.9603 2 16.9603 2 14.6 2H9.4C7.15979 2 6.03969 2 5.18404 2.43597C4.43139 2.81947 3.81947 3.43139 3.43597 4.18404ZM5.10899 7.54601C5 7.75992 5 8.03995 5 8.6V14.8C5 15.9201 5 16.4802 5.21799 16.908C5.40973 17.2843 5.71569 17.5903 6.09202 17.782C6.51984 18 7.0799 18 8.2 18H15.8C16.9201 18 17.4802 18 17.908 17.782C18.2843 17.5903 18.5903 17.2843 18.782 16.908C19 16.4802 19 15.9201 19 14.8V8.6C19 8.03995 19 7.75992 18.891 7.54601C18.7951 7.35785 18.6422 7.20487 18.454 7.10899C18.2401 7 17.9601 7 17.4 7H6.6C6.03995 7 5.75992 7 5.54601 7.10899C5.35785 7.20487 5.20487 7.35785 5.10899 7.54601Z" fill="white"/>
                    </svg>
                    {dateRange.start && dateRange.end 
                      ? `${dateRange.start.toLocaleDateString()} - ${dateRange.end.toLocaleDateString()}`
                      : 'Выберите период'
                    }
                  </Button>
                  
                  {showCalendar && (
                    <div className="absolute top-full right-0 mt-2 bg-white border border-gray-200 rounded-[15px] shadow-lg z-50 w-[400px]">
                      <div className="p-4">
                        <div className="flex items-center justify-between mb-4">
                          <h4 className="font-medium text-sm">Выберите период</h4>
                          <button onClick={() => setShowCalendar(false)} className="w-7 h-7 flex items-center justify-center hover:bg-gray-100 rounded-[7px] transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-4 h-4 text-gray-500">
                              <path d="M18 6 6 18"></path>
                              <path d="m6 6 12 12"></path>
                            </svg>
                          </button>
                        </div>
                        
                        {/* Быстрые опции */}
                        <div className="mb-4">
                          <div className="grid grid-cols-3 gap-2">
                            <button 
                              className={`px-3 h-[34px] rounded-[90px] text-center transition-colors text-[13px] ${
                                activeQuickSelect === 'today' ? 'bg-[#0084FF] text-white' : 'bg-gray-100 hover:bg-gray-200'
                              }`}
                              style={activeQuickSelect === 'today' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                              onClick={() => {
                                const today = new Date();
                                setDateRange({ start: today, end: today });
                                setDateStartInput(formatDateInputValue(`${String(today.getDate()).padStart(2,'0')}${String(today.getMonth()+1).padStart(2,'0')}${today.getFullYear()}`));
                                setDateEndInput(formatDateInputValue(`${String(today.getDate()).padStart(2,'0')}${String(today.getMonth()+1).padStart(2,'0')}${today.getFullYear()}`));
                                setActiveQuickSelect('today');
                                updateStatisticsForPeriod(today, today);
                              }}
                            >
                              Сегодня
                            </button>
                            <button 
                              className={`px-3 h-[34px] rounded-[90px] text-center transition-colors text-[13px] ${
                                activeQuickSelect === 'yesterday' ? 'bg-[#0084FF] text-white' : 'bg-gray-100 hover:bg-gray-200'
                              }`}
                              style={activeQuickSelect === 'yesterday' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                              onClick={() => {
                                const yesterday = new Date();
                                yesterday.setDate(yesterday.getDate() - 1);
                                setDateRange({ start: yesterday, end: yesterday });
                                setDateStartInput(formatDateInputValue(`${String(yesterday.getDate()).padStart(2,'0')}${String(yesterday.getMonth()+1).padStart(2,'0')}${yesterday.getFullYear()}`));
                                setDateEndInput(formatDateInputValue(`${String(yesterday.getDate()).padStart(2,'0')}${String(yesterday.getMonth()+1).padStart(2,'0')}${yesterday.getFullYear()}`));
                                setActiveQuickSelect('yesterday');
                              }}
                            >
                              Вчера
                            </button>
                            <button 
                              className={`px-3 h-[34px] rounded-[90px] text-center transition-colors text-[13px] ${
                                activeQuickSelect === 'last7days' ? 'bg-[#0084FF] text-white' : 'bg-gray-100 hover:bg-gray-200'
                              }`}
                              style={activeQuickSelect === 'last7days' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                              onClick={() => {
                                const today = new Date();
                                const weekAgo = new Date();
                                weekAgo.setDate(today.getDate() - 6);
                                setDateRange({ start: weekAgo, end: today });
                                setDateStartInput(formatDateInputValue(`${String(weekAgo.getDate()).padStart(2,'0')}${String(weekAgo.getMonth()+1).padStart(2,'0')}${weekAgo.getFullYear()}`));
                                setDateEndInput(formatDateInputValue(`${String(today.getDate()).padStart(2,'0')}${String(today.getMonth()+1).padStart(2,'0')}${today.getFullYear()}`));
                                setActiveQuickSelect('last7days');
                              }}
                            >
                              7 дней
                            </button>
                            <button 
                              className={`px-3 h-[34px] rounded-[90px] text-center transition-colors text-[13px] ${
                                activeQuickSelect === 'thisMonth' ? 'bg-[#0084FF] text-white' : 'bg-gray-100 hover:bg-gray-200'
                              }`}
                              style={activeQuickSelect === 'thisMonth' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                              onClick={() => {
                                const today = new Date();
                                const firstDay = new Date(today.getFullYear(), today.getMonth(), 1);
                                const lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                                setDateRange({ start: firstDay, end: lastDay });
                                setDateStartInput(formatDateInputValue(`${String(firstDay.getDate()).padStart(2,'0')}${String(firstDay.getMonth()+1).padStart(2,'0')}${firstDay.getFullYear()}`));
                                setDateEndInput(formatDateInputValue(`${String(lastDay.getDate()).padStart(2,'0')}${String(lastDay.getMonth()+1).padStart(2,'0')}${lastDay.getFullYear()}`));
                                setActiveQuickSelect('thisMonth');
                              }}
                            >
                              Этот месяц
                            </button>
                            <button 
                              className={`px-3 h-[34px] rounded-[90px] text-center transition-colors text-[13px] ${
                                activeQuickSelect === 'last30days' ? 'bg-[#0084FF] text-white' : 'bg-gray-100 hover:bg-gray-200'
                              }`}
                              style={activeQuickSelect === 'last30days' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                              onClick={() => {
                                const today = new Date();
                                const monthAgo = new Date();
                                monthAgo.setDate(today.getDate() - 29);
                                setDateRange({ start: monthAgo, end: today });
                                setDateStartInput(formatDateInputValue(`${String(monthAgo.getDate()).padStart(2,'0')}${String(monthAgo.getMonth()+1).padStart(2,'0')}${monthAgo.getFullYear()}`));
                                setDateEndInput(formatDateInputValue(`${String(today.getDate()).padStart(2,'0')}${String(today.getMonth()+1).padStart(2,'0')}${today.getFullYear()}`));
                                setActiveQuickSelect('last30days');
                              }}
                            >
                              30 дней
                            </button>
                            <button 
                              className={`px-3 h-[34px] rounded-[90px] text-center transition-colors text-[13px] ${
                                activeQuickSelect === 'last90days' ? 'bg-[#0084FF] text-white' : 'bg-gray-100 hover:bg-gray-200'
                              }`}
                              style={activeQuickSelect === 'last90days' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                              onClick={() => {
                                const today = new Date();
                                const threeMonthsAgo = new Date();
                                threeMonthsAgo.setDate(today.getDate() - 89);
                                setDateRange({ start: threeMonthsAgo, end: today });
                                setDateStartInput(formatDateInputValue(`${String(threeMonthsAgo.getDate()).padStart(2,'0')}${String(threeMonthsAgo.getMonth()+1).padStart(2,'0')}${threeMonthsAgo.getFullYear()}`));
                                setDateEndInput(formatDateInputValue(`${String(today.getDate()).padStart(2,'0')}${String(today.getMonth()+1).padStart(2,'0')}${today.getFullYear()}`));
                                setActiveQuickSelect('last90days');
                              }}
                            >
                              90 дней
                            </button>
                          </div>
                        </div>
                        
                        {/* Простой календарь */}
                        <div className="mb-4">
                          <div className="flex justify-between items-center mb-2">
                            <button 
                              onClick={() => {
                                setCurrentMonth(prev => {
                                  const newMonth = new Date(prev);
                                  newMonth.setMonth(newMonth.getMonth() - 1);
                                  return newMonth;
                                });
                              }}
                              className="p-1 hover:bg-gray-100 rounded"
                            >
                              ←
                            </button>
                            <span className="text-sm font-medium">
                              {currentMonth.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}
                            </span>
                            <button 
                              onClick={() => {
                                setCurrentMonth(prev => {
                                  const newMonth = new Date(prev);
                                  newMonth.setMonth(newMonth.getMonth() + 1);
                                  return newMonth;
                                });
                              }}
                              className="p-1 hover:bg-gray-100 rounded"
                            >
                              →
                            </button>
                          </div>
                          
                          {/* Дни недели */}
                          <div className="grid grid-cols-7 gap-1 mb-1">
                            {['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'].map(day => (
                              <div key={day} className="text-xs text-gray-500 text-center" style={{ width: '49px' }}>
                                {day}
                              </div>
                            ))}
                          </div>
                          
                          {/* Сетка календаря */}
                          <div className="grid grid-cols-7 gap-1">
                            {(() => {
                              const days = [];
                              const year = currentMonth.getFullYear();
                              const month = currentMonth.getMonth();
                              const firstDay = new Date(year, month, 1);
                              const lastDay = new Date(year, month + 1, 0);
                              const firstDayOfWeek = firstDay.getDay();
                              const startOffset = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;
                              
                              // Добавляем пустые ячейки в начале
                              for (let i = 0; i < startOffset; i++) {
                                days.push(null);
                              }
                              
                              // Добавляем дни месяца
                              for (let day = 1; day <= lastDay.getDate(); day++) {
                                days.push(new Date(year, month, day));
                              }
                              
                              // Добавляем пустые ячейки в конце до 42 ячеек
                              while (days.length < 42) {
                                days.push(null);
                              }
                              
                              return days.map((date, index) => {
                                if (!date) {
                                  return <div key={index} className="w-[49px] h-8"></div>;
                                }
                                
                                const today = new Date();
                                const isToday = date.toDateString() === today.toDateString();
                                const isSelected = dateRange.start && date.toDateString() === dateRange.start.toDateString();
                                const isInRange = dateRange.start && dateRange.end && 
                                  date >= dateRange.start && date <= dateRange.end;
                                
                                let className = "h-8 rounded hover:bg-gray-100 text-center text-xs cursor-pointer inline-flex items-center justify-center";
                                
                                if (isSelected) {
                                  className += " bg-[#F3F5F7] text-[#070F1A]";
                                } else if (isInRange) {
                                  className += " bg-[#0084FF]/20 text-[#0084FF]";
                                } else if (isToday) {
                                  className += " bg-gray-200 text-gray-800";
                                }
                                
                                return (
                                  <button
                                    key={index}
                                    onClick={() => {
                                      if (dateRange.start && !dateRange.end) {
                                        setDateRange(prev => ({ ...prev, end: date }));
                                      } else {
                                        setDateRange({ start: date, end: null });
                                      }
                                      setActiveQuickSelect(null);
                                    }}
                                    className={className}
                                  style={{ width: '49px', paddingLeft: '8px', paddingRight: '8px' }}
                                  >
                                    {date.getDate()}
                                  </button>
                                );
                              });
                            })()}
                          </div>
                        </div>
                        
                        {/* Ручной ввод дат */}
                        <div className="mb-4">
                          <div className="grid grid-cols-2 gap-2">
                            <div>
                              <input
                                type="text"
                                value={dateStartInput}
                                onChange={(e) => {
                                  const v = formatDateInputValue(e.target.value);
                                  setDateStartInput(v);
                                  setDateStartError(false);
                                }}
                                onBlur={() => {
                                  if (!isValidDateDmy(dateStartInput)) {
                                    setDateStartError(true);
                                    return;
                                  }
                                  const d = parseDmyToDate(dateStartInput);
                                  if (d) {
                                    setDateRange(prev => ({ ...prev, start: d }));
                                    setActiveQuickSelect(null);
                                  }
                                }}
                                placeholder="ДД.ММ.ГГГГ"
                                className={`w-full h-[34px] px-3 text-[12px] border rounded-[10px] ${dateStartError ? 'border-red-400' : 'border-gray-300'}`}
                              />
                            </div>
                            <div>
                              <input
                                type="text"
                                value={dateEndInput}
                                onChange={(e) => {
                                  const v = formatDateInputValue(e.target.value);
                                  setDateEndInput(v);
                                  setDateEndError(false);
                                }}
                                onBlur={() => {
                                  if (!isValidDateDmy(dateEndInput)) {
                                    setDateEndError(true);
                                    return;
                                  }
                                  const d = parseDmyToDate(dateEndInput);
                                  if (d) {
                                    setDateRange(prev => ({ ...prev, end: d }));
                                    setActiveQuickSelect(null);
                                  }
                                }}
                                placeholder="ДД.ММ.ГГГГ"
                                className={`w-full h-[34px] px-3 text-[12px] border rounded-[10px] ${dateEndError ? 'border-red-400' : 'border-gray-300'}`}
                              />
                            </div>
                          </div>
                        </div>
                        
                        <div className="grid grid-cols-2 gap-2">
                          <button 
                            onClick={() => setShowCalendar(false)}
                            className="h-[34px] w-full bg-[#0084FF] text-white hover:bg-[#0073E6] rounded-[10px]"
                            style={BUTTON_STYLES.blueButton}
                          >
                            Применить
                          </button>
                          <button 
                            onClick={() => {
                              setDateRange({ start: null, end: null });
                              setActiveQuickSelect(null);
                              setDateStartInput('');
                              setDateEndInput('');
                              setShowCalendar(false);
                            }}
                            className="h-[34px] w-full text-gray-700 hover:bg-[#E5E7EB] rounded-[10px]"
                            style={BUTTON_STYLES.whiteButton}
                          >
                            Сбросить
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
                
                {/* Экспорт */}
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => exportToCSV()}
                    className="h-[34px] text-[#070F1A] rounded-[10px]"
                    style={BUTTON_STYLES.whiteButton}
                  >
                    <svg width="17" height="17" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-[5px]">
                      <path d="M10 0.500244C15.2467 0.500244 19.5 4.75354 19.5 10.0002C19.5 15.2469 15.2467 19.5002 10 19.5002C4.75329 19.5002 0.5 15.2469 0.5 10.0002C0.5 4.75354 4.75329 0.500244 10 0.500244ZM10.5312 5.18384C10.2567 4.90956 9.82182 4.89203 9.52734 5.13208L9.4707 5.18384L6.04199 8.61255C5.74926 8.90535 5.7494 9.3802 6.04199 9.6731C6.33487 9.9659 6.80966 9.9659 7.10254 9.6731L9.25098 7.52466V14.2854C9.25098 14.6996 9.58683 15.0353 10.001 15.0354C10.4151 15.0353 10.751 14.6996 10.751 14.2854V7.52466L12.8994 9.6731C13.1923 9.96578 13.6671 9.96592 13.96 9.6731C14.2526 9.38026 14.2526 8.90539 13.96 8.61255L10.5312 5.18384Z" fill="#070F1A"/>
                    </svg>
                    CSV
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => exportToXLS()}
                    className="h-[34px] text-[#070F1A] rounded-[10px]"
                    style={BUTTON_STYLES.whiteButton}
                  >
                    <svg width="17" height="17" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-[5px]">
                      <path d="M10 0.500244C15.2467 0.500244 19.5 4.75354 19.5 10.0002C19.5 15.2469 15.2467 19.5002 10 19.5002C4.75329 19.5002 0.5 15.2469 0.5 10.0002C0.5 4.75354 4.75329 0.500244 10 0.500244ZM10.5312 5.18384C10.2567 4.90956 9.82182 4.89203 9.52734 5.13208L9.4707 5.18384L6.04199 8.61255C5.74926 8.90535 5.7494 9.3802 6.04199 9.6731C6.33487 9.9659 6.80966 9.9659 7.10254 9.6731L9.25098 7.52466V14.2854C9.25098 14.6996 9.58683 15.0353 10.001 15.0354C10.4151 15.0353 10.751 14.6996 10.751 14.2854V7.52466L12.8994 9.6731C13.1923 9.96578 13.6671 9.96592 13.96 9.6731C14.2526 9.38026 14.2526 8.90539 13.96 8.61255L10.5312 5.18384Z" fill="#070F1A"/>
                    </svg>
                    XLS
                  </Button>
                </div>
              </div>
            </div>
            
            {/* Разделительная линия на всю ширину */}
            <div className="h-px bg-[#E5E7EB] mb-4" style={{ marginLeft: '-32px', marginRight: '-32px' }}></div>
            
            {/* Табы статистики */}
            <div>
              <div className="flex">
                <div className="flex-1 relative">
                  <button
                    onClick={() => setActiveStatisticsTab('general')}
                    className={`w-full py-3 px-4 text-[14px] font-medium transition-colors ${
                      activeStatisticsTab === 'general'
                        ? 'text-[#0084FF]'
                        : 'text-[#8E8E93] hover:text-[#0084FF]'
                    }`}
                  >
                    Общие метрики
                  </button>
                  {activeStatisticsTab === 'general' && (
                    <div className="absolute bottom-0 left-0 right-0 h-[4px] bg-[#0084FF] rounded-t-[4px]"></div>
                  )}
                    </div>
                <div className="flex-1 relative">
                  <button
                    onClick={() => setActiveStatisticsTab('conversion')}
                    className={`w-full py-3 px-4 text-[14px] font-medium transition-colors ${
                      activeStatisticsTab === 'conversion'
                        ? 'text-[#0084FF]'
                        : 'text-[#8E8E93] hover:text-[#0084FF]'
                    }`}
                  >
                    Метрики конверсий
                  </button>
                  {activeStatisticsTab === 'conversion' && (
                    <div className="absolute bottom-0 left-0 right-0 h-[4px] bg-[#0084FF] rounded-t-[4px]"></div>
                  )}
                  </div>
                <div className="flex-1 relative">
                  <button
                    onClick={() => setActiveStatisticsTab('technical')}
                    className={`w-full py-3 px-4 text-[14px] font-medium transition-colors ${
                      activeStatisticsTab === 'technical'
                        ? 'text-[#0084FF]'
                        : 'text-[#8E8E93] hover:text-[#0084FF]'
                    }`}
                  >
                    Технические метрики
                  </button>
                  {activeStatisticsTab === 'technical' && (
                    <div className="absolute bottom-0 left-0 right-0 h-[4px] bg-[#0084FF] rounded-t-[4px]"></div>
                  )}
                  </div>
                <div className="flex-1 relative">
                  <button
                    onClick={() => setActiveStatisticsTab('channels')}
                    className={`w-full py-3 px-4 text-[14px] font-medium transition-colors ${
                      activeStatisticsTab === 'channels'
                        ? 'text-[#0084FF]'
                        : 'text-[#8E8E93] hover:text-[#0084FF]'
                    }`}
                  >
                    Статистика по каналам
                  </button>
                  {activeStatisticsTab === 'channels' && (
                    <div className="absolute bottom-0 left-0 right-0 h-[4px] bg-[#0084FF] rounded-t-[4px]"></div>
                  )}
                  </div>
                </div>
              </div>
              <div className="border-b mb-0 mt-0" style={{ borderColor: '#E5E6E7', marginTop: 0, marginLeft: '-32px', marginRight: '-32px' }}></div>

            {/* Контент табов */}
            {activeStatisticsTab === 'general' && (
              <div className="space-y-6">
                {dialogsData.length === 0 ? (
                  // Пустое состояние для статистики
                  <div className="flex flex-col items-center justify-center py-16">
                    <span
                      className="w-8 h-8 mb-6 inline-block"
                      style={{
                        backgroundColor: '#0084FF',
                        WebkitMaskImage: 'url(/stat.svg)',
                        maskImage: 'url(/stat.svg)',
                        WebkitMaskRepeat: 'no-repeat',
                        maskRepeat: 'no-repeat',
                        WebkitMaskSize: 'contain',
                        maskSize: 'contain',
                        WebkitMaskPosition: 'center',
                        maskPosition: 'center'
                      }}
                    />
                    <h3 className="text-[20px] font-[500] mb-3" style={{ color: '#8E8E93', opacity: 0.7 }}>Пока нет статистики</h3>
                    <p className="text-[14px] text-center max-w-[400px] mb-8" style={{ color: '#8E8E93', opacity: 0.7 }}>
                      Статистика появится после того, как клиенты начнут общаться с вашим ИИ-агентом
                    </p>
                    <div className="flex flex-col gap-[10px] w-full max-w-[380px]">
                      <button
                        onClick={() => {
                          setActiveSection('widget-dev');
                          // Прокручиваем к низу виджета после переключения
                          ChatUtils.scrollToBottom(widgetChatRef, 500);
                        }}
                        className="w-full h-[34px] px-6 bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors"
                        style={BUTTON_STYLES.blueButton}
                      >
                        Настроить виджет
                      </button>
                      <button
                        onClick={() => setActiveSection('my-adapto')}
                        className="w-full h-[34px] px-6 text-[#070F1A] rounded-[10px] hover:bg-[#F9FAFB] transition-colors"
                        style={BUTTON_STYLES.whiteButton}
                      >
                        Протестировать ИИ
                      </button>
                    </div>
                  </div>
                ) : (
                  <>
                {/* Общие метрики */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  <Card className="shadow-none">
                    <CardContent className="p-[15px] h-[130px] flex flex-col justify-between" style={{ paddingTop: '15px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                        <div 
                          onMouseEnter={(e) => handleMetricHover('widget-opens', e)}
                          onMouseLeave={handleMetricLeave}
                          className="w-4 h-4 text-gray-400 hover:text-gray-600 transition-colors relative cursor-help"
                        >
                          <svg fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                          </svg>
                        </div>
                        <p className="text-[14px] font-[500] text-[#8E8E93]">Кол-во открытий виджета</p>
                    </div>
                                              <div className="flex flex-col">
                                                  <div className="flex items-end">
                          <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>{statisticsAggregates.widget_opens || 0}</p>
                          {generateTrendIndicator('neutral', '0%')}
                  </div>
                </div>
                    </CardContent>
                  </Card>

                  <Card className="shadow-none">
                    <CardContent className="p-[15px] h-[130px] flex flex-col justify-between" style={{ paddingTop: '15px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                        <div 
                          onMouseEnter={(e) => handleMetricHover('dialog-count', e)}
                          onMouseLeave={handleMetricLeave}
                          className="w-4 h-4 text-gray-400 hover:text-gray-600 transition-colors relative cursor-help"
                        >
                          <svg fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                          </svg>
                        </div>
                        <p className="text-[14px] font-[500] text-[#8E8E93]">Кол-во диалогов</p>
                  </div>
                                              <div className="flex flex-col">
                                                  <div className="flex items-end">
                          <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>{statisticsAggregates.dialogsTotal || 0}</p>
                          {generateTrendIndicator('neutral', '0%')}
                  </div>
                </div>
                    </CardContent>
                  </Card>

                  <Card className="shadow-none">
                    <CardContent className="p-[15px] h-[130px] flex flex-col justify-between" style={{ paddingTop: '15px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                        <div 
                          onMouseEnter={(e) => handleMetricHover('message-count', e)}
                          onMouseLeave={handleMetricLeave}
                          className="w-4 h-4 text-gray-400 hover:text-gray-600 transition-colors relative cursor-help"
                        >
                          <svg fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                          </svg>
                        </div>
                        <p className="text-[14px] font-[500] text-[#8E8E93]">Кол-во сообщений</p>
              </div>
                                              <div className="flex flex-col">
                                                  <div className="flex items-end">
                          <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>{statisticsAggregates.messagesTotal || 0}</p>
                          {generateTrendIndicator('neutral', '0%')}
                        </div>
                </div>
                    </CardContent>
                  </Card>

                  <Card className="shadow-none">
                    <CardContent className="p-[15px] h-[130px] flex flex-col justify-between" style={{ paddingTop: '15px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                        <div 
                          onMouseEnter={(e) => handleMetricHover('avg-messages-per-dialog', e)}
                          onMouseLeave={handleMetricLeave}
                          className="w-4 h-4 text-gray-400 hover:text-gray-600 transition-colors relative cursor-help"
                        >
                          <svg fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                          </svg>
                        </div>
                        <p className="text-[14px] font-[500] text-[#8E8E93]">Ср. кол-во смс на диалог</p>
                    </div>
                                              <div className="flex flex-col">
                                                  <div className="flex items-end">
                          <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>{statisticsAggregates.avgMessagesPerDialog?.toFixed(2) || '0.00'}</p>
                          {generateTrendIndicator('neutral', '0')}
                  </div>
                </div>
                    </CardContent>
                  </Card>
                  </div>

                {/* График активности */}
                <Card className="shadow-none">
                  <CardHeader>
                    <h3 style={{fontWeight: 500}} className="text-lg font-semibold leading-none tracking-tight text-[18px] font-[500] text-[#070F1A]">Активность по часам</h3>
                  </CardHeader>
                  <CardContent>
                    <div className="h-[300px] flex items-center justify-center">
                      <HourlyActivityChart userId={currentUser?.id} startDate={dateRange.start} endDate={dateRange.end} />
                    </div>
                  </CardContent>
                </Card>
                  </>
                )}
              </div>
            )}

            {activeStatisticsTab === 'conversion' && (
              <div className="space-y-6">
                {dialogsData.length === 0 ? (
                  // Пустое состояние для метрик конверсий
                  <div className="flex flex-col items-center justify-center py-16">
                    <span
                      className="w-8 h-8 mb-6 inline-block"
                      style={{
                        backgroundColor: '#0084FF',
                        WebkitMaskImage: 'url(/stat.svg)',
                        maskImage: 'url(/stat.svg)',
                        WebkitMaskRepeat: 'no-repeat',
                        maskRepeat: 'no-repeat',
                        WebkitMaskSize: 'contain',
                        maskSize: 'contain',
                        WebkitMaskPosition: 'center',
                        maskPosition: 'center'
                      }}
                    />
                    <h3 className="text-[20px] font-[500] mb-3" style={{ color: '#8E8E93', opacity: 0.7 }}>Пока нет метрик конверсий</h3>
                    <p className="text-[14px] text-center max-w-[400px] mb-8" style={{ color: '#8E8E93', opacity: 0.7 }}>
                      Метрики конверсий появятся после начала работы с клиентами
                    </p>
                    <div className="flex flex-col gap-[10px] w-full max-w-[380px]">
                    <button
                      onClick={() => setActiveSection('widget-dev')}
                        className="w-full h-[34px] px-6 bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors"
                        style={BUTTON_STYLES.blueButton}
                    >
                      Настроить виджет
                    </button>
                      <button
                        onClick={() => setActiveSection('my-adapto')}
                        className="w-full h-[34px] px-6 text-[#070F1A] rounded-[10px] hover:bg-[#F9FAFB] transition-colors"
                        style={BUTTON_STYLES.whiteButton}
                      >
                        Протестировать ИИ
                      </button>
                    </div>
                  </div>
                ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" style={{ paddingTop: '12px' }}>
                <Card className="shadow-none">
                  <CardContent className="p-[15px] h-[170px] flex flex-col justify-between" style={{ paddingTop: '15px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                      <div 
                        onMouseEnter={(e) => handleMetricHover('conversion-rate', e)}
                        onMouseLeave={handleMetricLeave}
                        className="w-4 h-4 text-gray-400 hover:text-gray-600 transition-colors relative cursor-help"
                      >
                        <svg fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                        </svg>
                      </div>
                                              <p className="text-[14px] font-[500] text-[#8E8E93]">Конверсия в основную цель</p>
                    </div>
                    <div className="flex flex-col">
                      <div className="flex items-end">
                        <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>{Math.round(statisticsAggregates.conversionRate || 0)}%</p>
                        {generateTrendIndicator('neutral', '0%')}
                  </div>
                </div>
                  </CardContent>
                </Card>

                <Card className="shadow-none">
                  <CardContent className="p-[15px] h-[170px] flex flex-col justify-between" style={{ paddingTop: '15px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                      <div 
                        onMouseEnter={(e) => handleMetricHover('bounce-rate', e)}
                        onMouseLeave={handleMetricLeave}
                        className="w-4 h-4 text-gray-400 hover:text-gray-600 transition-colors relative cursor-help"
                      >
                        <svg fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                        </svg>
                      </div>
                                              <p className="text-[14px] font-[500] text-[#8E8E93]">Процент отказов</p>
              </div>
                    <div className="flex flex-col">
                                              <div className="flex items-end">
                          <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>{Math.round(statisticsAggregates.bounce_rate || 0)}%</p>
                          {generateTrendIndicator('neutral', '0%', false)}
                        </div>
                    </div>
                  </CardContent>
                </Card>

                <Card className="shadow-none">
                  <CardContent className="p-[15px] h-[170px] flex flex-col justify-between" style={{ paddingTop: '15px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                      <div 
                        onMouseEnter={(e) => handleMetricHover('customer-engagement', e)}
                        onMouseLeave={handleMetricLeave}
                        className="w-4 h-4 text-gray-400 hover:text-gray-600 transition-colors relative cursor-help"
                      >
                        <svg fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                        </svg>
                      </div>
                                              <p className="text-[14px] font-[500] text-[#8E8E93]">Вовлечение клиента</p>
                    </div>
                    <div className="flex flex-col">
                      <div className="flex items-end">
                        <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>{Math.round(statisticsAggregates.customer_engagement || 0)}%</p>
                        {generateTrendIndicator('neutral', '0%')}
                  </div>
                </div>
                  </CardContent>
                </Card>

                <Card className="shadow-none">
                  <CardContent className="p-[15px] h-[170px] flex flex-col justify-between" style={{ paddingTop: '15px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                      <div 
                        onMouseEnter={(e) => handleMetricHover('resolved-questions', e)}
                        onMouseLeave={handleMetricLeave}
                        className="w-4 h-4 text-gray-400 hover:text-gray-600 transition-colors relative cursor-help"
                      >
                        <svg fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                        </svg>
                      </div>
                                              <p className="text-[14px] font-[500] text-[#8E8E93]">Кол-во решенных вопросов</p>
              </div>
                                          <div className="flex flex-col">
                                                  <div className="flex items-end">
                        <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>{statisticsAggregates.resolved_questions || 0}</p>
                        {generateTrendIndicator('neutral', '0')}
                  </div>
                </div>
                  </CardContent>
                </Card>

                                                                  <Card className="shadow-none">
                   <CardContent className="p-[15px] h-[170px] flex flex-col justify-between" style={{ paddingTop: '15px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                       <div 
                         onMouseEnter={(e) => handleMetricHover('rejection-rate', e)}
                         onMouseLeave={handleMetricLeave}
                         className="w-4 h-4 text-gray-400 hover:text-gray-600 transition-colors relative cursor-help"
                       >
                         <svg fill="currentColor" viewBox="0 0 24 24">
                           <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                         </svg>
                       </div>
                                               <p className="text-[14px] font-[500] text-[#8E8E93]">Коэффициент отклонений</p>
                    </div>
                                           <div className="flex flex-col">
                                                  <div className="flex items-end">
                            <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>{Math.round(statisticsAggregates.escalation_rate || 0)}%</p>
                            {generateTrendIndicator('neutral', '0%', false)}
                  </div>
                </div>
                   </CardContent>
                 </Card>
              </div>
                )}
              </div>
            )}

            {activeStatisticsTab === 'technical' && (
              <div className="space-y-6">
                {dialogsData.length === 0 ? (
                  // Пустое состояние для технических метрик
                  <div className="flex flex-col items-center justify-center py-16">
                    <span
                      className="w-8 h-8 mb-6 inline-block"
                      style={{
                        backgroundColor: '#0084FF',
                        WebkitMaskImage: 'url(/stat.svg)',
                        maskImage: 'url(/stat.svg)',
                        WebkitMaskRepeat: 'no-repeat',
                        maskRepeat: 'no-repeat',
                        WebkitMaskSize: 'contain',
                        maskSize: 'contain',
                        WebkitMaskPosition: 'center',
                        maskPosition: 'center'
                      }}
                    />
                    <h3 className="text-[20px] font-[500] mb-3" style={{ color: '#8E8E93', opacity: 0.7 }}>Пока нет технических метрик</h3>
                    <p className="text-[14px] text-center max-w-[400px] mb-8" style={{ color: '#8E8E93', opacity: 0.7 }}>
                      Технические метрики появятся после начала работы системы
                    </p>
                    <div className="flex flex-col gap-[10px] w-full max-w-[380px]">
                      <button
                        onClick={() => setActiveSection('widget-dev')}
                        className="w-full h-[34px] px-6 bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors"
                        style={BUTTON_STYLES.blueButton}
                      >
                        Настроить виджет
                      </button>
                    <button
                      onClick={() => setActiveSection('my-adapto')}
                        className="w-full h-[34px] px-6 text-[#070F1A] rounded-[10px] hover:bg-[#F9FAFB] transition-colors"
                        style={BUTTON_STYLES.whiteButton}
                    >
                      Протестировать ИИ
                    </button>
                    </div>
                  </div>
                ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" style={{ paddingTop: '12px' }}>
                <Card className="shadow-none hover:bg-[#F9FAFB] hover:border-white transition-colors duration-150">
                   <CardContent className="p-[15px] h-[170px] flex flex-col justify-between" style={{ paddingTop: '15px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                       <div 
                         onMouseEnter={(e) => handleMetricHover('avg-response-time', e)}
                         onMouseLeave={handleMetricLeave}
                         className="w-4 h-4 text-gray-400 hover:text-gray-600 transition-colors relative cursor-help"
                       >
                         <svg fill="currentColor" viewBox="0 0 24 24">
                           <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                         </svg>
                       </div>
                                               <p className="text-[14px] font-[500] text-[#8E8E93]">Ср. скорость ответа ИИ-агента</p>
            </div>
                                                                                        <div className="flex flex-col">
                                                  <div className="flex items-end">
                          <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>{Math.round(statisticsAggregates.avg_response_time || 0)}с</p>
                          {generateTrendIndicator('neutral', '0', false)}
                  </div>
                </div>
                   </CardContent>
                 </Card>

                                 <Card className="shadow-none">
                   <CardContent className="p-[15px] h-[170px] flex flex-col justify-between" style={{ paddingTop: '15px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                       <div 
                         onMouseEnter={(e) => handleMetricHover('avg-resolution-time', e)}
                         onMouseLeave={handleMetricLeave}
                         className="w-4 h-4 text-gray-400 hover:text-gray-600 transition-colors relative cursor-help"
                       >
                         <svg fill="currentColor" viewBox="0 0 24 24">
                           <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                         </svg>
                       </div>
                                               <p className="text-[14px] font-[500] text-[#8E8E93]">Ср. скорость разрешения вопроса</p>
                  </div>
                                                                                        <div className="flex flex-col">
                                                  <div className="flex items-end">
                          <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>{Math.round(statisticsAggregates.avg_resolution_time || 0)}м</p>
                          {generateTrendIndicator('neutral', '0', false)}
                  </div>
                </div>
                </CardContent>
              </Card>

                                 <Card className="shadow-none">
                   <CardContent className="p-[15px] h-[170px] flex flex-col justify-between" style={{ paddingTop: '15px' }}>
                     <div className="flex items-center gap-2" style={{ height: '21px' }}>
                       <div 
                         onMouseEnter={(e) => handleMetricHover('ai-effectiveness', e)}
                         onMouseLeave={handleMetricLeave}
                         className="w-4 h-4 text-gray-400 hover:text-gray-600 transition-colors relative cursor-help"
                       >
                         <svg fill="currentColor" viewBox="0 0 24 24">
                           <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                         </svg>
                       </div>
                                               <p className="text-[14px] font-[500] text-[#8E8E93]">Оценка эффективности ИИ-агента</p>
                            </div>
                                           <div className="flex flex-col">
                                                  <div className="flex items-end">
                            <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>{statisticsAggregates.ai_effectiveness_score?.toFixed(1) || '0.0'}/10</p>
                            {generateTrendIndicator('neutral', '0')}
                  </div>
                    </div>
                   </CardContent>
                 </Card>

                                 <Card className="shadow-none">
                   <CardContent className="p-[15px] h-[170px] flex flex-col justify-between" style={{ paddingTop: '15px' }}>
                     <div className="flex items-center gap-2" style={{ height: '21px' }}>
                       <div 
                         onMouseEnter={(e) => handleMetricHover('help-request-rate', e)}
                         onMouseLeave={handleMetricLeave}
                         className="w-4 h-4 text-gray-400 hover:text-gray-600 transition-colors relative cursor-help"
                       >
                         <svg fill="currentColor" viewBox="0 0 24 24">
                           <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/>
                         </svg>
                       </div>
                                               <p className="text-[14px] font-[500] text-[#8E8E93]">Процент чатов с запросом о помощи</p>
                     </div>
                                           <div className="flex flex-col">
                                                  <div className="flex items-end">
                            <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>{Math.round(statisticsAggregates.help_request_rate || 0)}%</p>
                            {generateTrendIndicator('neutral', '0%', false)}
                          </div>
                </div>
              </CardContent>
            </Card>
          </div>
                )}
              </div>
            )}

            {activeStatisticsTab === 'channels' && (
              <div className="space-y-6">
                {dialogsData.length === 0 ? (
                  // Пустое состояние для статистики по каналам
                  <div className="flex flex-col items-center justify-center py-16">
                    <span
                      className="w-8 h-8 mb-6 inline-block"
                      style={{
                        backgroundColor: '#0084FF',
                        WebkitMaskImage: 'url(/stat.svg)',
                        maskImage: 'url(/stat.svg)',
                        WebkitMaskRepeat: 'no-repeat',
                        maskRepeat: 'no-repeat',
                        WebkitMaskSize: 'contain',
                        maskSize: 'contain',
                        WebkitMaskPosition: 'center',
                        maskPosition: 'center'
                      }}
                    />
                    <h3 className="text-[20px] font-[500] mb-3" style={{ color: '#8E8E93', opacity: 0.7 }}>Пока нет данных по каналам</h3>
                    <p className="text-[14px] text-center max-w-[400px] mb-8" style={{ color: '#8E8E93', opacity: 0.7 }}>
                      Статистика по каналам появится после настройки интеграций
                    </p>
                    <div className="flex flex-col gap-[10px] w-full max-w-[380px]">
                      <button
                        onClick={() => setActiveSection('integrations')}
                        className="w-full h-[34px] px-6 bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors"
                        style={BUTTON_STYLES.blueButton}
                      >
                        Настроить интеграции
                      </button>
                      <button
                        onClick={() => setActiveSection('widget-dev')}
                        className="w-full h-[34px] px-6 text-[#070F1A] rounded-[10px] hover:bg-[#F9FAFB] transition-colors"
                        style={BUTTON_STYLES.whiteButton}
                      >
                        Настроить виджет
                      </button>
                    </div>
                  </div>
                ) : (
                  <ChannelStatistics userId={currentUser?.id} startDate={dateRange.start} endDate={dateRange.end} />
                )}
              </div>
            )}
          </div>
        );
      case 'integrations':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-[20px] font-[500] text-[#070F1A]">Интеграции</h1>
            </div>

            <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
              {integrations.map((integration) => (
                <div 
                  key={integration.id}
                  className="border border-transparent rounded-[15px] p-[15px] group hover:border-[#070F1A]/10 transition-all duration-300"
                >
                  {/* Контент: иконка и текст в одной строке */}
                  <div className="flex items-start gap-[15px] mb-[25px]">
                    {/* Иконка */}
                    <div className="flex-shrink-0">
                      <img src={`/${integration.icon}`} alt={integration.name} className="w-[50px] h-[50px]" />
  </div>

                    {/* Заголовок и описание */}
                    <div className="flex-1">
                      <h3 className="text-[16px] font-medium text-[#070F1A] mb-1">{integration.name}</h3>
                      <p className="text-[12px] text-[#8E8E93]">{integration.description}</p>
                    </div>
                  </div>

                  {/* Кнопка подключения */}
                  <div className="w-full">
                    {integration.installed ? (
                      <button className="w-full h-[34px] border border-[#0084FF]/20 text-[#0084FF]/60 rounded-[12px] transition-colors hover:border-[#0084FF]/30 hover:text-[#0084FF]/80 text-[14px]">
                        Подключено
                      </button>
                    ) : (
                      <button
                        onClick={() => handleInstallIntegration(integration)}
                        className="w-full h-[34px] bg-[#0084FF] text-white rounded-[12px] hover:bg-[#0084FF]/90 transition-colors text-[14px]"
                      >
                        Подключить
                      </button>
                    )}
                  </div>
                </div>
              ))}
            </div>
            
            {/* Примечание об Instagram */}
            <div className="mt-8 text-center">
              <p className="text-[12px] text-[#8E8E93]">
                *Instagram является продуктом Meta – признанной в РФ экстремисткой организацией
              </p>
          </div>
          </div>
        );

      case 'model-settings':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-[20px] font-[500] text-[#070F1A] mb-[16px]">Настройки модели</h1>
            </div>
            <div className="border-b" style={{ borderColor: '#E5E7EB', marginLeft: '-16px', marginRight: '-16px', marginTop: '0px' }}></div>



            {/* Шаг 1: Уточните цели Adapto */}
            <div className="mb-[50px]">
              <div className="flex items-center gap-[15px] mb-6">
                  <div className="w-[17px] h-[17px] bg-[#0084FF] rounded-[90px] flex items-center justify-center mb-[20px]">
                    <span className="text-white text-[10px] font-medium">1</span>
                  </div>
                  <div>
                  <h3 className="text-[18px] font-[500] text-[#070F1A] tracking-[-3%]">Уточните цели Adapto</h3>
                  <p className="text-[14px] text-[#8E8E93] tracking-[-2%]">
                      Настройте основные цели и задачи вашего ИИ-агента
                    </p>
                  </div>
                </div>
              {/* Разделитель перед Правила общения - перемещен выше, здесь убран по просьбе */}

              <div className="px-0 py-6">
                <div className="flex gap-6">
                  {/* Левая колонка: Какую роль должен выполнять бот? */}
                  <div className="flex-1">
                    <h4 className="text-[16px] font-[500] text-[#070F1A] tracking-[-3%] mb-[20px]">Какую роль должен выполнять бот?</h4>
                    <div className="flex gap-[10px]">
                    <button
                      onClick={() => setSetupData({...setupData, task: 'Продавать'})}
                        className={`w-[220px] h-[190px] rounded-[15px] transition-all overflow-hidden flex flex-col border ${
                        setupData.task === 'Продавать' 
                            ? 'bg-[#DBE9FF] border-[#0084FF]/50' 
                            : 'bg-[#F3F5F7] border-[#070F1A]/10'
                      }`}
                    >
                        <div className="w-full h-[144px] rounded-t-[15px] overflow-hidden">
                          <img src="/Продавец.png" alt="Продавец" className="w-full h-full object-cover object-top" />
                      </div>
                        <div className="flex-1 flex items-center gap-[7px] px-[15px]">
                          {setupData.task === 'Продавать' ? (
                            <div className="w-[17px] h-[17px] bg-[#0084FF] rounded-[90px] flex items-center justify-center">
                              <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                              </svg>
                            </div>
                          ) : (
                            <div className="w-[17px] h-[17px] bg-white rounded-[90px] border border-[#070F1A]/10"></div>
                          )}
                          <span className="text-[14px] font-[500] text-[#070F1A]">Продавца</span>
                        </div>
                    </button>
                    <button
                      onClick={() => setSetupData({...setupData, task: 'Консультировать'})}
                        className={`w-[220px] h-[190px] rounded-[15px] transition-all overflow-hidden flex flex-col border ${
                        setupData.task === 'Консультировать' 
                            ? 'bg-[#DBE9FF] border-[#0084FF]/50' 
                            : 'bg-[#F3F5F7] border-[#070F1A]/10'
                      }`}
                    >
                        <div className="w-full h-[144px] rounded-t-[15px] overflow-hidden">
                          <img src="/Консул.png" alt="Консультант" className="w-full h-full object-cover object-top" />
                      </div>
                        <div className="flex-1 flex items-center gap-[7px] px-[15px]">
                        {setupData.task === 'Консультировать' ? (
                            <div className="w-[17px] h-[17px] bg-[#0084FF] rounded-[90px] flex items-center justify-center">
                              <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                              </svg>
                          </div>
                        ) : (
                            <div className="w-[17px] h-[17px] bg-white rounded-[90px] border border-[#070F1A]/10"></div>
                        )}
                        <span className="text-[14px] font-[500] text-[#070F1A]">Консультанта</span>
                      </div>
                    </button>
                  </div>
                </div>
                
                  {/* Правая колонка: Какая главная цель ИИ-агента? */}
                  <div className="flex-1">
                    <h4 className="text-[16px] font-[500] text-[#070F1A] tracking-[-3%] mb-[20px]">Какая главная цель ИИ-агента?</h4>
                    <div className="grid grid-cols-2 gap-[10px]">
                    <button
                      onClick={() => setSetupData({...setupData, mainGoal: 'Записать на консультацию'})}
                      className={`h-[34px] rounded-[10px] transition-all text-[13px] ${
                        setupData.mainGoal === 'Записать на консультацию' 
                            ? 'bg-[#0084FF] text-white' 
                            : 'bg-white border border-[#070F1A]/10 text-[#070F1A]/70'
                      }`}
                      style={setupData.mainGoal === 'Записать на консультацию' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                    >
                        <span className="font-[500]">Записать на консультацию</span>
                    </button>
                    <button
                      onClick={() => setSetupData({...setupData, mainGoal: 'Продать продукт'})}
                      className={`h-[34px] rounded-[10px] transition-all text-[13px] ${
                        setupData.mainGoal === 'Продать продукт' 
                            ? 'bg-[#0084FF] text-white' 
                            : 'bg-white border border-[#070F1A]/10 text-[#070F1A]/70'
                      }`}
                      style={setupData.mainGoal === 'Продать продукт' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                    >
                        <span className="font-[500]">Продать продукт</span>
                    </button>
                    <button
                      onClick={() => setSetupData({...setupData, mainGoal: 'Помочь решить проблему'})}
                      className={`h-[34px] rounded-[10px] transition-all text-[13px] ${
                        setupData.mainGoal === 'Помочь решить проблему' 
                            ? 'bg-[#0084FF] text-white' 
                            : 'bg-white border border-[#070F1A]/10 text-[#070F1A]/70'
                      }`}
                      style={setupData.mainGoal === 'Помочь решить проблему' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                    >
                        <span className="font-[500]">Помочь решить проблему</span>
                    </button>
                    <button
                      onClick={() => setSetupData({...setupData, mainGoal: 'custom'})}
                      className={`h-[34px] rounded-[10px] transition-all text-[13px] ${
                        setupData.mainGoal === 'custom' 
                            ? 'bg-[#0084FF] text-white' 
                            : 'bg-white border border-[#070F1A]/10 text-[#070F1A]/70'
                      }`}
                      style={setupData.mainGoal === 'custom' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                    >
                        <span className="font-[500]">Другое</span>
                    </button>
                  </div>
                  {setupData.mainGoal === 'custom' && (
                      <div className="mt-[10px]">
                      <Input
                        placeholder="Введите вариант"
                          className="w-full h-[34px] rounded-[10px] border border-[#070F1A]/10 text-[14px] text-[#070F1A]/70"
                      />
                    </div>
                  )}
                  </div>
                </div>

                {/* Отступ между вопросами */}
                <div className="h-[50px]"></div>

                {/* 3. Какой цикл сделки в вашей компании? и 4. Целевая аудитория */}
                <div className="flex gap-6">
                  {/* Левая колонка: Какой цикл сделки */}
                  <div className="flex-1">
                    <h4 className="text-[16px] font-[500] text-[#070F1A] tracking-[-3%] mb-[20px]">Какой цикл сделки в вашей компании?</h4>
                  <Textarea 
                    value={setupData.dealCycle || ''}
                    onChange={(e) => setSetupData({...setupData, dealCycle: e.target.value})}
                    placeholder="Обычно наши клиенты сначала оставляют заявку, далее наш менеджер связывается с ними по телефону, подтверждают заявку и ведут дальше по воронке: Тут 2 пути, зависит от того на что оставили заявку, но если 1 путь, то отправляет декларацию на отправку груза, обычный срок у нас 7 дней..."
                      className="min-h-[124px] rounded-[10px] border border-[#070F1A]/10 text-[14px] text-[#070F1A]/70"
                  />
                </div>

                  {/* Правая колонка: Целевая аудитория */}
                  <div className="flex-1">
                    <h4 className="text-[16px] font-[500] text-[#070F1A] tracking-[-3%] mb-[20px]">Целевая аудитория</h4>
                  <Textarea 
                    value={setupData.targetAudience || ''}
                    onChange={(e) => setSetupData({...setupData, targetAudience: e.target.value})}
                    placeholder="Пол: Женщины Возраст: 18-45 Боль клиента: сложно найти подходящий размер"
                      className="min-h-[124px] rounded-[10px] border border-[#070F1A]/10 text-[14px] text-[#070F1A]/70"
                  />
                </div>
                </div>
              </div>
            </div>

            {/* Разделитель перед Правила общения */}
            <div className="border-b" style={{ borderColor: '#E5E7EB', marginLeft: '-16px', marginRight: '-16px', marginTop: '25px', marginBottom: '25px' }}></div>

            {/* Шаг 2: Правила общения */}
            <div className="mb-[50px]">
              <div className="flex items-center gap-[15px] mb-6">
                  <div className="w-[17px] h-[17px] bg-[#0084FF] rounded-[90px] flex items-center justify-center mb-[20px]">
                    <span className="text-white text-[10px] font-medium">2</span>
                  </div>
                  <div>
                  <h3 className="text-[18px] font-[500] text-[#070F1A] tracking-[-3%]">Правила общения</h3>
                  <p className="text-[14px] text-[#8E8E93] tracking-[-2%]">
                      Настройте стиль общения и ограничения для вашего ИИ-агента
                    </p>
                  </div>
                </div>
              <div className="px-0 py-6">
                <div className="flex gap-6">
                  {/* Левая колонка: Обращение к пользователю */}
                  <div className="flex-1">
                    <h4 className="text-[16px] font-[500] text-[#070F1A] tracking-[-3%] mb-[20px]">Обращение к пользователю</h4>
                    <div className="grid grid-cols-2 gap-[10px]">
                    <button 
                      onClick={() => setSetupData({...setupData, addressing: 'Вы'})}
                      className={`h-[34px] rounded-[10px] transition-all text-[13px] ${
                        setupData.addressing === 'Вы' 
                            ? 'bg-[#0084FF] text-white' 
                            : 'bg-white border border-[#070F1A]/10 text-[#070F1A]/70'
                      }`}
                      style={setupData.addressing === 'Вы' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                    >
                        <span className="font-[500]">На "Вы"</span>
                    </button>
                    <button 
                      onClick={() => setSetupData({...setupData, addressing: 'Ты'})}
                      className={`h-[34px] rounded-[10px] transition-all text-[13px] ${
                        setupData.addressing === 'Ты' 
                            ? 'bg-[#0084FF] text-white' 
                            : 'bg-white border border-[#070F1A]/10 text-[#070F1A]/70'
                      }`}
                      style={setupData.addressing === 'Ты' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                    >
                        <span className="font-[500]">На "Ты"</span>
                    </button>
                  </div>
                </div>

                  {/* Правая колонка: Стиль общения */}
                  <div className="flex-1">
                    <h4 className="text-[16px] font-[500] text-[#070F1A] tracking-[-3%] mb-[20px]">Стиль общения</h4>
                    <div className="grid grid-cols-2 gap-[10px]">
                    <button 
                      onClick={() => setSetupData({...setupData, communicationStyle: 'Дружелюбный'})} 
                      className={`h-[34px] rounded-[10px] transition-all text-[13px] ${
                        setupData.communicationStyle === 'Дружелюбный' 
                            ? 'bg-[#0084FF] text-white' 
                            : 'bg-white border border-[#070F1A]/10 text-[#070F1A]/70'
                      }`}
                      style={setupData.communicationStyle === 'Дружелюбный' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                    >
                        <span className="font-[500]">😊 Дружелюбный</span>
                    </button>
                    <button 
                      onClick={() => setSetupData({...setupData, communicationStyle: 'Нейтральный'})} 
                      className={`h-[34px] rounded-[10px] transition-all text-[13px] ${
                        setupData.communicationStyle === 'Нейтральный' 
                            ? 'bg-[#0084FF] text-white' 
                            : 'bg-white border border-[#070F1A]/10 text-[#070F1A]/70'
                      }`}
                      style={setupData.communicationStyle === 'Нейтральный' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                    >
                        <span className="font-[500]">😐 Нейтральный</span>
                    </button>
                    <button 
                      onClick={() => setSetupData({...setupData, communicationStyle: 'Профессиональный'})} 
                      className={`h-[34px] rounded-[10px] transition-all text-[13px] ${
                        setupData.communicationStyle === 'Профессиональный' 
                            ? 'bg-[#0084FF] text-white' 
                            : 'bg-white border border-[#070F1A]/10 text-[#070F1A]/70'
                      }`}
                      style={setupData.communicationStyle === 'Профессиональный' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                    >
                        <span className="font-[500]">💼 Профессиональный</span>
                    </button>
                    <button 
                      onClick={() => setSetupData({...setupData, communicationStyle: 'Юмористический'})} 
                      className={`h-[34px] rounded-[10px] transition-all text-[13px] ${
                        setupData.communicationStyle === 'Юмористический' 
                            ? 'bg-[#0084FF] text-white' 
                            : 'bg-white border border-[#070F1A]/10 text-[#070F1A]/70'
                      }`}
                      style={setupData.communicationStyle === 'Юмористический' ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                    >
                        <span className="font-[500]">😄 Юмористический</span>
                    </button>
                    </div>
                  </div>
                </div>

                {/* Отступ между вопросами */}
                <div className="h-[50px]"></div>

                {/* 3. Ограничения Адапто */}
                <div>
                  <h4 className="text-[16px] font-[500] text-[#070F1A] tracking-[-3%] mb-[20px]">Ограничения Адапто</h4>
                  <div className="flex flex-wrap gap-2">
                    {[
                      'Не обсуждай цены',
                      'Не давай финансовых советов',
                      'Не обсуждай политику',
                      'Не обсуждай религиозные темы',
                      'Не превышай полномочия и не создавай новые обязательства компании',
                      'Не давай юридические консультации',
                      'Не подтверждай наличие товара или услуги',
                      'Не гарантируй результат',
                      'Не давай длинных ответов',
                      'Поясняй ссылки при их отправке',
                      'Используй молодежный сленг',
                      'Не осуждай предпочтения клиента',
                      'Не оказывай давление на клиента',
                      'Избегай споров',
                      'Отвечай от первого лица',
                      'Используй бытовой язык',
                      'Не давай технические советы'
                    ].map(restriction => (
                      <button
                        key={restriction}
                        onClick={() => {
                          const current = setupData.restrictions || [];
                          const newRestrictions = current.includes(restriction)
                            ? current.filter(r => r !== restriction)
                            : [...current, restriction];
                          setSetupData({...setupData, restrictions: newRestrictions});
                        }}
                        className={`px-4 h-[34px] rounded-[50px] border border-[1px] transition-all text-[13px] ${
                          (setupData.restrictions || []).includes(restriction)
                            ? 'border-[#0084FF] bg-[#0084FF] text-white' 
                            : 'border-[#070F1A]/10 bg-white text-[#070F1A]/70'
                        }`}
                        style={(setupData.restrictions || []).includes(restriction) ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                      >
                        {restriction}
                      </button>
                    ))}

                    <button
                      onClick={() => setSetupData({...setupData, showCustomRestriction: !setupData.showCustomRestriction})}
                      className={`px-4 h-[34px] rounded-[50px] border border-[1px] transition-all text-[13px] ${
                        setupData.showCustomRestriction
                          ? 'border-[#0084FF] bg-[#0084FF] text-white' 
                          : 'border-[#070F1A]/10 bg-white text-[#070F1A]/70'
                      }`}
                      style={setupData.showCustomRestriction ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                    >
                      Другое
                    </button>
                  </div>
                  {setupData.showCustomRestriction && (
                    <div className="mt-3 flex gap-2">
                      <Input
                        value={setupData.customRestriction || ''}
                        onChange={(e) => setSetupData({...setupData, customRestriction: e.target.value})}
                        placeholder="Введите вариант"
                        className="flex-1"
                      />
                      <Button 
                        onClick={() => {
                          if (setupData.customRestriction) {
                            const current = setupData.restrictions || [];
                            setSetupData({
                              ...setupData, 
                              restrictions: [...current, setupData.customRestriction],
                              customRestriction: '',
                              showCustomRestriction: false
                            });
                          }
                        }}
                        disabled={!setupData.customRestriction}
                        className="bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0084FF]/90"
                        style={BUTTON_STYLES.blueButton}
                      >
                        Добавить
                      </Button>
                </div>
                  )}
              </div>

              {/* Отступ между вопросами */}
              <div className="h-[50px]"></div>

                {/* 5. Дополнительные настройки общения */}
                <div>
                  <h4 className="text-[16px] font-[500] text-[#070F1A] tracking-[-3%] mb-[20px]">Дополнительные настройки общения</h4>
                  <div className="flex flex-wrap gap-2">
                    {[
                      'Не гарантировать результат',
                      'Пояснять ссылки перед отправкой',
                      'Проверять понимание ответа',
                      'Избегать длинных сообщений',
                      'Уточнять задачу в начале общения',
                      'Не оказывать давление на клиента',
                      'Предупреждать об ожидании ответа',
                      'Избегать споров',
                      'Отвечать от первого лица'
                    ].map(setting => (
                      <button
                        key={setting}
                        onClick={() => {
                          const current = setupData.communicationSettings || [];
                          const newSettings = current.includes(setting)
                            ? current.filter(s => s !== setting)
                            : [...current, setting];
                          setSetupData({...setupData, communicationSettings: newSettings});
                        }}
                        className={`px-4 h-[34px] rounded-[50px] border border-[1px] transition-all text-[13px] ${
                          (setupData.communicationSettings || []).includes(setting)
                            ? 'border-[#0084FF] bg-[#0084FF] text-white' 
                            : 'border-[#070F1A]/10 bg-white text-[#070F1A]/70'
                        }`}
                        style={(setupData.communicationSettings || []).includes(setting) ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                      >
                        {setting}
                      </button>
                    ))}
                    {/* Пользовательские табы для дополнительных настроек */}
                    {(setupData.communicationSettings || []).filter(setting => 
                      !['Не гарантировать результат', 'Пояснять ссылки перед отправкой', 'Проверять понимание ответа', 'Избегать длинных сообщений', 'Уточнять задачу в начале общения', 'Не оказывать давление на клиента', 'Предупреждать об ожидании ответа', 'Избегать споров', 'Отвечать от первого лица'].includes(setting)
                    ).map(setting => (
                      <button
                        key={setting}
                        onClick={() => {
                          const current = setupData.communicationSettings || [];
                          const newSettings = current.filter(s => s !== setting);
                          setSetupData({...setupData, communicationSettings: newSettings});
                        }}
                        className="px-4 h-[34px] rounded-[50px] border border-[1px] transition-all text-[13px] border-[#0084FF] bg-[#0084FF] text-white"
                      >
                        {setting}
                      </button>
                    ))}
                    <button
                      onClick={() => setSetupData({...setupData, showCustomCommunicationSetting: !setupData.showCustomCommunicationSetting})}
                      className={`px-4 h-[34px] rounded-[50px] border border-[1px] transition-all text-[13px] ${
                        setupData.showCustomCommunicationSetting
                          ? 'border-[#0084FF] bg-[#0084FF] text-white' 
                          : 'border-[#070F1A]/10 bg-white text-[#070F1A]/70'
                      }`}
                    >
                      Другое
                    </button>
                  </div>
                  {setupData.showCustomCommunicationSetting && (
                    <div className="mt-3 flex gap-2">
                    <Input
                      value={setupData.customCommunicationSetting || ''}
                      onChange={(e) => setSetupData({...setupData, customCommunicationSetting: e.target.value})}
                        placeholder="Введите вариант"
                        className="flex-1"
                      />
                      <Button 
                        onClick={() => {
                          if (setupData.customCommunicationSetting) {
                            const current = setupData.communicationSettings || [];
                            setSetupData({
                              ...setupData, 
                              communicationSettings: [...current, setupData.customCommunicationSetting],
                              customCommunicationSetting: '',
                              showCustomCommunicationSetting: false
                            });
                          }
                        }}
                        disabled={!setupData.customCommunicationSetting}
                        className="bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0084FF]/90"
                        style={BUTTON_STYLES.blueButton}
                      >
                        Добавить
                      </Button>
                  </div>
                  )}
                </div>



                {/* Отступ между вопросами */}
                <div className="h-[50px]"></div>

                {/* 6. Уточнять или задавать вопрос клиенту, если: */}
                <div>
                  <h4 className="text-[16px] font-[500] text-[#070F1A] tracking-[-3%] mb-[20px]">Уточнять или задавать вопрос клиенту</h4>
                  <div className="flex flex-wrap gap-2">
                    {[
                      'Если запрос неполный',
                      'Если клиент сомневается',
                      'Если есть риск ошибки',
                      'При выборе продукта или услуги',
                      'Если ответ зависит от тонкостей',
                      'Если клиент проявляет интерес к нескольким вариантам',
                      'Если клиент не понимает предложенное',
                      'Если требуется индивидуальный подбор',
                      'Если клиент задаёт вопросы вне своей компетенции',
                      'Если клиент спрашивает о вещах, которые требует специальных знаний',
                      'При оформлении заявки или заказа',
                      'Перед тем как оформить что-то важное',
                      'Если клиент долго молчит'
                    ].map(question => (
                      <button
                        key={question}
                        onClick={() => {
                          const current = setupData.clarificationQuestions || [];
                          const newQuestions = current.includes(question)
                            ? current.filter(q => q !== question)
                            : [...current, question];
                          setSetupData({...setupData, clarificationQuestions: newQuestions});
                        }}
                        className={`px-4 h-[34px] rounded-[50px] border border-[1px] transition-all text-[13px] ${
                          (setupData.clarificationQuestions || []).includes(question)
                            ? 'border-[#0084FF] bg-[#0084FF] text-white' 
                            : 'border-[#070F1A]/10 bg-white text-[#070F1A]/70'
                        }`}
                        style={(setupData.clarificationQuestions || []).includes(question) ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                      >
                        {question}
                      </button>
                    ))}
                    {/* Пользовательские табы для уточняющих вопросов */}
                    {(setupData.clarificationQuestions || []).filter(question => 
                      !['Если запрос неполный', 'Если клиент сомневается', 'Если есть риск ошибки', 'При выборе продукта или услуги', 'Если ответ зависит от тонкостей', 'Если клиент проявляет интерес к нескольким вариантам', 'Если клиент не понимает предложенное', 'Если требуется индивидуальный подбор', 'Если клиент задаёт вопросы вне своей компетенции', 'Если клиент спрашивает о вещах, которые требует специальных знаний', 'При оформлении заявки или заказа', 'Перед тем как оформить что-то важное', 'Если клиент долго молчит'].includes(question)
                    ).map(question => (
                      <button
                        key={question}
                        onClick={() => {
                          const current = setupData.clarificationQuestions || [];
                          const newQuestions = current.filter(q => q !== question);
                          setSetupData({...setupData, clarificationQuestions: newQuestions});
                        }}
                        className="px-4 h-[34px] rounded-[50px] border border-[1px] transition-all text-[13px] border-[#0084FF] bg-[#0084FF] text-white"
                      >
                        {question}
                      </button>
                    ))}
                    <button
                      onClick={() => setSetupData({...setupData, showCustomClarificationQuestion: !setupData.showCustomClarificationQuestion})}
                      className={`px-4 h-[34px] rounded-[50px] border border-[1px] transition-all text-[13px] ${
                        setupData.showCustomClarificationQuestion
                          ? 'border-[#0084FF] bg-[#0084FF] text-white' 
                          : 'border-[#070F1A]/10 bg-white text-[#070F1A]/70'
                      }`}
                    >
                      Другое
                    </button>
                  </div>
                  {setupData.showCustomClarificationQuestion && (
                    <div className="mt-3 flex gap-2">
                      <Input
                        value={setupData.customClarificationQuestion || ''}
                        onChange={(e) => setSetupData({...setupData, customClarificationQuestion: e.target.value})}
                        placeholder="Введите вариант"
                        className="flex-1"
                      />
                      <Button 
                        onClick={() => {
                          if (setupData.customClarificationQuestion) {
                            const current = setupData.clarificationQuestions || [];
                            setSetupData({
                              ...setupData, 
                              clarificationQuestions: [...current, setupData.customClarificationQuestion],
                              customClarificationQuestion: '',
                              showCustomClarificationQuestion: false
                            });
                          }
                        }}
                        disabled={!setupData.customClarificationQuestion}
                        className="bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0084FF]/90"
                        style={BUTTON_STYLES.blueButton}
                      >
                        Добавить
                      </Button>
                    </div>
                  )}
                </div>

                {/* Отступ между вопросами */}
                <div className="h-[50px]"></div>

                {/* 7. Сбор данных и Количество эмодзи в общении */}
                <div className="flex gap-6">
                  {/* Левая колонка: Сбор данных */}
                  <div className="flex-1">
                    <h4 className="text-[16px] font-[500] text-[#070F1A] tracking-[-3%] mb-[20px]">Сбор данных</h4>
                    <div className="flex flex-wrap gap-2">
                    {[
                      'Имя',
                      'Номер телефона',
                      'Почта',
                      'Адрес доставки',
                      'Город',
                      'Возраст'
                    ].map(dataType => (
                      <button
                        key={dataType}
                        onClick={() => {
                          const current = setupData.dataCollection || [];
                          const newData = current.includes(dataType)
                            ? current.filter(d => d !== dataType)
                            : [...current, dataType];
                          // Если добавляем новый таб, то "Не собирать данные" должен быть деактивирован
                          setSetupData({...setupData, dataCollection: newData});
                        }}
                          className={`px-4 h-[34px] rounded-[50px] border border-[1px] transition-all text-[13px] ${
                          (setupData.dataCollection || []).includes(dataType)
                              ? 'border-[#0084FF] bg-[#0084FF] text-white' 
                              : 'border-[#070F1A]/10 bg-white text-[#070F1A]/70'
                        }`}
                        style={(setupData.dataCollection || []).includes(dataType) ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                      >
                        {dataType}
                      </button>
                    ))}
                    {/* Пользовательские табы */}
                    {(setupData.dataCollection || []).filter(dataType => 
                      !['Имя', 'Номер телефона', 'Почта', 'Адрес доставки', 'Город', 'Возраст'].includes(dataType)
                    ).map(dataType => (
                      <button
                        key={dataType}
                        onClick={() => {
                          const current = setupData.dataCollection || [];
                          const newData = current.filter(d => d !== dataType);
                          setSetupData({...setupData, dataCollection: newData});
                        }}
                        className="px-4 h-[34px] rounded-[50px] border border-[1px] transition-all text-[13px] border-[#0084FF] bg-[#0084FF] text-white"
                      >
                        {dataType}
                      </button>
                    ))}
                    <button
                      onClick={() => setSetupData({...setupData, dataCollection: []})}
                        className={`px-4 h-[34px] rounded-[50px] border border-[1px] transition-all text-[13px] ${
                        (setupData.dataCollection || []).length === 0
                            ? 'border-[#0084FF] bg-[#0084FF] text-white' 
                            : 'border-[#070F1A]/10 bg-white text-[#070F1A]/70'
                      }`}
                    >
                      Не собирать данные
                    </button>
                    <button
                      onClick={() => {
                        // При активации "Добавить данные" деактивируем "Не собирать данные"
                        setSetupData({...setupData, showCustomData: !setupData.showCustomData});
                      }}
                      className={`px-4 h-[34px] rounded-[50px] border border-[1px] transition-all text-[13px] ${
                        setupData.showCustomData
                          ? 'border-[#0084FF] bg-[#0084FF] text-white' 
                          : 'border-[#070F1A]/10 bg-white text-[#070F1A]/70'
                      }`}
                    >
                      Добавить данные
                    </button>
                  </div>
                  {setupData.showCustomData && (
                    <div className="mt-3 flex gap-2">
                      <Input
                        value={setupData.customData || ''}
                        onChange={(e) => setSetupData({...setupData, customData: e.target.value})}
                        placeholder="Ввести параметр"
                        className="flex-1"
                      />
                      <Button 
                        onClick={() => {
                          if (setupData.customData) {
                            const current = setupData.dataCollection || [];
                            setSetupData({
                              ...setupData, 
                              dataCollection: [...current, setupData.customData],
                              customData: '',
                              showCustomData: false
                            });
                          }
                        }}
                        disabled={!setupData.customData}
                        className="bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0084FF]/90"
                        style={BUTTON_STYLES.blueButton}
                      >
                        Добавить
                      </Button>
                    </div>
                  )}
                  </div>

                  {/* Правая колонка: Количество эмодзи в общении */}
                  <div className="flex-1">
                    <h4 className="text-[16px] font-[500] text-[#070F1A] tracking-[-3%] mb-[20px]">Количество эмодзи в общении</h4>
                    <div className="flex gap-[10px]">
                      <button
                        onClick={() => setSetupData({...setupData, emojiUsage: 'Никогда'})}
                        className={`relative w-[178px] h-[190px] rounded-[15px] transition-all overflow-hidden flex flex-col border ${
                          setupData.emojiUsage === 'Никогда' 
                            ? 'bg-[#DBE9FF] border-[#0084FF]/50' 
                            : 'bg-[#F3F5F7] border-[#070F1A]/10'
                        }`}
                      >
                        <div className="w-full h-[144px] rounded-t-[15px] overflow-hidden">
                          <div className="w-full h-full bg-[#F3F5F7] flex items-center justify-center">
                            <img src="/Frame 121.png" alt="Никогда" className="w-full h-full object-cover" />
                          </div>
                        </div>
                        <div className="flex-1 flex items-center gap-[7px] px-[15px]">
                          {setupData.emojiUsage === 'Никогда' ? (
                            <div className="w-[17px] h-[17px] bg-[#0084FF] rounded-[90px] flex items-center justify-center">
                              <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                              </svg>
                            </div>
                          ) : (
                            <div className="w-[17px] h-[17px] bg-white rounded-[90px] border border-[#070F1A]/10"></div>
                          )}
                          <span className="text-[14px] font-[500] text-[#070F1A]">Никогда</span>
                        </div>
                      </button>
                      <button
                        onClick={() => setSetupData({...setupData, emojiUsage: 'Редко'})}
                        className={`relative w-[178px] h-[190px] rounded-[15px] transition-all overflow-hidden flex flex-col border ${
                          setupData.emojiUsage === 'Редко' 
                            ? 'bg-[#DBE9FF] border-[#0084FF]/50' 
                            : 'bg-[#F3F5F7] border-[#070F1A]/10'
                        }`}
                      >
                                                <div className="w-full h-[144px] rounded-t-[15px] overflow-hidden">
                          <div className="w-full h-full bg-[#F3F5F7] flex items-center justify-center">
                            <img src="/Frame 119.png" alt="Редко" className="w-full h-full object-cover" />
                </div>
              </div>
                        <div className="flex-1 flex items-center gap-[7px] px-[15px]">
                          {setupData.emojiUsage === 'Редко' ? (
                            <div className="w-[17px] h-[17px] bg-[#0084FF] rounded-[90px] flex items-center justify-center">
                              <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                              </svg>
                            </div>
                          ) : (
                            <div className="w-[17px] h-[17px] bg-white rounded-[90px] border border-[#070F1A]/10"></div>
                          )}
                          <span className="text-[14px] font-[500] text-[#070F1A]">Редко</span>
                        </div>
                      </button>
                      <button
                        onClick={() => setSetupData({...setupData, emojiUsage: 'Часто'})}
                        className={`relative w-[178px] h-[190px] rounded-[15px] transition-all overflow-hidden flex flex-col border ${
                          setupData.emojiUsage === 'Часто' 
                            ? 'bg-[#DBE9FF] border-[#0084FF]/50' 
                            : 'bg-[#F3F5F7] border-[#070F1A]/10'
                        }`}
                      >
                        <div className="w-full h-[144px] rounded-t-[15px] overflow-hidden">
                          <div className="w-full h-full bg-[#F3F5F7] flex items-center justify-center">
                            <img src="/Frame 120.png" alt="Часто" className="w-full h-full object-cover" />
                          </div>
                        </div>
                        <div className="flex-1 flex items-center gap-[7px] px-[15px]">
                          {setupData.emojiUsage === 'Часто' ? (
                            <div className="w-[17px] h-[17px] bg-[#0084FF] rounded-[90px] flex items-center justify-center">
                              <svg className="w-4 h-4 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                              </svg>
                            </div>
                          ) : (
                            <div className="w-[17px] h-[17px] bg-white rounded-[90px] border border-[#070F1A]/10"></div>
                          )}
                          <span className="text-[14px] font-[500] text-[#070F1A]">Часто</span>
                        </div>
                      </button>
                  </div>
                </div>
                </div>


              </div>
            </div>

            {/* Разделитель перед Воронка продаж */}
            <div className="border-b" style={{ borderColor: '#E5E7EB', marginLeft: '-16px', marginRight: '-16px', marginTop: '25px', marginBottom: '25px' }}></div>

            {/* Шаг 3: Этапы диалога */}
            <div className="mb-[50px]">
              <div className="flex items-center gap-[15px] mb-0">
                <div className="w-[17px] h-[17px] bg-[#0084FF] rounded-[90px] flex items-center justify-center mb-[20px]">
                  <span className="text-white text-[10px] font-medium">3</span>
                </div>
                <div>
                  <h3 className="text-[18px] font-[500] text-[#070F1A] tracking-[-3%]">Воронка продаж</h3>
                  <p className="text-[14px] text-[#8E8E93] tracking-[-2%]">
                  Опишите детально этапы диалога для вашего ИИ-агента
                  </p>
                            </div>
              </div>
                <div className="px-0 py-6" style={{paddingTop: '0px'}}>
                <div className="h-[20px]"></div>



                <div className="space-y-[10px]">
                  {(setupData.dialogStages || [
                    '🎯 УСТАНОВЛЕНИЕ КОНТАКТА: Поздоровайся тепло, представься как ИИ-помощник. Спроси имя клиента и как дела. Создай дружелюбную атмосферу.',
                    '🔍 ВЫЯСНЕНИЕ ПОТРЕБНОСТЕЙ: Задавай открытые вопросы о проблемах клиента, целях и ситуации. Уточни детали: бюджет, сроки, приоритеты.',
                    '💡 ПРЕЗЕНТАЦИЯ И ЗАКРЫТИЕ: Предложи решение на основе потребностей. Расскажи о преимуществах и выгодах. При возражениях - выясни причину и предложи альтернативы. Когда готов - подведи итоги и предложи оформить заказ.'
                  ]).map((stage, index) => {
                    const isEditing = setupData.editingStage === index;
                    return (
                    <div key={index} className="flex items-center gap-[10px]">
                      {/* Квадрат с цифрой */}
                      <div className="w-[34px] h-[34px] bg-[#F3F8FF] border border-[#070F1A]/10 rounded-[10px] flex items-center justify-center">
                        <span className="text-[14px] text-[#0084FF] font-medium">{index + 1}</span>
                  </div>
                      
                      {/* Поле ввода */}
                      <div className="flex-1">
                        <div className="flex-1">
                          <Textarea
                            value={stage}
                            onChange={(e) => {
                              const newStages = [...(setupData.dialogStages || [])];
                              newStages[index] = e.target.value;
                              setSetupData({...setupData, dialogStages: newStages});
                            }}
                            className={`w-full resize-none border rounded-[10px] p-3 min-h-[60px] ${isEditing ? 'border-[#070F1A]/10 bg-white' : 'border-[#070F1A]/10 bg-gray-50 cursor-not-allowed'}`}
                            rows={1}
                            placeholder="Опишите этап диалога"
                            readOnly={!isEditing}
                            style={{ minHeight: '60px', height: 'auto' }}
                            onInput={(e) => {
                              e.target.style.height = 'auto';
                              e.target.style.height = Math.max(60, e.target.scrollHeight) + 'px';
                            }}
                            data-stage-index={index}
                          />
                    </div>
                      </div>
                      
                      {/* Кнопка редактирования */}
                      <button 
                        onClick={() => {
                          if (isEditing) {
                            setSetupData({...setupData, editingStage: null});
                          } else {
                            setSetupData({...setupData, editingStage: index});
                            // Автоматически фокусируемся на поле через небольшую задержку
                            setTimeout(() => {
                              const textarea = document.querySelector(`textarea[data-stage-index="${index}"]`);
                              if (textarea) {
                                textarea.focus();
                                textarea.setSelectionRange(textarea.value.length, textarea.value.length);
                              }
                            }, 100);
                          }
                        }}
                        className="w-[34px] h-[34px] bg-white border border-[#070F1A]/10 rounded-[10px] flex items-center justify-center hover:bg-gray-50"
                      >
                        <img src="/pencil.svg" alt="Редактировать" className="w-[14px] h-[14px]" style={{ filter: 'brightness(0) saturate(100%) invert(59%) sepia(2%) saturate(0%) hue-rotate(217deg) brightness(92%) contrast(89%)' }} />
                      </button>
                      
                      {/* Кнопка удаления */}
                      <button 
                          onClick={() => {
                            const newStages = [...(setupData.dialogStages || [])];
                            newStages.splice(index, 1);
                            setSetupData({...setupData, dialogStages: newStages});
                          }}
                        className="w-[34px] h-[34px] bg-white border border-[#070F1A]/10 rounded-[10px] flex items-center justify-center"
                      >
                        <img src="/traash.svg" alt="Удалить" className="w-5 h-5" style={{ filter: 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(346deg) brightness(104%) contrast(97%)' }} />
                      </button>
                    </div>
                  );
                  })}
                  
                  <div className="flex gap-2">
                    <Button 
                      onClick={() => {
                        const newStages = [...(setupData.dialogStages || []), 'Новый этап диалога'];
                        setSetupData({...setupData, dialogStages: newStages});
                      }}
                      className="flex-1 h-[34px] bg-white border border-[#E5E6E7] text-[#070F1A] hover:bg-[#F2F3F4] text-[14px] transition-all shadow-[0_1px_2px_rgba(7,15,26,0.06)]"
                    >
                      Добавить этап
                    </Button>
                    <Button 
                      onClick={() => {
                        const defaultStages = [
                          '🎯 УСТАНОВЛЕНИЕ КОНТАКТА: Поздоровайся тепло, представься как ИИ-помощник. Спроси имя клиента и как дела. Создай дружелюбную атмосферу.',
                          '🔍 ВЫЯСНЕНИЕ ПОТРЕБНОСТЕЙ: Задавай открытые вопросы о проблемах клиента, целях и ситуации. Уточни детали: бюджет, сроки, приоритеты.',
                          '💡 ПРЕЗЕНТАЦИЯ И ЗАКРЫТИЕ: Предложи решение на основе потребностей. Расскажи о преимуществах и выгодах. При возражениях - выясни причину и предложи альтернативы. Когда готов - подведи итоги и предложи оформить заказ.'
                        ];
                        setSetupData({...setupData, dialogStages: defaultStages, dialogStagesModified: true});
                      }}
                      className="flex-1 h-[34px] bg-[#F2F3F4] border border-[#E5E6E7] text-[#070F1A] hover:bg-white text-[14px] transition-all shadow-[0_1px_2px_rgba(7,15,26,0.06)]"
                    >
                      Сбросить к стандартным
                    </Button>
                  </div>
                    </div>

                <div className="h-[20px]"></div>


                <div className="h-[30px]"></div>

                </div>
            </div>

            {/* Закрепленные кнопки внизу контейнера */}
            <div className="sticky bottom-0 z-10 mt-6">
              <div className="flex gap-[20px] w-full shadow-[0_12px_30px_rgba(7,15,26,0.12)]/50">
                          <Button 
                            onClick={async () => {
                              // Сохраняем настройки модели (аналогично виджет разработка)
                              if (isLoggedIn && currentUser) {
                                try {
                                  const settings = {
                                    // Шаг 1: Цели Adapto
                                    task: setupData.task,
                                    mainGoal: setupData.mainGoal,
                                    mainGoalCustom: setupData.mainGoalCustom,
                                    customGoal: setupData.customGoal,
                                    dealCycle: setupData.dealCycle,
                                    targetAudience: setupData.targetAudience,
                                    // Шаг 2: Правила общения
                                    addressing: setupData.addressing,
                                    communicationStyle: setupData.communicationStyle,
                                    restrictions: setupData.restrictions,
                                    customRestriction: setupData.customRestriction,
                                    communicationSettings: setupData.communicationSettings,
                                    customCommunicationSetting: setupData.customCommunicationSetting,
                                    dataCollection: setupData.dataCollection,
                                    customData: setupData.customData,
                                    clarificationQuestions: setupData.clarificationQuestions,
                                    customClarificationQuestion: setupData.customClarificationQuestion,
                                    emojiUsage: setupData.emojiUsage,
                                    // Шаг 3: Этапы диалога
                                    dialogStages: setupData.dialogStages,
                                    dialogStagesModified: setupData.dialogStagesModified,
                                    // Технические настройки
                                    modelProvider: setupData.modelProvider,
                                    modelName: setupData.modelName,
                                    temperature: setupData.temperature,
                                    maxTokens: setupData.maxTokens,
                                    systemPrompt: setupData.systemPrompt,
                                    customInstructions: setupData.customInstructions,
                                    enableRag: setupData.enableRag,
                                    enableValidation: setupData.enableValidation,
                                    enableMonitoring: setupData.enableMonitoring
                                  };
                                  
                                  // Сохраняем настройки в базу данных
                                  try {
                                  const result = await modelSettings.saveModelSettings(currentUser.id, settings);
                                  if (result) {
                                    showSystemNotificationMessage('✅ Настройки модели успешно сохранены в базу данных!');
                                  } else {
                                    showSystemNotificationMessage('❌ Ошибка при сохранении в базу данных');
                                    }
                                  } catch (error) {
                                    console.error('Error saving model settings to database:', error);
                                    showSystemNotificationMessage('❌ Ошибка при сохранении в базу данных: ' + error.message);
                                  }
                                } catch (error) {
                                  console.error('Error saving model settings:', error);
                                  showSystemNotificationMessage('❌ Ошибка при сохранении настроек');
                                }
                              } else {
                                showSystemNotificationMessage('❌ Ошибка: пользователь не авторизован');
                              }
                            }}
                  className="flex-1 h-[34px] px-6 text-[#070F1A] rounded-[10px] hover:bg-[#F2F3F4] transition-colors"
                  style={BUTTON_STYLES.whiteButton}
                          >
                  Сохранить изменения
                          </Button>
                          <Button 
                            onClick={async () => {
                              // Сохраняем настройки модели (аналогично виджет разработка)
                              if (isLoggedIn && currentUser) {
                                try {
                                  const settings = {
                                    // Шаг 1: Цели Adapto
                                    task: setupData.task,
                                    mainGoal: setupData.mainGoal,
                                    mainGoalCustom: setupData.mainGoalCustom,
                                    customGoal: setupData.customGoal,
                                    dealCycle: setupData.dealCycle,
                                    targetAudience: setupData.targetAudience,
                                    // Шаг 2: Правила общения
                                    addressing: setupData.addressing,
                                    communicationStyle: setupData.communicationStyle,
                                    restrictions: setupData.restrictions,
                                    customRestriction: setupData.customRestriction,
                                    communicationSettings: setupData.communicationSettings,
                                    customCommunicationSetting: setupData.customCommunicationSetting,
                                    dataCollection: setupData.dataCollection,
                                    customData: setupData.customData,
                                    clarificationQuestions: setupData.clarificationQuestions,
                                    customClarificationQuestion: setupData.customClarificationQuestion,
                                    emojiUsage: setupData.emojiUsage,
                                    // Шаг 3: Этапы диалога
                                    dialogStages: setupData.dialogStages,
                                    dialogStagesModified: setupData.dialogStagesModified,
                                    // Технические настройки
                                    modelProvider: setupData.modelProvider,
                                    modelName: setupData.modelName,
                                    temperature: setupData.temperature,
                                    maxTokens: setupData.maxTokens,
                                    systemPrompt: setupData.systemPrompt,
                                    customInstructions: setupData.customInstructions,
                                    enableRag: setupData.enableRag,
                                    enableValidation: setupData.enableValidation,
                                    enableMonitoring: setupData.enableMonitoring
                                  };
                                  
                                  // Сохраняем настройки в базу данных
                                  try {
                                  const result = await modelSettings.saveModelSettings(currentUser.id, settings);
                                  if (result) {
                                    showSystemNotificationMessage('✅ Настройки модели успешно сохранены в базу данных!');
                                  } else {
                                    showSystemNotificationMessage('❌ Ошибка при сохранении в базу данных');
                                  }
                                  } catch (error) {
                                    console.error('Error saving model settings to database:', error);
                                    showSystemNotificationMessage('❌ Ошибка при сохранении в базу данных: ' + error.message);
                                  }
                                  
                                  // Переходим к тестированию
                                  setActiveSection('my-adapto');
                                  // Прокручиваем к низу чата после переключения
                                  ChatUtils.scrollToBottom(chatHistoryRef, 500);
                                } catch (error) {
                                  console.error('Error saving model settings:', error);
                                  showSystemNotificationMessage('❌ Ошибка при сохранении настроек');
                                }
                              } else {
                                showSystemNotificationMessage('❌ Ошибка: пользователь не авторизован');
                              }
                            }}
                  className="flex-1 h-[34px] px-6 bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors"
                  style={BUTTON_STYLES.blueButton}
                          >
                  Сохранить и протестировать
                          </Button>
                        </div>
            </div>
          </div>
        );

      case 'dialogs':
        return (
          <div className="flex flex-col h-full">
            {/* Заголовок */}
            <div className="flex justify-between items-center mb-[16px]">
              <h1 className="text-[20px] font-[500]">Диалоги</h1>
            </div>
            
            {/* Разделительная линия на всю ширину */}
            <div className="h-px bg-[#E5E7EB]" style={{ marginLeft: '-32px', marginRight: '-32px' }}></div>

            {/* Трехконтейнерная структура */}
            <div className="grid grid-cols-12 gap-0 overflow-hidden flex-1 min-h-0 -mb-4">
                             {/* Левая панель - список диалогов */}
              <div className="col-span-4 bg-[#F8F8FA] flex flex-col h-full min-h-0 overflow-hidden pr-4">
                <div className="p-0">
                  {/* Табы для фильтрации чатов */}
                  <div className="mb-[10px] mt-[10px]">
                    <div className="flex gap-0 bg-[#F2F3F4] h-[40px] rounded-[10px] p-[3px]">
                      <button
                        onClick={() => setActiveChatTab('all')}
                        className={`flex-1 h-[34px] rounded-[9px] text-[13px] font-medium transition-colors ${
                          activeChatTab === 'all'
                            ? 'bg-white text-[#0084FF]'
                            : 'text-[#8E8E93] hover:text-[#0084FF]'
                        }`}
                      >
                        {isOperator ? 'Входящие' : 'Входящие'}
                      </button>
                      <button
                        onClick={() => setActiveChatTab('active')}
                        className={`flex-1 h-[34px] rounded-[9px] text-[13px] font-medium transition-colors ${
                          activeChatTab === 'active'
                            ? 'bg-white text-[#0084FF]'
                            : 'text-[#8E8E93] hover:text-[#0084FF]'
                        }`}
                      >
                        {isOperator ? 'Мои' : 'Активные'}
                      </button>
                      <button
                        onClick={() => setActiveChatTab('closed')}
                        className={`flex-1 h-[34px] rounded-[9px] text-[13px] font-medium transition-colors ${
                          activeChatTab === 'closed'
                            ? 'bg-white text-[#0084FF]'
                            : 'text-[#8E8E93] hover:text-[#0084FF]'
                        }`}
                      >
                        Завершенные
                      </button>
                    </div>
                  </div>
                  
                  {/* Фильтр по каналам */}
                  <div className="mb-[10px] mt-[10px]">
                    <div className="flex gap-1 bg-[#F8F8FA] h-[32px] rounded-[8px] p-[2px] overflow-x-auto">
                      <button
                        onClick={() => setActiveChannelFilter('all')}
                        className={`px-3 h-[28px] rounded-[6px] text-[12px] font-medium transition-colors whitespace-nowrap ${
                          activeChannelFilter === 'all'
                            ? 'bg-white text-[#0084FF] shadow-sm'
                            : 'text-[#8E8E93] hover:text-[#0084FF]'
                        }`}
                      >
                        Все каналы
                      </button>
                      <button
                        onClick={() => setActiveChannelFilter('widget')}
                        className={`px-3 h-[28px] rounded-[6px] text-[12px] font-medium transition-colors whitespace-nowrap ${
                          activeChannelFilter === 'widget'
                            ? 'bg-white text-[#0084FF] shadow-sm'
                            : 'text-[#8E8E93] hover:text-[#0084FF]'
                        }`}
                      >
                        Виджет
                      </button>
                      <button
                        onClick={() => setActiveChannelFilter('telegram')}
                        className={`px-3 h-[28px] rounded-[6px] text-[12px] font-medium transition-colors whitespace-nowrap ${
                          activeChannelFilter === 'telegram'
                            ? 'bg-white text-[#0084FF] shadow-sm'
                            : 'text-[#8E8E93] hover:text-[#0084FF]'
                        }`}
                      >
                        Telegram
                      </button>
                      <button
                        onClick={() => setActiveChannelFilter('whatsapp')}
                        className={`px-3 h-[28px] rounded-[6px] text-[12px] font-medium transition-colors whitespace-nowrap ${
                          activeChannelFilter === 'whatsapp'
                            ? 'bg-white text-[#0084FF] shadow-sm'
                            : 'text-[#8E8E93] hover:text-[#0084FF]'
                        }`}
                      >
                        WhatsApp
                      </button>
                      <button
                        onClick={() => setActiveChannelFilter('admin')}
                        className={`px-3 h-[28px] rounded-[6px] text-[12px] font-medium transition-colors whitespace-nowrap ${
                          activeChannelFilter === 'admin'
                            ? 'bg-white text-[#0084FF] shadow-sm'
                            : 'text-[#8E8E93] hover:text-[#0084FF]'
                        }`}
                      >
                        Админ
                      </button>
                    </div>
                  </div>
                  
                  <div className="relative">
                    <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-[#8E8E93]" />
                    <input
                      placeholder="Найти чат"
                      value={searchQuery}
                      onChange={(e) => debouncedSearch(e.target.value)}
                      className="w-full pl-10 h-[34px] text-[13px] border-0 bg-transparent focus:outline-none focus:ring-0"
                      style={{
                        color: '#070F1A'
                      }}
                    />
                  </div>
                  <div className="border-b mt-[10px]" style={{ borderColor: '#E5E6E7' }}></div>
                </div>
                
                                 <div className="overflow-y-auto p-0 space-y-3 flex-1 mt-4">
                  {dialogsData.length > 0 && (
                    getFilteredDialogs()
                    .map((dialog) => (
                                         <div 
                       key={dialog.id} 
                       className={`p-3 rounded-[15px] cursor-pointer transition-all ${
                         selectedDialog?.id === dialog.id 
                           ? 'bg-[#F2F3F4] border border-transparent' 
                           : 'hover:bg-[#F2F3F4] border border-transparent'
                       }`}
                       onClick={() => {
                         setSelectedDialog(dialog);
                         // Показываем плашку для диалогов ИИ или ожидающих
                         if (dialog.status === 'active' || dialog.status === 'waiting') {
                           setShowJoinDialogPlaque(true);
                         } else {
                           setShowJoinDialogPlaque(false);
                         }
                       }}
                     >
                      <div className="space-y-3">
                        {/* Верхняя строка: иконка источника + заголовок + иконки статуса + последнее сообщение с временем */}
                        <div className="flex items-center gap-3">
                          <div className="w-[18px] h-[18px] bg-[#F3F4F6] rounded-[90px] flex items-center justify-center overflow-hidden" style={{ marginBottom: '20px' }}>
                            {dialog.source === 'widget' && <img src="/Group 102.svg" alt="Widget" className="w-full h-full" />}
                            {dialog.source === 'telegram' && <img src="/Group 38.svg" alt="Telegram" className="w-full h-full" />}
                            {dialog.source === 'whatsapp' && <img src="/Group 37.svg" alt="WhatsApp" className="w-full h-full" />}
                            {dialog.source === 'vk' && <img src="/Group 39.svg" alt="VK" className="w-full h-full" />}
                          </div>
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center justify-between">
                              <h3 className="font-[500] text-[14px] text-[#070F1A] truncate">{dialog.user}</h3>
                              <div className="flex items-center gap-1">
                                <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                  {(() => {
                                    const p = (dialog.priority || 'low');
                                    const inactive = 'rgba(7,15,26,0.2)';
                                    const isHigh = p === 'high' || p === 'urgent';
                                    const isMedium = p === 'medium';
                                    const c1 = isHigh ? '#FF3B30' : isMedium ? '#FFCE52' : '#05D560';
                                    const c2 = isHigh ? '#FF3B30' : isMedium ? '#FFCE52' : inactive;
                                    const c3 = isHigh ? '#FF3B30' : inactive;
                                    return (
                                      <g>
                                        <rect x="1" y="10" width="4" height="6" rx="1" fill={c1}></rect>
                                        <rect x="6" y="6" width="4" height="10" rx="1" fill={c2}></rect>
                                        <rect x="11" y="3" width="4" height="13" rx="1" fill={c3}></rect>
                                      </g>
                                    );
                                  })()}
                                </svg>
                                <div className="rounded-full flex items-center justify-center" style={{ width: '18px', height: '18px', backgroundColor: dialog.status === 'taken' ? '#A684FF' : 'transparent' }}>
                                  {dialog.status === 'taken' ? (
                                    <img src="/headphone.svg" alt="Оператор" className="w-[11px] h-[11px]" style={{ filter: 'brightness(0) invert(1)' }} />
                                  ) : (
                                    <span
                                      className="w-[18px] h-[18px] inline-block"
                                      style={{
                                        backgroundColor: '#0084FF',
                                        WebkitMaskImage: 'url(/aiii.svg)',
                                        maskImage: 'url(/aiii.svg)',
                                        WebkitMaskRepeat: 'no-repeat',
                                        maskRepeat: 'no-repeat',
                                        WebkitMaskSize: 'contain',
                                        maskSize: 'contain',
                                        WebkitMaskPosition: 'center',
                                        maskPosition: 'center'
                                      }}
                                    />
                                  )}
                                </div>
                              </div>
                            </div>
                            <div className="flex items-center justify-between mt-1 gap-3">
                              <p className="text-[12px] text-[#8E8E93] truncate flex-1">{dialog.lastMessage}</p>
                              <span className="text-[10px] text-[#9CA3AF] whitespace-nowrap">{dialog.time}</span>
                            </div>
                          </div>
                        </div>
                        
                        {/* Кнопки действий */}
                        {/* Кнопка "Взять диалог" - показывается для всех ролей на активные и ожидающие диалоги */}
                        {(dialog.status === 'active' || dialog.status === 'waiting') && (
                          <>
                            {dialog.canTakeover && !dialog.assignedTo ? (
                              <button 
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleTakeoverDialog(dialog.id);
                                }}
                                className="mt-[6px] h-[34px] px-4 bg-[#36C76A] text-white rounded-[10px] hover:bg-[#2BA855] transition-colors"
                                style={BUTTON_STYLES.blueButton}
                              >
                                Взять диалог
                              </button>
                            ) : dialog.assignedTo && dialog.assignedTo !== currentUser?.id ? (
                              <button 
                                disabled
                                className="mt-[6px] h-[34px] px-4 bg-gray-300 text-gray-500 rounded-[10px] cursor-not-allowed"
                              >
                                Занят оператором
                              </button>
                            ) : dialog.assignedTo === currentUser?.id ? (
                              <button 
                                disabled
                                className="mt-[6px] h-[34px] px-4 bg-[#0084FF] text-white rounded-[10px] cursor-default"
                              >
                                Ваш диалог
                              </button>
                            ) : null}
                          </>
                        )}
                        
                      </div>
                    </div>
                  ))
                  )}
                </div>
              </div>

                             {/* Центральная панель - детальный вид диалога */}
              <div className="col-span-5 bg-[#F8F8FA] rounded-[0px] flex flex-col h-full min-h-0 overflow-hidden" style={{ borderLeft: '1px solid #E5E6E7' }}>
                {selectedDialog ? (
                  <>
                        <div className="px-4 pt-3 pb-3 border-b border-[#E5E7EB]">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                              <div className="w-[20px] h-[20px] bg-[#F3F4F6] rounded-[90px] flex items-center justify-center overflow-hidden">
                             {selectedDialog.source === 'widget' && <img src="/Group 102.svg" alt="Widget" className="w-full h-full" />}
                             {selectedDialog.source === 'telegram' && <img src="/Group 38.svg" alt="Telegram" className="w-full h-full" />}
                             {selectedDialog.source === 'whatsapp' && <img src="/Group 37.svg" alt="WhatsApp" className="w-full h-full" />}
                             {selectedDialog.source === 'vk' && <img src="/Group 39.svg" alt="VK" className="w-full h-full" />}
          </div>
                        <div>
                            <div className="flex items-center gap-2">
                              <h3 className="font-[500] text-[16px] text-[#070F1A]">
                                {selectedDialog.phone || selectedDialog.email || `Обращение №${selectedDialog.id.substring(0, 8)}`}
                              </h3>
                            </div>
                        </div>
                      </div>
                        <div className="flex items-center justify-end">
                          <button 
                            onClick={(e) => { 
                              e.stopPropagation(); 
                              setDialogToClose(selectedDialog.id);
                              setShowCloseDialogPopup(true);
                            }}
                            className="h-[30px] px-3 bg-white border border-[#E5E6E7] text-[#0084FF] rounded-[10px] text-[13px] font-[500] hover:opacity-90 transition-colors"
                          >
                            Завершить
                          </button>
                        </div>
                      </div>
                    </div>
                    
                    <div className="overflow-y-auto p-4 flex-1" ref={dialogChatRef}>
                      <VirtualizedMessageList
                        messages={selectedDialog.messages || []}
                        getMessageAlignment={getMessageAlignment}
                        getMessageOrder={getMessageOrder}
                        getMessageStyle={getMessageStyle}
                        getMessageFooter={getMessageFooter}
                        aiAgentName={aiAgentName}
                        containerRef={dialogChatRef}
                      />
                    </div>
                    
                    <div className="p-4 pb-4 border-t border-[#E5E7EB]" style={{ paddingTop: '14px', paddingBottom: '3px', paddingRight: '5px', paddingLeft: '14px' }}>
                      {/* Плашка "Вступить в диалог" - поверх поля ввода */}
                      {selectedDialog && (selectedDialog.status === 'active' || selectedDialog.status === 'waiting') && (showJoinDialogPlaque || selectedDialog.need_handover === true) && (
                      <div className="rounded-[15px] p-0" style={{ background: 'rgba(255,255,255,0.05)', backdropFilter: 'blur(40px)' }}>
                        <div className="p-4 flex flex-col items-center gap-2" style={{ paddingTop: '0px !important', paddingBottom: '14px !important' }}>
                          <div className="flex items-center gap-2">
                            {/* Иконка Frame 2085.svg */}
                            <img src="/Frame 2085.svg" alt="Frame 2085" className="w-6 h-6" />
                            
                            {/* Анимированные кружки */}
                            <div className="flex items-center gap-[2px]">
                              <div className="w-[5px] h-[5px] rounded-full bg-[#8E8E93] opacity-[0.25] animate-pulse-1"></div>
                              <div className="w-[5px] h-[5px] rounded-full bg-[#8E8E93] opacity-[0.5] animate-pulse-2"></div>
                              <div className="w-[5px] h-[5px] rounded-full bg-[#8E8E93] opacity-[1] animate-pulse-3"></div>
                            </div>
                            
                            {/* Иконка Frame 2086.svg */}
                            <img src="/Frame 2086.svg" alt="Frame 2086" className="w-6 h-6" />
                          </div>
                          <h4 className="text-[14px] text-[#070F1A] font-[500]">Перехватить разговор</h4>
                          <p className="text-[12px] text-center" style={{ color: '#8E8E93' }}>Если вы нажмете на кнопку, то ИИ остановит свою работу в чате</p>
                          <button
                              onClick={() => handleJoinDialog(selectedDialog.id)}
                            className="h-[34px] w-[160px] bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors flex items-center justify-center mt-[10px]"
                            style={BUTTON_STYLES.blueButton}
                            >
                              Вступить в диалог
                            </button>
                          </div>
                        </div>
                      )}
                      
                      {/* Поле ввода - показывается только для диалогов оператора */}
                      {selectedDialog && selectedDialog.status === 'taken' && selectedDialog.assignedTo === (currentUser?.id || 'current_operator') && (
                        <div className="relative">
                          <textarea
                            placeholder="Введите сообщение..."
                            value={messageText}
                            onChange={(e) => setMessageText(e.target.value)}
                            onKeyDown={(e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); handleSendDialogMessage(); } }}
                            className="w-full min-h-[96px] resize-none rounded-[12px] border-0 p-0 pr-[70px] focus:outline-none focus:ring-0 text-[14px] text-[#070F1A] bg-[#F8F8FA]"
                            style={{ borderLeftWidth: 0, borderTopWidth: 0, borderBottomWidth: 0, borderRightWidth: 0, paddingLeft: 0, paddingTop: 0, paddingBottom: 0, paddingRight: '70px' }}
                          />
                          <div className="absolute right-2 bottom-2 flex items-center gap-0" style={{ marginBottom: '0px', marginLeft: '0px', paddingLeft: '0px' }}>
                          <button 
                            onClick={handleChatFileUpload}
                              className="w-[32px] h-[32px] flex items-center justify-center transition-colors"
                          >
                              <img src="/paperclip.svg" alt="Вложения" className="w-[18px] h-[18px]" />
                          </button>
                          <button 
                            onClick={handleSendDialogMessage}
                            className="w-[32px] h-[32px] bg-[#0084FF] rounded-[90px] flex items-center justify-center cursor-pointer disabled:bg-[#070F1A] disabled:bg-opacity-10 disabled:cursor-not-allowed transition-colors"
                            disabled={!messageText.trim()}
                          >
                            <img 
                              src="/Frame 118.svg" 
                          alt="Отправить" 
                              className={`w-3 h-3 ${!messageText.trim() ? 'opacity-60' : ''}`}
                        />
                          </button>
                        </div>
                        </div>
                      )}
                    </div>
                  </>
                ) : (
                  <div className="flex-1 flex items-center justify-center">
                    <div className="text-center">
                      <span
                        className="w-8 h-8 mx-auto mb-3 inline-block"
                        style={{
                          backgroundColor: '#0084FF',
                          WebkitMaskImage: 'url(/dialog.svg)',
                          maskImage: 'url(/dialog.svg)',
                          WebkitMaskRepeat: 'no-repeat',
                          maskRepeat: 'no-repeat',
                          WebkitMaskSize: 'contain',
                          maskSize: 'contain',
                          WebkitMaskPosition: 'center',
                          maskPosition: 'center'
                        }}
                        role="img"
                        aria-label="Пока нет диалогов"
                      ></span>
                      <h3 className="text-[20px] font-[500] mb-2" style={{ color: '#8E8E93', opacity: 0.7 }}>Пока нет диалогов</h3>
                      <p className="text-[14px] text-[#8E8E93] text-center mb-6" style={{ width: '370px', opacity: 0.7 }}>
                        Когда клиенты начнут общаться с вашим ИИ-агентом, диалоги появятся здесь
                      </p>
                      <div className="flex flex-col gap-3 justify-center">
                        <button 
                          className="bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors h-[34px]"
                          style={BUTTON_STYLES.blueButton}
                        >
                          Настроить виджет
                        </button>
                        <button 
                          className="text-[#070F1A] rounded-[10px] hover:bg-[#F9FAFB] transition-colors h-[34px]"
                          style={BUTTON_STYLES.whiteButton}
                        >
                          Протестировать ИИ
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </div>

                             {/* Правая панель - информация о диалоге */}
                              <div className="col-span-3 bg-[#F8F8FA] rounded-[0px] flex flex-col h-full min-h-0 overflow-hidden" style={{ borderLeft: '1px solid #E5E6E7' }}>
                {selectedDialog ? (
                    <div className="p-4 overflow-y-auto flex-1 space-y-6">
                      <h3 className="font-[500] text-[16px] text-[#070F1A] mb-4">Информация о клиенте</h3>
                      
                      {/* Информация */}
                      <div>
                        <div className="space-y-3">
                          <div className="grid items-center gap-2" style={{ gridTemplateColumns: '115px 1fr' }}>
                            <p className="text-[12px] text-[#8E8E93]">Источник</p>
                            <div className="flex items-center gap-2">
                              <div className="w-[16px] h-[16px] bg-[#F3F4F6] rounded-[90px] flex items-center justify-center">
                                {selectedDialog.source === 'widget' && <img src="/Group 102.svg" alt="Widget" className="w-full h-full" />}
                                {selectedDialog.source === 'telegram' && <img src="/Group 38.svg" alt="Telegram" className="w-full h-full" />}
                                {selectedDialog.source === 'whatsapp' && <img src="/Group 37.svg" alt="WhatsApp" className="w-full h-full" />}
                                {selectedDialog.source === 'vk' && <img src="/Group 39.svg" alt="VK" className="w-full h-full" />}
                              </div>
                              <span className="text-[12px] text-[#070F1A] capitalize font-[500]">
                                {selectedDialog.source === 'vk' ? 'Вконтакте' : selectedDialog.source}
                              </span>
                            </div>
                          </div>
                          
                          <div className="grid items-center gap-2" style={{ gridTemplateColumns: '115px 1fr' }}>
                            <p className="text-[12px] text-[#8E8E93]">Статус</p>
                            <div className="flex items-center gap-2">
                              {selectedDialog.status === 'waiting' || selectedDialog.status === 'active' || selectedDialog.status === 'taken' ? (
                                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                  <path d="M20.25 12C20.25 7.44365 16.5563 3.75 12 3.75C7.44365 3.75 3.75 7.44365 3.75 12C3.75 16.5563 7.44365 20.25 12 20.25C16.5563 20.25 20.25 16.5563 20.25 12ZM21.75 12C21.75 17.3848 17.3848 21.75 12 21.75C6.61522 21.75 2.25 17.3848 2.25 12C2.25 6.61522 6.61522 2.25 12 2.25C17.3848 2.25 21.75 6.61522 21.75 12Z" fill={selectedDialog.status === 'waiting' ? '#FFCE52' : '#05D560'} />
                                  <path d="M11.5 6C11.5 5.44772 11.9495 4.99353 12.4975 5.06216C14.1184 5.26514 15.634 5.95891 16.8033 7.05025C18.2098 8.36301 19 10.1435 19 12C19 13.8565 18.2098 15.637 16.8033 16.9497C15.634 18.0411 14.1184 18.7349 12.4975 18.9378C11.9495 19.0065 11.5 18.5523 11.5 18L11.5 12L11.5 6Z" fill={selectedDialog.status === 'waiting' ? '#FFCE52' : '#05D560'} />
                                </svg>
                              ) : (
                                <svg width="18" height="18" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                  <g>
                                    <circle cx="8" cy="8" r="6" fill="#0084FF" />
                                    <path d="M5.5 8.5 L7.5 10.5 L11 6.5" stroke="white" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                                  </g>
                                </svg>
                              )}
                              <span className="text-[12px] text-[#070F1A] leading-[16px] font-[500]">
                                {selectedDialog.status === 'waiting' ? 'Ожидает' :
                                 selectedDialog.status === 'active' || selectedDialog.status === 'taken' ? 'Активный' :
                                 selectedDialog.status === 'resolved' || selectedDialog.status === 'resolved_by_operator' || selectedDialog.status === 'closed' ? 'Закрыт' : 'Активный'}
                              </span>
                            </div>
                          </div>

                          <div className="grid items-center gap-2" style={{ gridTemplateColumns: '115px 1fr' }}>
                            <p className="text-[12px] text-[#8E8E93]">Приоритет</p>
                            <div className="flex items-center gap-2">
                              <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                                {(() => {
                                  const p = (selectedDialog.priority || 'low');
                                  const inactive = 'rgba(7,15,26,0.2)';
                                  const isHigh = p === 'high' || p === 'urgent';
                                  const isMedium = p === 'medium';
                                  const c1 = isHigh ? '#FF3B30' : isMedium ? '#FFCE52' : '#05D560';
                                  const c2 = isHigh ? '#FF3B30' : isMedium ? '#FFCE52' : inactive;
                                  const c3 = isHigh ? '#FF3B30' : inactive;
                                  const f1 = p === 'low' ? '#05D560' : c1;
                                  const f2 = p === 'low' ? inactive : c2;
                                  const f3 = p === 'low' ? inactive : c3;
                                  return (
                                    <g>
                                      <rect x="1" y="8" width="4" height="6" rx="1" fill={f1}></rect>
                                      <rect x="6" y="4" width="4" height="10" rx="1" fill={f2}></rect>
                                      <rect x="11" y="1" width="4" height="13" rx="1" fill={f3}></rect>
                                    </g>
                                  );
                                })()}
                              </svg>
                              <span className="text-[12px] text-[#070F1A] leading-[16px] font-[500]">
                                {selectedDialog.priority === 'high' ? 'Высокий' :
                                 selectedDialog.priority === 'medium' ? 'Средний' : 'Низкий'}
                              </span>
                            </div>
                          </div>

                          <div className="grid items-center gap-2" style={{ gridTemplateColumns: '115px 1fr' }}>
                            <p className="text-[12px] text-[#8E8E93]">Ответственный</p>
                            <div className="flex items-center gap-2">
                              <div className="rounded-full flex items-center justify-center" style={{ width: '16px', height: '16px', backgroundColor: selectedDialog.status === 'taken' ? '#A684FF' : 'transparent' }}>
                                {selectedDialog.status === 'taken' ? (
                                  <img src="/headphone.svg" alt="Оператор" className="w-[10px] h-[10px]" style={{ filter: 'brightness(0) invert(1)' }} />
                                ) : (
                                  <span
                                    className="w-[16px] h-[16px] inline-block"
                                    style={{
                                      backgroundColor: '#0084FF',
                                      WebkitMaskImage: 'url(/aiii.svg)',
                                      maskImage: 'url(/aiii.svg)',
                                      WebkitMaskRepeat: 'no-repeat',
                                      maskRepeat: 'no-repeat',
                                      WebkitMaskSize: 'contain',
                                      maskSize: 'contain',
                                      WebkitMaskPosition: 'center',
                                      maskPosition: 'center'
                                    }}
                                  />
                                )}
                              </div>
                              <span className="text-[12px] text-[#070F1A] font-[500]">
                                {selectedDialog.status === 'taken' ? 
                                 (selectedDialog.assignedTo === (currentUser?.id || 'current_operator') ? 'Оператор (Вы)' : 'Оператор') : 
                                 'ИИ-агент'}
                              </span>
                            </div>
                          </div>

                          <div className="grid items-center gap-2" style={{ gridTemplateColumns: '115px 1fr' }}>
                            <p className="text-[12px] text-[#8E8E93]">Начало диалога</p>
                            <span className="text-[12px] text-[#070F1A] font-[500]">
                              {selectedDialog.createdAt ? new Date(selectedDialog.createdAt).toLocaleString() : (selectedDialog.startTime || '—')}
                            </span>
                          </div>

                          <div className="grid items-center gap-2" style={{ gridTemplateColumns: '115px 1fr' }}>
                            <p className="text-[12px] text-[#8E8E93]">Конец диалога</p>
                            <span className="text-[12px] text-[#070F1A] font-[500]">
                              {selectedDialog.updatedAt ? new Date(selectedDialog.updatedAt).toLocaleString() : (selectedDialog.endTime || '—')}
                            </span>
                          </div>
                        </div>
                      </div>

                      {/* Разделитель */}
                      <div className="border-t border-[#E5E7EB] my-4"></div>

                      {/* Контакты */}
                      <div>
                        <div className="space-y-3">
                          <div className="grid items-center gap-2" style={{ gridTemplateColumns: '115px 1fr' }}>
                            <p className="text-[12px] text-[#8E8E93]">Имя</p>
                            {selectedDialog.name && dialogEditingField !== 'name' ? (
                              <span className="text-[12px] text-[#070F1A] font-[500]">{selectedDialog.name}</span>
                            ) : dialogEditingField === 'name' ? (
                              <input
                                type="text"
                                value={dialogEditingValue}
                                onChange={(e) => setDialogEditingValue(e.target.value)}
                                placeholder="Иван Иванов"
                                className="text-[12px] text-[#070F1A] bg-transparent border-none outline-none p-0 w-full"
                                autoFocus
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    saveDialogEdit();
                                  } else if (e.key === 'Escape') {
                                    e.preventDefault();
                                    cancelDialogEdit();
                                  }
                                }}
                                onBlur={(e) => {
                                  e.preventDefault();
                                  e.stopPropagation();
                                  saveDialogEdit();
                                }}
                              />
                            ) : (
                              <button 
                                className="text-[12px] text-[#8E8E93] flex items-center cursor-text focus:outline-none bg-transparent border-none p-0"
                                onClick={(e) => { 
                                  e.preventDefault();
                                  e.stopPropagation();
                                  startDialogEdit('name', '');
                                }}
                              >
                                <span className="text-[18px]" style={{ fontWeight: 300, marginBottom: '2px', marginRight: '4px' }}>+</span> Добавить
                              </button>
                            )}
                          </div>

                          <div className="grid items-center gap-2" style={{ gridTemplateColumns: '115px 1fr' }}>
                            <p className="text-[12px] text-[#8E8E93]">Телефон</p>
                            {selectedDialog.phone && dialogEditingField !== 'phone' ? (
                              <span className="text-[12px] text-[#070F1A] font-[500]">{selectedDialog.phone}</span>
                            ) : dialogEditingField === 'phone' ? (
                              <input
                                type="tel"
                                value={dialogEditingValue}
                                onChange={(e) => setDialogEditingValue(e.target.value)}
                                placeholder="+7 (999) 123-45-67"
                                className="text-[12px] text-[#070F1A] bg-transparent border-none outline-none p-0 w-full"
                                autoFocus
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    saveDialogEdit();
                                  } else if (e.key === 'Escape') {
                                    e.preventDefault();
                                    cancelDialogEdit();
                                  }
                                }}
                                onBlur={(e) => {
                                  e.preventDefault();
                                  e.stopPropagation();
                                  saveDialogEdit();
                                }}
                              />
                            ) : (
                              <button 
                                className="text-[12px] text-[#8E8E93] flex items-center cursor-text focus:outline-none bg-transparent border-none p-0"
                                onClick={(e) => { 
                                  e.preventDefault();
                                  e.stopPropagation();
                                  startDialogEdit('phone', '');
                                }}
                              >
                                <span className="text-[18px]" style={{ fontWeight: 300, marginBottom: '2px', marginRight: '4px' }}>+</span> Добавить
                              </button>
                            )}
                          </div>

                          <div className="grid items-center gap-2" style={{ gridTemplateColumns: '115px 1fr' }}>
                            <p className="text-[12px] text-[#8E8E93]">Почта</p>
                            {selectedDialog.email && dialogEditingField !== 'email' ? (
                              <span className="text-[12px] text-[#070F1A] font-[500]">{selectedDialog.email}</span>
                            ) : dialogEditingField === 'email' ? (
                              <input
                                type="email"
                                value={dialogEditingValue}
                                onChange={(e) => setDialogEditingValue(e.target.value)}
                                placeholder="ivan@example.com"
                                className="text-[12px] text-[#070F1A] bg-transparent border-none outline-none p-0 w-full"
                                autoFocus
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    saveDialogEdit();
                                  } else if (e.key === 'Escape') {
                                    e.preventDefault();
                                    cancelDialogEdit();
                                  }
                                }}
                                onBlur={(e) => {
                                  e.preventDefault();
                                  e.stopPropagation();
                                  saveDialogEdit();
                                }}
                              />
                            ) : (
                              <button 
                                className="text-[12px] text-[#8E8E93] flex items-center cursor-text focus:outline-none bg-transparent border-none p-0"
                                onClick={(e) => { 
                                  e.preventDefault();
                                  e.stopPropagation();
                                  startDialogEdit('email', '');
                                }}
                              >
                                <span className="text-[18px]" style={{ fontWeight: 300, marginBottom: '2px', marginRight: '4px' }}>+</span> Добавить
                              </button>
                            )}
                          </div>

                          <div className="grid items-center gap-2" style={{ gridTemplateColumns: '120px 1fr' }}>
                            <p className="text-[12px] text-[#8E8E93]">Адрес</p>
                            {selectedDialog.address && dialogEditingField !== 'address' ? (
                              <span className="text-[12px] text-[#070F1A] font-[500]">{selectedDialog.address}</span>
                            ) : dialogEditingField === 'address' ? (
                              <input
                                type="text"
                                value={dialogEditingValue}
                                onChange={(e) => setDialogEditingValue(e.target.value)}
                                placeholder="Москва"
                                className="text-[12px] text-[#070F1A] bg-transparent border-none outline-none p-0 w-full"
                                autoFocus
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    saveDialogEdit();
                                  } else if (e.key === 'Escape') {
                                    e.preventDefault();
                                    cancelDialogEdit();
                                  }
                                }}
                                onBlur={(e) => {
                                  e.preventDefault();
                                  e.stopPropagation();
                                  saveDialogEdit();
                                }}
                              />
                            ) : (
                              <button 
                                className="text-[12px] text-[#8E8E93] flex items-center cursor-text focus:outline-none bg-transparent border-none p-0"
                                style={{ marginLeft: '-2px' }}
                                onClick={(e) => { 
                                  e.preventDefault();
                                  e.stopPropagation();
                                  startDialogEdit('address', '');
                                }}
                              >
                                <span className="text-[18px]" style={{ fontWeight: 300, marginBottom: '2px', marginRight: '4px' }}>+</span> Добавить
                              </button>
                            )}
                          </div>

                          <div className="grid items-center gap-2" style={{ gridTemplateColumns: '120px 1fr' }}>
                            <p className="text-[12px] text-[#8E8E93]">Компания</p>
                            {selectedDialog.company && dialogEditingField !== 'company' ? (
                              <span className="text-[12px] text-[#070F1A] font-[500]">{selectedDialog.company}</span>
                            ) : dialogEditingField === 'company' ? (
                              <input
                                type="text"
                                value={dialogEditingValue}
                                onChange={(e) => setDialogEditingValue(e.target.value)}
                                placeholder='ООО "АгроСтрой"'
                                className="text-[12px] text-[#070F1A] bg-transparent border-none outline-none p-0 w-full"
                                autoFocus
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    saveDialogEdit();
                                  } else if (e.key === 'Escape') {
                                    e.preventDefault();
                                    cancelDialogEdit();
                                  }
                                }}
                                onBlur={(e) => {
                                  e.preventDefault();
                                  e.stopPropagation();
                                  saveDialogEdit();
                                }}
                              />
                            ) : (
                              <button 
                                className="text-[12px] text-[#8E8E93] flex items-center cursor-text focus:outline-none bg-transparent border-none p-0"
                                style={{ marginLeft: '-2px' }}
                                onClick={(e) => { 
                                  e.preventDefault();
                                  e.stopPropagation();
                                  startDialogEdit('company', '');
                                }}
                              >
                                <span className="text-[18px]" style={{ fontWeight: 300, marginBottom: '2px', marginRight: '4px' }}>+</span> Добавить
                              </button>
                            )}
                          </div>

                          {/* Dialog ID */}
                          <div className="space-y-1">
                            <p className="text-[12px] text-[#8E8E93]">Dialog ID</p>
                            <span className="text-[12px] text-[#8E8E93] font-[500] font-mono">{selectedDialog.id}</span>
                          </div>

                          <div className="grid gap-2" style={{ gridTemplateColumns: '115px 1fr' }}>
                            <p className="text-[12px] text-[#8E8E93] col-span-1">Заметки</p>
                            <div className="col-span-2" style={{ gridColumn: '1 / -1' }}>
                              {dialogEditingField === 'notes' ? (
                                <textarea
                                  value={dialogEditingValue}
                                  onChange={(e) => setDialogEditingValue(e.target.value)}
                                  placeholder="Заметка"
                                  className="text-[12px] text-[#070F1A] bg-transparent border-none outline-none p-0 w-full resize-none"
                                  rows={3}
                                  autoFocus
                                  onKeyDown={(e) => {
                                    if (e.key === 'Enter') {
                                      e.preventDefault();
                                      e.stopPropagation();
                                      saveDialogEdit();
                                    } else if (e.key === 'Escape') {
                                      e.preventDefault();
                                      cancelDialogEdit();
                                    }
                                  }}
                                  onBlur={(e) => {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    saveDialogEdit();
                                  }}
                                />
                              ) : selectedDialog.notes ? (
                                <div
                                  className="text-[12px] text-[#070F1A] font-[500] whitespace-pre-wrap cursor-text"
                                  onClick={(e) => {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    startDialogEdit('notes', selectedDialog.notes || '');
                                  }}
                                >
                                  {selectedDialog.notes}
                                </div>
                              ) : (
                                <button
                                  className="text-[12px] text-[#8E8E93] flex items-center cursor-text focus:outline-none bg-transparent border-none p-0"
                                  onClick={(e) => { 
                                    e.preventDefault();
                                    e.stopPropagation();
                                    startDialogEdit('notes', '');
                                  }}
                                >
                                  <span className="text-[18px]" style={{ fontWeight: 300, marginBottom: '2px', marginRight: '4px' }}>+</span> Добавить
                              </button>
                            )}
                          </div>

                        </div>
                      </div>
                        </div>
                      {/* скрыто по требованию: Сообщений/Начало/Последняя активность */}
                      </div>
                ) : (
                    <div className="flex flex-col items-center justify-center h-full py-12">
                  </div>
                )}
            
                  {/* Кнопки внизу */}
                  {selectedDialog && (
                    <div className="p-4 border-t border-[#E5E7EB] space-y-3">
                      {/* Кнопки действий */}
                      <div className="flex gap-2">
                        <button 
                          onClick={() => exportDialogToText(selectedDialog)}
                          className="flex-1 h-[34px] bg-[#F3F4F6] text-[#070F1A] hover:bg-[#E5E7EB] rounded-[10px] text-[14px] font-[500] transition-colors flex items-center justify-center gap-2"
                        >
                          <svg width="16" height="16" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M10 0.500244C15.2467 0.500244 19.5 4.75354 19.5 10.0002C19.5 15.2469 15.2467 19.5002 10 19.5002C4.75329 19.5002 0.5 15.2469 0.5 10.0002C0.5 4.75354 4.75329 0.500244 10 0.500244ZM10.5312 5.18384C10.2567 4.90956 9.82182 4.89203 9.52734 5.13208L9.4707 5.18384L6.04199 8.61255C5.74926 8.90535 5.7494 9.3802 6.04199 9.6731C6.33487 9.9659 6.80966 9.9659 7.10254 9.6731L9.25098 7.52466V14.2854C9.25098 14.6996 9.58683 15.0353 10.001 15.0354C10.4151 15.0353 10.751 14.6996 10.751 14.2854V7.52466L12.8994 9.6731C13.1923 9.96578 13.6671 9.96592 13.96 9.6731C14.2526 9.38026 14.2526 8.90539 13.96 8.61255L10.5312 5.18384Z" fill="#0084FF"/>
                          </svg>
                        </button>
                        <button 
                          onClick={() => {
                            setDialogToDelete(selectedDialog.id);
                            setShowDeleteDialogPopup(true);
                          }}
                          className="flex-1 h-[34px] bg-[#FEF2F2] text-[#EF4444] hover:bg-[#FEE2E2] rounded-[10px] text-[14px] font-[500] transition-colors flex items-center justify-center gap-2"
                        >
                          <img src="/traash.svg" alt="Удалить" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(346deg) brightness(104%) contrast(97%)' }} />
                        </button>
                      </div>
                      
                      {/* Кнопка "Добавить в CRM" - показывается если диалог не был автоматически добавлен в CRM */}
                      {!selectedDialog.isAddedToCRM && (selectedDialog.email || selectedDialog.phone) && (
                        <Button 
                          onClick={() => createDealFromDialog(selectedDialog)}
                          variant="outline" 
                          size="sm" 
                          className="w-full h-[34px] bg-[#0084FF] border-none text-white hover:bg-[#0073E6] rounded-[10px] font-[500] text-[14px] transition-colors"
                        >
                          Добавить в CRM
                        </Button>
                      )}
                    </div>
                  )}

              </div>
            </div>
          </div>
        );

      case 'my-adapto':
        return (
          <div className="flex flex-col h-full">
            {/* Заголовок и разделитель */}
            <div className="flex items-center justify-between mb-[16px]">
              <h1 className="text-[20px] font-[500] text-[#070F1A]">Тестирование</h1>
              
            </div>
            <div className="border-b mb-0 mt-0" style={{ borderColor: '#E5E6E7', marginTop: 0, marginLeft: '-16px', marginRight: '-16px' }}></div>

            {/* Основная площадь для контента */}
            <div className="flex gap-0 items-stretch flex-1 min-h-0 -mb-4" style={{ marginLeft: 0, marginRight: 0 }}>
              {/* Левый контейнер - поле для правок */}
              <div className="flex-1 bg-[#F8F8FA] rounded-none flex flex-col h-full overflow-y-auto" style={{ paddingTop: 0, paddingRight: 0, paddingBottom: 0, paddingLeft: 0, marginLeft: 0, marginRight: '16px', marginTop: '16px' }}>

                {/* Заголовок "Корректировки" и кнопки */}
                <div className="flex items-center justify-between mb-[30px]">
                  <div className="flex items-center gap-3">
                  <h3 className="text-[18px] font-[500] text-[#070F1A]">Корректировки</h3>
                    {selectedCorrections.size > 0 && (
                      <span className="text-[14px] text-[#8E8E93]">Выбрано: {selectedCorrections.size}</span>
                    )}
                  </div>
                  <div className="flex items-center gap-2">
                    {/* Кнопка обновления всех корректировок */}
                    <button 
                      onClick={async () => {
                        // Реальная логика для обновления всех корректировок
                        setIsUpdatingCorrections(true);
                        showNotificationMessage('Обновление корректировок...');
                        
                        try {
                          // Перезагружаем корректировки из Supabase
                          if (currentUser?.id) {
                            const updatedCorrections = await botCorrectionsAPI.getCorrections(currentUser.id);
                            setBotCorrections(updatedCorrections);
                            console.log('Корректировки обновлены из базы данных:', updatedCorrections);
                            showNotificationMessage('Корректировки обновлены и применены к ИИ агенту');
                          } else {
                            console.error('No current user ID available');
                            showNotificationMessage('Ошибка: пользователь не найден');
                          }
                        } catch (error) {
                          console.error('Ошибка при обновлении корректировок:', error);
                          showNotificationMessage('Ошибка при обновлении корректировок');
                        } finally {
                          setIsUpdatingCorrections(false);
                        }
                      }}
                      className="h-[32px] px-3 text-[#8E8E93] hover:bg-[#F2F3F4] hover:text-[#070F1A] rounded-[10px] transition-colors flex items-center justify-center gap-2 group"
                      style={BUTTON_STYLES.whiteButton}
                    >
                      <img 
                        src="/arrow-refresh-02.svg" 
                        alt="Обновить" 
                        className={`w-[14px] h-[14px] transition-transform duration-200 ${isUpdatingCorrections ? 'animate-spin' : ''} [filter:brightness(0)_saturate(100%)_invert(59%)_sepia(2%)_saturate(0%)_hue-rotate(217deg)_brightness(92%)_contrast(89%)] group-hover:[filter:none]`} 
                      />
                      Обновить
                    </button>
                    
                    {selectedCorrections.size > 0 && (
                      <>
                        <button 
                          onClick={() => setShowDeleteConfirmModal(true)}
                          className="h-[32px] px-3 bg-[#FEF2F2] text-[#FF0D0D] hover:text-[#FF0D0D] hover:bg-[#FEF2F2] rounded-[10px] transition-colors flex items-center justify-center gap-2"
                          style={BUTTON_STYLES.whiteButton}
                        >
                          <img src="/traash.svg" alt="Удалить" className="w-4 h-4" />
                          Удалить
                        </button>
                      </>
                    )}
                  <button 
                    onClick={() => setShowAddCorrectionForm(!showAddCorrectionForm)}
                      className="h-[32px] px-3 bg-[#0084FF] rounded-[10px] text-white hover:bg-[#0073E6] transition-colors flex items-center justify-center gap-1"
                      style={BUTTON_STYLES.blueButton}
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                    Добавить
                  </button>
                  </div>
                </div>

                {/* Убрали горизонтальный разделитель */}

                {/* Секция с корректировками */}
                <div className="space-y-3 mb-[15px]">
                  {/* Динамические корректировки */}
                  {botCorrections.map((correction, index) => (
                    <div key={index} className={`flex items-center p-3 rounded-[15px] transition-colors cursor-pointer ${
                      selectedCorrections.has(index) ? 'bg-[#F9FAFB]' : 'hover:bg-[#F2F3F4]'
                    }`}>
                      {/* Левая часть - кнопка выделения */}
                      <div className="w-4 mr-4">
                        <img 
                          src={selectedCorrections.has(index) ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                          alt="Выбрать" 
                          className="w-4 h-4 cursor-pointer" 
                          onClick={() => toggleCorrectionSelection(index)}
                        />
                      </div>
                      {/* Центральная часть - описание */}
                      <div className="flex-1">
                        <span className="text-[#070F1A] font-medium text-[14px]">{correction.correction || correction}</span>
                      </div>
                      {/* Правая часть - переключатель активности */}
                      <div className="flex items-center gap-2 ml-4">
                        <img 
                          src={activeCorrections.has(index) ? "/iOS/Switch-1.svg" : "/iOS/Switch.svg"} 
                          alt="Активность" 
                          className="w-[34px] h-[34px] cursor-pointer" 
                          onClick={() => toggleCorrectionActivity(index)}
                        />
                      </div>
                    </div>
                  ))}

                  {/* Форма добавления корректировки - показывается в конце списка */}
                  {showAddCorrectionForm && (
                    <div className={`flex items-center p-3 rounded-[10px] transition-colors cursor-pointer bg-[#F9FAFB]`}>
                      {/* Левая часть - кнопка выделения */}
                      <div className="w-4 mr-4">
                        <img 
                          src="/Checkbox-1.svg" 
                          alt="Выбрать" 
                          className="w-4 h-4 cursor-pointer" 
                        />
                      </div>
                      {/* Центральная часть - описание */}
                      <div className="flex-1">
                        <input
                          type="text"
                          value={newCorrectionText}
                          onChange={(e) => setNewCorrectionText(e.target.value)}
                          placeholder="Введите корректировку..."
                          className="w-full h-[34px] px-3 border-none bg-transparent text-[#070F1A] text-[14px] focus:outline-none focus:ring-0 focus:border-transparent"
                          onKeyPress={(e) => e.key === 'Enter' && handleAddCorrection()}
                        />
                      </div>
                      {/* Правая часть - кнопки */}
                      <div className="flex items-center gap-2 ml-4">
                        <button
                          onClick={handleAddCorrection}
                          disabled={isAddingCorrection}
                          className={`h-[32px] px-4 rounded-[10px] transition-colors flex items-center justify-center ${
                            isAddingCorrection 
                              ? 'bg-[#0084FF]/50 text-white cursor-not-allowed' 
                              : 'bg-[#0084FF] text-white hover:bg-[#0073E6]'
                          }`}
                          style={!isAddingCorrection ? BUTTON_STYLES.blueButton : { fontSize: '13px', fontWeight: '500' }}
                        >
                          {isAddingCorrection ? 'Сохранение...' : 'Сохранить'}
                        </button>
                        <button 
                          onClick={() => setShowAddCorrectionForm(false)}
                          className="w-[32px] h-[32px] flex items-center justify-center text-[#8E8E93] hover:text-[#070F1A] transition-colors"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  )}

                </div>


              </div>

              {/* Правый контейнер - диалоговое окно */}
              <div className="w-[400px] bg-[#F8F8FA] rounded-none p-4 flex flex-col border border-[#E5E7EB] border-t-0 h-full overflow-y-auto -mr-4" style={{ flexShrink: 0, paddingLeft: 0, paddingRight: 0, marginRight: '-16px' }}>
                {/* Заголовок "Тестирование" */}
                <div className="flex items-center justify-between mb-4" style={{ paddingLeft: '16px', paddingRight: '16px' }}>
                  <div className="flex items-center gap-2">
                    <h2 className="text-[18px] font-[500] text-[#070F1A]">Чат</h2>
                  </div>
                  <button 
                    onClick={async () => {
                      if (currentUser?.id) {
                        try {
                          setIsUpdatingDialog(true);
                          console.log('Attempting to clear chat history for user:', currentUser.id);
                          const result = await chatHistoryAPI.clearChatHistory(currentUser.id);
                          console.log('Clear chat history result:', result);
                          
                          if (result) {
                            setChatHistory([
                              { type: 'assistant', text: 'Привет! Я ваш ИИ-ассистент Adapto. Как дела?', time: 'Только что', timestamp: Date.now() }
                            ]);
                            showNotificationMessage('История чата очищена');
                            // Прокручиваем к низу после очистки
                            ChatUtils.scrollToBottom(chatHistoryRef);
                          } else {
                            showNotificationMessage('Ошибка при очистке истории');
                          }
                        } catch (error) {
                          console.error('Error clearing chat history:', error);
                          showNotificationMessage('Ошибка при очистке истории: ' + error.message);
                        } finally {
                          setIsUpdatingDialog(false);
                        }
                      } else {
                        console.error('No current user ID available');
                        showNotificationMessage('Ошибка: пользователь не найден');
                      }
                    }}
                    className="w-[32px] h-[32px] bg-[#FFFFFF] rounded-[90px] flex items-center justify-center hover:bg-gray-100 transition-colors"
                    title="Обновить диалог"
                  >
                    <img 
                      src="/arrow-refresh-02.svg" 
                      alt="Обновить" 
                      className={`w-4 h-4 transition-transform duration-200 ${isUpdatingDialog ? 'animate-spin' : ''}`} 
                      style={{ filter: 'brightness(0) saturate(100%) invert(57%) sepia(0%) saturate(0%) hue-rotate(186deg) brightness(94%) contrast(92%)' }}
                    />
                  </button>
                </div>
                
                {/* Разделительная линия */}
                <div className="border-b border-[#E5E7EB] mb-4"></div>

                {/* Диалог */}
                <div className="flex-1 flex flex-col" style={{ paddingLeft: '0px', paddingRight: '0px' }}>
                  {/* История диалога */}
                  <div ref={widgetChatRef} className="flex-1 space-y-4 overflow-y-auto mb-4 widget-chat-container" style={{ paddingLeft: '16px', paddingRight: '16px', flexBasis: 0 }}>
                    {/* Плашка "Сегодня" */}
                    <div className="text-center">
                      <span className="bg-gray-100 text-gray-600 text-xs px-3 py-1 rounded-[90px]">Сегодня</span>
                    </div>
                    
                    <VirtualizedMessageList
                      messages={chatMessages}
                      getMessageAlignment={getMessageAlignment}
                      getMessageOrder={getMessageOrder}
                      getMessageStyle={getMessageStyle}
                      getMessageFooter={getMessageFooter}
                      aiAgentName={aiAgentName}
                      containerRef={widgetChatRef}
                    />
                  </div>

                  {/* Поле ввода - зафиксировано внизу */}
                  <div className="relative flex-shrink-0" style={{ paddingLeft: '16px', paddingRight: '16px' }}>
                    <div className="relative">
                    <input
                      type="text"
                      value={currentMessage}
                      onChange={(e) => setCurrentMessage(e.target.value)}
                      onKeyPress={(e) => {
                        if (e.key === 'Enter') {
                          handleWidgetChatSendMessage();
                        }
                      }}
                      placeholder="Введите сообщение..."
                        className="w-full h-[40px] px-4 py-2 pr-[100px] rounded-[20px] border border-[#E5E7EB] focus:outline-none focus:ring-0 text-[14px] text-[#070F1A] bg-[#F8F8FA]"
                    />
                      <div className="absolute right-1 top-1/2 transform -translate-y-1/2 flex items-center gap-1">
                      <button 
                        onClick={handleChatFileUpload}
                          className="w-[22px] h-[32px] flex items-center justify-center transition-colors"
                        title="Добавить вложение"
                      >
                          <img src="/paperclip.svg" alt="Вложение" className="w-[18px] h-[18px] text-[#8E8E93] hover:text-[#070F1A] transition-colors" />
                      </button>
                      <button 
                        onClick={handleWidgetChatSendMessage}
                          className="w-[32px] h-[32px] bg-[#0084FF] rounded-[90px] flex items-center justify-center cursor-pointer disabled:bg-[#070F1A] disabled:bg-opacity-10 disabled:cursor-not-allowed transition-colors"
                        disabled={!currentMessage.trim()}
                        title="Отправить сообщение"
                      >
                        <img 
                          src="/Frame 118.svg" 
                      alt="Отправить" 
                          className={`w-3 h-3 ${!currentMessage.trim() ? 'opacity-60' : ''}`}
                    />
                      </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

          </div>
        );

      case 'model-extensions':
        return (
          <div className="space-y-0">
            <div className="flex justify-between items-center">
              <h1 className="text-[20px] font-[500] text-[#070F1A] mb-[16px]">Расширения</h1>
            </div>
            <div className="border-b" style={{ borderColor: '#E5E7EB', marginLeft: '-16px', marginRight: '-16px' }}></div>

            <div className="grid grid-cols-2 lg:grid-cols-4 gap-4" style={{ marginLeft: '1px', marginRight: '1px', marginTop: '20px' }}>
              {/* Уведомления в Telegram */}
              <div className="border border-transparent rounded-[16px] p-[15px] bg-white">
                <div className="flex flex-col">
                  <div className="flex-shrink-0 mb-3">
                    <img src="/333312.png" alt="Telegram" className="w-[24px] h-[24px]" />
                  </div>
                  <div>
                    <h3 className="text-[16px] font-medium text-[#070F1A] mb-1">Уведомления в Telegram</h3>
                    <p className="text-[13px] text-[#8E8E93]">Будьте всегда в курсе процессов</p>
                  </div>
                </div>
                <div className="w-full mt-[20px]">
                  <button 
                    onClick={() => {
                      setActiveSection('profile');
                      setProfileTab('notifications');
                      setSidebarOpen(false);
                    }}
                    className="w-full h-[34px] text-[#8E8E93] rounded-[12px] transition-colors hover:bg-[#F2F3F4]"
                    style={BUTTON_STYLES.whiteButton}
                  >
                    Не подключено
                  </button>
                </div>
              </div>

              {/* Автопереключения диалогов */}
              <div className="border border-transparent rounded-[16px] p-[15px] bg-white">
                <div className="flex flex-col">
                  <div className="flex-shrink-0 mb-3">
                    <img src="/333313.png" alt="Автопереключения" className="w-[24px] h-[24px]" />
                  </div>
                  <div>
                    <h3 className="text-[16px] font-medium text-[#070F1A] mb-1">Автопереключения диалогов</h3>
                    <p className="text-[13px] text-[#8E8E93]">Настройте ИИ-агента при перехвате</p>
                  </div>
                </div>
                <div className="w-full mt-[20px]">
                  <button 
                    onClick={() => setShowAutoswitchPopup(true)}
                    className="w-full h-[34px] bg-[#0084FF] text-white rounded-[12px] transition-colors hover:bg-[#0073E6]"
                    style={BUTTON_STYLES.blueButton}
                  >
                    Настроить
                  </button>
                </div>
              </div>
            </div>

            {/* Попап настроек автопереключения */}
            {showAutoswitchPopup && (
              <div className="fixed inset-0 bg-black/20 flex items-center justify-center z-50">
                <div className="bg-white rounded-[16px] p-5 w-[500px] max-h-[90vh] overflow-y-auto">
                  <div className="flex justify-between items-center mb-3">
                    <h2 className="text-[20px] font-[500] text-[#070F1A]">Настройки автопереключения</h2>
                    <button 
                      onClick={() => setShowAutoswitchPopup(false)}
                      className="w-8 h-8 flex items-center justify-center text-[#8E8E93] hover:text-[#070F1A] transition-colors rounded-[8px] hover:bg-[#F2F3F4]"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5">
                        <path d="M18 6 6 18"></path>
                        <path d="m6 6 12 12"></path>
                      </svg>
                    </button>
                  </div>

                  <div className="space-y-[15px]">
                    <p className="text-[14px] text-[#8E8E93] leading-relaxed">
                      ИИ-агент может полностью отключиться от диалога или вступить в него спустя время
                    </p>

                    {/* Выключать ИИ при вмешательстве человека */}
                    <div className="flex items-center justify-between p-4 rounded-[12px] mt-[30px]" style={{ background: '#F8F8FA' }}>
                      <div className="w-[310px]">
                        <h3 className="text-[14px] font-[500] text-[#070F1A] mb-1">
                          Выключать ИИ-ассистента при вмешательстве в диалог человека
                        </h3>
                        <p className="text-[12px] text-[#8E8E93]">
                          Диалог полностью перейдет в работу оператору
                        </p>
                      </div>
                      <div className="flex items-center">
                        <img 
                          src={autoswitchSettings.disableOnHumanIntervention ? "/iOS/Switch.svg" : "/iOS/Switch-1.svg"} 
                          alt="Переключатель" 
                          className="w-[34px] h-6 cursor-pointer" 
                          onClick={() => setAutoswitchSettings(prev => ({
                            ...prev,
                            disableOnHumanIntervention: !prev.disableOnHumanIntervention
                          }))}
                        />
                      </div>
                    </div>

                    {/* Включать ИИ после переключения на оператора */}
                    <div className="flex items-center justify-between p-4 rounded-[12px]" style={{ background: '#F8F8FA' }}>
                      <div className="w-[310px]">
                        <h3 className="text-[14px] font-[500] text-[#070F1A] mb-1">
                          Включать ИИ-ассистента после переключения диалога на оператора
                        </h3>
                        <p className="text-[12px] text-[#8E8E93]">
                          ИИ-агент спустя время вернется в диалог
                        </p>
                      </div>
                      <div className="flex items-center">
                        <img 
                          src={autoswitchSettings.enableAfterOperatorSwitch ? "/iOS/Switch.svg" : "/iOS/Switch-1.svg"} 
                          alt="Переключатель" 
                          className="w-[34px] h-6 cursor-pointer" 
                          onClick={() => setAutoswitchSettings(prev => ({
                            ...prev,
                            enableAfterOperatorSwitch: !prev.enableAfterOperatorSwitch
                          }))}
                        />
                      </div>
                    </div>

                    {/* Поле для ввода минут */}
                    {autoswitchSettings.enableAfterOperatorSwitch && (
                      <div className="p-4 rounded-[12px]" style={{ background: '#F8F8FA' }}>
                        <label className="block text-[14px] font-[500] text-[#070F1A] mb-2">
                          Включать ассистента через
                        </label>
                        <div className="flex items-center gap-2">
                          <input
                            type="number"
                            min="1"
                            max="60"
                            value={autoswitchSettings.switchDelayMinutes}
                            onChange={(e) => setAutoswitchSettings(prev => ({
                              ...prev,
                              switchDelayMinutes: parseInt(e.target.value) || 5
                            }))}
                            className="w-20 h-10 px-3 rounded-[8px] focus:outline-none"
                            style={INPUT_STYLES.inputField}
                          />
                          <span className="text-[14px] text-[#8E8E93]">минут</span>
                        </div>
                      </div>
                    )}

                    {/* Кнопки */}
                    <div className="flex gap-3 pt-4">
                      <button
                        onClick={() => setShowAutoswitchPopup(false)}
                        className="flex-1 h-[34px] text-[#070F1A] rounded-[12px] transition-colors hover:border-[#070F1A]/20"
                        style={BUTTON_STYLES.whiteButton}
                      >
                        Отмена
                      </button>
                      <button
                        onClick={async () => {
                          try {
                            // Сохраняем настройки в API
                            const response = await fetch('${API_CONFIG.BASE_URL}/api/autoswitch/settings', {
                              method: 'POST',
                              headers: {
                                'Content-Type': 'application/json',
                              },
                              body: JSON.stringify(autoswitchSettings),
                            });
                            
                            if (response.ok) {
                              setShowAutoswitchPopup(false);
                              // Показываем уведомление об успешном сохранении
                              setShowNotification(true);
                              setTimeout(() => setShowNotification(false), 3000);
                            }
                          } catch (error) {
                            console.error('Ошибка сохранения настроек:', error);
                          }
                        }}
                        className="flex-1 h-[34px] bg-[#0084FF] text-white rounded-[12px] transition-colors hover:bg-[#0066CC]"
                        style={BUTTON_STYLES.blueButton}
                      >
                        Сохранить
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        );

      case 'widget-settings':
        return (
          <div className="space-y-6">
            <h1 className="text-[20px] font-[500] text-[#070F1A]">Виджет на сайт</h1>
            
            <div className="bg-white rounded-[20px] p-6 border border-gray-200">
              <div className="space-y-8">
                {/* Accent Color */}
                <div>
                  <label className="block text-sm font-medium mb-3">Акцентный цвет</label>
                  <div className="flex items-center gap-3">
                    <input 
                      type="text" 
                      value={widgetDevelopmentSettings.accentColor}
                      onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, accentColor: e.target.value})}
                      className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                      placeholder="HEX"
                    />
                    <input 
                      type="color" 
                      value={widgetDevelopmentSettings.accentColor}
                      onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, accentColor: e.target.value})}
                      className="w-10 h-10 rounded-lg border-2 border-gray-300 cursor-pointer"
                    />
                    <button 
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, accentColor: '#1354FC'})}
                      className="text-gray-400 hover:text-gray-600"
                    >
                      ×
                    </button>
                  </div>
                </div>

                {/* Button Color */}
                <div>
                  <label className="block text-sm font-medium mb-3">Цвет кнопки</label>
                  <div className="grid grid-cols-3 gap-3">
                    {[
                      { id: 'light', label: 'Светлый фон', bg: 'bg-white', border: 'border-blue-500', text: 'text-blue-500' },
                      { id: 'dark', label: 'Темный фон', bg: 'bg-gray-900', border: 'border-white', text: 'text-white' },
                      { id: 'custom', label: 'Задать свой цвет', bg: 'bg-gradient-to-r from-yellow-400 via-pink-500 to-blue-500', border: 'border-blue-500', text: 'text-white' }
                    ].map((style) => (
                      <button
                        key={style.id}
                        onClick={() => setWidgetSettings({...widgetDevelopmentSettings, buttonColor: style.id})}
                        className={`p-3 rounded-lg border-2 transition-all ${
                          widgetDevelopmentSettings.buttonColor === style.id 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div 
                          className={`w-[140px] h-[42px] rounded-xl flex items-center justify-center gap-2 mb-2 mx-auto ${
                            style.id === 'light' ? 'bg-white border-2 border-gray-300' :
                            style.id === 'dark' ? 'bg-gray-900' :
                            'bg-gradient-to-r from-yellow-400 via-pink-500 to-blue-500'
                          }`}
                          style={{
                            borderColor: style.id === 'light' ? widgetDevelopmentSettings.accentColor : 'transparent',
                            color: style.id === 'light' ? widgetDevelopmentSettings.accentColor : 'white'
                          }}
                        >
                          <div 
                            className="w-4 h-4 rounded-[90px] opacity-80"
                            style={{ backgroundColor: style.id === 'light' ? widgetDevelopmentSettings.accentColor : 'currentColor' }}
                          ></div>
                          <span className="text-sm font-medium" style={{ maxWidth: '90px', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>
                            Написать нам
                          </span>
                        </div>
                        <span className={`text-xs ${widgetDevelopmentSettings.buttonColor === style.id ? 'text-blue-600' : 'text-gray-600'}`}>
                          {style.label}
                        </span>
                      </button>
                    ))}
                  </div>
                </div>

                {/* Custom Color Picker */}
                {widgetDevelopmentSettings.buttonColor === 'custom' && (
                  <div>
                    <label className="block text-sm font-medium mb-3">Введите цвет для фона</label>
                    <div className="flex items-center gap-3">
                      <input 
                        type="text" 
                        value={widgetDevelopmentSettings.customButtonColor}
                        onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, customButtonColor: e.target.value})}
                        className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                        placeholder="HEX"
                      />
                      <input 
                        type="color" 
                        value={widgetDevelopmentSettings.customButtonColor}
                        onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, customButtonColor: e.target.value})}
                        className="w-10 h-10 rounded-lg border-2 border-gray-300 cursor-pointer"
                      />
                    </div>
                  </div>
                )}

                {/* Button Text */}
                <div>
                  <label className="block text-sm font-medium mb-3">Название кнопки</label>
                  <input 
                    type="text" 
                    value={widgetDevelopmentSettings.buttonText}
                    onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, buttonText: e.target.value})}
                    className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                    placeholder="Написать нам"
                  />
                </div>

                {/* Button Style */}
                <div>
                  <label className="block text-sm font-medium mb-3">Стиль кнопки</label>
                  <div className="grid grid-cols-2 gap-3">
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, buttonColor: 'rectangle'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.buttonColor === 'rectangle' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="w-[120px] h-[40px] bg-blue-600 rounded-lg mx-auto mb-2 flex items-center justify-center">
                          <span className="text-white text-sm font-medium">Спросить ИИ</span>
                        </div>
                        <div className="text-sm font-medium">Прямоугольная</div>
                      </div>
                    </button>
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, buttonColor: 'ellipse'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.buttonColor === 'ellipse' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="w-[120px] h-[40px] bg-blue-600 rounded-[90px] mx-auto mb-2 flex items-center justify-center">
                          <span className="text-white text-sm font-medium">💬</span>
                        </div>
                        <div className="text-sm font-medium">Круглая</div>
                      </div>
                    </button>
                  </div>
                </div>

                {/* Logo Settings */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                  <div className="space-y-6 border p-4 rounded-lg">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Название рядом с логотипом</label>
                      <input 
                        type="text"
                        value={widgetDevelopmentSettings.logoName || ''}
                        onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, logoName: e.target.value})}
                        className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                        placeholder="Введите название"
                      />
                      <p className="mt-2 text-sm text-gray-500">Текст, отображаемый рядом с логотипом в виджете.</p>
                    </div>
                  </div>
                  <div className="space-y-6 border p-4 rounded-lg">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Ссылка на логотип</label>
                      <input 
                        type="url"
                        value={widgetDevelopmentSettings.logoUrl || ''}
                        onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, logoUrl: e.target.value})}
                        className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                        placeholder="Введите ссылку на логотип"
                      />
                      <p className="mt-2 text-sm text-gray-500">Вставьте URL логотипа вашей компании, который будет отображаться в виджете.</p>
                    </div>
                  </div>
                </div>

                {/* Предложения (быстрые сообщения) */}
                <div>
                  <label className="block text-sm font-medium mb-3">Предложения</label>
                  <p className="text-sm text-gray-600 mb-4">Укажите сообщения, которые будут автоматически видны в виджете и предложены пользователю для отправки</p>
                  <div className="space-y-4">
                    {widgetDevelopmentSettings.suggestions?.map((suggestion, index) => (
                      <div key={index} className="flex items-center border rounded-md p-2">
                        <input 
                          type="text" 
                          value={suggestion}
                          onChange={(e) => {
                            const newSuggestions = [...(widgetDevelopmentSettings.suggestions || [])];
                            newSuggestions[index] = e.target.value;
                            setWidgetSettings({...widgetDevelopmentSettings, suggestions: newSuggestions});
                          }}
                          className="flex-1 p-2 border border-gray-300 rounded-md text-sm"
                          placeholder={`Сообщение ${index + 1}`}
                        />
                        <button 
                          onClick={() => {
                            const newSuggestions = (widgetDevelopmentSettings.suggestions || []).filter((_, i) => i !== index);
                            setWidgetSettings({...widgetDevelopmentSettings, suggestions: newSuggestions});
                          }}
                          className="ml-2 text-red-400 hover:text-red-600 flex-none whitespace-nowrap"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="inline-block mr-1">
                            <path d="M18 6 6 18"></path>
                            <path d="m6 6 12 12"></path>
                          </svg>
                        </button>
                      </div>
                    ))}
                    <button 
                      onClick={() => {
                        const newSuggestions = [...(widgetDevelopmentSettings.suggestions || []), ''];
                        setWidgetSettings({...widgetDevelopmentSettings, suggestions: newSuggestions});
                      }}
                      className="text-blue-400 hover:text-blue-600 font-medium"
                    >
                      + Добавить сообщение
                    </button>
                  </div>
                </div>

                {/* Avatar */}
                <div>
                  <label className="block text-sm font-medium mb-3">Аватар Adapto</label>
                  <div className="grid grid-cols-2 gap-3">
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, avatar: 'default'})}
                      className={`p-3 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.avatar === 'default' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-[90px] mx-auto mb-2 flex items-center justify-center">
                        <div className="flex items-center justify-center w-6 h-6">
                          <div className="w-3 h-3 bg-white rounded-[90px] mr-1"></div>
                          <div className="w-1.5 h-1.5 bg-white rounded-[90px]"></div>
                        </div>
                      </div>
                      <span className="text-xs text-center block">По умолчанию</span>
                    </button>
                    <button
                      onClick={() => document.getElementById('avatar-input')?.click()}
                      className={`p-3 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.avatar === 'custom' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="w-12 h-12 bg-gray-200 rounded-[90px] mx-auto mb-2 flex items-center justify-center">
                        <span className="text-gray-500">+</span>
                      </div>
                      <span className="text-xs text-center block">Загрузить</span>
                      <input 
                        id="avatar-input"
                        type="file" 
                        accept="image/*"
                        className="hidden" 
                        onChange={(e) => {
                          const file = e.target.files?.[0];
                          if (file) {
                            setWidgetSettings({...widgetDevelopmentSettings, avatar: 'custom'});
                            showNotificationMessage('Аватар загружен!');
                          }
                        }}
                      />
                    </button>
                  </div>
                </div>

                {/* Расположение виджета */}
                <div>
                  <label className="block text-sm font-medium mb-3">Расположение виджета</label>
                  <div className="grid grid-cols-2 gap-3">
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, widgetLocation: 'default'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.widgetLocation === 'default' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium mb-1">По умолчанию</div>
                        <div className="text-sm text-gray-600">Правый нижний угол</div>
                      </div>
                    </button>
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, widgetLocation: 'custom'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.widgetLocation === 'custom' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium mb-1">Настроить</div>
                        <div className="text-sm text-gray-600">Выбрать позицию</div>
                      </div>
                    </button>
                  </div>
                  
                  {/* Настройки расположения виджета */}
                  {widgetDevelopmentSettings.widgetLocation === 'custom' && (
                    <div className="mt-4 space-y-6 p-4 bg-gray-50 rounded-lg">
                      <div>
                        <h4 className="text-sm font-medium mb-3">Для компьютеров</h4>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-medium mb-2">Отступ снизу</label>
                            <input 
                              type="number" 
                              value={widgetDevelopmentSettings.desktopBottomOffset}
                              onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, desktopBottomOffset: parseInt(e.target.value)})}
                              className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                              min="0"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium mb-2">Отступ справа</label>
                            <input 
                              type="number" 
                              value={widgetDevelopmentSettings.desktopRightOffset}
                              onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, desktopRightOffset: parseInt(e.target.value)})}
                              className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                              min="0"
                            />
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <h4 className="text-sm font-medium mb-3">Для телефонов</h4>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-medium mb-2">Отступ снизу</label>
                            <input 
                              type="number" 
                              value={widgetDevelopmentSettings.mobileBottomOffset}
                              onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, mobileBottomOffset: parseInt(e.target.value)})}
                              className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                              min="0"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium mb-2">Отступ справа</label>
                            <input 
                              type="number" 
                              value={widgetDevelopmentSettings.mobileRightOffset}
                              onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, mobileRightOffset: parseInt(e.target.value)})}
                              className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                              min="0"
                            />
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Z-index</label>
                        <input 
                          type="number" 
                          value={widgetDevelopmentSettings.zIndex}
                          onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, zIndex: parseInt(e.target.value)})}
                          className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                          min="1"
                        />
                      </div>
                    </div>
                  )}
                </div>

                {/* Приветственное сообщение */}
                <div>
                  <label className="block text-sm font-medium mb-3">Приветственное сообщение</label>
                  <div className="space-y-3">
                    {widgetDevelopmentSettings.welcomeMessages.map((message, index) => (
                      <div key={index} className="flex gap-2">
                        <input 
                          type="text" 
                          value={message}
                          onChange={(e) => {
                            const newMessages = [...widgetDevelopmentSettings.welcomeMessages];
                            newMessages[index] = e.target.value;
                            setWidgetSettings({...widgetDevelopmentSettings, welcomeMessages: newMessages});
                          }}
                          className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                          placeholder="Приветственное сообщение"
                        />
                        <button 
                          onClick={() => {
                            const newMessages = widgetDevelopmentSettings.welcomeMessages.filter((_, i) => i !== index);
                            setWidgetSettings({...widgetDevelopmentSettings, welcomeMessages: newMessages});
                          }}
                          className="px-3 py-2 text-red-500 hover:text-red-700"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                    <button 
                      onClick={() => {
                        const newMessages = [...widgetDevelopmentSettings.welcomeMessages, ''];
                        setWidgetSettings({...widgetDevelopmentSettings, welcomeMessages: newMessages});
                      }}
                      className="text-blue-600 hover:text-blue-700 text-sm"
                    >
                      + Добавить сообщение
                    </button>
                  </div>
                </div>

                {/* Триггерный вопрос */}
                <div>
                  <label className="block text-sm font-medium mb-3">Триггерный вопрос</label>
                  <div className="grid grid-cols-2 gap-3 mb-4">
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, triggerQuestionEnabled: 'no'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.triggerQuestionEnabled === 'no' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Нет</div>
                      </div>
                    </button>
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, triggerQuestionEnabled: 'yes'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.triggerQuestionEnabled === 'yes' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Есть</div>
                      </div>
                    </button>
                  </div>
                  
                  {widgetDevelopmentSettings.triggerQuestionEnabled === 'yes' && (
                    <div className="space-y-4 p-4 bg-gray-50 rounded-lg">
                      <div>
                        <label className="block text-sm font-medium mb-2">Через какое время показать:</label>
                        <div className="flex items-center gap-2">
                          <input 
                            type="number" 
                            value={widgetDevelopmentSettings.triggerQuestionDelay}
                            onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, triggerQuestionDelay: parseInt(e.target.value)})}
                            className="w-20 p-2 border border-gray-300 rounded-lg text-sm"
                            min="1"
                          />
                          <span className="text-sm text-gray-600">сек</span>
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Вопрос:</label>
                        <textarea 
                          value={widgetDevelopmentSettings.triggerQuestionText}
                          onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, triggerQuestionText: e.target.value})}
                          className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                          rows="3"
                          placeholder="Введите вопрос"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Быстрые ответы:</label>
                        <div className="space-y-2">
                          {widgetDevelopmentSettings.quickReplies.map((reply, index) => (
                            <div key={index} className="flex gap-2">
                              <input 
                                type="text" 
                                value={reply}
                                onChange={(e) => {
                                  const newReplies = [...widgetDevelopmentSettings.quickReplies];
                                  newReplies[index] = e.target.value;
                                  setWidgetSettings({...widgetDevelopmentSettings, quickReplies: newReplies});
                                }}
                                className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                                placeholder="Быстрый ответ"
                              />
                              <button 
                                onClick={() => {
                                  const newReplies = widgetDevelopmentSettings.quickReplies.filter((_, i) => i !== index);
                                  setWidgetSettings({...widgetDevelopmentSettings, quickReplies: newReplies});
                                }}
                                className="px-3 py-2 text-red-500 hover:text-red-700"
                              >
                                ×
                              </button>
                            </div>
                          ))}
                          <button 
                            onClick={() => {
                              const newReplies = [...widgetDevelopmentSettings.quickReplies, ''];
                              setWidgetSettings({...widgetDevelopmentSettings, quickReplies: newReplies});
                            }}
                            className="text-blue-600 hover:text-blue-700 text-sm"
                          >
                            + Добавить быстрый ответ
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Follow up сообщение */}
                <div>
                  <label className="block text-sm font-medium mb-3">Follow up сообщение</label>
                  <p className="text-sm text-gray-600 mb-4">Сообщение, которое увидит пользователь, если выйдет из диалога</p>
                  <div className="grid grid-cols-2 gap-3 mb-4">
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, followUpMessage: 'no'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.followUpMessage === 'no' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Нет</div>
                      </div>
                    </button>
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, followUpMessage: 'yes'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.followUpMessage === 'yes' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Есть</div>
                      </div>
                    </button>
                  </div>
                  
                  {widgetDevelopmentSettings.followUpMessage === 'yes' && (
                    <div className="space-y-4 p-4 bg-gray-50 rounded-lg">
                      <div>
                        <label className="block text-sm font-medium mb-2">Через какое время показать:</label>
                        <div className="flex items-center gap-2">
                          <input 
                            type="number" 
                            value={widgetDevelopmentSettings.followUpDelay}
                            onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, followUpDelay: parseInt(e.target.value)})}
                            className="w-20 p-2 border border-gray-300 rounded-lg text-sm"
                            min="1"
                          />
                          <span className="text-sm text-gray-600">сек</span>
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Вопрос:</label>
                        <textarea 
                          value={widgetDevelopmentSettings.followUpQuestion}
                          onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, followUpQuestion: e.target.value})}
                          className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                          rows="3"
                          placeholder="Введите вопрос"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Быстрые ответы:</label>
                        <div className="space-y-2">
                          {widgetDevelopmentSettings.followUpQuickReply && (
                            <div className="flex gap-2">
                              <input 
                                type="text" 
                                value={widgetDevelopmentSettings.followUpQuickReply}
                                onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, followUpQuickReply: e.target.value})}
                                className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                                placeholder="Быстрый ответ"
                              />
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Ссылка на политику обработки персональных данных */}
                <div>
                  <label className="block text-sm font-medium mb-2">Ссылка на политику обработки персональных данных</label>
                  <input 
                    type="url" 
                    value={widgetDevelopmentSettings.privacyPolicyUrl}
                    onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, privacyPolicyUrl: e.target.value})}
                    className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                    placeholder="https://example.com/privacy"
                  />
                </div>

                {/* Какие метки собирать */}
                <div>
                  <label className="block text-sm font-medium mb-3">Какие метки собирать</label>
                  <div className="grid grid-cols-2 gap-2">
                    {[
                      'utm_source',
                      'utm_medium', 
                      'utm_campaign',
                      'utm_term',
                      'utm_content',
                      'roistat_visit',
                      'gclid',
                      'fbclid'
                    ].map(tag => (
                      <button
                        key={tag}
                        onClick={() => {
                          const current = widgetDevelopmentSettings.dataTags || [];
                          const newTags = current.includes(tag)
                            ? current.filter(t => t !== tag)
                            : [...current, tag];
                          setWidgetSettings({...widgetDevelopmentSettings, dataTags: newTags});
                        }}
                        className={`p-2 rounded-lg border-2 transition-all text-sm ${
                          (widgetDevelopmentSettings.dataTags || []).includes(tag)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {tag}
                      </button>
                    ))}
                  </div>
                  <div className="mt-3">
                    <button 
                      onClick={() => {
                        const newTag = prompt('Введите название метки:');
                        if (newTag && !widgetDevelopmentSettings.dataTags.includes(newTag)) {
                          const newTags = [...widgetDevelopmentSettings.dataTags, newTag];
                          setWidgetSettings({...widgetDevelopmentSettings, dataTags: newTags});
                        }
                      }}
                      className="text-blue-600 hover:text-blue-700 text-sm"
                    >
                      + Добавить метку
                    </button>
                  </div>
                </div>

                {/* Превью виджета */}
                <div>
                  <label className="block text-sm font-medium mb-3">Превью виджета</label>
                  <div className="border rounded-lg shadow-inner h-[400px] overflow-hidden relative bg-gray-50">
                    <div className="absolute bottom-4 right-4">
                      {widgetDevelopmentSettings.buttonColor === 'ellipse' ? (
                        <div 
                          className="w-12 h-12 rounded-[90px] flex items-center justify-center cursor-pointer shadow-lg"
                          style={{ 
                            backgroundColor: widgetDevelopmentSettings.buttonColor === 'custom' ? widgetDevelopmentSettings.customButtonColor : 
                                         widgetDevelopmentSettings.buttonColor === 'dark' ? '#1f2937' : '#3b82f6'
                          }}
                        >
                          <span className="text-white text-lg">💬</span>
                        </div>
                      ) : (
                        <div 
                          className="px-4 py-2 rounded-lg flex items-center gap-2 cursor-pointer shadow-lg"
                          style={{ 
                            backgroundColor: widgetDevelopmentSettings.buttonColor === 'custom' ? widgetDevelopmentSettings.customButtonColor : 
                                         widgetDevelopmentSettings.buttonColor === 'dark' ? '#1f2937' : '#3b82f6'
                          }}
                        >
                          <div 
                            className="w-4 h-4 rounded-[90px] opacity-80"
                            style={{ backgroundColor: widgetDevelopmentSettings.accentColor }}
                          ></div>
                          <span className="text-white text-sm font-medium">
                            {widgetDevelopmentSettings.buttonText || 'Спросить ИИ'}
                          </span>
                        </div>
                      )}
                    </div>
                    
                    {/* Имитация чата */}
                    <div className="absolute bottom-20 right-4 w-80 h-64 bg-white rounded-lg shadow-lg border">
                      <div className="p-3 border-b bg-gray-50 rounded-t-lg">
                        <div className="flex items-center gap-2">
                          {widgetDevelopmentSettings.logoUrl ? (
                            <img src={widgetDevelopmentSettings.logoUrl} alt="Logo" className="w-6 h-6 rounded" />
                          ) : (
                            <div className="w-6 h-6 bg-blue-600 rounded flex items-center justify-center">
                              <span className="text-white text-xs">A</span>
                            </div>
                          )}
                          <span className="text-sm font-medium">
                            {widgetDevelopmentSettings.logoName || 'Adapto'}
                          </span>
                        </div>
                      </div>
                      <div className="p-3 space-y-2">
                        {widgetDevelopmentSettings.welcomeMessages?.slice(0, 2).map((message, index) => (
                          <div key={index} className="text-sm text-gray-700">
                            {message || `Приветственное сообщение ${index + 1}`}
                          </div>
                        ))}
                        {widgetDevelopmentSettings.suggestions?.slice(0, 2).map((suggestion, index) => (
                          <div key={index} className="mt-2">
                            <button className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded hover:bg-blue-200">
                              {suggestion || `Предложение ${index + 1}`}
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>

                {/* Код для вставки */}
                <div>
                  <label className="block text-sm font-medium mb-3">Код для вставки на сайт</label>
                  <div className="bg-gray-900 text-white p-4 rounded-lg font-mono text-sm overflow-x-auto">
                    <pre>{generateWidgetCode()}</pre>
                  </div>
                  <div className="mt-3 flex items-center gap-2">
                    <button 
                      onClick={() => {
                        navigator.clipboard.writeText(generateWidgetCode());
                        showNotificationMessage('Код скопирован!');
                      }}
                      className="bg-blue-600 text-white px-4 py-2 rounded-lg text-sm hover:bg-blue-700 transition-colors"
                    >
                      Скопировать код
                    </button>
                    <button 
                      onClick={openWidgetPreview}
                      className="bg-gray-100 text-gray-900 px-4 py-2 rounded-lg text-sm hover:bg-gray-200 transition-colors border border-gray-300"
                    >
                      Открыть в новой вкладке
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );

      case 'messengers':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center mb-[16px]">
              <h1 className="text-[20px] font-[500] text-[#070F1A]">Мессенджеры</h1>
            </div>
            
            {/* Разделительная линия на всю ширину */}
            <div className="h-px bg-[#E5E7EB] mb-4" style={{ marginLeft: '-32px', marginRight: '-32px', marginTop: '0px' }}></div>

            <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
              {/* Telegram */}
              <div className="bg-white rounded-[16px] p-[16px]">
                <div className="flex flex-col">
                  <div className="flex-shrink-0 mb-3">
                    <img src="/tg.png" alt="Telegram" className="w-[24px] h-[24px]" />
                  </div>
                  <h3 className="text-[16px] font-[500] text-[#070F1A] mb-1">Telegram</h3>
                  <p className="text-[13px] text-[#8E8E93]">
                    {telegramBotConnected ? 'ИИ-бот подключен к Telegram' : 'Подключите ИИ-бота к Telegram'}
                  </p>
                  {telegramBotConnected ? (
                    <div className="mt-[20px] space-y-2">
                      <button className="w-full h-[34px] text-[13px] bg-[#6B7280] text-white rounded-[10px] cursor-default" style={BUTTON_STYLES.blueButton}>
                        Подключено
                      </button>
                      {telegramBotStats && (
                        <div className="text-[11px] text-[#8E8E93] text-center">
                          Диалогов: {telegramBotStats.total} | Сегодня: {telegramBotStats.today}
                        </div>
                      )}
                    </div>
                  ) : (
                    <button 
                      onClick={() => setShowTelegramModal(true)}
                      className="w-full h-[34px] mt-[20px] text-[13px] bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6]"
                      style={BUTTON_STYLES.blueButton}
                    >
                      Подключить
                    </button>
                  )}
                </div>
              </div>

              {/* WhatsApp */}
              <div className="bg-white rounded-[16px] p-[16px]">
                <div className="flex flex-col">
                  <div className="flex-shrink-0 mb-3">
                    <img src="/wa.png" alt="WhatsApp" className="w-[24px] h-[24px]" />
                  </div>
                  <h3 className="text-[16px] font-[500] text-[#070F1A] mb-1">WhatsApp</h3>
                  <p className="text-[13px] text-[#8E8E93]">Подключите ИИ-бота к WhatsApp</p>
                  <button className="w-full h-[34px] mt-[20px] text-[13px] bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6]" style={BUTTON_STYLES.blueButton}>Подключить</button>
                </div>
              </div>

              {/* VK */}
              <div className="bg-white rounded-[16px] p-[16px]">
                <div className="flex flex-col">
                  <div className="flex-shrink-0 mb-3">
                    <img src="/vk.png" alt="VK" className="w-[24px] h-[24px]" />
                  </div>
                  <h3 className="text-[16px] font-[500] text-[#070F1A] mb-1">Вконтакте</h3>
                  <p className="text-[13px] text-[#8E8E93]">Подключите ИИ-бота к ВКонтакте</p>
                  <button className="w-full h-[34px] mt-[20px] text-[13px] bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6]" style={BUTTON_STYLES.blueButton}>Подключить</button>
                </div>
              </div>

              {/* Instagram */}
              <div className="bg-white rounded-[16px] p-[16px]">
                <div className="flex flex-col">
                  <div className="flex-shrink-0 mb-3">
                    <img src="/ig.png" alt="Instagram" className="w-[24px] h-[24px]" />
                  </div>
                  <h3 className="text-[16px] font-[500] text-[#070F1A] mb-1">Instagram*</h3>
                  <p className="text-[13px] text-[#8E8E93]">Внедрите ИИ-бота прямо в Директ</p>
                  <button className="w-full h-[34px] mt-[20px] text-[13px] bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6]" style={BUTTON_STYLES.blueButton}>Подключить</button>
                </div>
              </div>
            </div>
            
            {/* Примечание об Instagram */}
            <div className="mt-8 text-center">
              <p className="text-[12px] text-[#8E8E93]">
                *Instagram является продуктом Meta – признанной в РФ экстремисткой организацией
              </p>
            </div>
          </div>
        );

      case 'crm-systems':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center mb-[16px]">
              <h1 className="text-[20px] font-[500] text-[#070F1A]">CRM-системы</h1>
            </div>
            
            {/* Разделительная линия на всю ширину */}
            <div className="h-px bg-[#E5E7EB] mb-4" style={{ marginLeft: '-32px', marginRight: '-32px', marginTop: '0px' }}></div>

            <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
              {/* Битрикс24 */}
              <div className="bg-white rounded-[16px] p-[16px]">
                <div className="flex flex-col">
                  <div className="flex-shrink-0 mb-3">
                    <img src="/bitrix.png" alt="Битрикс24" className="w-[55px] h-[24px]" />
                  </div>
                  <h3 className="text-[16px] font-[500] text-[#070F1A] mb-1">Битрикс24</h3>
                  <p className="text-[13px] text-[#8E8E93]">Интеграция с Битрикс24</p>
                  <button className="w-full h-[34px] mt-[20px] text-[13px] bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6]" style={BUTTON_STYLES.blueButton}>Подключить</button>
                </div>
              </div>

              {/* AmoCRM */}
              <div className="bg-white rounded-[16px] p-[16px]">
                <div className="flex flex-col">
                  <div className="flex-shrink-0 mb-3">
                    <img src="/amo.png" alt="AmoCRM" className="w-[39px] h-[24px]" />
                  </div>
                  <h3 className="text-[16px] font-[500] text-[#070F1A] mb-1">amoCRM</h3>
                  <p className="text-[13px] text-[#8E8E93]">Интеграция с amoCRM</p>
                  <button className="w-full h-[34px] mt-[20px] text-[13px] bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6]" style={BUTTON_STYLES.blueButton}>Подключить</button>
                </div>
              </div>
            </div>
          </div>
        );

      case 'other-integrations':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center mb-[16px]">
              <h1 className="text-[20px] font-[500] text-[#070F1A]">Сервисы</h1>
            </div>
            
            {/* Разделительная линия на всю ширину */}
            <div className="h-px bg-[#E5E7EB] mb-4" style={{ marginLeft: '-32px', marginRight: '-32px', marginTop: '0px' }}></div>

            <div className="grid grid-cols-2 lg:grid-cols-4 gap-[20px]">
              {/* Uclients */}
              <div className="bg-white rounded-[16px] p-[16px]">
                <div className="flex flex-col">
                  <div className="flex-shrink-0 mb-3">
                    <img src="/yc.png" alt="Yclients" className="w-[24px] h-[24px]" />
                  </div>
                  <h3 className="text-[16px] font-[500] text-[#070F1A] mb-1">Yclients</h3>
                  <p className="text-[13px] text-[#8E8E93]">Интеграция с Yclients</p>
                  <button className="w-full h-[34px] mt-[20px] text-[13px] bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6]" style={BUTTON_STYLES.blueButton}>Подключить</button>
                </div>
              </div>
            </div>
          </div>
        );



      case 'profile':
        return (
          <div className="space-y-6">
            <div className="bg-[#F8F8FA] min-h-[600px] h-full relative">
              <div className="flex h-full">
                {/* Левая панель с кнопками */}
                <div className="w-64 space-y-4 pr-4">
                  <div>
                    <h1 className="text-[20px] font-[500] text-[#070F1A]" style={{ marginBottom: '16px' }}>Пользователь</h1>
                    
                    {/* Разделительная линия на всю ширину */}
                    <div className="h-px bg-[#E5E7EB] mb-4" style={{ marginLeft: '-32px', marginRight: '-22px' }}></div>
                    
                    <div className="space-y-2">
                  <button
                    onClick={() => setProfileTab('personal')}
                    className={`w-full h-[34px] flex items-center gap-3 px-3 rounded-[10px] text-left transition-colors ${
                      profileTab === 'personal' 
                        ? 'bg-white text-[#0084FF]' 
                        : 'text-[#8E8E93] hover:bg-white hover:text-[#0084FF]'
                    }`}
                  >
                    <img 
                      src="/Icon%20pers.svg" 
                      alt="Мой аккаунт" 
                      className="w-4 h-4" 
                      style={{ 
                        filter: profileTab === 'personal'
                          ? 'brightness(0) saturate(100%) invert(27%) sepia(96%) saturate(1456%) hue-rotate(204deg) brightness(101%) contrast(101%)'
                          : 'brightness(0) saturate(100%) invert(56%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(100%) contrast(100%)'
                      }} 
                    />
                    <span className="text-[13px] font-[500]">Мой аккаунт</span>
                  </button>
                  
                  
                  {!isOperator && (
                    <button
                      onClick={() => setProfileTab('subscription')}
                      className={`w-full h-[34px] flex items-center gap-3 px-3 rounded-[10px] text-left transition-colors ${
                        profileTab === 'subscription' 
                          ? 'bg-white text-[#0084FF]' 
                          : 'text-[#8E8E93] hover:bg-white hover:text-[#0084FF]'
                      }`}
                    >
                      <img 
                        src="/Icon%20pers-1.svg" 
                        alt="Оплата и тарифы" 
                        className="w-4 h-4" 
                        style={{ 
                          filter: profileTab === 'subscription'
                            ? 'brightness(0) saturate(100%) invert(27%) sepia(96%) saturate(1456%) hue-rotate(204deg) brightness(101%) contrast(101%)'
                            : 'brightness(0) saturate(100%) invert(56%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(100%) contrast(100%)'
                        }} 
                      />
                      <span className="text-[13px] font-[500]">Оплата и тарифы</span>
                    </button>
                  )}
                  
                  {!isOperator && (
                    <button
                      onClick={() => setProfileTab('notifications')}
                      className={`w-full h-[34px] flex items-center gap-3 px-3 rounded-[10px] text-left transition-colors ${
                        profileTab === 'notifications' 
                          ? 'bg-white text-[#0084FF]' 
                          : 'text-[#8E8E93] hover:bg-white hover:text-[#0084FF]'
                      }`}
                    >
                      <img 
                        src="/Icon%20notific.svg" 
                        alt="Уведомления" 
                        className="w-4 h-4" 
                        style={{ 
                          filter: profileTab === 'notifications'
                            ? 'brightness(0) saturate(100%) invert(27%) sepia(96%) saturate(1456%) hue-rotate(204deg) brightness(101%) contrast(101%)'
                            : 'brightness(0) saturate(100%) invert(56%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(100%) contrast(100%)'
                        }} 
                      />
                      <span className="text-[13px] font-[500]">Уведомления</span>
                    </button>
                  )}
                  
                  <button
                    onClick={() => setProfileTab('theme')}
                    className={`w-full h-[34px] flex items-center gap-3 px-3 rounded-[10px] text-left transition-colors ${
                      profileTab === 'theme' 
                        ? 'bg-white text-[#0084FF]' 
                        : 'text-[#8E8E93] hover:bg-white hover:text-[#0084FF]'
                    }`}
                  >
                    <img 
                      src="/Icon%20tema.svg" 
                      alt="Тема" 
                      className="w-4 h-4" 
                      style={{ 
                        filter: profileTab === 'theme'
                          ? 'brightness(0) saturate(100%) invert(27%) sepia(96%) saturate(1456%) hue-rotate(204deg) brightness(101%) contrast(101%)'
                          : 'brightness(0) saturate(100%) invert(56%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(100%) contrast(100%)'
                      }} 
                    />
                    <span className="text-[13px] font-[500]">Тема</span>
                  </button>
                    </div>
                  </div>
                </div>

                {/* Вертикальная разделительная линия */}
                <div className="w-px bg-[#E5E6E7] absolute left-64" style={{ top: '-24px', bottom: '-24px' }}></div>

                {/* Правая панель с контентом */}
                <div className="flex-1 pl-5">
                  {/* Динамический заголовок */}
                  <div className="mb-[16px]">
                    <h1 className="text-[20px] font-[500] text-[#070F1A]" style={{ marginBottom: '16px' }}>
                      {profileTab === 'personal' && 'Мой аккаунт'}
                      {profileTab === 'subscription' && 'Оплата и тарифы'}
                      {profileTab === 'notifications' && 'Уведомления'}
                      {profileTab === 'theme' && 'Тема'}
                    </h1>
                    
                    {/* Разделительная линия на всю ширину */}
                    <div className="h-px bg-[#E5E7EB] mb-4" style={{ marginLeft: '-32px', marginRight: '-22px' }}></div>
                  </div>
                  {profileTab === 'personal' && (
                    <div className="space-y-6">
                      <div className="flex items-center gap-4 mb-6">
                        <div className="w-16 h-16 rounded-[90px] flex items-center justify-center" style={{ backgroundColor: generateAvatar(currentUser?.name).color }}>
                          <span className="text-white font-semibold text-xl">{generateAvatar(currentUser?.name).letter}</span>
                        </div>
                        <div>
                          <h2 className="text-[18px] font-medium text-[#070F1A]">{currentUser?.name || 'Пользователь'}</h2>
                          <p className="text-[14px] text-[#8E8E93]">{currentUser?.company_name || 'Компания не указана'}</p>
                        </div>
                      </div>
                      
                      <div className="space-y-4">
                        <div>
                          <label className="block text-[14px] font-medium text-[#8E8E93] mb-2">Имя</label>
                          <input
                            type="text"
                            value={personalInfo.name}
                            onChange={(e) => setPersonalInfo({...personalInfo, name: e.target.value})}
                            className="w-full h-[34px] px-4 rounded-[10px] focus:outline-none"
                            style={INPUT_STYLES.inputField}
                          />
                        </div>
                        
                        <div>
                          <label className="block text-[14px] font-medium text-[#8E8E93] mb-2">Название компании</label>
                          <input
                            type="text"
                            value={personalInfo.company}
                            onChange={(e) => setPersonalInfo({...personalInfo, company: e.target.value})}
                            className="w-full h-[34px] px-4 rounded-[10px] focus:outline-none"
                            style={INPUT_STYLES.inputField}
                          />
                        </div>
                        
                        <div>
                          <label className="block text-[14px] font-medium text-[#8E8E93] mb-2">Email</label>
                          <input
                            type="email"
                            value={personalInfo.email}
                            onChange={(e) => setPersonalInfo({...personalInfo, email: e.target.value})}
                            className="w-full h-[34px] px-4 rounded-[10px] focus:outline-none"
                            style={INPUT_STYLES.inputField}
                          />
                        </div>
                        
                        <div>
                          <label className="block text-[14px] font-medium text-[#8E8E93] mb-2">Телефон</label>
                          <input
                            type="tel"
                            value={personalInfo.phone}
                            onChange={(e) => setPersonalInfo({...personalInfo, phone: e.target.value})}
                            className="w-full h-[34px] px-4 rounded-[10px] focus:outline-none"
                            style={INPUT_STYLES.inputField}
                          />
                        </div>

                        <div>
                          <label className="block text-[14px] font-medium text-[#8E8E93] mb-2">Новый пароль</label>
                          <input
                            type="password"
                            value={personalInfo.newPassword}
                            onChange={(e) => setPersonalInfo({...personalInfo, newPassword: e.target.value})}
                            placeholder="Введите новый пароль"
                            className="w-full h-[34px] px-4 rounded-[10px] focus:outline-none"
                            style={INPUT_STYLES.inputField}
                          />
                        </div>
                        
                        <div>
                          <label className="block text-[14px] font-medium text-[#8E8E93] mb-2">Подтвердите пароль</label>
                          <input
                            type="password"
                            value={personalInfo.confirmPassword}
                            onChange={(e) => setPersonalInfo({...personalInfo, confirmPassword: e.target.value})}
                            placeholder="Подтвердите новый пароль"
                            className="w-full h-[34px] px-4 rounded-[10px] focus:outline-none"
                            style={INPUT_STYLES.inputField}
                          />
                        </div>
                      </div>
                      
                      <div className="w-full">
                        <button 
                          onClick={handleSavePersonalInfo}
                          disabled={!hasPersonalChanges()}
                          className={`w-full h-[34px] rounded-[10px] transition-colors text-[13px] ${
                            hasPersonalChanges() 
                              ? 'bg-[#0084FF] text-white hover:bg-[#0073E6]' 
                              : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                          }`}
                          style={hasPersonalChanges() ? BUTTON_STYLES.blueButton : BUTTON_STYLES.whiteButton}
                        >
                          Сохранить изменения
                        </button>
                      </div>
                      
                    </div>
                  )}

                  {profileTab === 'invite' && (
                    <div className="space-y-6">
                      {!isOperator && (
                        <div className="bg-white rounded-[16px] p-5">
                          <h3 className="text-[18px] font-medium text-[#070F1A] mb-4">Пригласите коллег для совместной работы над проектом</h3>
                          
                          <div className="space-y-4">
                            <div>
                              <label className="block text-[14px] font-medium text-[#8E8E93] mb-2">Email участника</label>
                              <div className="flex gap-3">
                                <input
                                  type="email"
                                  placeholder="example@company.com"
                                  className="flex-1 h-[34px] px-4 rounded-[10px] focus:outline-none"
                                  style={INPUT_STYLES.inputField}
                                />
                                <button 
                                  className="h-[34px] px-6 bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors"
                                  style={BUTTON_STYLES.blueButton}
                                >
                                  Пригласить
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                      
                      <div className="p-0">
                        <h3 className="text-[18px] font-medium text-[#070F1A] mb-4">Текущие участники</h3>
                        <div className="space-y-3">
                          {/* Владелец проекта */}
                          <div className="flex items-center justify-between p-3 bg-white rounded-[16px]">
                            <div className="flex items-center gap-3">
                              <div className="w-8 h-8 rounded-[90px] bg-[#0084FF] flex items-center justify-center">
                                <span className="text-white text-sm font-medium">{generateAvatar(currentUser?.name).letter}</span>
                              </div>
                              <div>
                                <p className="text-[14px] font-[500] text-[#070F1A]">{currentUser?.name || 'Пользователь'}</p>
                                <p className="text-[12px] text-[#8E8E93]">{currentUser?.email || 'vibe@mail.ru'}</p>
                              </div>
                            </div>
                            <span className="text-[12px] bg-[#10B981]/10 text-[#10B981] px-2 py-1 rounded-[6px] font-[500]">
                              Владелец
                            </span>
                          </div>

                        </div>
                      </div>
                    </div>
                  )}

                  {profileTab === 'subscription' && !isOperator && (
                    <div className="space-y-6">
                      {/* Текущий тариф */}
                      <div className="bg-white rounded-[16px] p-6">
                        <p className="text-[12px] text-[#8E8E93] mb-2">Текущий тариф</p>
                        <h3 className="text-[18px] font-medium text-[#070F1A] mb-4">Бесплатный</h3>
                        
                        <div className="space-y-4">
                          <div>
                            <div className="flex justify-between items-center mb-2">
                              <div className="flex items-center gap-2">
                                <img src="/clock.svg" alt="Clock" className="w-3 h-3" />
                                <span className="text-[12px] text-[#8E8E93]">Дни</span>
                              </div>
                              <span className="text-[12px] font-medium text-[#070F1A]">
                                3 / 3
                            </span>
                            </div>
                          </div>
                          
                          <div>
                            <div className="flex justify-between items-center mb-2">
                              <div className="flex items-center gap-2">
                                <img src="/Vector09.svg" alt="Tokens" className="w-3 h-3" />
                              <span className="text-[12px] text-[#8E8E93]">Токены</span>
                              </div>
                              <span className="text-[12px] font-medium text-[#070F1A]">
                                50000 / 50000
                              </span>
                            </div>
                            <div className="w-full bg-gray-200 rounded-[90px] h-[3px]">
                              <div 
                                className="bg-[#0084FF] h-[3px] rounded-[90px] transition-all duration-300"
                                style={{ 
                                  width: `100%` 
                                }}
                              ></div>
                            </div>
                          </div>
                            </div>
                          </div>
                          
                      {/* Калькулятор сообщений */}
                      <div className="bg-white rounded-[16px] p-6">
                        <p className="text-[14px] text-[#8E8E93] mb-4">Настройте объем сообщений под вашу компанию</p>
                        <h2 className="text-[18px] font-medium text-[#070F1A] mb-6">
                          Мне нужно обрабатывать {messageCount.toLocaleString()} сообщений ≈ {Math.round(messageCount / 5)} диалогов ежемесячно
                        </h2>
                        
                        <div className="w-full relative">
                          <input 
                            type="range" 
                            min="500" 
                            max="25000" 
                            step="500" 
                            value={messageCount}
                            onChange={(e) => setMessageCount(parseInt(e.target.value))}
                            className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer relative z-10"
                            style={{
                              background: `linear-gradient(to right, #0084FF 0%, #0084FF ${((messageCount - 500) / (25000 - 500)) * 100}%, #E5E7EB ${((messageCount - 500) / (25000 - 500)) * 100}%, #E5E7EB 100%)`
                            }}
                          />
                          {/* Отметки на слайдере */}
                          <div className="absolute top-0 left-0 w-full h-2 pointer-events-none">
                            <div className="absolute top-0 left-0 w-px h-2 bg-gray-400"></div>
                            <div className="absolute top-0 left-[20%] w-px h-2 bg-gray-400"></div>
                            <div className="absolute top-0 left-[40%] w-px h-2 bg-gray-400"></div>
                            <div className="absolute top-0 left-[60%] w-px h-2 bg-gray-400"></div>
                            <div className="absolute top-0 left-[80%] w-px h-2 bg-gray-400"></div>
                            <div className="absolute top-0 right-0 w-px h-2 bg-gray-400"></div>
                          </div>
                          <div className="flex justify-between text-xs text-gray-500 mt-2">
                            <span>500</span>
                            <span>5000</span>
                            <span>10000</span>
                            <span>15000</span>
                            <span>20000</span>
                            <span>25000</span>
                          </div>
                        </div>
                      </div>
                      
                      {/* Табы переключения периода оплаты */}
                      <div className="flex justify-center">
                        <div className="flex justify-center gap-2 bg-white border w-fit mx-auto p-1.5 rounded-full">
                          <button
                            onClick={() => setPaymentPeriod('monthly')}
                            className={`px-4 relative py-1 rounded-full duration-100 transition font-medium text-sm ${
                              paymentPeriod === 'monthly'
                                ? 'bg-emerald-500 text-white'
                                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
                            }`}
                          >
                            1 месяц
                          </button>
                          <button
                            onClick={() => setPaymentPeriod('quarterly')}
                            className={`px-4 relative py-1 rounded-full duration-100 transition font-medium text-sm ${
                              paymentPeriod === 'quarterly'
                                ? 'bg-emerald-500 text-white'
                                : 'bg-gray-100 hover:bg-gray-200 text-gray-700'
                            }`}
                          >
                            3 месяца
                            <div className="!absolute truncate text-xs bg-primary text-white rounded-full px-2 py-0.5 -top-3.5 -right-2">15% скидка</div>
                          </button>
                        </div>
                      </div>
                      
                      {/* Доступные тарифы */}
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-stretch">
                        {/* Старт */}
                        <div className="bg-white rounded-[16px] p-6 flex flex-col">
                          <div className="flex items-center justify-between mb-4">
                            <h4 className="text-[18px] font-medium text-[#070F1A]">Старт</h4>
                            <div className="text-right">
                              <span className="text-[24px] font-medium text-[#070F1A]">{calculatePrice("Старт", messageCount, paymentPeriod).toLocaleString()}</span>
                              <span className="text-[14px] font-medium text-[#070F1A]"> ₽/мес</span>
                            </div>
                          </div>
                          <div className="space-y-2 text-[14px] text-[#8E8E93] flex-grow">
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>Каналы интеграций: 1 мессенджер + виджет на сайт</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>База знаний: до 50 МБ</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>Метрики: только общие</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>Команда: 1 аккаунт в проекте</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>Обновления: AdaptoGPT</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>Техническая поддержка</span>
                            </div>
                          </div>
                          <button className="w-full mt-6 h-[34px] bg-[#0084FF] text-white rounded-[10px] text-[14px] font-[500] hover:bg-[#0073E6] transition-colors">
                            Выбрать тариф
                          </button>
                        </div>

                        {/* Про */}
                        <div className="bg-white rounded-[16px] p-6 flex flex-col">
                          <div className="flex items-center justify-between mb-4">
                            <h4 className="text-[18px] font-medium text-[#070F1A]">Про</h4>
                            <div className="text-right">
                              <span className="text-[24px] font-medium text-[#070F1A]">{calculatePrice("Про", messageCount, paymentPeriod).toLocaleString()}</span>
                              <span className="text-[14px] font-medium text-[#070F1A]"> ₽/мес</span>
                            </div>
                          </div>
                          <div className="space-y-2 text-[14px] text-[#8E8E93] flex-grow">
                            <div className="text-[16px] font-medium text-[#070F1A] mb-2">Все, что входит в тариф "Старт" +</div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>Каналы интеграций: все доступные (мессенджеры + виджет)</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>База знаний: до 200 МБ</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>CRM-система от Adapto и интеграция с др. CRM</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>Метрики: углубленная аналитика</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>Команда: до 5 пользователей</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>Расширения: все доступные функции</span>
                            </div>
                          </div>
                          <button className="w-full mt-6 h-[34px] bg-[#0084FF] text-white rounded-[10px] text-[14px] font-[500] hover:bg-[#0073E6] transition-colors">
                            Выбрать тариф
                          </button>
                        </div>

                        {/* Бизнес */}
                        <div className="bg-white rounded-[16px] p-6 flex flex-col">
                          <div className="flex items-center justify-between mb-4">
                            <h4 className="text-[18px] font-medium text-[#070F1A]">Бизнес</h4>
                            <div className="text-right">
                              <span className="text-[24px] font-medium text-[#070F1A]">{calculatePrice("Бизнес", messageCount, paymentPeriod).toLocaleString()}</span>
                              <span className="text-[14px] font-medium text-[#070F1A]"> ₽/мес</span>
                            </div>
                          </div>
                          <div className="space-y-2 text-[14px] text-[#8E8E93] flex-grow">
                            <div className="text-[16px] font-medium text-[#070F1A] mb-2">Все, что входит в тариф "Про" +</div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>База знаний: неограниченно</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>Команда: до 20 пользователей</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>Поддержка: приоритетная</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>Интеграции: индивидуальные решения под проект</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>Обновления: приоритетный доступ к новым версиям</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <img src="./Checkbox.svg" alt="✓" className="w-4 h-4" />
                              <span>White-label виджета</span>
                            </div>
                          </div>
                          <button 
                            className="w-full mt-6 h-[34px] bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors"
                            style={BUTTON_STYLES.blueButton}
                          >
                            Выбрать тариф
                          </button>
                        </div>
                      </div>
                    </div>
                  )}

                  {profileTab === 'notifications' && !isOperator && (
                    <div className="space-y-6">
                      {/* Плашка подключения Telegram бота */}
                      <div className="border border-[#070F1A]/10 rounded-[16px] p-5">
                        <div className="flex items-center gap-2 mb-2">
                          <h3 className="text-[18px] font-medium text-[#070F1A]">Уведомления в</h3>
                          <div className="flex items-center gap-1">
                            <span className="text-[18px] font-medium text-[#070F1A]">Telegram</span>
                          <img 
                            src="/tg.png" 
                            alt="Telegram" 
                            className="w-[15px] h-[13px]"
                          />
                          </div>
                        </div>
                        <p className="text-[14px] text-[#8E8E93] mb-6">
                          Получайте информацию о новых сообщениях, уведомлениях о переключения чата на оператора и тд. Это поможет вам быть на связи с клиентами круглосуточно и быть в курсе о перехватах диалогов человеком!
                        </p>
                        
                        <div className="mt-[30px]">
                          <p className="text-[14px] font-[500] text-[#070F1A] mb-4">
                            Перейдите в <a href="https://t.me/Adapto_notifications_bot" target="_blank" rel="noopener noreferrer" className="text-[#0084FF] hover:underline">наш Telegram-бот</a> и отправьте команду <span className="text-[#0084FF]">/start</span>.
                            <br />
                            После чего бот вышлет API ключ, который необходимо вставить в поле ниже
                          </p>
                          
                          <div className="flex gap-[10px]">
                            <input
                              type="text"
                              placeholder="Введите API ключ из @Adapto_notifications_bot"
                              value={telegramApiKey}
                              onChange={(e) => setTelegramApiKey(e.target.value)}
                              className="flex-1 h-[34px] px-4 border border-[#E5E7EB] rounded-[10px] text-[13px] font-[400] focus:outline-none focus:border-[#0084FF]"
                              style={INPUT_STYLES.inputField}
                            />
                            <button 
                              onClick={handleConnectTelegram}
                              disabled={isConnectingTelegram}
                              className="h-[34px] px-6 bg-[#0084FF] text-white rounded-[10px] text-[13px] font-[500] hover:bg-[#0073E6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                              style={BUTTON_STYLES.blueButton}
                            >
                              {isConnectingTelegram ? 'Подключение...' : 'Подключить'}
                            </button>
                          </div>
                          
                        </div>
                      </div>

                      {/* Настройки типов уведомлений */}
                      <div className="border border-[#070F1A]/10 rounded-[16px] p-5">
                        <h3 className="text-[18px] font-medium text-[#070F1A] mb-4">Типы уведомлений</h3>

                      <div className="space-y-4">
                          <div className="flex items-center justify-between p-3 bg-white rounded-[12px]">
                          <div>
                              <p className="text-[14px] font-[500] text-[#070F1A]">Новые сообщения в чатах</p>
                              <p className="text-[12px] text-[#8E8E93]">Уведомления о входящих сообщениях от клиентов</p>
                          </div>
                            <img 
                              src={telegramSettings?.notification_types?.includes('new_messages') ? "/iOS/Switch.svg" : "/iOS/Switch-1.svg"} 
                              alt="Включить" 
                              className="w-[34px] h-[34px] cursor-pointer hover:opacity-80 transition-opacity" 
                              onClick={() => toggleNotificationType('new_messages')}
                            />
                        </div>
                        
                          <div className="flex items-center justify-between p-3 bg-white rounded-[12px]">
                          <div>
                              <p className="text-[14px] font-[500] text-[#070F1A]">Перехваты оператором</p>
                              <p className="text-[12px] text-[#8E8E93]">Уведомления когда диалог перехватывает человек</p>
                          </div>
                            <img 
                              src={telegramSettings?.notification_types?.includes('operator_takeover') ? "/iOS/Switch.svg" : "/iOS/Switch-1.svg"} 
                              alt="Включить" 
                              className="w-[34px] h-[34px] cursor-pointer hover:opacity-80 transition-opacity" 
                              onClick={() => toggleNotificationType('operator_takeover')}
                            />
                        </div>
                        
                          <div className="flex items-center justify-between p-3 bg-white rounded-[12px]">
                          <div>
                              <p className="text-[14px] font-[500] text-[#070F1A]">Системные уведомления</p>
                              <p className="text-[12px] text-[#8E8E93]">Уведомления о системных событиях и ошибках</p>
                          </div>
                            <img 
                              src={telegramSettings?.notification_types?.includes('system_alerts') ? "/iOS/Switch.svg" : "/iOS/Switch-1.svg"} 
                              alt="Включить" 
                              className="w-[34px] h-[34px] cursor-pointer hover:opacity-80 transition-opacity" 
                              onClick={() => toggleNotificationType('system_alerts')}
                            />
                        </div>

                          <div className="flex items-center justify-between p-3 bg-white rounded-[12px]">
                            <div>
                              <p className="text-[14px] font-[500] text-[#070F1A]">Ежедневные отчеты</p>
                              <p className="text-[12px] text-[#8E8E93]">Ежедневная статистика и аналитика</p>
                            </div>
                            <img 
                              src={telegramSettings?.notification_types?.includes('daily_reports') ? "/iOS/Switch.svg" : "/iOS/Switch-1.svg"} 
                              alt="Включить" 
                              className="w-[34px] h-[34px] cursor-pointer hover:opacity-80 transition-opacity" 
                              onClick={() => toggleNotificationType('daily_reports')}
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  {profileTab === 'theme' && (
                    <div className="space-y-6">
                      <div className="flex gap-[15px]">
                        <div
                          className={`w-[250px] h-[170px] rounded-[16px] border cursor-pointer transition-all ${
                            theme === 'light'
                              ? 'bg-[#DBE9FF] border-[#0084FF]'
                              : 'bg-[#F3F5F7] border-[#070F1A]/10'
                          }`}
                          onClick={() => setTheme('light')}
                        >
                          <div className="h-full flex flex-col">
                            <div className="w-full h-[120px] bg-white rounded-t-[16px] flex items-center justify-center border border-gray-200">
                              <img src="/Group 172.png" alt="Светлая тема" className="w-full h-full object-cover rounded-t-[16px]" />
                            </div>
                            <div className="flex items-center gap-2 pl-[12px] h-[50px]">
                              <img 
                                src={theme === 'light' ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                                alt="Светлая" 
                                className="w-4 h-4" 
                              />
                              <span className="text-[14px] font-[500] text-[#070F1A]">Светлая тема</span>
                            </div>
                          </div>
                        </div>
                        <div 
                          className={`w-[250px] h-[170px] rounded-[16px] border cursor-pointer transition-all ${
                            theme === 'dark' 
                              ? 'bg-[#DBE9FF] border-[#0084FF]' 
                              : 'bg-[#F3F5F7] border-[#070F1A]/10'
                          }`}
                          onClick={() => setTheme('dark')}
                        >
                          <div className="h-full flex flex-col">
                            <div className="w-full h-[120px] bg-gray-800 rounded-t-[16px] flex items-center justify-center border border-gray-200">
                              <img src="/Group 173.png" alt="Темная тема" className="w-full h-full object-cover rounded-t-[16px]" />
                            </div>
                            <div className="flex items-center gap-2 pl-[12px] h-[50px]">
                              <img 
                                src={theme === 'dark' ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                                alt="Темная" 
                                className="w-4 h-4" 
                              />
                              <span className="text-[14px] font-[500] text-[#070F1A]">Темная тема</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        );

      case 'widget-dev':
        return (
          <div className="space-y-0">
            <div className="flex justify-between items-center" style={{ marginBottom: '16px' }}>
              <div>
                <h1 className="text-[20px] font-[500] text-[#070F1A]">Виджет на сайт</h1>
              </div>
              <div className="flex items-center gap-2">
                <Button 
                  onClick={handleCopyScript}
                  className="h-[34px] px-4 bg-[#0084FF] text-white hover:bg-[#0073E6] rounded-[10px] font-[500] text-[13px] flex items-center gap-2"
                  style={BUTTON_STYLES.blueButton}
                >
                  <img src="/document-copy.svg" alt="Копировать" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(100%) invert(1)' }} />
                  Скопировать скрипт
                </Button>
              </div>
            </div>

            {/* Разделитель под заголовком */}
            <div className="border-b" style={{ borderColor: '#E5E6E7', marginLeft: '-16px', marginRight: '-16px' }}></div>

            {/* Основная структура с двумя контейнерами */}
            <div className="flex h-[calc(100vh-200px)]">
              {/* Левый контейнер - настройки */}
              <div className="flex-[1.2] flex flex-col" style={{ marginTop: '20px' }}>
                {/* Плашки настроек */}
                <div className="space-y-[10px] flex-1">
                  {/* Плашка 1: Разделы виджета */}
                  <div className="bg-white rounded-[16px] overflow-hidden">
                    <div 
                      className="p-[20px] h-[76px] flex items-center gap-4 cursor-pointer"
                      onClick={() => setOpenWidgetSections(prev => ({...prev, sections: !prev.sections}))}
                    >
                      <div className="w-[40px] h-[40px] bg-white rounded-[10px] flex items-center justify-center overflow-hidden">
                        <img src="/1231234.png" alt="Разделы" className="w-full h-full object-contain" />
                      </div>
                      <div className="flex-1">
                        <h3 className="text-[16px] font-[500] text-[#070F1A] mb-1">Разделы виджета</h3>
                        <p className="text-[12px] text-[#8E8E93]">Выберите из чего будет состоять ваш виджет</p>
                      </div>
                      <div className={`transition-transform duration-300 ${openWidgetSections.sections ? '-rotate-90' : 'rotate-90'}`}>
                        <img src="/Bounds.svg" alt="Раскрыть" className="w-[11px] h-[11px]" style={{ filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)' }} />
                      </div>
                    </div>
                    {openWidgetSections.sections && (
                      <div className="px-[15px] pb-[15px]">
                        <div className="pt-4">
                          {/* Табы */}
                          <div className="border-b border-gray-200 mb-5">
                            <div className="flex">
                              <div className="flex-1 relative">
                                <button
                                  onClick={() => setActiveWidgetTab('main')}
                                  className={`w-full py-3 px-4 text-sm font-medium transition-colors flex items-center justify-center gap-[5px] ${
                                    activeWidgetTab === 'main'
                                      ? 'text-[#0084FF]'
                                      : 'text-[#8E8E93] hover:text-[#070F1A]'
                                  }`}
                                >
                                  <img 
                                    src="/house.svg" 
                                    alt="Главная" 
                                    className="w-[17px] h-[17px]" 
                                    style={{ 
                                      filter: activeWidgetTab === 'main' 
                                        ? 'brightness(0) saturate(100%) invert(27%) sepia(96%) saturate(1456%) hue-rotate(204deg) brightness(101%) contrast(101%)' 
                                        : 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)'
                                    }}
                                  />
                                  <span className="text-[14px]">Главная</span>
                                </button>
                                {activeWidgetTab === 'main' && (
                                  <div className="absolute bottom-0 left-0 right-0 h-[4px] bg-[#0084FF] rounded-t-[4px]"></div>
                                )}
                              </div>
                              <div className="flex-1 relative">
                                <button
                                  onClick={() => setActiveWidgetTab('chat')}
                                  className={`w-full py-3 px-4 text-sm font-medium transition-colors flex items-center justify-center gap-[5px] ${
                                    activeWidgetTab === 'chat'
                                      ? 'text-[#0084FF]'
                                      : 'text-[#8E8E93] hover:text-[#070F1A]'
                                  }`}
                                >
                                  <img 
                                    src="/Frame 147.svg" 
                                    alt="Чат" 
                                    className="w-[17px] h-[17px]" 
                                    style={{ 
                                      filter: activeWidgetTab === 'chat' 
                                        ? 'brightness(0) saturate(100%) invert(27%) sepia(96%) saturate(1456%) hue-rotate(204deg) brightness(101%) contrast(101%)' 
                                        : 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)'
                                    }}
                                  />
                                  <span className="text-[14px]">Чат</span>
                                </button>
                                {activeWidgetTab === 'chat' && (
                                  <div className="absolute bottom-0 left-0 right-0 h-[4px] bg-[#0084FF] rounded-t-[4px]"></div>
                                )}
                              </div>
                              <div className="flex-1 relative">
                                <button
                                  onClick={() => setActiveWidgetTab('form')}
                                  className={`w-full py-3 px-4 text-sm font-medium transition-colors flex items-center justify-center gap-[5px] ${
                                    activeWidgetTab === 'form'
                                      ? 'text-[#0084FF]'
                                      : 'text-[#8E8E93] hover:text-[#070F1A]'
                                  }`}
                                >
                                  <img 
                                    src="/clipboard-text.svg" 
                                    alt="Форма" 
                                    className="w-[17px] h-[17px]" 
                                    style={{ 
                                      filter: activeWidgetTab === 'form' 
                                        ? 'brightness(0) saturate(100%) invert(27%) sepia(96%) saturate(1456%) hue-rotate(204deg) brightness(101%) contrast(101%)' 
                                        : 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)'
                                    }}
                                  />
                                  <span className="text-[14px]">Форма</span>
                                </button>
                                {activeWidgetTab === 'form' && (
                                  <div className="absolute bottom-0 left-0 right-0 h-[4px] bg-[#0084FF] rounded-t-[4px]"></div>
                                )}
                              </div>
                            </div>
                          </div>

                          {/* Контент табов */}
                          {activeWidgetTab === 'main' && (
                            <div className="space-y-5">
                              {/* 1. Имя ИИ-агента */}
                              <div>
                                <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Имя ИИ-агента</h4>
                                <div className="flex items-center gap-[15px]">
                                  <input
                                    type="text"
                                    value={aiAgentName}
                                    onChange={(e) => setAiAgentName(e.target.value)}
                                    className="w-[256px] h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                  />
                                  <div className="flex items-center gap-2">
                                    <img 
                                      src={!showAILabel ? "/iOS/Switch-1.svg" : "/iOS/Switch.svg"} 
                                      alt="Переключатель" 
                                      className="w-[34px] h-[34px] cursor-pointer" 
                                      onClick={() => setShowAILabel(!showAILabel)}
                                    />
                                    <span className="text-[14px] text-[#070F1A]">Показывать метку ИИ агента</span>
                                  </div>
                                </div>
                              </div>

                              {/* 2. Логотип */}
                              <div>
                                <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Логотип</h4>
                                <div className="space-y-3">
                                  <div className="flex items-center gap-2 cursor-pointer" onClick={() => setLogoType('default')}>
                                    <img 
                                      src={logoType === 'default' ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                                      alt="По умолчанию" 
                                      className="w-4 h-4" 
                                    />
                                    <span className="text-[14px] text-[#070F1A]">По умолчанию</span>
                                  </div>
                                  <div className="flex items-center gap-2 cursor-pointer" onClick={() => setLogoType('custom')}>
                                    <img 
                                      src={logoType === 'custom' ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                                      alt="Загрузить свой" 
                                      className="w-4 h-4" 
                                    />
                                    <span className="text-[14px] text-[#070F1A]">Загрузить свой логотип</span>
                                  </div>
                                  {logoType === 'custom' && (
                                    <div className="flex items-center gap-[10px] cursor-pointer" onClick={() => document.getElementById('logo-upload').click()}>
                                      <div className="w-[40px] h-[40px] bg-white rounded-[10px] flex items-center justify-center overflow-hidden">
                                        {customLogo ? (
                                          <img src={customLogo} alt="Логотип" className="w-full h-full object-contain" />
                                        ) : (
                                        <img src="/Group 125.svg" alt="Логотип" className="w-full h-full object-contain" />
                                        )}
                                      </div>
                                      <div>
                                        {customLogoName ? (
                                          <>
                                            <p className="text-[14px] text-[#070F1A] font-[500]">Загружен: {customLogoName}</p>
                                            <p className="text-[9px] text-[#8E8E93]">Нажмите, чтобы изменить логотип</p>
                                          </>
                                        ) : (
                                          <>
                                        <p className="text-[14px] text-[#8E8E93] font-[500]">Загрузите файл</p>
                                        <p className="text-[9px] text-[#8E8E93]">Углы вашего логотипа будут закруглены, загрузите логотип с четкими углами.</p>
                                          </>
                                        )}
                                      </div>
                                      <input 
                                        type="file" 
                                        id="logo-upload" 
                                        className="hidden" 
                                        accept="image/*" 
                                        onChange={handleLogoUpload}
                                      />
                                    </div>
                                  )}
                                </div>
                              </div>

                              {/* 3. Заголовок */}
                              <div>
                                <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Заголовок</h4>
                                <textarea
                                  value={widgetTitle}
                                  onChange={(e) => setWidgetTitle(e.target.value)}
                                  className="w-full h-[80px] px-3 py-2 border border-[#070F1A]/10 rounded-[10px] text-[13px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20 resize-none"
                                  style={INPUT_STYLES.inputField}
                                />
                              </div>

                              {/* 4. Описание */}
                              <div>
                                <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Описание</h4>
                                <textarea
                                  value={widgetDescription}
                                  onChange={(e) => setWidgetDescription(e.target.value)}
                                  className="w-full h-[80px] px-3 py-2 border border-[#070F1A]/10 rounded-[10px] text-[13px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20 resize-none"
                                  style={INPUT_STYLES.inputField}
                                />
                              </div>

                              {/* 5. Вопросы */}
                              <div>
                                <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Вопросы</h4>
                                <div className="space-y-[10px]">
                                  {questions.map((question) => (
                                    <div key={question.id} className="bg-[#F3F5F7] rounded-[10px] p-3 h-[50px] flex items-center gap-[10px]">
                                      <img src="/Group 1.svg" alt="Перетащить" className="w-4 h-4 cursor-move" />
                                      <input
                                        type="text"
                                        value={question.text}
                                        onChange={(e) => updateQuestionText(question.id, e.target.value)}
                                        className="flex-1 h-[40px] px-3 border border-[#070F1A]/10 rounded-[7px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                      />
                                      <img 
                                        src={question.enabled ? "/iOS/Switch.svg" : "/iOS/Switch-1.svg"} 
                                        alt="Включить" 
                                        className="w-[34px] h-[34px] cursor-pointer" 
                                        onClick={() => toggleQuestionEnabled(question.id)}
                                      />
                                      <img 
                                        src="/traash.svg" 
                                        alt="Удалить" 
                                        className="w-4 h-4 cursor-pointer ml-[10px]" 
                                        onClick={() => {
                                          setQuestionToDelete(question.id);
                                          setShowDeleteQuestionModal(true);
                                        }}
                                      />
                                    </div>
                                  ))}
                                </div>
                                
                                {/* Кнопка добавить */}
                                <button 
                                  onClick={addQuestion}
                                  className="mt-3 h-[34px] px-4 bg-[#0084FF] text-white hover:bg-[#0073E6] rounded-[90px] font-[500] text-[14px] transition-colors flex items-center justify-center gap-[2px]"
                                >
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                  </svg>
                                  Добавить вопрос
                                </button>
                              </div>

                              {/* 6. Заголовок кнопки */}
                              <div>
                                <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Заголовок кнопки</h4>
                                <input
                                  type="text"
                                  value={buttonTitle}
                                  onChange={(e) => setButtonTitle(e.target.value)}
                                  className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[13px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                  style={INPUT_STYLES.inputField}
                                />
                              </div>

                              {/* 7. Описание кнопки */}
                              <div>
                                <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Описание кнопки</h4>
                                <input
                                  type="text"
                                  value={buttonDescription}
                                  onChange={(e) => setButtonDescription(e.target.value)}
                                  className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[13px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                  style={INPUT_STYLES.inputField}
                                />
                              </div>
                            </div>
                          )}

                          {activeWidgetTab === 'chat' && (
                            <div className="space-y-5">
                              {/* 1. Фото менеджеров */}
                              <div>
                                <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Фото менеджеров в правом углу виджета</h4>
                                <div className="space-y-3">
                                  <div className="flex items-center gap-2 cursor-pointer" onClick={() => setManagerPhotoType('none')}>
                                    <img 
                                      src={managerPhotoType === 'none' ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                                      alt="Не добавлять" 
                                      className="w-4 h-4" 
                                    />
                                    <span className="text-[14px] text-[#070F1A]">Не добавлять</span>
                                  </div>
                                  <div className="flex items-center gap-2 cursor-pointer" onClick={() => setManagerPhotoType('add')}>
                                    <img 
                                      src={managerPhotoType === 'add' ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                                      alt="Добавить" 
                                      className="w-4 h-4" 
                                    />
                                    <span className="text-[14px] text-[#070F1A]">Добавить (максимум 2)</span>
                                  </div>
                                  {managerPhotoType === 'add' && (
                                    <div className="flex items-center gap-[10px] cursor-pointer" onClick={() => document.getElementById('manager-photo-upload').click()}>
                                      <div className="w-[40px] h-[40px] bg-white rounded-[10px] flex items-center justify-center overflow-hidden">
                                        <img src="/Group 125.svg" alt="Фото менеджера" className="w-full h-full object-contain" />
                                      </div>
                                      <div>
                                        <p className="text-[14px] text-[#8E8E93] font-[500]">Загрузите файл</p>
                                        <p className="text-[9px] text-[#8E8E93]">Вес файла не более 500 КБ</p>
                                      </div>
                                      <input type="file" id="manager-photo-upload" className="hidden" accept="image/*" />
                                    </div>
                                  )}
                                </div>
                              </div>

                              {/* 2. Статус */}
                              <div>
                                <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Статус</h4>
                                <div className="flex items-center gap-[15px]">
                                  <input
                                    type="text"
                                    value={statusText}
                                    onChange={(e) => setStatusText(e.target.value)}
                                    className="flex-1 h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                  />
                                  <div className="flex items-center gap-2">
                                    <img
                                      src={showStatus ? "/iOS/Switch.svg" : "/iOS/Switch-1.svg"}
                                      alt="Переключатель"
                                      className="w-[34px] h-[34px] cursor-pointer"
                                      onClick={() => setShowStatus(!showStatus)}
                                    />
                                  </div>
                                </div>
                              </div>

                              {/* 3. Приветственное сообщение */}
                              <div>
                                <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Приветственное сообщение</h4>
                                <input
                                  type="text"
                                  value={welcomeMessage}
                                  onChange={(e) => setWelcomeMessage(e.target.value)}
                                  className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                  placeholder="Доброго дня! Чем мы можем помочь?"
                                />
                              </div>
                            </div>
                          )}

                          {activeWidgetTab === 'form' && (
                            <div className="space-y-5">
                              {/* 1. Когда запрашивать */}
                              <div>
                                <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Когда запрашивать</h4>
                                <div className="space-y-3">
                                  <div className="flex items-center gap-2 cursor-pointer" onClick={() => setFormTrigger('never')}>
                                    <img 
                                      src={formTrigger === 'never' ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                                      alt="Никогда" 
                                      className="w-4 h-4" 
                                    />
                                    <span className="text-[14px] text-[#070F1A]">Никогда</span>
                                  </div>
                                  <div className="flex items-center gap-2 cursor-pointer" onClick={() => setFormTrigger('before')}>
                                    <img 
                                      src={formTrigger === 'before' ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                                      alt="Перед началом диалога" 
                                      className="w-4 h-4" 
                                    />
                                    <span className="text-[14px] text-[#070F1A]">Перед началом диалога</span>
                                  </div>
                                  <div className="flex items-center gap-2 cursor-pointer" onClick={() => setFormTrigger('during')}>
                                    <img 
                                      src={formTrigger === 'during' ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                                      alt="В процессе диалога" 
                                      className="w-4 h-4" 
                                    />
                                    <span className="text-[14px] text-[#070F1A]">В процессе диалога</span>
                                  </div>
                                  <div className="flex items-center gap-2 cursor-pointer" onClick={() => setFormTrigger('timer')}>
                                    <img 
                                      src={formTrigger === 'timer' ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                                      alt="По таймеру" 
                                      className="w-4 h-4" 
                                    />
                                    <span className="text-[14px] text-[#070F1A]">По таймеру</span>
                                  </div>
                                  <div className="flex items-center gap-2 cursor-pointer" onClick={() => setFormTrigger('after_answer')}>
                                    <img 
                                      src={formTrigger === 'after_answer' ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                                      alt="После ответа на вопрос клиента" 
                                      className="w-4 h-4" 
                                    />
                                    <span className="text-[14px] text-[#070F1A]">После ответа на вопрос клиента</span>
                                  </div>
                                </div>
                              </div>

                              {/* Поле для времени таймера - показываем только если выбран "По таймеру" */}
                              {formTrigger === 'timer' && (
                                <div>
                                  <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Время показа формы (секунды)</h4>
                                  <input
                                    type="number"
                                    value={formTimerSeconds}
                                    onChange={(e) => setFormTimerSeconds(parseInt(e.target.value) || 30)}
                                    min="1"
                                    max="300"
                                    className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                  />
                                </div>
                              )}

                              {/* 2. Поля формы - показываем только если не выбрано "Никогда" */}
                              {formTrigger !== 'never' && (
                                <>
                                  <div>
                                    <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Поля формы</h4>
                                    <div className="relative">
                                      <button
                                        onClick={() => setShowFormDropdown(!showFormDropdown)}
                                        className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20 flex items-center justify-between"
                                      >
                                        <span>Выбрать (до 4-х полей)</span>
                                        <img 
                                          src="/Bounds.svg" 
                                          alt="Раскрыть" 
                                          className="w-3 h-3 transition-transform duration-300" 
                                          style={{ 
                                            transform: showFormDropdown ? 'rotate(-90deg)' : 'rotate(90deg)',
                                            filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)'
                                          }}
                                        />
                                      </button>
                                      
                                      {showFormDropdown && (
                                        <div className="absolute bottom-full left-0 right-0 mb-1 bg-white border border-[#070F1A]/10 rounded-[10px] shadow-lg z-50 max-h-[200px] overflow-hidden">
                                          <div className="p-2 max-h-[180px] overflow-y-auto">
                                            <div className="space-y-2">
                                              {formFields.map((field) => (
                                                <div 
                                                  key={field.id} 
                                                  className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                                                  onClick={() => toggleFormField(field.type)}
                                                >
                                                  <img 
                                                    src={selectedFormFields.includes(field.type) ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                                                    alt={field.label} 
                                                    className="w-4 h-4" 
                                                  />
                                                  <span className="text-[13px] text-[#070F1A]">{field.label}</span>
                                                </div>
                                              ))}
                                            </div>
                                          </div>
                                        </div>
                                      )}
                                    </div>
                                  </div>

                                  {/* 3. Выбранные поля */}
                                  {selectedFormFields.length > 0 && (
                                    <div>
                                      <div className="space-y-[10px]">
                                        {formFields
                                          .filter(field => selectedFormFields.includes(field.type))
                                          .map((field) => (
                                            <div key={field.id} className="bg-[#F3F5F7] rounded-[10px] p-3 h-[70px] flex items-center gap-[10px]">
                                              <img src="/Group 1.svg" alt="Перетащить" className="w-4 h-4 cursor-move" />
                                              <div className="flex-1 flex items-center gap-[10px]">
                                                <div className="bg-white rounded-[7px] px-3 py-2 flex-1 flex flex-col gap-[5px]">
                                                  <span className="text-[10px] text-[#8E8E93]">{field.label}</span>
                                                  <div className="flex items-center gap-[10px]">
                                                    <input
                                                      type="text"
                                                      value={field.placeholder}
                                                      onChange={(e) => updateFormFieldPlaceholder(field.id, e.target.value)}
                                                      className="flex-1 text-[14px] text-[#070F1A] focus:outline-none"
                                                    />
                                                    <img 
                                                      src="/vector.svg" 
                                                      alt="Редактировать" 
                                                      className="w-2 h-2 cursor-pointer" 
                                                    />
                                                  </div>
                                                </div>
                                                <div className="flex items-center gap-2">
                                                  <span className="text-[13px] text-[#070F1A]">Обязательно</span>
                                                  <img
                                                    src={field.required ? "/iOS/Switch-1.svg" : "/iOS/Switch.svg"}
                                                    alt="Обязательно"
                                                    className="w-[34px] h-[34px] cursor-pointer"
                                                    onClick={() => toggleFormFieldRequired(field.id)}
                                                  />
                                                </div>
                                              </div>
                                            </div>
                                          ))}
                                      </div>
                                    </div>
                                  )}

                                  {/* 4. Заголовок формы */}
                                  <div>
                                    <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Заголовок формы</h4>
                                    <input
                                      type="text"
                                      value={formTitle}
                                      onChange={(e) => setFormTitle(e.target.value)}
                                      placeholder="Пожалуйста заполните форму"
                                      className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                    />
                                  </div>

                                </>
                              )}

                              {/* 5. Ссылка на политику - всегда видна */}
                              <div>
                                <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Ссылка на политику обработки персональных данных</h4>
                                <input
                                  type="url"
                                  value={privacyPolicyLink}
                                  onChange={(e) => setPrivacyPolicyLink(e.target.value)}
                                  placeholder="https://example.com/privacy-policy"
                                  className={`w-full h-[34px] px-3 border rounded-[10px] text-[14px] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20 ${
                                    privacyPolicyLink && !validateUrl(privacyPolicyLink) 
                                      ? 'border-red-500' 
                                      : 'border-[#070F1A]/10'
                                  }`}
                                />
                                {privacyPolicyLink && !validateUrl(privacyPolicyLink) && (
                                  <p className="text-[12px] text-red-500 mt-1">Введите корректную ссылку</p>
                                )}
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Плашка 2: Стилизация виджета */}
                  <div className="bg-white rounded-[16px] overflow-hidden">
                    <div 
                      className="p-[20px] h-[76px] flex items-center gap-4 cursor-pointer"
                      onClick={() => setOpenWidgetSections(prev => ({...prev, styling: !prev.styling}))}
                    >
                      <div className="w-[40px] h-[40px] bg-white rounded-[10px] flex items-center justify-center overflow-hidden">
                        <img src="/1231235.png" alt="Стилизация" className="w-full h-full object-contain" />
                      </div>
                      <div className="flex-1">
                        <h3 className="text-[16px] font-[500] text-[#070F1A] mb-1">Стилизация виджета</h3>
                        <p className="text-[12px] text-[#8E8E93]">Настройте стилистику виджета под ваш бренд</p>
                      </div>
                      <div className={`transition-transform duration-300 ${openWidgetSections.styling ? '-rotate-90' : 'rotate-90'}`}>
                        <img src="/Bounds.svg" alt="Раскрыть" className="w-[11px] h-[11px]" style={{ filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)' }} />
                      </div>
                    </div>
                    {openWidgetSections.styling && (
                      <div className="px-[15px] pb-[15px] border-t border-[#070F1A]/10">
                        <div className="pt-4 space-y-5">
                          {/* 1. Цветовая тема виджета */}
                          <div>
                            <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Цветовая тема виджета</h4>
                            <div className="flex gap-[15px]">
                                                            <div
                                className={`w-[141px] h-[120px] rounded-[12px] border cursor-pointer transition-all ${
                                  widgetTheme === 'white'
                                    ? 'bg-[#DBE9FF] border-[#0084FF]'
                                    : 'bg-[#F3F5F7] border-[#070F1A]/10'
                                }`}
                                onClick={() => setWidgetTheme('white')}
                              >
                                <div className="h-full flex flex-col">
                                  <div className="w-full h-[80px] bg-white rounded-t-[12px] flex items-center justify-center border border-gray-200">
                                    <img src="/Group 161.png" alt="Белая тема" className="w-full h-full object-contain rounded-t-[12px]" />
                                  </div>
                                  <div className="flex items-center gap-2 pl-[10px] pt-2">
                                    <img 
                                      src={widgetTheme === 'white' ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                                      alt="Белая" 
                                      className="w-4 h-4" 
                                    />
                                    <span className="text-[14px] text-[#070F1A]">Белая</span>
                                  </div>
                                </div>
                              </div>
                              <div 
                                className={`w-[141px] h-[120px] rounded-[12px] border cursor-pointer transition-all ${
                                  widgetTheme === 'dark' 
                                    ? 'bg-[#DBE9FF] border-[#0084FF]' 
                                    : 'bg-[#F3F5F7] border-[#070F1A]/10'
                                }`}
                                onClick={() => setWidgetTheme('dark')}
                              >
                                <div className="h-full flex flex-col">
                                  <div className="w-full h-[80px] bg-gray-800 rounded-t-[12px] flex items-center justify-center border border-gray-200">
                                    <img src="/Group 160.png" alt="Темная тема" className="w-full h-full object-contain rounded-t-[12px]" />
                                  </div>
                                  <div className="flex items-center gap-2 pl-[10px] pt-2">
                                    <img 
                                      src={widgetTheme === 'dark' ? "/Checkbox.svg" : "/Checkbox-1.svg"} 
                                      alt="Темная" 
                                      className="w-4 h-4" 
                                    />
                                    <span className="text-[14px] text-[#070F1A]">Темная</span>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* 2. Цвет фона и Акцентный цвет */}
                          <div className="flex gap-[15px]">
                            <div className="flex-1">
                              <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Цвет фона</h4>
                              <div className="relative">
                                <input
                                  type="text"
                                  value={selectedGradient > 0 ? `Gradient №${selectedGradient}` : backgroundColor}
                                onChange={(e) => {
                                  if (selectedGradient === 0) {
                                    setBackgroundColor(e.target.value);
                                  }
                                }}
                                  className="w-full h-[34px] px-3 pr-12 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] bg-white"
                                />
                                <div 
                                  className="color-picker-button absolute right-2 top-1/2 transform -translate-y-1/2 w-[28px] h-[28px] cursor-pointer"
                                  onClick={() => openColorPicker('background')}
                                >
                                  <div 
                                    className="color-picker-preview w-[28px] h-[28px] rounded-[90px]"
                                    style={{ 
                                      background: 'conic-gradient(from 0deg, #0C28FF 0%, #03FFFF 14%, #24D627 23%, #FDFF22 41%, #FF2227 58%, #FE2DF6 77%, #7122FF 89%, #0C28FF 100%)',
                                      border: '1.5px solid transparent',
                                      backgroundClip: 'padding-box'
                                    }}
                                  >
                                    <div 
                                      className="w-[16px] h-[16px] rounded-[90px] absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"
                                      style={{ backgroundColor: backgroundColor.includes('gradient') ? '#FFFFFF' : backgroundColor }}
                                    ></div>
                                  </div>
                                </div>
                                {renderColorPicker('background')}
                              </div>
                              {/* Градиенты */}
                              <div className="flex gap-[10px] mt-3">
                                {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((num) => (
                                  <div 
                                    key={num}
                                    className={`w-[20px] h-[20px] rounded-[90px] border cursor-pointer relative ${
                                      selectedGradient === num ? 'border-[#0084FF]' : 'border-[#C8C7CB]'
                                    }`}
                                    onClick={() => selectGradient(num)}
                                  >
                                    <div 
                                      className="w-[14px] h-[14px] rounded-[90px] absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"
                                      style={{
                                        background: num === 1 ? 'linear-gradient(30deg, #52AEFF 0%, #096EFD 100%)' :
                                                   num === 2 ? 'linear-gradient(30deg, #39E978 0%, #2A7344 100%)' :
                                                   num === 3 ? 'linear-gradient(30deg, #4C4C4C 0%, #282828 100%)' :
                                                   num === 4 ? 'linear-gradient(30deg, #D12020 0%, #8A2626 100%)' :
                                                   num === 5 ? 'linear-gradient(30deg, #D15820 0%, #8A4B26 100%)' :
                                                   num === 6 ? 'linear-gradient(30deg, #FDAB54 0%, #FA7F89 100%)' :
                                                   num === 7 ? 'linear-gradient(30deg, #A41AE8 0%, #60268A 100%)' :
                                                   num === 8 ? 'linear-gradient(30deg, #DAC887 0%, #EDAA24 100%)' :
                                                   num === 9 ? 'linear-gradient(30deg, #5675FF 0%, #1749BD 100%)' :
                                                   'linear-gradient(30deg, #28BCEE 0%, #27B0C2 100%)'
                                      }}
                                    ></div>
                                  </div>
                                ))}
                              </div>
                            </div>
                            <div className="flex-1">
                              <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Акцентный цвет</h4>
                              <div className="relative">
                                <input
                                  type="text"
                                  value={accentColor}
                                onChange={(e) => setAccentColor(e.target.value)}
                                  className="w-full h-[34px] px-3 pr-12 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] bg-white"
                                />
                                <div 
                                  className="color-picker-button absolute right-2 top-1/2 transform -translate-y-1/2 w-[28px] h-[28px] cursor-pointer"
                                  onClick={() => openColorPicker('accent')}
                                >
                                  <div 
                                    className="color-picker-preview w-[28px] h-[28px] rounded-[90px]"
                                    style={{ 
                                      background: 'conic-gradient(from 0deg, #0C28FF 0%, #03FFFF 14%, #24D627 23%, #FDFF22 41%, #FF2227 58%, #FE2DF6 77%, #7122FF 89%, #0C28FF 100%)',
                                      border: '1.5px solid transparent',
                                      backgroundClip: 'padding-box'
                                    }}
                                  >
                                    <div 
                                      className="w-[16px] h-[16px] rounded-[90px] absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"
                                      style={{ backgroundColor: accentColor }}
                                    ></div>
                                  </div>
                                </div>
                                {renderColorPicker('accent')}
                              </div>
                            </div>
                          </div>

                          {/* 3. Цвет кнопки открытия виджета */}
                          <div>
                            <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Цвет кнопки открытия виджета</h4>
                            <div className="relative">
                              <input
                                type="text"
                                value={buttonColor}
                                onChange={(e) => setButtonColor(e.target.value)}
                                className="w-full h-[34px] px-3 pr-12 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] bg-white"
                              />
                              <div 
                                className="color-picker-button absolute right-2 top-1/2 transform -translate-y-1/2 w-[28px] h-[28px] cursor-pointer"
                                onClick={() => openColorPicker('button')}
                              >
                                <div 
                                  className="w-[28px] h-[28px] rounded-[90px]"
                                  style={{ 
                                    background: 'conic-gradient(from 0deg, #0C28FF 0%, #03FFFF 14%, #24D627 23%, #FDFF22 41%, #FF2227 58%, #FE2DF6 77%, #7122FF 89%, #0C28FF 100%)',
                                    border: '1.5px solid transparent',
                                    backgroundClip: 'padding-box'
                                  }}
                                >
                                  <div 
                                    className="w-[16px] h-[16px] rounded-[90px] absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"
                                    style={{ backgroundColor: buttonColor }}
                                  ></div>
                                </div>
                              </div>
                              {renderColorPicker('button')}
                            </div>
                          </div>

                          {/* 4. Позиционирование */}
                          <div className="flex gap-[15px]">
                            <div className="flex-1">
                              <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Позиция на компьютере</h4>
                              <div className="flex gap-[10px]">
                                <div className="flex-1">
                                  <label className="text-[12px] text-[#8E8E93] mb-1 block">Отступ снизу</label>
                                  <input
                                    type="text"
                                    value={`${desktopBottomOffset}px`}
                                    onChange={(e) => {
                                      const value = e.target.value.replace('px', '');
                                      setDesktopBottomOffset(Number(value) || 0);
                                    }}
                                    className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                  />
                                </div>
                                <div className="flex-1">
                                  <label className="text-[12px] text-[#8E8E93] mb-1 block">Отступ справа</label>
                                  <input
                                    type="text"
                                    value={`${desktopRightOffset}px`}
                                    onChange={(e) => {
                                      const value = e.target.value.replace('px', '');
                                      setDesktopRightOffset(Number(value) || 0);
                                    }}
                                    className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                  />
                                </div>
                              </div>
                            </div>
                            <div className="flex-1">
                              <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Позиция на телефоне и планшете</h4>
                              <div className="flex gap-[10px]">
                                <div className="flex-1">
                                  <label className="text-[12px] text-[#8E8E93] mb-1 block">Отступ снизу</label>
                                  <input
                                    type="text"
                                    value={`${mobileBottomOffset}px`}
                                    onChange={(e) => {
                                      const value = e.target.value.replace('px', '');
                                      setMobileBottomOffset(Number(value) || 0);
                                    }}
                                    className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                  />
                                </div>
                                <div className="flex-1">
                                  <label className="text-[12px] text-[#8E8E93] mb-1 block">Отступ справа</label>
                                  <input
                                    type="text"
                                    value={`${mobileRightOffset}px`}
                                    onChange={(e) => {
                                      const value = e.target.value.replace('px', '');
                                      setMobileRightOffset(Number(value) || 0);
                                    }}
                                    className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                  />
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Плашка 3: Быстрые ответы и триггеры */}
                  <div className="bg-white rounded-[16px] overflow-hidden">
                    <div 
                      className="p-[20px] h-[76px] flex items-center gap-4 cursor-pointer"
                      onClick={() => setOpenWidgetSections(prev => ({...prev, triggers: !prev.triggers}))}
                    >
                      <div className="w-[40px] h-[40px] bg-white rounded-[10px] flex items-center justify-center overflow-hidden">
                        <img src="/1231236.png" alt="Триггеры" className="w-full h-full object-contain" />
                      </div>
                      <div className="flex-1">
                        <h3 className="text-[16px] font-[500] text-[#070F1A] mb-1">Быстрые ответы и триггеры</h3>
                        <p className="text-[12px] text-[#8E8E93]">Добавьте кнопки ответа, триггерные и догоняющие смс</p>
                      </div>
                      <div className={`transition-transform duration-300 ${openWidgetSections.triggers ? '-rotate-90' : 'rotate-90'}`}>
                        <img src="/Bounds.svg" alt="Раскрыть" className="w-[11px] h-[11px]" style={{ filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)' }} />
                      </div>
                    </div>
                    {openWidgetSections.triggers && (
                      <div className="px-[15px] pb-[15px] border-t border-[#070F1A]/10">
                        <div className="pt-4 space-y-6">
                          
                          {/* Триггерное сообщение */}
                          <div>
                            <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Триггерное сообщение</h4>
                            <div className="grid grid-cols-2 gap-[15px] mb-4">
                              <button
                                onClick={() => setTriggerMessagesEnabled(true)}
                                className={`h-[34px] px-4 rounded-[10px] text-[14px] font-[500] transition-all ${
                                  triggerMessagesEnabled 
                                    ? 'bg-[#0084FF] text-white' 
                                    : 'bg-transparent border border-[#070F1A]/10 text-[#8E8E93]'
                                }`}
                              >
                                Есть
                              </button>
                              <button
                                onClick={() => setTriggerMessagesEnabled(false)}
                                className={`h-[34px] px-4 rounded-[10px] text-[14px] font-[500] transition-all ${
                                  !triggerMessagesEnabled 
                                    ? 'bg-[#0084FF] text-white' 
                                    : 'bg-transparent border border-[#070F1A]/10 text-[#8E8E93]'
                                }`}
                              >
                                Нет
                              </button>
                            </div>

                            {triggerMessagesEnabled && (
                              <div className="space-y-4">
                                {triggerMessages.map((message, index) => (
                                  <div key={message.id} className="bg-[#F3F5F7] rounded-[10px] p-[15px] h-[235px] relative">
                                    <div className="flex justify-between items-center mb-[13px]">
                                      <h5 className="text-[14px] font-[500] text-[#070F1A]">Триггерное сообщение №{index + 1}</h5>
                                      <button
                                        onClick={() => removeTriggerMessage(message.id)}
                                        className="w-[15px] h-[15px] flex items-center justify-center"
                                      >
                                        <img 
                                          src="/traash.svg" 
                                          alt="Удалить" 
                                          className="w-[16px] h-[16px]"
                                          style={{ filter: 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(346deg) brightness(104%) contrast(97%)' }}
                                        />
                                      </button>
                                    </div>
                                    
                                    <div className="bg-white rounded-[7px] px-[15px] py-[15px] space-y-4">
                                      <div className="flex gap-4">
                                        <div className="w-[155px]">
                                          <label className="text-[14px] text-[#8E8E93] mb-1 block">Время показа через:</label>
                                          <div className="flex items-center gap-1">
                                          <input
                                            type="number"
                                            value={message.timeDelay}
                                            onChange={(e) => updateTriggerMessage(message.id, 'timeDelay', Number(e.target.value))}
                                              className="w-[50px] h-[40px] px-2 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                          />
                                            <span className="text-[12px] text-[#070F1A] opacity-50">сек</span>
                                          </div>
                                        </div>
                                        <div className="flex-1">
                                          <label className="text-[14px] text-[#8E8E93] mb-1 block">
                                            Сообщение 
                                            <span className="text-[10px] text-[#8E8E93]/70 ml-1">
                                              ({message.message.trim().split(/\s+/).filter(w => w.length > 0).length}/15 слов)
                                            </span>
                                          </label>
                                          <input
                                            type="text"
                                            value={message.message}
                                            onChange={(e) => updateTriggerMessage(message.id, 'message', e.target.value)}
                                            className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                            placeholder="Введите сообщение (максимум 15 слов)"
                                          />
                                        </div>
                                      </div>
                                      <div>
                                        <label className="text-[14px] text-[#8E8E93] mb-1 block">Кнопка ответа</label>
                                        <input
                                          type="text"
                                          value={message.buttonText}
                                          onChange={(e) => updateTriggerMessage(message.id, 'buttonText', e.target.value)}
                                          className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                        />
                                      </div>
                                    </div>
                                  </div>
                                ))}
                                
                                <button
                                  onClick={addTriggerMessage}
                                  className="mt-3 h-[34px] px-4 bg-[#0084FF] text-white hover:bg-[#0073E6] rounded-[90px] font-[500] text-[14px] transition-colors flex items-center justify-center gap-[2px]"
                                >
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                  </svg>
                                  Добавить триггер
                                </button>
                              </div>
                            )}
                          </div>

                          {/* Догоняющее сообщение */}
                          <div>
                            <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Догоняющее сообщение</h4>
                            <div className="grid grid-cols-2 gap-[15px] mb-4">
                              <button
                                onClick={() => setFollowUpMessagesEnabled(true)}
                                className={`h-[34px] px-4 rounded-[10px] text-[14px] font-[500] transition-all ${
                                  followUpMessagesEnabled 
                                    ? 'bg-[#0084FF] text-white' 
                                    : 'bg-transparent border border-[#070F1A]/10 text-[#8E8E93]'
                                }`}
                              >
                                Есть
                              </button>
                              <button
                                onClick={() => setFollowUpMessagesEnabled(false)}
                                className={`h-[34px] px-4 rounded-[10px] text-[14px] font-[500] transition-all ${
                                  !followUpMessagesEnabled 
                                    ? 'bg-[#0084FF] text-white' 
                                    : 'bg-transparent border border-[#070F1A]/10 text-[#8E8E93]'
                                }`}
                              >
                                Нет
                              </button>
                            </div>

                            {followUpMessagesEnabled && (
                              <div className="space-y-4">
                                {followUpMessages.map((message, index) => (
                                  <div key={message.id} className="bg-[#F3F5F7] rounded-[10px] p-[15px] h-[235px] relative">
                                    <div className="flex justify-between items-center mb-[13px]">
                                      <h5 className="text-[14px] font-[500] text-[#070F1A]">Догоняющее сообщение №{index + 1}</h5>
                                      <button
                                        onClick={() => removeFollowUpMessage(message.id)}
                                        className="w-[15px] h-[15px] flex items-center justify-center"
                                      >
                                        <img 
                                          src="/traash.svg" 
                                          alt="Удалить" 
                                          className="w-[16px] h-[16px]"
                                          style={{ filter: 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(346deg) brightness(104%) contrast(97%)' }}
                                        />
                                      </button>
                                    </div>
                                    
                                    <div className="bg-white rounded-[7px] px-[15px] py-[15px] space-y-4">
                                      <div className="flex gap-4">
                                        <div className="w-[155px]">
                                          <label className="text-[14px] text-[#8E8E93] mb-1 block">Время показа через:</label>
                                          <div className="flex items-center gap-1">
                                          <input
                                            type="number"
                                            value={message.timeDelay}
                                            onChange={(e) => updateFollowUpMessage(message.id, 'timeDelay', Number(e.target.value))}
                                              className="w-[50px] h-[40px] px-2 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                          />
                                            <span className="text-[12px] text-[#070F1A] opacity-50">сек</span>
                                          </div>
                                        </div>
                                        <div className="flex-1">
                                          <label className="text-[14px] text-[#8E8E93] mb-1 block">
                                            Сообщение 
                                            <span className="text-[10px] text-[#8E8E93]/70 ml-1">
                                              ({message.message.trim().split(/\s+/).filter(w => w.length > 0).length}/15 слов)
                                            </span>
                                          </label>
                                          <input
                                            type="text"
                                            value={message.message}
                                            onChange={(e) => updateFollowUpMessage(message.id, 'message', e.target.value)}
                                            className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                            placeholder="Введите сообщение (максимум 15 слов)"
                                          />
                                        </div>
                                      </div>
                                      <div>
                                        <label className="text-[14px] text-[#8E8E93] mb-1 block">Кнопка ответа</label>
                                        <input
                                          type="text"
                                          value={message.buttonText}
                                          onChange={(e) => updateFollowUpMessage(message.id, 'buttonText', e.target.value)}
                                          className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20"
                                        />
                                      </div>
                                    </div>
                                  </div>
                                ))}
                                
                                <button
                                  onClick={addFollowUpMessage}
                                  className="mt-3 h-[34px] px-4 bg-[#0084FF] text-white hover:bg-[#0073E6] rounded-[90px] font-[500] text-[14px] transition-colors flex items-center justify-center gap-[2px]"
                                >
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                  </svg>
                                  Добавить догоняющее
                                </button>
                              </div>
                            )}
                          </div>

                          {/* Текст кнопки разрешения вопроса и завершения диалога */}
                          <div>
                            <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Текст кнопки разрешения вопроса и завершения диалога</h4>
                            <div className="flex gap-[10px] flex-wrap">
                              {['👍 Это помогло', 'Спасибо', 'Спасибо за ответ', '👍'].map((option) => (
                                <button
                                  key={option}
                                  onClick={() => setSelectedCompletionButton(option)}
                                  className={`h-[34px] px-[14px] rounded-[90px] text-[13px] font-[500] transition-all ${
                                    selectedCompletionButton === option
                                      ? 'bg-[#0084FF] text-white'
                                      : 'bg-transparent border border-[#070F1A]/10 text-[#8E8E93]'
                                  }`}
                                >
                                  {option}
                                </button>
                              ))}
                            </div>
                          </div>

                          {/* Текст кнопки для перенаправления на человека */}
                          <div>
                            <h4 className="text-[14px] font-[500] text-[#8E8E93] mb-[10px]">Текст кнопки для перенаправления на человека</h4>
                            <div className="flex gap-[10px] flex-wrap">
                              {['Получить доп. помощь', 'Поговорить с человеком 👤', 'Нет'].map((option) => (
                                <button
                                  key={option}
                                  onClick={() => setSelectedHumanButton(option)}
                                  className={`h-[34px] px-[14px] rounded-[90px] text-[13px] font-[500] transition-all ${
                                    selectedHumanButton === option
                                      ? 'bg-[#0084FF] text-white'
                                      : 'bg-transparent border border-[#070F1A]/10 text-[#8E8E93]'
                                  }`}
                                >
                                  {option}
                                </button>
                              ))}
                            </div>
                          </div>

                        </div>
                      </div>
                    )}
                  </div>
                </div>

                {/* Кнопка сохранения (sticky к низу мейн-контейнера) */}
                <div className="sticky bottom-0 z-10 mt-6">
                  <div className="w-full shadow-[0_12px_30px_rgba(7,15,26,0.12)]/50">
                    <Button
                      onClick={saveWidgetSettings}
                      className="w-full h-[34px] bg-[#0084FF] text-white hover:bg-[#0073E6] rounded-[10px] font-[500] text-[13px] shadow-[0_12px_30px_rgba(7,15,26,0.12)]"
                      style={BUTTON_STYLES.blueButton}
                    >
                      Сохранить изменения
                    </Button>
                  </div>
                </div>
              </div>

              {/* Вертикальный разделитель */}
              <div className="w-px bg-[#E5E6E7] self-stretch" style={{ marginLeft: '16px', marginRight: '16px', marginTop: '0px' }}></div>

              {/* Правый контейнер - предпросмотр виджета */}
              <div className="flex-1 bg-[#F8F8FA] py-6 sticky top-0 self-start h-fit max-h-screen overflow-y-auto" style={{ marginTop: '20px' }}>
                {/* Живой предпросмотр виджета */}
                <div className="relative h-[680px]">
                  
                  {/* Кнопка виджета - всегда видна */}
                  <div 
                    className="absolute transition-all duration-300"
                    style={{
                      bottom: `${widgetDevelopmentSettings.desktopBottomOffset || 20}px`,
                      right: `${(widgetDevelopmentSettings.desktopRightOffset || 20) + 40}px`, // сдвинуто левее на 40px
                      zIndex: widgetDevelopmentSettings.zIndex || 9999
                    }}
                  >
                    <button
                      onClick={() => widgetPreviewOpen ? handleWidgetClose() : handleWidgetOpen()}
                      className="w-[50px] h-[50px] shadow-lg hover:shadow-xl transition-all duration-200 flex items-center justify-center"
                      style={{
                        backgroundColor: buttonColor || '#0084FF',
                        borderRadius: '990px 990px 0px 990px' // Скругление по дизайну
                      }}
                    >
                      {/* Иконка меняется в зависимости от состояния */}
                      {widgetPreviewOpen ? (
                        <img 
                          src="/Icon2.svg" 
                          alt="Close" 
                          className="w-4 h-4"
                          style={{ filter: 'brightness(0) invert(1)' }}
                        />
                      ) : (
                        <img 
                          src="/Vectorlogovidget.svg" 
                          alt="Widget" 
                          className="w-6 h-6"
                          style={{ filter: 'brightness(0) invert(1)' }}
                        />
                      )}
                    </button>
                  </div>
                  
                  {/* Виджет в открытом состоянии */}
                  {widgetPreviewOpen && (
                    <div 
                      className="absolute transition-all duration-300"
                      style={{
                        bottom: `${(widgetDevelopmentSettings.desktopBottomOffset || 20) + 60}px`, // 50px кнопка + 10px отступ
                        right: `${(widgetDevelopmentSettings.desktopRightOffset || 20) + 40}px`, // сдвинуто левее на 40px
                        zIndex: widgetDevelopmentSettings.zIndex || 9999
                      }}
                    >
                      <div className={`rounded-[20px] shadow-lg border w-[371px] h-[601px] flex flex-col overflow-hidden relative ${
                        widgetTheme === 'dark' 
                          ? 'bg-[#171717] border-white/10' 
                          : 'bg-white border-gray-200'
                      }`}>
                        
                        {/* Кнопка закрытия */}
                        <button
                          onClick={handleWidgetClose}
                          className="absolute top-[15px] right-[15px] z-10 w-[18px] h-[18px] flex items-center justify-center hover:bg-white/10 rounded-[5px] transition-colors"
                        >
                          <img src="/x-02.svg" alt="Закрыть" className="w-[18px] h-[18px]" style={{ marginTop: '10px' }} />
                        </button>
                        
                        {/* Верхняя часть с градиентом - только для главной страницы */}
                        {widgetCurrentPage === 'home' && (
                          <div 
                            className="h-[238px] relative"
                            style={{
                              background: selectedGradient > 0 ? backgroundColor : backgroundColor
                            }}
                          >
                            {/* Логотип */}
                            <div className="absolute top-[21px] left-[20px]">
                              <div className="w-[40px] h-[40px] bg-white rounded-[10px] flex items-center justify-center overflow-hidden">
                                {logoType === 'custom' && customLogo ? (
                                  <img src={customLogo} alt="Logo" className="w-full h-full object-contain" />
                                ) : (
                                  <img src="/Group 1234.svg" alt="Logo" className="w-full h-full object-contain" />
                                )}
                              </div>
                            </div>
                            
                            {/* Заголовок и описание */}
                            <div className="absolute top-[80px] left-[20px] text-white">
                              <h2 className="text-[22px] font-medium leading-tight mb-2">
                                {widgetTitle || 'Здравствуйте! 👋 Чем мы можем помочь?'}
                              </h2>
                              <p className="text-[14px] opacity-60">
                                {widgetDescription || 'Выберите вопрос или задайте в чате свой'}
                              </p>
                            </div>
                            
                            {/* Кнопка "Отправить сообщение" - на границе фонов */}
                            <div className="absolute bottom-[-34px] left-[20px] z-50">
                              <button 
                                onClick={() => {
                                  console.log('Кнопка "Отправить сообщение" нажата');
                                  setWidgetCurrentPage('chat');
                                }}
                                className={`w-[332px] h-[69px] rounded-[12px] border flex items-center justify-start px-4 transition-colors cursor-pointer ${
                                  widgetTheme === 'dark'
                                    ? 'bg-[#212121] border-white/10 hover:bg-[#3A3A3A]'
                                    : 'bg-white border-[#070F1A]/10 hover:bg-gray-50'
                                }`}
                              >
                                <div className="flex-1 text-left">
                                  <h3 className={`text-[14px] font-medium mb-1 ${
                                    widgetTheme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                                  }`}>
                                    {buttonTitle || 'Отправить сообщение'}
                                  </h3>
                                  <p className={`text-[13px] font-normal ${
                                    widgetTheme === 'dark' ? 'text-white/70' : 'text-[#8E8E93]'
                                  }`}>
                                    {buttonDescription || 'Задавайте вопросы, мы всегда поможем'}
                                  </p>
                                </div>
                                <div 
                                  className="w-[20px] h-[20px]" 
                                  style={{ 
                                    backgroundColor: accentColor,
                                    mask: 'url(/send.svg) no-repeat center',
                                    maskSize: 'contain',
                                    WebkitMask: 'url(/send.svg) no-repeat center',
                                    WebkitMaskSize: 'contain'
                                  }}
                                />
                              </button>
                            </div>
                          </div>
                        )}
                        
                        {/* Нижняя часть */}
                        <div className={`flex-1 relative ${
                          widgetTheme === 'dark' ? 'bg-[#171717]' : 'bg-white'
                        }`}>
                          
                          {/* Страница "Главная" */}
                          {widgetCurrentPage === 'home' && (
                            <div className="p-5 pt-[50px]">
                              
                              {/* Быстрые вопросы */}
                              <div className={`w-[332px] rounded-[12px] border mt-0 overflow-hidden ${
                                widgetTheme === 'dark' 
                                  ? 'bg-[#171717] border-white/10' 
                                  : 'bg-white border-[#070F1A]/10'
                              }`}>
                                {questions.filter(q => q.enabled).slice(0, 4).map((question, index) => (
                                  <div key={question.id}>
                                    <button
                                      onClick={() => {
                                        setWidgetCurrentPage('chat');
                                        // Здесь можно добавить логику отправки вопроса
                                      }}
                                      className={`w-full h-[47px] flex items-center justify-between px-4 transition-colors ${
                                        widgetTheme === 'dark' ? 'hover:bg-white/5' : 'hover:bg-gray-50'
                                      }`}
                                    >
                                      <span className={`text-[13px] font-normal ${
                                        widgetTheme === 'dark' ? 'text-white/70' : 'text-[#070F1A]'
                                      }`}>
                                        {question.text}
                                      </span>
                                      <img src="/Bounds 2.svg" alt="Arrow" className="w-3 h-3" />
                                    </button>
                                    {index < questions.filter(q => q.enabled).slice(0, 4).length - 1 && (
                                      <div className={`mx-[15px] border-b ${
                                        widgetTheme === 'dark' ? 'border-white/10' : 'border-[#070F1A]/10'
                                      }`}></div>
                                    )}
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}
                          
                          {/* Страница "Чат" */}
                          {widgetCurrentPage === 'chat' && (
                            <div className="flex flex-col h-full">
                              {/* 1. Верхняя часть - заголовок чата */}
                              <div className={`h-[58px] border-b flex items-center px-4 relative ${
                                widgetTheme === 'dark' ? 'border-white/10' : 'border-[#070F1A]/10'
                              }`}>
                                {/* Стрелка назад */}
                                <img 
                                  src="/Frame 195.svg" 
                                  alt="Назад" 
                                  className="w-3 h-3 cursor-pointer" 
                                  onClick={() => setWidgetCurrentPage('home')}
                                />
                                
                                {/* Логотип */}
                                <div className="ml-[10px] w-[35px] h-[35px] rounded-[10px] overflow-hidden">
                                  {logoType === 'custom' && customLogo ? (
                                    <img src={customLogo} alt="Logo" className="w-full h-full object-contain" />
                                  ) : (
                                    <img src="/Group 1234.svg" alt="Logo" className="w-full h-full object-contain" />
                                  )}
                                </div>
                                
                                {/* Имя ИИ-агента и статус */}
                                <div className="ml-[10px] flex flex-col">
                                  <span className={`text-[16px] font-normal ${
                                    widgetTheme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                                  }`}>{aiAgentName}</span>
                                  {showStatus && (
                                    <span className={`text-[11px] ${
                                      widgetTheme === 'dark' ? 'text-white/50' : 'text-[#8E8E93]'
                                    }`}>{statusText}</span>
                                  )}
                                </div>
                                
                                {/* Фото менеджеров */}
                                {managerPhotoType === 'add' && managerPhotos.length > 0 && (
                                  <div className="ml-auto mr-[10px] flex gap-[10px]">
                                    {managerPhotos.slice(0, 2).map((photo, index) => (
                                      <div key={index} className="w-[35px] h-[35px] rounded-[90px] overflow-hidden">
                                        <img src={photo} alt="Менеджер" className="w-full h-full object-cover" />
                                      </div>
                                    ))}
                                  </div>
                                )}
                                
                                {/* Кнопка закрытия */}
                                <button
                                  onClick={() => setWidgetPreviewOpen(false)}
                                  className="absolute top-[15px] right-[15px] z-10 w-[18px] h-[18px] flex items-center justify-center hover:bg-white/10 rounded-[5px] transition-colors"
                                >
                                  <img src="/x-02.svg" alt="Закрыть" className="w-[18px] h-[18px]" style={{ filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)', marginTop: '10px' }} />
                                </button>
                              </div>
                              
                              {/* 2. Область сообщений */}
                              <div className="flex-1 p-4 overflow-y-auto relative widget-chat-container" style={{ flexBasis: 0 }}>
                                
                                {chatMessages.map((message, index) => {
                                  // Определяем, является ли это последним сообщением от ИИ
                                  const isLastAIMessage = !message.isUser && 
                                    index === chatMessages.length - 1;
                                  
                                  return (
                                    <div key={message.id} className={`mb-4 ${message.isUser ? 'flex justify-end' : 'flex justify-start'}`}>
                                      <div className={`max-w-[80%] ${message.isUser ? 'order-2' : 'order-1'}`}>
                                        <div 
                                          className={`px-3 py-2 rounded-[16px] ${
                                            message.isUser 
                                              ? (widgetTheme === 'dark' ? 'text-[#171717]' : 'text-white')
                                              : widgetTheme === 'dark' ? 'text-white/70' : 'text-[#070F1A]'
                                          }`}
                                          style={{
                                            backgroundColor: message.isUser 
                                              ? (widgetTheme === 'dark' ? '#FFFFFF' : '#0084FF')
                                              : widgetTheme === 'dark' ? '#212121' : '#EFEFEF'
                                          }}
                                        >
                                          <p className="text-sm">{message.text}</p>
                                        </div>
                                        {!message.isUser && (
                                          <div className="mt-[5px] ml-3">
                                            <p className="text-[9px] text-[#8E8E93]">
                                              {aiAgentName} • {message.time}
                                            </p>
                                          </div>
                                        )}
                                        
                                        {/* Кнопки после ответа бота - только у последнего сообщения от ИИ */}
                                        {isLastAIMessage && showCompletionButton && (
                                          <div className="mt-3 ml-3 space-y-2">
                                            <button
                                              onClick={() => {
                                                setShowCompletionButton(false);
                                                setShowHumanButton(false);
                                                sendWidgetIntentMessage('Это помогло');
                                              }}
                                              className="h-[34px] px-[14px] rounded-[90px] text-[13px] font-[500] transition-all bg-transparent border border-[#070F1A]/10 text-[#8E8E93] hover:bg-[#F3F5F7]"
                                            >
                                              {selectedCompletionButton}
                                            </button>
                                          </div>
                                        )}
                                        
                                        {/* Кнопка перенаправления на человека - только у последнего сообщения от ИИ */}
                                        {isLastAIMessage && showHumanButton && selectedHumanButton !== 'Нет' && (
                                          <div className="mt-3 ml-3">
                                            <button
                                              onClick={async () => {
                                                setShowHumanButton(false);
                                                await sendWidgetIntentMessage('Нужна помощь менеджера');
                                              }}
                                              className="h-[34px] px-[14px] rounded-[90px] text-[13px] font-[500] transition-all text-white"
                                              style={{ backgroundColor: accentColor }}
                                            >
                                              {selectedHumanButton}
                                            </button>
                                          </div>
                                        )}
                                      </div>
                                    </div>
                                  );
                                })}
                              </div>
                              
                              {/* 3. Поле ввода - зафиксировано внизу */}
                              <div className="p-4 flex-shrink-0">
                                {/* Анимированный лейбл "Нейросеть AdaptoGPT" - управляется тумблером */}
                                {showAILabel && (
                                  <div className="mb-2 text-center overflow-hidden">
                                    <span className="text-[9px] font-medium animate-flash">Нейросеть AdaptoGPT</span>
                                  </div>
                                )}
                                
                                {/* Поле ввода из раздела тестирования */}
                                <div className="relative">
                                  <input
                                    type="text"
                                    value={currentMessage}
                                    onChange={(e) => setCurrentMessage(e.target.value)}
                                    onKeyPress={(e) => {
                                      if (e.key === 'Enter') {
                                        handleWidgetChatSendMessage();
                                      }
                                    }}
                                    placeholder="Введите сообщение..."
                                    className={`w-full h-[40px] px-4 py-2 pr-[100px] rounded-[20px] border focus:outline-none focus:ring-0 text-[14px] ${
                                      widgetTheme === 'dark' 
                                        ? 'border-white/10 text-white bg-transparent' 
                                        : 'border-[#E5E7EB] text-[#070F1A]'
                                    }`}
                                  />
                                  <div className="absolute right-1 top-1/2 transform -translate-y-1/2 flex items-center gap-1">
                                    <button 
                                      className="w-[22px] h-[32px] flex items-center justify-center transition-colors"
                                      title="Добавить вложение"
                                    >
                                      <img src="/paperclip.svg" alt="Вложение" className="w-[18px] h-[18px] text-[#8E8E93] hover:text-[#070F1A] transition-colors" />
                                    </button>
                                    <button 
                                      onClick={handleWidgetChatSendMessage}
                                      className="w-[32px] h-[32px] rounded-[90px] flex items-center justify-center cursor-pointer transition-colors"
                                      style={{ backgroundColor: accentColor }}
                                      title="Отправить сообщение"
                                    >
                                      <img src="/Frame 118.svg" alt="Отправить" className="w-[12px] h-[12px]" style={{ filter: 'brightness(0) saturate(100%) invert(100%)' }} />
                                    </button>
                                  </div>
                                </div>
                              </div>
                            </div>
                          )}
                        </div>
                        
                        {/* Нижнее меню - только для главной страницы */}
                        {widgetCurrentPage === 'home' && (
                          <div className={`h-[70px] border-t flex items-center justify-center relative ${
                            widgetTheme === 'dark' 
                              ? 'bg-[#171717] border-white/10' 
                              : 'bg-white border-gray-200'
                          }`}>
                          <div className="flex items-center gap-20">
                            <button 
                              onClick={() => setWidgetCurrentPage('home')}
                              className={`flex flex-col items-center gap-1 ${
                                widgetCurrentPage === 'home' ? 'text-[#8E8E93]' : 'text-[#8E8E93]'
                              }`}
                              style={{
                                color: widgetCurrentPage === 'home' ? accentColor : '#8E8E93'
                              }}
                            >
                              <div 
                                className="w-[17px] h-[17px]"
                                style={{ 
                                  backgroundColor: widgetCurrentPage === 'home' ? accentColor : '#8E8E93',
                                  mask: 'url(/house.svg) no-repeat center',
                                  maskSize: 'contain',
                                  WebkitMask: 'url(/house.svg) no-repeat center',
                                  WebkitMaskSize: 'contain'
                                }}
                              />
                              <span className="text-[14px] font-medium">Главная</span>
                            </button>
                            <button 
                              onClick={() => setWidgetCurrentPage('chat')}
                              className={`flex flex-col items-center gap-1 ${
                                widgetCurrentPage === 'chat' ? 'text-[#8E8E93]' : 'text-[#8E8E93]'
                              }`}
                              style={{
                                color: widgetCurrentPage === 'chat' ? accentColor : '#8E8E93'
                              }}
                            >
                              <img 
                                src="/Frame 147.svg" 
                                alt="Chat" 
                                className="w-[17px] h-[17px]"
                                style={{ 
                                  filter: widgetCurrentPage === 'chat' 
                                    ? `brightness(0) saturate(100%) invert(27%) sepia(96%) saturate(1456%) hue-rotate(${getHueFromColor(accentColor)}deg) brightness(101%) contrast(101%)`
                                    : 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)'
                                }}
                              />
                              <span className="text-[14px] font-medium">Чат</span>
                            </button>
                          </div>
                          
                          {/* Лейбл "Виджет на сайт Adapto" - только для главной страницы */}
                          {widgetCurrentPage === 'home' && (
                            <div className="absolute top-[-29px] left-1/2 transform -translate-x-1/2">
                              <span className="text-[9px] font-medium animate-flash">Виджет на сайт Adapto</span>
                            </div>
                          )}
                          </div>
                        )}
                        
                        {/* Всплывающая форма - поверх всех колонок виджета */}
                        {showForm && (
                          <div 
                            className="absolute inset-0 bg-black bg-opacity-40 flex items-end justify-center p-[10px] z-50"
                            onClick={() => {
                              setWidgetFormData({});
                              setPolicyAccepted(false);
                              setShowForm(false);
                            }}
                          >
                            <div 
                              className={`w-[351px] rounded-[15px] p-4 flex flex-col ${
                                widgetTheme === 'dark' ? 'bg-[#212121]' : 'bg-white'
                              }`}
                              style={{ 
                                minHeight: '212px',
                                maxHeight: '400px',
                                height: 'auto',
                                alignSelf: 'flex-end'
                              }}
                              onClick={(e) => e.stopPropagation()}
                            >
                              {/* Заголовок формы */}
                              <div className="flex items-center justify-between mb-4">
                                <h3 className={`text-[16px] font-medium ${
                                  widgetTheme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                                }`}>{formTitle}</h3>
                                <button
                                  onClick={() => {
                                    setWidgetFormData({});
                                    setPolicyAccepted(false);
                                    setShowForm(false);
                                  }}
                                  className="w-[24px] h-[24px] flex items-center justify-center hover:bg-gray-100 rounded-[90px] transition-colors"
                                >
                                  <img src="/x-02.svg" alt="Закрыть" className="w-[14px] h-[14px]" style={{ filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)' }} />
                                </button>
                              </div>
                              
                              {/* Поля формы */}
                              <div className="space-y-[10px] overflow-y-auto max-h-[200px]">
                                {selectedFormFields.map((fieldType) => {
                                  const field = formFields.find(f => f.type === fieldType);
                                  if (!field) return null;
                                  
                                  return (
                                    <div key={field.id}>
                                      <input
                                        type={field.type === 'email' ? 'email' : field.type === 'phone' ? 'tel' : 'text'}
                                        placeholder={field.placeholder}
                                        value={widgetFormData[fieldType] || ''}
                                        onChange={(e) => setWidgetFormData({...widgetFormData, [fieldType]: e.target.value})}
                                        className={`w-[319px] h-[34px] px-3 border rounded-[10px] text-[14px] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20 ${
                                          widgetTheme === 'dark' 
                                            ? 'border-white/10 text-white bg-transparent' 
                                            : 'border-[#070F1A]/10 text-[#070F1A]'
                                        }`}
                                      />
                                    </div>
                                  );
                                })}
                              </div>
                              
                              {/* Согласие с политикой */}
                              <div className="mt-[10px] mb-4">
                                <div className="flex items-start gap-2">
                                  <input
                                    type="checkbox"
                                    id="policy-checkbox"
                                    checked={policyAccepted}
                                    onChange={(e) => setPolicyAccepted(e.target.checked)}
                                    className="mt-0.5 w-4 h-4 text-[#0084FF] bg-gray-100 border-gray-300 rounded focus:ring-[#0084FF] focus:ring-2"
                                  />
                                  <label htmlFor="policy-checkbox" className={`text-[12px] cursor-pointer ${
                                    widgetTheme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                                  }`}>
                                    Нажимая на кнопку "Отправить" вы соглашаетесь с{' '}
                                    <span className="underline" style={{ color: accentColor }}>
                                      политикой обработки данных
                                    </span>
                                  </label>
                                </div>
                              </div>
                              
                              {/* Кнопка отправки */}
                              <button
                                onClick={async () => {
                                  if (isFormSubmitting) return;
                                  
                                  // Проверяем обязательные поля
                                  const requiredFields = selectedFormFields.filter(fieldType => {
                                    const field = formFields.find(f => f.type === fieldType);
                                    return field?.required;
                                  });
                                  
                                  const allRequiredFilled = requiredFields.every(fieldType => widgetFormData[fieldType]?.trim());
                                  
                                  if (allRequiredFilled && policyAccepted) {
                                    setIsFormSubmitting(true);
                                    
                                    try {
                                      // Сохраняем данные формы
                                      const formSubmissionData = {
                                        timestamp: new Date().toISOString(),
                                        formData: widgetFormData,
                                        formFields: selectedFormFields.map(fieldType => {
                                          const field = formFields.find(f => f.type === fieldType);
                                          return {
                                            id: field?.id,
                                            type: fieldType,
                                            label: field?.label,
                                            value: widgetFormData[fieldType]
                                          };
                                        })
                                      };
                                      
                                      // Сохраняем в CRM (привязка к user_id)
                                      try {
                                        const { crmAPI } = await import('./crm_api_functions.js');
                                        const name = widgetFormData.name || widgetFormData.fullname || 'Лид с формы';
                                        const email = widgetFormData.email || null;
                                        const phone = widgetFormData.phone || null;
                                        const comment = widgetFormData.comment || widgetFormData.message || '';

                                        const client = await crmAPI.createClient(currentUser.id, {
                                          name,
                                          email,
                                          phone,
                                          source: 'widget',
                                          extra: { formFields: formSubmissionData.formFields }
                                        });
                                        await crmAPI.createDeal(currentUser.id, {
                                          title: name ? `Заявка: ${name}` : 'Заявка с формы',
                                          client_id: client?.id || null,
                                          status: 'new',
                                          description: comment || 'Заявка из виджета',
                                          channel: 'widget'
                                        });
                                      } catch (crmError) {
                                        console.error('CRM save error:', crmError);
                                      }
                                      
                                      // Очищаем форму
                                      setWidgetFormData({});
                                      setPolicyAccepted(false);
                                      setShowForm(false);
                                      
                                      // Сообщаем пользователю в чате об успешной отправке
                                      try {
                                        const successMsg = {
                                          id: getUniqueTimestamp(),
                                          text: 'Отлично, ваши данные успешно отправлены. Менеджер свяжется с вами в ближайшее время.',
                                          isUser: false,
                                          time: 'Только что',
                                          timestamp: getUniqueTimestamp()
                                        };
                                        setChatMessages(prev => [...prev, successMsg]);
                                        await chatHistoryAPI.saveMessage(currentUser.id, 'assistant', successMsg.text, 'widget');
                                      } catch (_) {}
                                      
                                      console.log('Форма успешно отправлена:', formSubmissionData);
                                    } catch (error) {
                                      console.error('Ошибка при отправке формы:', error);
                                    } finally {
                                      setIsFormSubmitting(false);
                                    }
                                  }
                                }}
                                disabled={isFormSubmitting}
                                className="w-full h-[40px] rounded-[10px] text-white font-medium text-[14px] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                                style={{ backgroundColor: accentColor }}
                              >
                                {isFormSubmitting ? 'Отправка...' : 'Отправить'}
                              </button>
                      </div>
                    </div>
                  )}
                </div>
              </div>
                  )}
                  
                  {/* Догоняющее сообщение */}
                  {showFollowUpMessage && followUpMessagesEnabled && followUpMessages.length > 0 && !widgetPreviewOpen && (
                    <div 
                      className="absolute transition-all duration-300"
                      style={{
                        bottom: `${(widgetDevelopmentSettings.desktopBottomOffset || 20) + 62}px`, // 50px кнопка виджета + 12px зазор
                        right: `${(widgetDevelopmentSettings.desktopRightOffset || 20) + 40}px`, // выравнивание по правому краю кнопки виджета
                        zIndex: (widgetDevelopmentSettings.zIndex || 9999) + 1
                      }}
                    >
                      {/* Плашка догоняющего сообщения */}
                      <div className={`rounded-[12px] shadow-lg border p-4 max-w-[300px] relative ${
                        widgetTheme === 'dark' 
                          ? 'bg-[#171717] border-white/10' 
                          : 'bg-white border-gray-200'
                      }`}>
                        {/* Крестик для закрытия */}
                        <button
                          onClick={() => setShowFollowUpMessage(false)}
                          className="absolute top-2 right-2 w-4 h-4 flex items-center justify-center text-gray-400 hover:text-gray-600 transition-colors"
                        >
                          <svg width="12" height="12" viewBox="0 0 12 12" fill="none">
                            <path d="M9 3L3 9M3 3L9 9" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </button>
                        
                        <p className={`text-[12px] mb-0 pr-6 ${
                          widgetTheme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                        }`}>
                          {followUpMessages[0].message || 'Продолжим диалог?'}
                        </p>
                      </div>

                      {/* Кнопка догоняющего сообщения — под плашкой */}
                      <div className="mt-[10px] flex justify-end">
                        <button
                          onClick={() => {
                            setShowFollowUpMessage(false);
                            // Открываем виджет и отправляем сообщение
                            handleWidgetOpen();
                            setCurrentMessage(followUpMessages[0].message || 'Продолжим диалог?');
                            setTimeout(() => {
                              handleWidgetChatSendMessage();
                            }, 100);
                          }}
                          className="h-[34px] px-[14px] rounded-[90px] text-[12px] font-[400] transition-all text-white"
                          style={{ backgroundColor: accentColor }}
                        >
                          {followUpMessages[0].buttonText || 'Продолжить'}
                        </button>
                      </div>
                    </div>
                  )}
                  
                  {/* Триггерное сообщение */}
                  {showTriggerMessage && triggerMessagesEnabled && triggerMessages.length > 0 && !widgetPreviewOpen && (
                    <div 
                      className="absolute transition-all duration-300"
                      style={{
                        bottom: `${(widgetDevelopmentSettings.desktopBottomOffset || 20) + 62}px`, // 50px кнопка виджета + 12px зазор
                        right: `${(widgetDevelopmentSettings.desktopRightOffset || 20) + 40}px`, // выравнивание по правому краю кнопки виджета
                        zIndex: (widgetDevelopmentSettings.zIndex || 9999) + 1
                      }}
                    >
                      {/* Плашка триггерного сообщения */}
                      <div className="relative max-w-[300px]">
                        {/* Крестик для закрытия */}
                        <button
                          onClick={() => setShowTriggerMessage(false)}
                          className="absolute -top-3 right-2 w-4 h-4 flex items-center justify-center rounded-full bg-black/10 hover:bg-black/20 transition-colors z-10"
                          style={{ color: '#8E8E93' }}
                        >
                          <svg width="10" height="10" viewBox="0 0 12 12" fill="none">
                            <path d="M9 3L3 9M3 3L9 9" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </button>
                        
                        {/* Плашка с текстом */}
                        <div className={`h-10 px-[13px] flex items-center rounded-[10px_10px_0px_10px] w-fit max-w-[300px] mr-[23px] ${
                          widgetTheme === 'dark' ? 'bg-[#171717]' : 'bg-white'
                        }`}>
                          <p className={`text-[14px] font-[500] mb-0 w-fit ${
                            widgetTheme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                          }`} style={{ letterSpacing: '-0.02em' }}>
                            {triggerMessages[0].message || 'У нас есть отличная акция'}
                          </p>
                        </div>

                        {/* Кнопка триггерного сообщения — под плашкой */}
                        <div className="pt-2 px-[13px] pb-[13px] flex justify-end mr-[23px]">
                          <button
                            onClick={() => {
                              setShowTriggerMessage(false);
                              // Открываем виджет и отправляем сообщение
                              handleWidgetOpen();
                              setCurrentMessage(triggerMessages[0].buttonText || 'Расскажи подробнее');
                              setTimeout(() => {
                                handleWidgetChatSendMessage();
                              }, 100);
                            }}
                            className="h-[34px] px-4 rounded-[90px] text-[12px] font-[500] transition-all text-white"
                            style={{ backgroundColor: accentColor, letterSpacing: '-0.02em' }}
                          >
                            {triggerMessages[0].buttonText || 'Узнать больше'}
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Модальное окно удаления вопроса */}
            {showDeleteQuestionModal && (
              <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div className={`rounded-[20px] p-6 max-w-md w-full mx-4 ${
                  theme === 'dark' ? 'bg-[#070F1A]' : 'bg-white'
                }`}>
                  <h3 className={`text-[18px] font-[500] mb-2 ${
                    theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                  }`}>Вы уверены, что хотите удалить вопрос?</h3>
                  <p className={`text-[14px] mb-6 ${
                    theme === 'dark' ? 'text-white/70' : 'text-[#8E8E93]'
                  }`}>После удаления его невозможно восстановить.</p>
                  <div className="flex gap-3 justify-end">
                    <button
                      onClick={() => {
                        setShowDeleteQuestionModal(false);
                        setQuestionToDelete(null);
                      }}
                      className={`px-4 py-2 text-[14px] font-[500] transition-colors ${
                        theme === 'dark' 
                          ? 'text-white/70 hover:text-white' 
                          : 'text-[#8E8E93] hover:text-[#070F1A]'
                      }`}
                    >
                      Отмена
                    </button>
                    <button
                      onClick={() => deleteQuestion(questionToDelete)}
                      className="px-4 py-2 bg-[#FF0D0D] text-white text-[14px] font-[500] rounded-[10px] hover:bg-[#E00D0D] transition-colors"
                    >
                      Удалить
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        );

      case 'available-dialogs':
        const availableDialogs = dialogsData.filter(d => 
          (d.status === 'active' || d.status === 'waiting') && 
          (d.canTakeover || d.need_handover)
        );
        
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-[20px] font-[500]">Доступные диалоги</h1>
              {availableDialogs.length > 0 && (
                <div className="bg-[#FF3B30] text-white text-[12px] font-[500] px-2 py-1 rounded-full">
                  {availableDialogs.length}
                </div>
              )}
            </div>
            
            {availableDialogs.length === 0 ? (
              <div className="bg-white rounded-[15px] p-8 border border-gray-200">
                <div className="text-center">
                  <svg className="w-8 h-8 mx-auto mb-4" fill="#0084FF" viewBox="0 0 24 24">
                    <path d="M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z"></path>
                  </svg>
                  <h3 className="text-[18px] font-[500] text-[#070F1A] mb-2">
                    Нет доступных диалогов
                  </h3>
                  <p className="text-[14px] text-[#8E8E93] max-w-md mx-auto">
                    В этом разделе будут отображаться диалоги, в которых ИИ-агент запросил помощь оператора. 
                    Как только такие диалоги появятся, вы сможете их взять в работу.
                  </p>
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                {availableDialogs.map((dialog) => (
                  <div key={dialog.id} className="bg-white rounded-[15px] p-6 border border-gray-200">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-3">
                          <h3 className="text-[16px] font-[500] text-[#070F1A]">{dialog.title}</h3>
                          {dialog.need_handover && (
                            <div className="bg-[#FF3B30] text-white text-[10px] font-[500] px-2 py-1 rounded-full">
                              Ждёт оператора
                            </div>
                          )}
                          <div className={`text-[10px] font-[500] px-2 py-1 rounded-full ${
                            dialog.status === 'active' ? 'bg-[#36C76A]/10 text-[#36C76A]' : 'bg-[#FF9500]/10 text-[#FF9500]'
                          }`}>
                            {dialog.status === 'active' ? 'Активный' : 'Ожидает'}
                          </div>
                        </div>
                        <p className="text-[14px] text-[#8E8E93] mb-4">{dialog.lastMessage}</p>
                        <div className="flex items-center gap-4 text-[12px] text-[#8E8E93]">
                          <span>Создан: {new Date(dialog.createdAt).toLocaleString('ru-RU')}</span>
                          {dialog.client?.name && <span>Клиент: {dialog.client.name}</span>}
                        </div>
                      </div>
                      {dialog.assignedTo && dialog.assignedTo !== currentUser?.id ? (
                        <button
                          disabled
                          className="bg-gray-300 text-gray-500 px-4 h-[34px] rounded-[10px] cursor-not-allowed"
                        >
                          Занят оператором
                        </button>
                      ) : dialog.assignedTo === currentUser?.id ? (
                        <button
                          disabled
                          className="bg-[#0084FF] text-white px-4 h-[34px] rounded-[10px] cursor-default"
                        >
                          Ваш диалог
                        </button>
                      ) : (
                        <button
                          onClick={() => handleTakeoverDialog(dialog.id)}
                          className="bg-[#0084FF] text-white px-4 h-[34px] rounded-[10px] hover:bg-[#0070E6] transition-colors"
                          style={BUTTON_STYLES.blueButton}
                        >
                          Взять диалог
                        </button>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        );

      case 'operator-statistics':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-[20px] font-[500]">Моя статистика</h1>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4" style={{ paddingTop: '12px' }}>
                                 <Card className="shadow-none">
                <CardContent className="p-[15px] h-[130px] flex flex-col justify-between" style={{ paddingTop: '13px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                    <p className="text-[14px] font-[500] text-[#8E8E93]">Мои диалоги</p>
                  </div>
                  <div className="flex items-end">
                    <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>
                      {dialogsData.filter(d => d.assignedTo === (currentUser?.id || 'current_operator')).length}
                    </p>
                  </div>
                </CardContent>
              </Card>

                                 <Card className="shadow-none">
                <CardContent className="p-[15px] h-[130px] flex flex-col justify-between" style={{ paddingTop: '13px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                    <p className="text-[14px] font-[500] text-[#8E8E93]">Решенные сегодня</p>
                  </div>
                  <div className="flex items-end">
                    <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>
                      {dialogsData.filter(d => d.status === 'closed' && d.assignedTo === (currentUser?.id || 'current_operator')).length}
                    </p>
                  </div>
                </CardContent>
              </Card>

                                 <Card className="shadow-none">
                <CardContent className="p-[15px] h-[130px] flex flex-col justify-between" style={{ paddingTop: '13px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                    <p className="text-[14px] font-[500] text-[#8E8E93]">Среднее время</p>
                  </div>
                  <div className="flex items-end">
                    <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>0 мин</p>
                  </div>
                </CardContent>
              </Card>

                                 <Card className="shadow-none">
                <CardContent className="p-[15px] h-[130px] flex flex-col justify-between" style={{ paddingTop: '13px' }}>
                      <div className="flex items-center gap-2" style={{ height: '21px' }}>
                    <p className="text-[14px] font-[500] text-[#8E8E93]">Рейтинг</p>
                  </div>
                  <div className="flex items-end">
                    <p className="text-[1.8rem] font-[500] text-[#070F1A]" style={{ height: '33px' }}>4.8</p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        );

      case 'team':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-[20px] font-[500] text-[#070F1A]">Команда</h1>
            </div>
            
            {/* Разделительная линия на всю ширину */}
            <div className="h-px bg-[#E5E7EB] mb-4" style={{ marginLeft: '-32px', marginRight: '-32px', marginTop: '16px' }}></div>
            
            {/* Плашка для добавления участника */}
            <div>
              <div className="flex items-center gap-3">
                <div className="flex-1">
                  <h3 className="text-[14px] font-medium text-[#070F1A] mb-3">Добавить участника</h3>
                  <div className="flex items-center gap-3">
                    <input 
                      type="email" 
                      placeholder="Введите email участника"
                      value={teamInviteEmail}
                      onChange={(e) => setTeamInviteEmail(e.target.value)}
                      className="flex-1 h-[34px] px-3 bg-white rounded-[10px] focus:outline-none"
                      style={INPUT_STYLES.inputField}
                    />
                    <button 
                      className={`h-[34px] px-4 rounded-[10px] transition-colors ${
                        teamInviteEmail.trim() === '' 
                          ? 'cursor-not-allowed' 
                          : 'hover:bg-[#0073E6] cursor-pointer'
                      }`}
                      style={teamInviteEmail.trim() === '' 
                        ? BUTTON_STYLES.disabledButton 
                        : { ...BUTTON_STYLES.blueButton, backgroundColor: '#0084FF', color: 'white' }
                      }
                      disabled={teamInviteEmail.trim() === ''}
                      onClick={() => {
                        if (teamInviteEmail.trim() !== '') {
                          handleInviteMember(teamInviteEmail.trim());
                        }
                      }}
                    >
                      Пригласить
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* Таблица команды */}
            <div className="overflow-hidden -mx-6">
              {/* Заголовки таблицы */}
              <div className="grid grid-cols-3 gap-4 px-[26px] py-4 border-b border-[#070F1A]/10">
                <div className="text-[14px] font-[500] text-[#070F1A]">Пользователь</div>
                <div className="text-[14px] font-[500] text-[#070F1A]"></div>
                <div className="text-[14px] font-[500] text-[#070F1A] text-right">Роль</div>
              </div>
              
              {/* Строки таблицы */}
              <div className="divide-y divide-[#070F1A]/10">
                {/* Админ */}
                <div className="grid grid-cols-3 gap-4 px-[26px] py-4 transition-colors">
                  <div className="flex items-center gap-3">
                    <div className="w-[24px] h-[24px] bg-[#0084FF] rounded-[90px] flex items-center justify-center flex-shrink-0">
                      <span className="text-white font-semibold text-xs">{generateAvatar(currentUser?.name).letter}</span>
                    </div>
                    <div>
                      <p className="text-[14px] font-[500] text-[#070F1A]">{currentUser?.name || 'Администратор'}</p>
                      <p className="text-[12px] text-[#8E8E93]">{currentUser?.email || 'admin@example.com'}</p>
                    </div>
                  </div>
                  <div></div>
                  <div className="flex items-center justify-end">
                    <div className="flex items-center gap-2">
                      <div className="flex items-center gap-1">
                        <div className="w-[16px] h-[16px] bg-[#0084FF] rounded-[90px] flex items-center justify-center">
                          <div 
                            className="w-[10px] h-[10px]" 
                            style={{ 
                              maskImage: 'url(/profile-circle.svg)', 
                              maskSize: 'contain', 
                              maskRepeat: 'no-repeat', 
                              maskPosition: 'center',
                              backgroundColor: 'white'
                            }} 
                          />
                        </div>
                        <span className="text-[12px] font-[500] text-[#070F1A]">Админ</span>
                      </div>
                      <div className="relative">
                        <button 
                          className="w-[14px] h-[14px] text-[#8E8E93] hover:text-[#070F1A] transition-colors opacity-50 cursor-not-allowed"
                          disabled
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14">
                            <path d="M 1.5 5.5 C 2.328 5.5 3 6.172 3 7 C 3 7.828 2.328 8.5 1.5 8.5 C 0.672 8.5 0 7.828 0 7 C 0 6.172 0.672 5.5 1.5 5.5 Z M 12.5 5.5 C 13.328 5.5 14 6.172 14 7 C 14 7.828 13.328 8.5 12.5 8.5 C 11.672 8.5 11 7.828 11 7 C 11 6.172 11.672 5.5 12.5 5.5 Z M 7 5.5 C 7.828 5.5 8.5 6.172 8.5 7 C 8.5 7.828 7.828 8.5 7 8.5 C 6.172 8.5 5.5 7.828 5.5 7 C 5.5 6.172 6.172 5.5 7 5.5 Z" fill="currentColor"/>
                          </svg>
                        </button>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Оператор */}
                <div className="grid grid-cols-3 gap-4 px-[26px] py-4 transition-colors">
                  <div className="flex items-center gap-3">
                    <div className="w-[24px] h-[24px] bg-[#36C76A] rounded-[90px] flex items-center justify-center flex-shrink-0">
                      <span className="text-white font-semibold text-xs">Т</span>
                    </div>
                    <div>
                      <p className="text-[14px] font-[500] text-[#070F1A]">{currentUser?.name || 'Оператор'}</p>
                      <p className="text-[12px] text-[#8E8E93]">{currentUser?.email || 'operator@example.com'}</p>
                    </div>
                  </div>
                  <div></div>
                  <div className="flex items-center justify-end">
                    <div className="flex items-center gap-2">
                      <div className="flex items-center gap-1">
                        <div className="w-[16px] h-[16px] bg-[#A684FF] rounded-[90px] flex items-center justify-center">
                          <div 
                            className="w-[10px] h-[10px]" 
                            style={{ 
                              maskImage: 'url(/headphone.svg)', 
                              maskSize: 'contain', 
                              maskRepeat: 'no-repeat', 
                              maskPosition: 'center',
                              backgroundColor: 'white'
                            }} 
                          />
                        </div>
                        <span className="text-[12px] font-[500] text-[#070F1A]">Оператор</span>
                      </div>
                      <div className="relative">
                        <button 
                          className="w-[14px] h-[14px] text-[#8E8E93] hover:text-[#070F1A] transition-colors"
                          onClick={() => setTeamDropdownOpen(teamDropdownOpen === 'operator' ? null : 'operator')}
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14">
                            <path d="M 1.5 5.5 C 2.328 5.5 3 6.172 3 7 C 3 7.828 2.328 8.5 1.5 8.5 C 0.672 8.5 0 7.828 0 7 C 0 6.172 0.672 5.5 1.5 5.5 Z M 12.5 5.5 C 13.328 5.5 14 6.172 14 7 C 14 7.828 13.328 8.5 12.5 8.5 C 11.672 8.5 11 7.828 11 7 C 11 6.172 11.672 5.5 12.5 5.5 Z M 7 5.5 C 7.828 5.5 8.5 6.172 8.5 7 C 8.5 7.828 7.828 8.5 7 8.5 C 6.172 8.5 5.5 7.828 5.5 7 C 5.5 6.172 6.172 5.5 7 5.5 Z" fill="currentColor"/>
                          </svg>
                        </button>
                        {teamDropdownOpen === 'operator' && (
                          <div className="absolute right-0 top-6 bg-white border border-[#E5E7EB] rounded-[10px] shadow-lg z-[9999] w-[100px]">
                            <button
                              className="w-full h-[34px] px-3 text-left text-[13px] text-red-600 hover:bg-red-50 rounded-[10px] transition-colors flex items-center gap-2"
                              onClick={() => {
                                // Здесь будет логика удаления оператора
                                setTeamDropdownOpen(null);
                              }}
                            >
                              <img src="/traash.svg" alt="Удалить" className="w-4 h-4" />
                              Удалить
                            </button>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        );

      case 'operator-stats':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-[20px] font-[500] text-[#070F1A]">Статистика оператора</h1>
            </div>
            
            {/* Разделительная линия */}
            <div className="h-px bg-[#E5E7EB] mb-4" style={{ marginLeft: '-32px', marginRight: '-32px', marginTop: '16px' }}></div>
            
            {/* Карточки статистики */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div className="bg-white rounded-[16px] p-6 border border-[#E5E7EB]">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-[14px] font-[500] text-[#070F1A]">Обработано диалогов</h3>
                  <div className="w-8 h-8 bg-[#0084FF]/10 rounded-[8px] flex items-center justify-center">
                    <img src="/chat.svg" alt="Диалоги" className="w-4 h-4" />
                  </div>
                </div>
                <div className="text-[24px] font-[600] text-[#070F1A] mb-1">24</div>
                <div className="text-[12px] text-[#8E8E93]">+3 за сегодня</div>
              </div>
              
              <div className="bg-white rounded-[16px] p-6 border border-[#E5E7EB]">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-[14px] font-[500] text-[#070F1A]">Завершено диалогов</h3>
                  <div className="w-8 h-8 bg-[#36C76A]/10 rounded-[8px] flex items-center justify-center">
                    <img src="/check.svg" alt="Завершено" className="w-4 h-4" />
                  </div>
                </div>
                <div className="text-[24px] font-[600] text-[#070F1A] mb-1">18</div>
                <div className="text-[12px] text-[#8E8E93]">75% успешность</div>
              </div>
              
              <div className="bg-white rounded-[16px] p-6 border border-[#E5E7EB]">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-[14px] font-[500] text-[#070F1A]">Среднее время ответа</h3>
                  <div className="w-8 h-8 bg-[#FF9500]/10 rounded-[8px] flex items-center justify-center">
                    <img src="/clock.svg" alt="Время" className="w-4 h-4" />
                  </div>
                </div>
                <div className="text-[24px] font-[600] text-[#070F1A] mb-1">2:34</div>
                <div className="text-[12px] text-[#8E8E93]">минуты</div>
              </div>
              
              <div className="bg-white rounded-[16px] p-6 border border-[#E5E7EB]">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-[14px] font-[500] text-[#070F1A]">Удовлетворенность</h3>
                  <div className="w-8 h-8 bg-[#A684FF]/10 rounded-[8px] flex items-center justify-center">
                    <img src="/star.svg" alt="Оценка" className="w-4 h-4" />
                  </div>
                </div>
                <div className="text-[24px] font-[600] text-[#070F1A] mb-1">4.8</div>
                <div className="text-[12px] text-[#8E8E93]">из 5.0</div>
              </div>
            </div>
            
            {/* График активности */}
            <div className="bg-white rounded-[16px] p-6 border border-[#E5E7EB]">
              <h3 className="text-[16px] font-[500] text-[#070F1A] mb-4">Активность по дням</h3>
              <div className="h-64 flex items-end justify-between gap-2">
                {[12, 8, 15, 22, 18, 25, 20].map((height, index) => (
                  <div key={index} className="flex flex-col items-center gap-2">
                    <div 
                      className="w-8 bg-[#0084FF] rounded-t-[4px]"
                      style={{ height: `${(height / 25) * 200}px` }}
                    ></div>
                    <span className="text-[10px] text-[#8E8E93]">
                      {['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'][index]}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );

      case 'crm':
        return (
          <div className="space-y-6">
            {/* Заголовок с кнопками */}
            <div className="flex justify-between items-center mb-[16px]">
              <h1 className="text-[20px] font-[500] text-[#070F1A]">CRM</h1>
              <div className="flex gap-3">
                {/* Кнопка создания сделки */}
                <button 
                  onClick={() => setCreateDealModalOpen(true)}
                  className="h-[34px] bg-[#0084FF] text-white rounded-[10px] px-4 flex items-center gap-2 hover:bg-[#0073E6] transition-colors"
                  style={BUTTON_STYLES.blueButton}
                >
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 5V19M5 12H19" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                  Создать сделку
                </button>
                
                {/* Кнопки скачивания */}
                <div className="relative group">
                  <button className="h-[34px] bg-white border border-[#E5E7EB] text-[#070F1A] font-[500] rounded-[10px] text-[13px] px-4 flex items-center gap-2 hover:bg-gray-50 transition-colors">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M12 15.75L8.25 12L9.66 10.59L11.25 12.18V3H12.75V12.18L14.34 10.59L15.75 12L12 15.75Z" fill="currentColor"/>
                      <path d="M20.25 15.75V18.75C20.25 19.1642 19.9142 19.5 19.5 19.5H4.5C4.08579 19.5 3.75 19.1642 3.75 18.75V15.75H2.25V18.75C2.25 19.9926 3.25736 21 4.5 21H19.5C20.7426 21 21.75 19.9926 21.75 18.75V15.75H20.25Z" fill="currentColor"/>
                    </svg>
                    Скачать
                  </button>
                  {/* Dropdown меню */}
                  <div className="absolute right-0 top-full mt-1 bg-white border border-gray-200 rounded-[10px] shadow-lg py-1 z-10 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200">
                    <button 
                      onClick={exportCRMToXLS}
                      className="w-full px-4 py-2 text-[12px] text-[#070F1A] hover:bg-gray-50 text-left"
                    >
                      Скачать в Excel
                    </button>
                    <button 
                      onClick={exportCRMToCSV}
                      className="w-full px-4 py-2 text-[12px] text-[#070F1A] hover:bg-gray-50 text-left"
                    >
                      Скачать CSV
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <div className="border-b border-gray-200 mb-0" style={{ borderColor: '#E5E6E7', marginTop: '16px', marginLeft: '-32px', marginRight: '-32px' }}></div>

            {/* Табы */}
            <div className="flex items-center gap-0 bg-[#F2F3F4] rounded-[10px] w-full max-w-[400px]" style={{ height: '40px', padding: '3px' }}>
              <button 
                className={`flex-1 px-5 rounded-[9px] text-[13px] font-medium transition-colors ${
                  crmActiveTab === 'deals' 
                    ? 'bg-white text-[#0084FF]' 
                    : 'text-[#8E8E93] hover:text-[#0084FF]'
                }`}
                style={{ height: '34px' }}
                onClick={() => setCrmActiveTab('deals')}
              >
                Сделки
              </button>
              <button 
                className={`flex-1 px-5 rounded-[9px] text-[13px] font-medium transition-colors ${
                  crmActiveTab === 'tasks' 
                    ? 'bg-white text-[#0084FF]' 
                    : 'text-[#8E8E93] hover:text-[#0084FF]'
                }`}
                style={{ height: '34px' }}
                onClick={() => setCrmActiveTab('tasks')}
              >
                Задачи
              </button>
              <button 
                className={`flex-1 px-5 rounded-[9px] text-[13px] font-medium transition-colors ${
                  crmActiveTab === 'clients' 
                    ? 'bg-white text-[#0084FF]' 
                    : 'text-[#8E8E93] hover:text-[#0084FF]'
                }`}
                style={{ height: '34px' }}
                onClick={() => setCrmActiveTab('clients')}
              >
                Клиенты
              </button>
            </div>

            {/* Панель управления */}
            <div className="flex justify-between items-center flex-wrap gap-[10px]">
              {/* Фильтры слева */}
              <div className="flex gap-[10px] flex-wrap order-1">

                {/* Фильтры только для сделок и клиентов */}
                {crmActiveTab !== 'tasks' && (
                  <>
                {/* Фильтр по качеству лида */}
                <div className="relative crm-dropdown">
                  <button
                    onClick={() => toggleCrmDropdown('leadQuality')}
                    className="h-[34px] pl-3 pr-3 bg-white rounded-[10px] text-[13px] flex items-center gap-[8px] hover:bg-white transition-colors group"
                  >
                    <span className="text-[#8E8E93] group-hover:text-[#070F1A] transition-colors">
                      Лиды
                    </span>
                    <img src="/Bounds.svg" alt="Раскрыть" className="w-2 h-2 transition-transform duration-300" style={{ 
                      filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)',
                      transform: crmDropdowns.leadQuality ? 'rotate(-90deg)' : 'rotate(90deg)'
                    }} />
                  </button>
                  
                  {crmDropdowns.leadQuality && (
                    <div className="absolute top-full left-0 mt-1 bg-white rounded-[12px] shadow-lg z-50 min-w-[160px]">
                      <div className="p-[2px]">
                        <div className="space-y-1">
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setCrmLeadQualityFilter([]);
                              setCrmDropdowns(prev => ({...prev, leadQuality: false}));
                            }}
                          >
                            {crmLeadQualityFilter.length === 0 && (
                              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" className="w-3 h-3">
                                <path d="M 1.5 6 L 4.5 9 L 10.5 3" fill="transparent" strokeWidth="1.5" stroke="currentColor" strokeLinecap="round" strokeMiterlimit="10" strokeDasharray=""></path>
                              </svg>
                            )}
                            <div className="w-4 h-4 bg-gray-100 rounded-[4px]"></div>
                            <span className="text-[13px] text-[#070F1A]">Все лиды</span>
                          </div>
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setCrmLeadQualityFilter(prev => 
                                prev.includes('hot') 
                                  ? prev.filter(item => item !== 'hot')
                                  : [...prev, 'hot']
                              );
                            }}
                          >
                            {crmLeadQualityFilter.includes('hot') && (
                              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" className="w-3 h-3">
                                <path d="M 1.5 6 L 4.5 9 L 10.5 3" fill="transparent" strokeWidth="1.5" stroke="currentColor" strokeLinecap="round" strokeMiterlimit="10" strokeDasharray=""></path>
                              </svg>
                            )}
                            <div className="w-4 h-4 rounded-[4px]" style={{ backgroundColor: '#FE6A51' }}></div>
                            <span className="text-[13px] text-[#070F1A]">Горячие</span>
                          </div>
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setCrmLeadQualityFilter(prev => 
                                prev.includes('warm') 
                                  ? prev.filter(item => item !== 'warm')
                                  : [...prev, 'warm']
                              );
                            }}
                          >
                            {crmLeadQualityFilter.includes('warm') && (
                              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" className="w-3 h-3">
                                <path d="M 1.5 6 L 4.5 9 L 10.5 3" fill="transparent" strokeWidth="1.5" stroke="currentColor" strokeLinecap="round" strokeMiterlimit="10" strokeDasharray=""></path>
                              </svg>
                            )}
                            <div className="w-4 h-4 rounded-[4px]" style={{ backgroundColor: '#FFC340' }}></div>
                            <span className="text-[13px] text-[#070F1A]">Теплые</span>
                          </div>
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setCrmLeadQualityFilter(prev => 
                                prev.includes('cold') 
                                  ? prev.filter(item => item !== 'cold')
                                  : [...prev, 'cold']
                              );
                            }}
                          >
                            {crmLeadQualityFilter.includes('cold') && (
                              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" className="w-3 h-3">
                                <path d="M 1.5 6 L 4.5 9 L 10.5 3" fill="transparent" strokeWidth="1.5" stroke="currentColor" strokeLinecap="round" strokeMiterlimit="10" strokeDasharray=""></path>
                              </svg>
                            )}
                            <div className="w-4 h-4 rounded-[4px]" style={{ backgroundColor: '#0099FF' }}></div>
                            <span className="text-[13px] text-[#070F1A]">Холодные</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Фильтр по контактам */}
                <div className="relative crm-dropdown">
                  <button
                    onClick={() => toggleCrmDropdown('contact')}
                    className="h-[34px] pl-3 pr-3 bg-white rounded-[10px] text-[13px] flex items-center gap-[8px] hover:bg-white transition-colors group"
                  >
                    <span className="text-[#8E8E93] group-hover:text-[#070F1A] transition-colors">
                      Контакты
                    </span>
                    <img src="/Bounds.svg" alt="Раскрыть" className="w-2 h-2 transition-transform duration-300" style={{ 
                      filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)',
                      transform: crmDropdowns.contact ? 'rotate(-90deg)' : 'rotate(90deg)'
                    }} />
                  </button>
                  
                  {crmDropdowns.contact && (
                    <div className="absolute top-full left-0 mt-1 bg-white rounded-[12px] shadow-lg z-50 min-w-[160px]">
                      <div className="p-[2px]">
                        <div className="space-y-1">
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setCrmContactFilter('all');
                              setCrmDropdowns(prev => ({...prev, contact: false}));
                            }}
                          >
                            {crmContactFilter === 'all' && (
                              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" className="w-3 h-3">
                                <path d="M 1.5 6 L 4.5 9 L 10.5 3" fill="transparent" strokeWidth="1.5" stroke="currentColor" strokeLinecap="round" strokeMiterlimit="10" strokeDasharray=""></path>
                              </svg>
                            )}
                            <div className="w-4 h-4 bg-gray-100 rounded-[4px]"></div>
                            <span className="text-[13px] text-[#070F1A]">Все контакты</span>
                          </div>
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setCrmContactFilter('with_contacts');
                              setCrmDropdowns(prev => ({...prev, contact: false}));
                            }}
                          >
                            {crmContactFilter === 'with_contacts' && (
                              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" className="w-3 h-3">
                                <path d="M 1.5 6 L 4.5 9 L 10.5 3" fill="transparent" strokeWidth="1.5" stroke="currentColor" strokeLinecap="round" strokeMiterlimit="10" strokeDasharray=""></path>
                              </svg>
                            )}
                            <img src="/Icon phone.svg" alt="Телефон" className="w-[13px] h-[13px]" style={phoneIconGreenStyle} />
                            <span className="text-[13px] text-[#070F1A]">Есть контакты</span>
                          </div>
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setCrmContactFilter('without_contacts');
                              setCrmDropdowns(prev => ({...prev, contact: false}));
                            }}
                          >
                            {crmContactFilter === 'without_contacts' && (
                              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" className="w-3 h-3">
                                <path d="M 1.5 6 L 4.5 9 L 10.5 3" fill="transparent" strokeWidth="1.5" stroke="currentColor" strokeLinecap="round" strokeMiterlimit="10" strokeDasharray=""></path>
                              </svg>
                            )}
                            <img src="/Icon nophone.svg" alt="Нет телефона" className="w-[13px] h-[13px]" />
                            <span className="text-[13px] text-[#070F1A]">Нет контактов</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Фильтр по владельцу */}
                <div className="relative crm-dropdown">
                  <button
                    onClick={() => toggleCrmDropdown('owner')}
                    className="h-[34px] pl-3 pr-3 bg-white rounded-[10px] text-[13px] flex items-center gap-[8px] hover:bg-white transition-colors group"
                  >
                    <span className="text-[#8E8E93] group-hover:text-[#070F1A] transition-colors">
                      Исполнители
                    </span>
                    <img src="/Bounds.svg" alt="Раскрыть" className="w-2 h-2 transition-transform duration-300" style={{ 
                      filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)',
                      transform: crmDropdowns.owner ? 'rotate(-90deg)' : 'rotate(90deg)'
                    }} />
                  </button>
                  
                  {crmDropdowns.owner && (
                    <div className="absolute top-full left-0 mt-1 bg-white rounded-[12px] shadow-lg z-50 min-w-[180px]">
                      <div className="p-[2px]">
                        <div className="space-y-1">
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setCrmOwnerFilter([]);
                              setCrmDropdowns(prev => ({...prev, owner: false}));
                            }}
                          >
                            {crmOwnerFilter.length === 0 && (
                              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" className="w-3 h-3">
                                <path d="M 1.5 6 L 4.5 9 L 10.5 3" fill="transparent" strokeWidth="1.5" stroke="currentColor" strokeLinecap="round" strokeMiterlimit="10" strokeDasharray=""></path>
                              </svg>
                            )}
                            <div className="w-4 h-4 bg-gray-100 rounded-[4px]"></div>
                            <span className="text-[13px] text-[#070F1A]">Все исполнители</span>
                          </div>
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setCrmOwnerFilter(prev => 
                                prev.includes('ai') 
                                  ? prev.filter(item => item !== 'ai')
                                  : [...prev, 'ai']
                              );
                            }}
                          >
                            {crmOwnerFilter.includes('ai') && (
                              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" className="w-3 h-3">
                                <path d="M 1.5 6 L 4.5 9 L 10.5 3" fill="transparent" strokeWidth="1.5" stroke="currentColor" strokeLinecap="round" strokeMiterlimit="10" strokeDasharray=""></path>
                              </svg>
                            )}
                            <img src="/aiii.svg" alt="ИИ" className="w-[13px] h-[13px] align-middle" />
                            <span className="text-[13px] text-[#070F1A]">ИИ-агент</span>
                          </div>
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setCrmOwnerFilter(prev => 
                                prev.includes('operator-1') 
                                  ? prev.filter(item => item !== 'operator-1')
                                  : [...prev, 'operator-1']
                              );
                            }}
                          >
                            {crmOwnerFilter.includes('operator-1') && (
                              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" className="w-3 h-3">
                                <path d="M 1.5 6 L 4.5 9 L 10.5 3" fill="transparent" strokeWidth="1.5" stroke="currentColor" strokeLinecap="round" strokeMiterlimit="10" strokeDasharray=""></path>
                              </svg>
                            )}
                            <img src="/headphone.svg" alt="Оператор" className="w-[13px] h-[13px]" style={{ filter: 'brightness(0) saturate(100%) invert(66%) sepia(21%) saturate(828%) hue-rotate(230deg) brightness(95%) contrast(101%)' }} />
                            <span className="text-[13px] text-[#070F1A]">Анна Петрова</span>
                          </div>
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setCrmOwnerFilter(prev => 
                                prev.includes('operator-2') 
                                  ? prev.filter(item => item !== 'operator-2')
                                  : [...prev, 'operator-2']
                              );
                            }}
                          >
                            <img src="/headphone.svg" alt="Оператор" className="w-[13px] h-[13px]" style={{ filter: 'brightness(0) saturate(100%) invert(66%) sepia(21%) saturate(828%) hue-rotate(230deg) brightness(95%) contrast(101%)' }} />
                            <span className="text-[13px] text-[#070F1A]">Михаил Иванов</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                  </>
                )}
              </div>

              {/* Плашки выбранных фильтров */}
              {crmActiveTab !== 'tasks' && (
              <div className="flex flex-wrap gap-2 mt-[10px] order-3 w-full">
                {crmLeadQualityFilter.map(quality => (
                  <div key={quality} className="flex items-center gap-2 bg-[#F2F3F4] rounded-[10px] px-2 py-2 h-[32px]">
                    <div className="w-[13px] h-[13px] rounded-[4px]" style={{ backgroundColor: quality === 'hot' ? '#FE6A51' : (quality === 'warm' ? '#FFC340' : '#0099FF') }}></div>
                    <p className="text-[13px] text-[#070F1A]">
                      {quality === 'hot' ? 'Горячие' :
                       quality === 'warm' ? 'Теплые' : 'Холодные'}
                    </p>
                    <button 
                      onClick={() => setCrmLeadQualityFilter(prev => prev.filter(item => item !== quality))}
                      className="w-4 h-4 flex items-center justify-center transition-colors"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14">
                        <path d="M 9.828 3.111 C 10.121 2.818 10.596 2.818 10.889 3.111 C 11.182 3.404 11.182 3.879 10.889 4.172 L 8.061 7 L 10.889 9.828 C 11.182 10.121 11.182 10.596 10.889 10.889 C 10.596 11.182 10.121 11.182 9.828 10.889 L 7 8.061 L 4.172 10.889 C 3.879 11.182 3.404 11.182 3.111 10.889 C 2.818 10.596 2.818 10.121 3.111 9.828 L 5.939 7 L 3.111 4.172 C 2.818 3.879 2.818 3.404 3.111 3.111 C 3.404 2.818 3.879 2.818 4.172 3.111 L 7 5.939 Z" fill="#8E8E93" className="hover:fill-[#070F1A] transition-colors"></path>
                      </svg>
                    </button>
                  </div>
                ))}
                
                {crmContactFilter !== 'all' && (
                  <div className="flex items-center gap-2 bg-[#F2F3F4] rounded-[10px] px-2 py-2 h-[32px]">
                    {crmContactFilter === 'with_contacts' ? (
                      <img src="/Icon phone.svg" alt="Телефон" className="w-[13px] h-[13px]" style={phoneIconGreenStyle} />
                    ) : (
                      <img src="/Icon nophone.svg" alt="Нет телефона" className="w-[13px] h-[13px]" style={{ 
                        filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)'
                      }} />
                    )}
                    <p className="text-[13px] text-[#070F1A]">
                      {crmContactFilter === 'with_contacts' ? 'Есть контакты' : 'Нет контактов'}
                    </p>
                    <button 
                      onClick={() => setCrmContactFilter('all')}
                      className="w-4 h-4 flex items-center justify-center transition-colors"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14">
                        <path d="M 9.828 3.111 C 10.121 2.818 10.596 2.818 10.889 3.111 C 11.182 3.404 11.182 3.879 10.889 4.172 L 8.061 7 L 10.889 9.828 C 11.182 10.121 11.182 10.596 10.889 10.889 C 10.596 11.182 10.121 11.182 9.828 10.889 L 7 8.061 L 4.172 10.889 C 3.879 11.182 3.404 11.182 3.111 10.889 C 2.818 10.596 2.818 10.121 3.111 9.828 L 5.939 7 L 3.111 4.172 C 2.818 3.879 2.818 3.404 3.111 3.111 C 3.404 2.818 3.879 2.818 4.172 3.111 L 7 5.939 Z" fill="#8E8E93" className="hover:fill-[#070F1A] transition-colors"></path>
                      </svg>
                    </button>
                  </div>
                )}

                {crmOwnerFilter.map(owner => (
                  <div key={owner} className="flex items-center gap-2 bg-[#F2F3F4] rounded-[10px] px-2 py-2 h-[32px]">
                    {owner === 'ai' ? (
                      <img src="/aiii.svg" alt="ИИ" className="w-[13px] h-[13px]" />
                    ) : (
                      <img src="/headphone.svg" alt="Оператор" className="w-[13px] h-[13px]" style={{ filter: 'brightness(0) saturate(100%) invert(66%) sepia(21%) saturate(828%) hue-rotate(230deg) brightness(95%) contrast(101%)' }} />
                    )}
                    <p className="text-[13px] text-[#070F1A]">
                      {owner === 'ai' ? 'ИИ-агент' : owner === 'operator-1' ? 'Анна Петрова' : owner === 'operator-2' ? 'Михаил Иванов' : 'Исполнитель'}
                    </p>
                    <button 
                      onClick={() => setCrmOwnerFilter(prev => prev.filter(item => item !== owner))}
                      className="w-4 h-4 flex items-center justify-center transition-colors"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14">
                        <path d="M 9.828 3.111 C 10.121 2.818 10.596 2.818 10.889 3.111 C 11.182 3.404 11.182 3.879 10.889 4.172 L 8.061 7 L 10.889 9.828 C 11.182 10.121 11.182 10.596 10.889 10.889 C 10.596 11.182 10.121 11.182 9.828 10.889 L 7 8.061 L 4.172 10.889 C 3.879 11.182 3.404 11.182 3.111 10.889 C 2.818 10.596 2.818 10.121 3.111 9.828 L 5.939 7 L 3.111 4.172 C 2.818 3.879 2.818 3.404 3.111 3.111 C 3.404 2.818 3.879 2.818 4.172 3.111 L 7 5.939 Z" fill="#8E8E93" className="hover:fill-[#070F1A] transition-colors"></path>
                      </svg>
                    </button>
                  </div>
                ))}
              </div>
              )}

              {/* Правая часть - сортировка и вид */}
              <div className="flex gap-[10px] items-center order-2 ml-auto">
                {/* Сортировка */}
                <div className="relative crm-dropdown">
                  <button
                    onClick={() => toggleCrmDropdown('sortOrder')}
                    className="h-[34px] px-3 bg-white rounded-[10px] text-[13px] flex items-center gap-[8px] hover:bg-[#F2F3F4] transition-colors group"
                    onMouseEnter={(e) => {
                      const img = (e.currentTarget.querySelector('img') as HTMLImageElement);
                      if (img) { img.style.filter = 'brightness(0) saturate(100%)'; img.style.opacity = '1'; }
                    }}
                    onMouseLeave={(e) => {
                      const img = (e.currentTarget.querySelector('img') as HTMLImageElement);
                      if (img) { img.style.filter = 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)'; img.style.opacity = '0.8'; }
                    }}
                  >
                    <img src="/Frame 2089.svg" alt="Сортировать" className="w-4 h-4 transition-colors" style={{ 
                      filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)',
                      opacity: 0.8
                    }} />
                    <span className="text-[#8E8E93] group-hover:text-[#070F1A] transition-colors">
                      Сортировать
                    </span>
                  </button>
                  
                  {crmDropdowns.sortOrder && (
                    <div className="absolute top-full right-0 mt-1 bg-white rounded-[12px] shadow-lg z-50 min-w-[160px]">
                      <div className="p-[2px]">
                        <div className="space-y-1">
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setCrmSortOrder('newest');
                              setCrmDropdowns(prev => ({...prev, sortOrder: false}));
                            }}
                          >
                            <div className="w-4 h-4 bg-gray-100 rounded-[4px] flex items-center justify-center">
                              {crmSortOrder === 'newest' && (
                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12">
                                  <path d="M 1.5 6 L 4.5 9 L 10.5 3" fill="transparent" strokeWidth="1.5" stroke="currentColor" strokeLinecap="round" strokeMiterlimit="10" strokeDasharray=""></path>
                                </svg>
                              )}
                            </div>
                            <span className="text-[13px] text-[#070F1A]">Сначала новые</span>
                          </div>
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setCrmSortOrder('oldest');
                              setCrmDropdowns(prev => ({...prev, sortOrder: false}));
                            }}
                          >
                            <div className="w-4 h-4 bg-gray-100 rounded-[4px] flex items-center justify-center">
                              {crmSortOrder === 'oldest' && (
                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12">
                                  <path d="M 1.5 6 L 4.5 9 L 10.5 3" fill="transparent" strokeWidth="1.5" stroke="currentColor" strokeLinecap="round" strokeMiterlimit="10" strokeDasharray=""></path>
                                </svg>
                              )}
                          </div>
                            <span className="text-[13px] text-[#070F1A]">Сначала старые</span>
                        </div>
                      </div>
                    </div>
                </div>
                  )}
                </div>

                {/* Переключатель вида */}
                <div className="flex bg-[#F2F3F4] rounded-[10px] p-[2px]" style={{ height: '34px' }}>
                  <button 
                    className={`px-2 py-[2px] rounded-[8px] transition-colors ${
                      crmViewMode === 'kanban' 
                        ? 'bg-white' 
                        : 'text-[#8E8E93] hover:text-[#070F1A]'
                    }`}
                    style={{ height: '30px' }}
                    onClick={() => setCrmViewMode('kanban')}
                  >
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M3 6H21V8H3V6ZM3 11H21V13H3V11ZM3 16H21V18H3V16Z" fill="currentColor"/>
                    </svg>
                  </button>
                  <button 
                    className={`px-2 py-[2px] rounded-[8px] transition-colors ${
                      crmViewMode === 'list' 
                        ? 'bg-white' 
                        : 'text-[#8E8E93] hover:text-[#070F1A]'
                    }`}
                    style={{ height: '30px' }}
                    onClick={() => setCrmViewMode('list')}
                  >
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M8 6H21V8H8V6ZM8 11H21V13H8V11ZM8 16H21V18H8V16ZM3 6H5V8H3V6ZM3 11H5V13H3V11ZM3 16H5V18H3V16Z" fill="currentColor"/>
                    </svg>
                  </button>
                </div>
              </div>
            </div>

            {/* Контент в зависимости от таба */}
            {crmActiveTab === 'deals' && (
              <div className="space-y-4">
                {crmViewMode === 'kanban' ? (
                  <div className="grid grid-cols-4 gap-4">
                    {/* Колонки воронки */}
                    {['Новые', 'В работе', 'Согласование', 'Закрытые'].map((stage, index) => (
                      <div 
                        key={stage} 
                        className={`bg-[#F2F3F4] rounded-[15px] p-[5px] transition-colors ${
                          dragOverColumn === stage ? 'bg-[#E3F2FD] border-2 border-[#0084FF]' : ''
                        }`}
                        onDragOver={(e) => {
                          e.preventDefault();
                          e.dataTransfer.dropEffect = 'move';
                          setDragOverColumn(stage);
                        }}
                        onDragLeave={() => {
                          setDragOverColumn(null);
                        }}
                        onDrop={(e) => {
                          e.preventDefault();
                          if (draggedDeal && draggedDeal.stage !== stage) {
                            // Обновляем стадию сделки
                            updateDealStage(draggedDeal.id, stage);
                            console.log(`Перемещение сделки ${draggedDeal.title} в ${stage}`);
                            // TODO: В реальном приложении здесь будет API вызов для сохранения в БД
                          }
                          setDraggedDeal(null);
                          setDragOverColumn(null);
                        }}
                      >
                        <div className="flex items-center justify-between mb-4 mx-4" style={{
                          paddingTop: '9px',
                          marginLeft: '10px',
                          marginRight: '10px'
                        }}>
                          <h3 className="text-[14px] font-[500] text-[#070F1A]">{stage}</h3>
                          <span className="text-[12px] text-[#8E8E93] bg-white px-2 py-1 rounded-[6px]">
                            {getFilteredDeals().filter(deal => deal.stage === stage).length}
                          </span>
                        </div>
                        <div className="space-y-3">
                          {/* Стабильные сделки по стадиям */}
                          {getFilteredDeals()
                            .filter(deal => deal.stage === stage)
                            .map((deal) => (
                              <div 
                                key={deal.id} 
                                className={`bg-white rounded-[15px] p-3 border border-[#E5E7EB] cursor-pointer hover:shadow-md transition-all ${
                                  draggedDeal?.id === deal.id ? 'opacity-50 scale-95' : ''
                                }`}
                                draggable
                                onDragStart={(e) => {
                                  setDraggedDeal(deal);
                                  e.dataTransfer.effectAllowed = 'move';
                                }}
                                onDragEnd={() => {
                                  setDraggedDeal(null);
                                  setDragOverColumn(null);
                                }}
                                onClick={() => {
                                  setCrmSelectedDeal(deal);
                                  setCrmSidebarOpen(true);
                                }}
                              >
                                {/* Заголовок с качеством лида */}
                                <div className="flex items-center justify-between mb-1">
                                  <h4 className="text-[13px] font-[500] text-[#070F1A]">{deal.client.phone || `Обращение #${deal.id.slice(-4)}`}</h4>
                                  <span className={`text-[10px] px-2 py-1 rounded-[90px] ${
                                    deal.leadQuality === 'hot' ? 'bg-red-100 text-red-600' :
                                    deal.leadQuality === 'warm' ? 'bg-orange-100 text-orange-600' :
                                    'bg-blue-100 text-blue-600'
                                  }`}>
                                    {deal.leadQuality === 'hot' ? 'Горячий' : deal.leadQuality === 'warm' ? 'Теплый' : 'Холодный'}
                                  </span>
                                </div>
                                
                                <p className="text-[12px] text-[#8E8E93] mb-2">{deal.company}</p>
                                
                                {/* Информация о контактах и владельце */}
                                <div className="flex items-center gap-2 mb-2">
                                  <span className={`text-[10px] px-2 py-1 rounded-[15px] flex items-center gap-1 ${
                                    deal.hasContacts ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-600'
                                  }`}>
                                    {deal.hasContacts ? (
                                      <img src="/call-calling.svg" alt="Телефон" className="w-[10px] h-[10px]" style={phoneIconGreenStyle} />
                                    ) : (
                                      <div className="relative w-[10px] h-[10px]">
                                        <img src="/call-calling.svg" alt="Телефон" className="w-[10px] h-[10px]" style={phoneIconGreenStyle} />
                                        <div className="absolute top-1/2 left-0 right-0 h-[1px] bg-gray-400 transform -translate-y-1/2"></div>
                                      </div>
                                    )}
                                    {deal.hasContacts ? 'Есть' : 'Нет'}
                                  </span>
                                  <span className="text-[10px] text-[#8E8E93] flex items-center gap-1">
                                    {deal.owner === 'ai' ? (
                                      <img src="/Frame 205.svg" alt="ИИ" className="w-[10px] h-[10px] align-middle" />
                                    ) : (
                                      <img src="/headphone.svg" alt="Оператор" className="w-[10px] h-[10px] align-middle" style={{ filter: 'brightness(0) saturate(100%) invert(66%) sepia(21%) saturate(828%) hue-rotate(230deg) brightness(95%) contrast(101%)' }} />
                                    )}
                                    {deal.ownerName}
                                  </span>
                                </div>
                                
                                <div className="flex items-center justify-between">
                                  <span className="text-[12px] text-[#0084FF] font-[500]">
                                    {deal.amount ? `${deal.amount.toLocaleString()}₽` : 'Без суммы'}
                                  </span>
                                  <span className="text-[11px] text-[#8E8E93]">{deal.days}д</span>
                                </div>
                              </div>
                            ))}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="space-y-3">
                    {getFilteredDeals().length === 0 ? (
                      <div className="bg-white border border-[#E5E7EB] rounded-[15px] p-6 text-center text-[#8E8E93]">
                        Сделок пока нет
                      </div>
                    ) : (
                      getFilteredDeals().map((deal) => (
                        <div key={deal.id} className="bg-white border border-[#E5E7EB] rounded-[15px] p-4 cursor-pointer hover:shadow-md transition-all" onClick={() => { setCrmSelectedDeal(deal); setCrmSidebarOpen(true); }}>
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                              <div className="w-10 h-10 bg-[#0084FF]/10 rounded-[90px] flex items-center justify-center">
                                <span className="text-[#0084FF] font-[500] text-[14px]">#{deal.id?.toString().slice(-4) || ''}</span>
                              </div>
                              <div>
                                <h3 className="text-[14px] font-[500] text-[#070F1A]">{deal.title || 'Сделка'}</h3>
                                <p className="text-[12px] text-[#8E8E93]">Создана {deal.createdDate || ''}</p>
                              </div>
                            </div>
                            <div className="flex items-center gap-4">
                              <span className="text-[14px] font-[500] text-[#070F1A]">{deal.amount || 0}₽</span>
                              <span className="px-3 py-1 bg-[#36C76A]/10 text-[#36C76A] text-[12px] font-[500] rounded-[6px]">
                                {deal.stage}
                              </span>
                            </div>
                          </div>
                        </div>
                      ))
                    )}
                  </div>
                )}
              </div>
            )}

            {crmActiveTab === 'tasks' && (
              <div className="space-y-4">
                {crmViewMode === 'list' ? (
                  <div className="space-y-3">
                    {tasks.map((task) => (
                      <div key={task.id} className="bg-white border border-[#E5E7EB] rounded-[15px] p-4 cursor-pointer hover:shadow-md transition-all" onClick={() => openTaskDetails(task)}>
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <div className={`w-3 h-3 rounded-[90px] ${task.status === 'completed' ? 'bg-[#36C76A]' : 'bg-[#E5E7EB]'}`}></div>
                            <div>
                              <h3 className="text-[14px] font-[500] text-[#070F1A]">{task.title || `Задача #${task.id.slice(-4)}`}</h3>
                              <p className="text-[12px] text-[#8E8E93]">
                                Исполнитель: {task.assigneeName} • Создана {new Date(task.createdDate).toLocaleDateString()}
                              </p>
                            </div>
                          </div>
                          <div className="flex items-center gap-4">
                            <span className={`px-3 py-1 text-[12px] font-[500] rounded-[6px] ${
                              task.priority === 'high' ? 'bg-red-100 text-red-600' :
                              task.priority === 'medium' ? 'bg-orange-100 text-orange-600' :
                              'bg-green-100 text-green-600'
                            }`}>
                              {task.priority === 'high' ? 'Высокий' : task.priority === 'medium' ? 'Средний' : 'Низкий'}
                            </span>
                            <span className="text-[11px] text-[#8E8E93]">
                              {task.dueDate ? new Date(task.dueDate).toLocaleDateString() : 'Без дедлайна'}
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="grid grid-cols-3 gap-4">
                    {[
                      { key: 'pending', label: 'К выполнению', color: 'bg-yellow-50 border-yellow-200' },
                      { key: 'in_progress', label: 'В работе', color: 'bg-blue-50 border-blue-200' },
                      { key: 'completed', label: 'Выполнено', color: 'bg-green-50 border-green-200' }
                    ].map((status) => (
                      <div 
                        key={status.key} 
                        className={`bg-[#F2F3F4] rounded-[15px] p-[5px] transition-colors ${
                          dragOverTaskColumn === status.key ? 'bg-[#E3F2FD] border-2 border-[#0084FF]' : ''
                        }`}
                        onDragOver={(e) => handleTaskDragOver(e, status.key)}
                        onDragLeave={handleTaskDragLeave}
                        onDrop={(e) => handleTaskDrop(e, status.key)}
                      >
                        <div className="flex items-center justify-between mb-4 mx-4">
                          <h3 className="text-[14px] font-[500] text-[#070F1A]">{status.label}</h3>
                          <span className="text-[12px] text-[#8E8E93] bg-white px-2 py-1 rounded-[6px]">
                            {getTasksByStatus(status.key).length}
                          </span>
                        </div>
                        
                        <div className="space-y-3">
                          {getTasksByStatus(status.key).map((task) => (
                            <div 
                              key={task.id} 
                              className={`bg-white rounded-[15px] p-3 border border-[#E5E7EB] cursor-grab hover:shadow-md transition-all ${
                                draggedTask?.id === task.id ? 'opacity-50 scale-95 cursor-grabbing' : ''
                              }`}
                              draggable
                              onDragStart={(e) => handleTaskDragStart(e, task)}
                              onDragEnd={handleTaskDragEnd}
                              onClick={(e) => {
                                if (!isDragging) {
                                  openTaskDetails(task);
                                }
                              }}
                            >
                              <h4 className="text-[13px] font-[500] text-[#070F1A] mb-1">{task.title || `Задача #${task.id.slice(-4)}`}</h4>
                              <p className="text-[12px] text-[#8E8E93] mb-2">{task.assigneeName}</p>
                              <div className="flex items-center justify-between">
                                <span className={`px-2 py-1 text-[11px] font-[500] rounded-[4px] ${
                                  task.priority === 'high' ? 'bg-red-100 text-red-600' :
                                  task.priority === 'medium' ? 'bg-orange-100 text-orange-600' :
                                  'bg-green-100 text-green-600'
                                }`}>
                                  {task.priority === 'high' ? 'Высокий' : task.priority === 'medium' ? 'Средний' : 'Низкий'}
                                </span>
                                <span className="text-[11px] text-[#8E8E93]">
                                  {task.dueDate ? new Date(task.dueDate).toLocaleDateString() : 'Без дедлайна'}
                                </span>
                              </div>
                            </div>
                          ))}
                          
                          {/* Кнопка добавления задачи в первую колонку - после всех задач */}
                          {status.key === 'pending' && (
                            <div className="mt-3">
                              <button
                                onClick={() => setCreateTaskModalOpen(true)}
                                className="w-full h-[34px] text-[#8E8E93] rounded-[8px] text-[13px] hover:border-[#0084FF] hover:text-[#0084FF] transition-colors flex items-center justify-center gap-2"
                                style={BUTTON_STYLES.whiteButton}
                              >
                                <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                  <path d="M12 5V19M5 12H19" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                                </svg>
                                Добавить задачу
                              </button>
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}

            {crmActiveTab === 'clients' && (
              <div className="space-y-4">
                {console.log('Rendering clients tab, clients count:', clients.length, 'clients:', clients)}
                {console.log('crmActiveTab:', crmActiveTab)}
                {clients.length === 0 ? (
                  <div className="flex flex-col items-center justify-center py-12">
                    <div className="w-20 h-20 bg-[#F3F4F6] rounded-full flex items-center justify-center mb-4">
                      <svg className="w-8 h-8 text-[#8E8E93]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                      </svg>
                    </div>
                    <h3 className="text-[16px] font-[500] text-[#070F1A] mb-2">Клиентов пока нет</h3>
                    <p className="text-[14px] text-[#8E8E93] text-center max-w-md">
                      Клиенты появятся здесь автоматически, когда начнут поступать заявки через виджет или другие каналы связи
                    </p>
                  </div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {clients.map((client) => (
                      <div 
                        key={client.id} 
                        className="bg-white rounded-[12px] p-4 border border-[#E5E7EB] hover:shadow-sm transition-shadow cursor-pointer"
                        onClick={() => {
                          setSelectedCrmClient(client);
                          setCrmClientSidebarOpen(true);
                        }}
                      >
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex-1">
                            <h3 className="text-[16px] font-[500] text-[#070F1A] mb-1">{client.name}</h3>
                            {client.company && (
                              <p className="text-[14px] text-[#8E8E93] mb-2">{client.company}</p>
                            )}
                          </div>
                          <span className={`px-2 py-1 rounded-[6px] text-[12px] font-[500] ${
                            client.status === 'active' 
                              ? 'bg-[#DCFCE7] text-[#166534]' 
                              : 'bg-[#FEF3C7] text-[#92400E]'
                          }`}>
                            {client.status === 'active' ? 'Активный' : 'Неактивный'}
                          </span>
                        </div>
                        
                        <div className="space-y-2">
                          {client.email && (
                            <div className="flex items-center text-[14px] text-[#6B7280]">
                              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                              </svg>
                              {client.email}
                            </div>
                          )}
                          {client.phone && (
                            <div className="flex items-center text-[14px] text-[#6B7280]">
                              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                              </svg>
                              {client.phone}
                            </div>
                          )}
                          {client.website && (
                            <div className="flex items-center text-[14px] text-[#6B7280]">
                              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9" />
                              </svg>
                              <a href={client.website} target="_blank" rel="noopener noreferrer" className="text-[#3B82F6] hover:underline">
                                {client.website}
                              </a>
                            </div>
                          )}
                        </div>
                        
                        {client.notes && (
                          <div className="mt-3 pt-3 border-t border-[#F3F4F6]">
                            <p className="text-[12px] text-[#8E8E93] line-clamp-2">{client.notes}</p>
                          </div>
                        )}
                        
                        <div className="mt-3 pt-3 border-t border-[#F3F4F6] flex items-center justify-between">
                          <span className="text-[12px] text-[#8E8E93]">
                            {client.source === 'widget_form' ? 'Из виджета' : client.source}
                          </span>
                          <span className="text-[12px] text-[#8E8E93]">
                            {new Date(client.created_at).toLocaleDateString('ru-RU')}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}
            
            {/* Боковая панель для деталей сделки */}
            {crmSidebarOpen && (
              <>
                {/* Затемнение фона */}
                <div 
                  className="fixed inset-0 bg-black bg-opacity-50 z-[9998]"
                  style={{ marginTop: 0 }}
                  onClick={() => setCrmSidebarOpen(false)}
                />
                
                {/* Боковая панель */}
                <div className="fixed right-0 top-0 h-full w-[500px] bg-white shadow-2xl z-[9999] transform transition-transform duration-300 ease-in-out" style={{ borderTopLeftRadius: '20px', borderBottomLeftRadius: '20px', marginTop: 0 }}>
                  <div className="h-full flex flex-col">
                    {/* Заголовок панели */}
                    <div className="flex items-center justify-between p-6 border-b border-[#E5E7EB]">
                      <h2 className="text-[18px] font-[500] text-[#070F1A]">Детали сделки</h2>
                      <button 
                        onClick={() => setCrmSidebarOpen(false)}
                        className="w-8 h-8 rounded-[90px] bg-gray-100 flex items-center justify-center hover:bg-gray-200 transition-colors"
                      >
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ color: '#8E8E93' }}>
                          <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                      </button>
                    </div>
                    
                    {/* Контент панели */}
                    <div className="flex-1 overflow-y-auto p-6 space-y-6">
                      {crmSelectedDeal && (
                        <>
                          {/* Основная информация */}
                          <div>
                            <h3 className="text-[16px] font-[500] text-[#070F1A] mb-3">{crmSelectedDeal.title}</h3>
                            <div className="space-y-2">
                              <div className="flex justify-between">
                                <span className="text-[14px] text-[#8E8E93]">Стадия:</span>
                                <span className="px-3 py-1 bg-[#0084FF]/10 text-[#0084FF] text-[12px] font-[500] rounded-[6px]">
                                  {crmSelectedDeal.stage}
                                </span>
                              </div>
                              <div className="flex justify-between items-center">
                                <span className="text-[14px] text-[#8E8E93]">Качество лида:</span>
                                <div className="flex items-center gap-2">
                                  <div className="relative lead-quality-dropdown">
                                    <button
                                      onClick={() => setEditingLeadQuality(!editingLeadQuality)}
                                      className={`px-3 py-1 text-[12px] font-[500] rounded-[90px] flex items-center gap-2 hover:opacity-80 transition-opacity ${
                                  crmSelectedDeal.leadQuality === 'hot' ? 'bg-red-100 text-red-600' :
                                  crmSelectedDeal.leadQuality === 'warm' ? 'bg-orange-100 text-orange-600' :
                                  'bg-blue-100 text-blue-600'
                                      }`}
                                    >
                                  {crmSelectedDeal.leadQuality === 'hot' ? 'Горячий' :
                                   crmSelectedDeal.leadQuality === 'warm' ? 'Теплый' : 'Холодный'}
                                      <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                      </svg>
                                    </button>
                                    {editingLeadQuality && (
                                      <div className="absolute top-full left-0 mt-1 bg-white border border-[#E5E7EB] rounded-[10px] shadow-lg z-50 min-w-[120px]">
                                        <div className="p-2 space-y-1">
                                          <div 
                                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                                            onClick={() => handleSaveLeadQuality('hot')}
                                          >
                                            <div className="w-3 h-3 bg-red-100 rounded-full"></div>
                                            <span className="text-[13px] text-[#070F1A]">Горячий</span>
                                          </div>
                                          <div 
                                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                                            onClick={() => handleSaveLeadQuality('warm')}
                                          >
                                            <div className="w-3 h-3 bg-orange-100 rounded-full"></div>
                                            <span className="text-[13px] text-[#070F1A]">Теплый</span>
                                          </div>
                                          <div 
                                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                                            onClick={() => handleSaveLeadQuality('cold')}
                                          >
                                            <div className="w-3 h-3 bg-blue-100 rounded-full"></div>
                                            <span className="text-[13px] text-[#070F1A]">Холодный</span>
                                          </div>
                                        </div>
                                      </div>
                                    )}
                                  </div>
                                </div>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-[14px] text-[#8E8E93]">Контакты:</span>
                                <span className={`px-3 py-1 text-[12px] font-[500] rounded-[15px] flex items-center gap-2 ${
                                  crmSelectedDeal.hasContacts ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-600'
                                }`}>
                                  {crmSelectedDeal.hasContacts ? (
                                    <img src="/call-calling.svg" alt="Телефон" className="w-[10px] h-[10px]" style={phoneIconGreenStyle} />
                                  ) : (
                                    <div className="relative w-[10px] h-[10px]">
                                      <img src="/call-calling.svg" alt="Телефон" className="w-[10px] h-[10px]" style={{ filter: 'brightness(0) saturate(100%) invert(66%) sepia(21%) saturate(828%) hue-rotate(230deg) brightness(95%) contrast(101%)' }} />
                                      <div className="absolute top-1/2 left-0 right-0 h-[1px] bg-gray-400 transform -translate-y-1/2"></div>
                                    </div>
                                  )}
                                  {crmSelectedDeal.hasContacts ? 'Есть' : 'Нет'}
                                </span>
                              </div>
                              <div className="flex justify-between items-center">
                                <span className="text-[14px] text-[#8E8E93]">Исполнитель:</span>
                                <div className="flex items-center gap-2">
                                  <div className="relative executor-dropdown">
                                    <button
                                      onClick={() => crmSelectedDeal.owner !== 'ai' && toggleExecutorDropdown('deal')}
                                      className={`text-[12px] text-[#070F1A] flex items-center gap-2 ${crmSelectedDeal.owner === 'ai' ? 'cursor-default' : 'hover:opacity-80 transition-opacity'}`}
                                    >
                                  {crmSelectedDeal.owner === 'ai' ? (
                                    <img src="/Frame 205.svg" alt="ИИ" className="w-[12px] h-[12px] align-middle" />
                                  ) : (
                                    <img src="/headphone.svg" alt="Оператор" className="w-[12px] h-[12px] align-middle" style={{ filter: 'brightness(0) saturate(100%) invert(66%) sepia(21%) saturate(828%) hue-rotate(230deg) brightness(95%) contrast(101%)' }} />
                                  )}
                                  {crmSelectedDeal.ownerName}
                                      {crmSelectedDeal.owner !== 'ai' && (
                                        <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                        </svg>
                                      )}
                                    </button>
                                    {executorDropdowns.deal && (
                                      <div className="absolute top-full right-0 mt-1 bg-white border border-[#E5E7EB] rounded-[10px] shadow-lg z-50 min-w-[160px]">
                                        <div className="p-2 space-y-1">
                                          <div 
                                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                                            onClick={() => {
                                              setDeals(prev => prev.map(deal => 
                                                deal.id === crmSelectedDeal.id 
                                                  ? { ...deal, owner: 'ai', ownerName: 'ИИ-агент' }
                                                  : deal
                                              ));
                                              setCrmSelectedDeal(prev => ({ ...prev, owner: 'ai', ownerName: 'ИИ-агент' }));
                                              setExecutorDropdowns(prev => ({...prev, deal: false}));
                                            }}
                                          >
                                            <img src="/Frame 205.svg" alt="ИИ" className="w-4 h-4" />
                                            <span className="text-[13px] text-[#070F1A]">ИИ-агент</span>
                                          </div>
                                          <div 
                                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                                            onClick={() => {
                                              setDeals(prev => prev.map(deal => 
                                                deal.id === crmSelectedDeal.id 
                                                  ? { ...deal, owner: 'operator-1', ownerName: 'Анна Петрова' }
                                                  : deal
                                              ));
                                              setCrmSelectedDeal(prev => ({ ...prev, owner: 'operator-1', ownerName: 'Анна Петрова' }));
                                              setExecutorDropdowns(prev => ({...prev, deal: false}));
                                            }}
                                          >
                                            <img src="/headphone.svg" alt="Оператор" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(100%) invert(66%) sepia(21%) saturate(828%) hue-rotate(230deg) brightness(95%) contrast(101%)' }} />
                                            <span className="text-[13px] text-[#070F1A]">Анна Петрова</span>
                                          </div>
                                          <div 
                                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                                            onClick={() => {
                                              setDeals(prev => prev.map(deal => 
                                                deal.id === crmSelectedDeal.id 
                                                  ? { ...deal, owner: 'operator-2', ownerName: 'Михаил Сидоров' }
                                                  : deal
                                              ));
                                              setCrmSelectedDeal(prev => ({ ...prev, owner: 'operator-2', ownerName: 'Михаил Сидоров' }));
                                              setExecutorDropdowns(prev => ({...prev, deal: false}));
                                            }}
                                          >
                                            <img src="/headphone.svg" alt="Оператор" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(100%) invert(66%) sepia(21%) saturate(828%) hue-rotate(230deg) brightness(95%) contrast(101%)' }} />
                                            <span className="text-[13px] text-[#070F1A]">Михаил Сидоров</span>
                                          </div>
                                        </div>
                                      </div>
                                    )}
                                  </div>
                                </div>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-[14px] text-[#8E8E93]">Статус решения:</span>
                                <span className={`px-3 py-1 text-[12px] font-[500] rounded-[90px] ${
                                  crmSelectedDeal.isResolved ? 'bg-green-100 text-green-600' : 'bg-yellow-100 text-yellow-600'
                                }`}>
                                  {crmSelectedDeal.isResolved ? 'Решен' : 'В работе'}
                                </span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-[14px] text-[#8E8E93]">Создана:</span>
                                <span className="text-[13px] text-[#070F1A]">{crmSelectedDeal.createdDate}</span>
                              </div>
                              <div className="flex justify-between">
                                <span className="text-[14px] text-[#8E8E93]">Последний контакт:</span>
                                <span className="text-[13px] text-[#070F1A]">{crmSelectedDeal.lastContact}</span>
                              </div>
                            </div>
                          </div>
                          
                          {/* Информация о клиенте */}
                          <div>
                            <h4 className="text-[16px] font-[500] text-[#070F1A] mb-3">Клиент</h4>
                            <div className="space-y-2">
                              <div className="flex justify-between items-center">
                                <span className="text-[14px] font-[500] text-[#070F1A]">Имя:</span>
                                <div className="flex items-center gap-2">
                                  {editingField === 'name' ? (
                                    <div className="flex items-center gap-2">
                                      <input
                                        type="text"
                                        value={editedClientData.name || ''}
                                        onChange={(e) => setEditedClientData(prev => ({ ...prev, name: e.target.value }))}
                                        className="text-[12px] text-[#070F1A] border border-gray-300 rounded px-2 py-1 w-32"
                                        autoFocus
                                      />
                                      <button 
                                        onClick={() => handleSaveField('name')}
                                        className="w-4 h-4 text-green-600 hover:text-green-700"
                                      >
                                        <img src="/Frame 2069.svg" alt="Сохранить" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(50%) invert(35%) sepia(43%) saturate(1352%) hue-rotate(87deg) brightness(119%) contrast(119%)' }} />
                                      </button>
                                      <button 
                                        onClick={handleCancelEdit}
                                        className="w-4 h-4 text-red-600 hover:text-red-700"
                                      >
                                        <img src="/x-02.svg" alt="Отмена" className="w-4 h-4" style={redIconStyle} />
                                      </button>
                                    </div>
                                  ) : (
                                    <div className="flex items-center gap-2">
                                      <span className="text-[13px] text-[#070F1A]">{crmSelectedDeal.client.name || 'Не указано'}</span>
                                      <button 
                                        onClick={() => handleEditField('name', crmSelectedDeal.client.name || '')}
                                        className="w-[11px] h-[11px] text-[#8E8E93] hover:text-[#070F1A] transition-colors"
                                      >
                                        <img src="/pencil.svg" alt="Редактировать" className="w-[11px] h-[11px]" />
                                      </button>
                                    </div>
                                  )}
                                </div>
                              </div>
                              <div className="flex justify-between items-center">
                                <span className="text-[14px] font-[500] text-[#070F1A]">Email:</span>
                                <div className="flex items-center gap-2">
                                  {editingField === 'email' ? (
                                    <div className="flex items-center gap-2">
                                      <input
                                        type="email"
                                        value={editedClientData.email || ''}
                                        onChange={(e) => setEditedClientData(prev => ({ ...prev, email: e.target.value }))}
                                        className="text-[12px] text-[#070F1A] border border-gray-300 rounded px-2 py-1 w-32"
                                        autoFocus
                                      />
                                      <button 
                                        onClick={() => handleSaveField('email')}
                                        className="w-4 h-4 text-green-600 hover:text-green-700"
                                      >
                                        <img src="/Frame 2069.svg" alt="Сохранить" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(50%) invert(35%) sepia(43%) saturate(1352%) hue-rotate(87deg) brightness(119%) contrast(119%)' }} />
                                      </button>
                                      <button 
                                        onClick={handleCancelEdit}
                                        className="w-4 h-4 text-red-600 hover:text-red-700"
                                      >
                                        <img src="/x-02.svg" alt="Отмена" className="w-4 h-4" style={redIconStyle} />
                                      </button>
                                    </div>
                                  ) : (
                                    <div className="flex items-center gap-2">
                                      <span className="text-[12px] text-[#0084FF]">{crmSelectedDeal.client.email || 'Не указан'}</span>
                                      <button 
                                        onClick={() => handleEditField('email', crmSelectedDeal.client.email || '')}
                                        className="w-[11px] h-[11px] text-[#8E8E93] hover:text-[#070F1A] transition-colors"
                                      >
                                        <img src="/pencil.svg" alt="Редактировать" className="w-[11px] h-[11px]" />
                                      </button>
                                    </div>
                                  )}
                                </div>
                              </div>
                              <div className="flex justify-between items-center">
                                <span className="text-[14px] font-[500] text-[#070F1A]">Телефон:</span>
                                <div className="flex items-center gap-2">
                                  {editingField === 'phone' ? (
                                    <div className="flex items-center gap-2">
                                      <input
                                        type="tel"
                                        value={editedClientData.phone || ''}
                                        onChange={(e) => setEditedClientData(prev => ({ ...prev, phone: e.target.value }))}
                                        className="text-[12px] text-[#070F1A] border border-gray-300 rounded px-2 py-1 w-32"
                                        autoFocus
                                      />
                                      <button 
                                        onClick={() => handleSaveField('phone')}
                                        className="w-4 h-4 text-green-600 hover:text-green-700"
                                      >
                                        <img src="/Frame 2069.svg" alt="Сохранить" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(50%) invert(35%) sepia(43%) saturate(1352%) hue-rotate(87deg) brightness(119%) contrast(119%)' }} />
                                      </button>
                                      <button 
                                        onClick={handleCancelEdit}
                                        className="w-4 h-4 text-red-600 hover:text-red-700"
                                      >
                                        <img src="/x-02.svg" alt="Отмена" className="w-4 h-4" style={redIconStyle} />
                                      </button>
                                    </div>
                                  ) : (
                                    <div className="flex items-center gap-2">
                                      <span className="text-[13px] text-[#070F1A]">{crmSelectedDeal.client.phone || 'Не указан'}</span>
                                      <button 
                                        onClick={() => handleEditField('phone', crmSelectedDeal.client.phone || '')}
                                        className="w-[11px] h-[11px] text-[#8E8E93] hover:text-[#070F1A] transition-colors"
                                      >
                                        <img src="/pencil.svg" alt="Редактировать" className="w-[11px] h-[11px]" />
                                      </button>
                                    </div>
                                  )}
                                </div>
                              </div>
                              <div className="flex justify-between items-center">
                                <span className="text-[14px] font-[500] text-[#070F1A]">Компания:</span>
                                <div className="flex items-center gap-2">
                                  {editingField === 'company' ? (
                                    <div className="flex items-center gap-2">
                                      <input
                                        type="text"
                                        value={editedClientData.company || ''}
                                        onChange={(e) => setEditedClientData(prev => ({ ...prev, company: e.target.value }))}
                                        className="text-[12px] text-[#070F1A] border border-gray-300 rounded px-2 py-1 w-32"
                                        autoFocus
                                      />
                                      <button 
                                        onClick={() => handleSaveField('company')}
                                        className="w-4 h-4 text-green-600 hover:text-green-700"
                                      >
                                        <img src="/Frame 2069.svg" alt="Сохранить" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(50%) invert(35%) sepia(43%) saturate(1352%) hue-rotate(87deg) brightness(119%) contrast(119%)' }} />
                                      </button>
                                      <button 
                                        onClick={handleCancelEdit}
                                        className="w-4 h-4 text-red-600 hover:text-red-700"
                                      >
                                        <img src="/x-02.svg" alt="Отмена" className="w-4 h-4" style={redIconStyle} />
                                      </button>
                                    </div>
                                  ) : (
                                    <div className="flex items-center gap-2">
                                      <span className="text-[13px] text-[#070F1A]">{crmSelectedDeal.client.company || 'Не указана'}</span>
                                      <button 
                                        onClick={() => handleEditField('company', crmSelectedDeal.client.company || '')}
                                        className="w-[11px] h-[11px] text-[#8E8E93] hover:text-[#070F1A] transition-colors"
                                      >
                                        <img src="/pencil.svg" alt="Редактировать" className="w-[11px] h-[11px]" />
                                      </button>
                                    </div>
                                  )}
                                </div>
                              </div>
                              <div className="flex justify-between items-center">
                                <span className="text-[14px] font-[500] text-[#070F1A]">Сумма:</span>
                                <div className="flex items-center gap-2">
                                  <span className="text-[13px] text-[#070F1A]">
                                    {crmSelectedDeal.amount ? `${crmSelectedDeal.amount.toLocaleString()}₽` : 'Не указана'}
                                  </span>
                                  <button className="w-[11px] h-[11px] text-[#8E8E93] hover:text-[#070F1A] transition-colors">
                                    <img src="/pencil.svg" alt="Редактировать" className="w-[11px] h-[11px]" />
                                  </button>
                                </div>
                              </div>
                            </div>
                          </div>
                          
                          {/* Заметки */}
                          <div>
                            <div className="flex items-center justify-between mb-3">
                              <h4 className="text-[16px] font-[500] text-[#070F1A]">Заметки</h4>
                              {!editingNotes && (
                                <button
                                  onClick={startEditingNotes}
                                  className="text-[12px] text-[#0084FF] hover:underline"
                                >
                                  Редактировать
                                </button>
                              )}
                            </div>
                            
                            {editingNotes ? (
                              <div className="space-y-3">
                                <textarea
                                  value={editedNotes}
                                  onChange={(e) => setEditedNotes(e.target.value)}
                                  className="w-full h-24 px-3 py-2 border border-[#E5E7EB] rounded-[8px] text-[14px] focus:outline-none focus:border-[#0084FF] resize-none"
                                  placeholder="Добавьте заметки о сделке..."
                                />
                                <div className="flex gap-2">
                                  <button
                                    onClick={saveNotes}
                                    className="px-3 py-1 bg-[#0084FF] text-white text-[12px] rounded-[90px] hover:bg-[#0073E6] transition-colors h-[34px]"
                                  >
                                    Сохранить
                                  </button>
                                  <button
                                    onClick={cancelEditingNotes}
                                    className="px-3 py-1 bg-gray-200 text-gray-700 text-[12px] rounded-[90px] hover:bg-gray-300 transition-colors h-[34px]"
                                  >
                                    Отмена
                                  </button>
                                </div>
                              </div>
                            ) : (
                              <div className="bg-[#F2F3F4] rounded-[15px] p-4">
                                <p className="text-[12px] text-[#070F1A] leading-relaxed">
                                  {crmSelectedDeal.notes || 'Заметки не добавлены'}
                                </p>
                              </div>
                            )}
                          </div>
                          
                          {/* Действия */}
                          <div>
                            <h4 className="text-[16px] font-[500] text-[#070F1A] mb-3">Действия</h4>
                            <div className="space-y-2">
                              {crmSelectedDeal.client.email ? (
                                <a 
                                  href={`mailto:${crmSelectedDeal.client.email}?subject=По поводу сделки: ${crmSelectedDeal.title}`}
                                  className="w-full h-[34px] bg-[#0084FF] text-white rounded-[10px] text-[14px] font-[500] hover:bg-[#0073E6] transition-colors flex items-center justify-center"
                                >
                                  Отправить email
                                </a>
                              ) : (
                                <button 
                                  disabled
                                  className="w-full h-10 bg-gray-200 text-gray-500 rounded-[10px] text-[14px] font-[500] cursor-not-allowed"
                                >
                                  Email не указан
                                </button>
                              )}
                              
                              {crmSelectedDeal.client.phone ? (
                                <a 
                                  href={`tel:${crmSelectedDeal.client.phone}`}
                                  className="w-full h-[34px] bg-white border border-[#E5E7EB] text-[#070F1A] rounded-[10px] text-[14px] font-[500] hover:bg-gray-50 transition-colors flex items-center justify-center"
                                >
                                  Позвонить
                                </a>
                              ) : (
                                <button 
                                  disabled
                                  className="w-full h-[34px] bg-gray-100 border border-gray-200 text-gray-500 rounded-[10px] text-[14px] font-[500] cursor-not-allowed"
                                >
                                  Телефон не указан
                                </button>
                              )}
                              
                              {crmSelectedDeal.dialogId ? (
                                <button 
                                  onClick={() => {
                                    setCrmSidebarOpen(false);
                                    setCrmActiveTab('deals');
                                    // TODO: Перейти к конкретному диалогу
                                    console.log(`Переход к диалогу: ${crmSelectedDeal.dialogId}`);
                                  }}
                                  className="w-full h-[34px] bg-white border border-[#E5E7EB] text-[#070F1A] rounded-[10px] text-[14px] font-[500] hover:bg-gray-50 transition-colors flex items-center justify-center"
                                >
                                  Перейти в диалог
                                </button>
                              ) : (
                                <button 
                                  disabled
                                  className="w-full h-[34px] bg-gray-100 border border-gray-200 text-gray-500 rounded-[10px] text-[14px] font-[500] cursor-not-allowed"
                                >
                                  Диалог не найден
                                </button>
                              )}
                              
                              {/* Кнопка удаления */}
                              <button 
                                onClick={() => handleDeleteDeal(crmSelectedDeal.id)}
                                className="w-full h-[34px] bg-red-50/50 border border-red-100/50 text-red-500/70 rounded-[10px] text-[14px] font-[500] hover:bg-red-100/50 hover:text-red-500 transition-colors flex items-center justify-center"
                              >
                                Удалить сделку
                              </button>
                            </div>
                          </div>
                        </>
                      )}
                    </div>
                  </div>
                </div>
              </>
            )}

            {/* Боковая панель для деталей клиента */}
            {crmClientSidebarOpen && selectedCrmClient && (
              <>
                {/* Затемнение фона */}
                <div 
                  className="fixed inset-0 bg-black bg-opacity-50 z-[9998]"
                  style={{ marginTop: 0 }}
                  onClick={() => setCrmClientSidebarOpen(false)}
                />
                
                {/* Боковая панель */}
                <div className="fixed right-0 top-0 h-full w-[500px] bg-white shadow-2xl z-[9999] transform transition-transform duration-300 ease-in-out" style={{ borderTopLeftRadius: '20px', borderBottomLeftRadius: '20px', marginTop: 0 }}>
                  <div className="h-full flex flex-col">
                    {/* Заголовок панели */}
                    <div className="flex items-center justify-between p-6 border-b border-[#E5E7EB]">
                      <h2 className="text-[18px] font-[500] text-[#070F1A]">Детали клиента</h2>
                      <button 
                        onClick={() => setCrmClientSidebarOpen(false)}
                        className="w-8 h-8 rounded-[90px] bg-gray-100 flex items-center justify-center hover:bg-gray-200 transition-colors"
                      >
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ color: '#8E8E93' }}>
                          <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                      </button>
                    </div>
                    
                    {/* Контент панели */}
                    <div className="flex-1 overflow-y-auto p-6 space-y-6">
                      {/* Основная информация */}
                      <div>
                        <h3 className="text-[16px] font-[500] text-[#070F1A] mb-3">{selectedCrmClient.name}</h3>
                        <div className="space-y-3">
                          {selectedCrmClient.company && (
                            <div className="flex justify-between">
                              <span className="text-[14px] text-[#8E8E93]">Компания:</span>
                              <span className="text-[14px] text-[#070F1A] font-[500]">{selectedCrmClient.company}</span>
                            </div>
                          )}
                          
                          {selectedCrmClient.email && (
                            <div className="flex justify-between">
                              <span className="text-[14px] text-[#8E8E93]">Email:</span>
                              <a href={`mailto:${selectedCrmClient.email}`} className="text-[14px] text-[#0084FF] hover:underline">
                                {selectedCrmClient.email}
                              </a>
                            </div>
                          )}
                          
                          {selectedCrmClient.phone && (
                            <div className="flex justify-between">
                              <span className="text-[14px] text-[#8E8E93]">Телефон:</span>
                              <a href={`tel:${selectedCrmClient.phone}`} className="text-[14px] text-[#0084FF] hover:underline">
                                {selectedCrmClient.phone}
                              </a>
                            </div>
                          )}
                          
                          {selectedCrmClient.website && (
                            <div className="flex justify-between">
                              <span className="text-[14px] text-[#8E8E93]">Сайт:</span>
                              <a href={selectedCrmClient.website} target="_blank" rel="noopener noreferrer" className="text-[14px] text-[#0084FF] hover:underline">
                                {selectedCrmClient.website}
                              </a>
                            </div>
                          )}
                          
                          <div className="flex justify-between">
                            <span className="text-[14px] text-[#8E8E93]">Статус:</span>
                            <span className={`px-3 py-1 text-[12px] font-[500] rounded-[6px] ${
                              selectedCrmClient.status === 'active' 
                                ? 'bg-[#DCFCE7] text-[#166534]' 
                                : 'bg-[#FEF3C7] text-[#92400E]'
                            }`}>
                              {selectedCrmClient.status === 'active' ? 'Активный' : 'Неактивный'}
                            </span>
                          </div>
                          
                          <div className="flex justify-between">
                            <span className="text-[14px] text-[#8E8E93]">Источник:</span>
                            <span className="text-[14px] text-[#070F1A]">
                              {selectedCrmClient.source === 'widget_form' ? 'Из виджета' : selectedCrmClient.source}
                            </span>
                          </div>
                          
                          <div className="flex justify-between">
                            <span className="text-[14px] text-[#8E8E93]">Дата создания:</span>
                            <span className="text-[14px] text-[#070F1A]">
                              {new Date(selectedCrmClient.created_at).toLocaleDateString('ru-RU')}
                            </span>
                          </div>
                        </div>
                      </div>
                      
                      {/* Заметки */}
                      {selectedCrmClient.notes && (
                        <div>
                          <h4 className="text-[14px] font-[500] text-[#070F1A] mb-3">Заметки</h4>
                          <div className="bg-[#F9FAFB] rounded-[8px] p-4">
                            <p className="text-[14px] text-[#6B7280] whitespace-pre-wrap">{selectedCrmClient.notes}</p>
                          </div>
                        </div>
                      )}
                      
                      {/* Кнопки действий */}
                      <div className="space-y-3 pt-4 border-t border-[#E5E7EB]">
                        <button 
                          onClick={async () => {
                            try {
                              // Создаем сделку в БД
                              const dealData = {
                                title: `Сделка с ${selectedCrmClient.name}`,
                                stage: 'Новые',
                                lead_quality: 'warm',
                                amount: 0,
                                owner: 'ai',
                                owner_name: 'ИИ-агент',
                                is_resolved: false,
                                description: `Сделка создана из карточки клиента ${selectedCrmClient.name}`,
                                client_id: selectedCrmClient.id,
                                dialog_id: null
                              };
                              
                              const createdDeal = await crmAPI.createDeal(currentUser?.id, dealData);
                              console.log('Deal created in Supabase:', createdDeal);
                              
                              // Обновляем локальное состояние
                              const newDealObj = {
                                id: createdDeal.id,
                                title: dealData.title,
                                company: selectedCrmClient.company || 'Не указана',
                                amount: dealData.amount,
                                days: 0, // Локальное поле для фронтенда
                                stage: dealData.stage,
                                leadQuality: dealData.lead_quality,
                                hasContacts: !!(selectedCrmClient.email || selectedCrmClient.phone),
                                owner: dealData.owner,
                                ownerName: dealData.owner_name,
                                isResolved: dealData.is_resolved,
                                client: {
                                  name: selectedCrmClient.name,
                                  email: selectedCrmClient.email || '',
                                  phone: selectedCrmClient.phone || '',
                                  company: selectedCrmClient.company || ''
                                },
                                notes: dealData.description,
                                createdDate: new Date().toISOString().split('T')[0],
                                lastContact: new Date().toISOString().split('T')[0],
                                dialogId: dealData.dialog_id || ''
                              };
                              
                              // Перезагружаем CRM данные из БД
                              await reloadCRMData();
                              setCrmClientSidebarOpen(false);
                              setCrmActiveTab('deals');
                            } catch (error) {
                              console.error('Error creating deal:', error);
                              alert('Ошибка создания сделки: ' + error.message);
                            }
                          }}
                          className="w-full h-[34px] bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0070E6] transition-colors flex items-center justify-center"
                          style={BUTTON_STYLES.blueButton}
                        >
                          Создать сделку
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </>
            )}

            {/* Боковая панель для деталей задачи */}
            {taskSidebarOpen && selectedTask && (
              <>
                <div 
                  className="fixed inset-0 bg-black bg-opacity-50 z-[9998]"
                  style={{ marginTop: 0 }}
                  onClick={() => setTaskSidebarOpen(false)}
                />
                <div className="fixed right-0 top-0 h-full w-[500px] bg-white shadow-2xl z-[9999] transform transition-transform duration-300 ease-in-out" style={{ borderTopLeftRadius: '20px', borderBottomLeftRadius: '20px', marginTop: 0 }}>
                  <div className="h-full flex flex-col">
                    {/* Заголовок панели */}
                    <div className="flex items-center justify-between p-6 border-b border-[#E5E7EB]">
                      <h2 className="text-[18px] font-[500] text-[#070F1A]">Детали задачи</h2>
                      <button
                        onClick={() => setTaskSidebarOpen(false)}
                        className="w-8 h-8 rounded-[90px] bg-gray-100 flex items-center justify-center hover:bg-gray-200 transition-colors"
                      >
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ color: '#8E8E93' }}>
                          <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                      </button>
                    </div>
                    
                    {/* Контент панели */}
                    <div className="flex-1 overflow-y-auto p-6 space-y-6">
                      {/* Основная информация */}
                      <div>
                        <h3 className="text-[16px] font-[500] text-[#070F1A] mb-3">{selectedTask.title}</h3>
                        <div className="space-y-2">
                          <div className="flex justify-between">
                            <span className="text-[14px] text-[#8E8E93]">Статус:</span>
                            <span className={`px-3 py-1 text-[12px] font-[500] rounded-[6px] ${
                              selectedTask.status === 'completed' ? 'bg-green-100 text-green-600' :
                              selectedTask.status === 'in_progress' ? 'bg-blue-100 text-blue-600' :
                              'bg-yellow-100 text-yellow-600'
                            }`}>
                              {selectedTask.status === 'completed' ? 'Выполнено' :
                               selectedTask.status === 'in_progress' ? 'В работе' : 'К выполнению'}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-[14px] text-[#8E8E93]">Приоритет:</span>
                            <span className={`px-3 py-1 text-[12px] font-[500] rounded-[6px] ${
                              selectedTask.priority === 'high' ? 'bg-red-100 text-red-600' :
                              selectedTask.priority === 'medium' ? 'bg-orange-100 text-orange-600' :
                              'bg-green-100 text-green-600'
                            }`}>
                              {selectedTask.priority === 'high' ? 'Высокий' :
                               selectedTask.priority === 'medium' ? 'Средний' : 'Низкий'}
                            </span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-[14px] text-[#8E8E93]">Исполнитель:</span>
                            <div className="flex items-center gap-2">
                              <div className="relative executor-dropdown">
                                <button
                                  onClick={() => selectedTask.assignee !== 'ai' && toggleExecutorDropdown('task')}
                                  className={`text-[12px] text-[#070F1A] flex items-center gap-2 ${selectedTask.assignee === 'ai' ? 'cursor-default' : 'hover:opacity-80 transition-opacity'}`}
                                >
                                  {selectedTask.assignee === 'ai' ? (
                                    <img src="/Frame 205.svg" alt="ИИ" className="w-[12px] h-[12px] align-middle" />
                                  ) : (
                                    <img src="/headphone.svg" alt="Оператор" className="w-[12px] h-[12px] align-middle" style={{ filter: 'brightness(0) saturate(100%) invert(66%) sepia(21%) saturate(828%) hue-rotate(230deg) brightness(95%) contrast(101%)' }} />
                                  )}
                                  {selectedTask.assigneeName}
                                  {selectedTask.assignee !== 'ai' && (
                                    <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                                    </svg>
                                  )}
                                </button>
                                {executorDropdowns.task && (
                                  <div className="absolute top-full right-0 mt-1 bg-white border border-[#E5E7EB] rounded-[10px] shadow-lg z-50 min-w-[160px]">
                                    <div className="p-2 space-y-1">
                                      <div 
                                        className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                                        onClick={() => {
                                          setTasks(prev => prev.map(task => 
                                            task.id === selectedTask.id 
                                              ? { ...task, assignee: 'ai', assigneeName: 'ИИ-агент' }
                                              : task
                                          ));
                                          setSelectedTask(prev => ({ ...prev, assignee: 'ai', assigneeName: 'ИИ-агент' }));
                                          setExecutorDropdowns(prev => ({...prev, task: false}));
                                        }}
                                      >
                                        <img src="/Frame 205.svg" alt="ИИ" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(100%) invert(66%) sepia(21%) saturate(828%) hue-rotate(230deg) brightness(95%) contrast(101%)' }} />
                                        <span className="text-[13px] text-[#070F1A]">ИИ-агент</span>
                                      </div>
                                      <div 
                                        className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                                        onClick={() => {
                                          setTasks(prev => prev.map(task => 
                                            task.id === selectedTask.id 
                                              ? { ...task, assignee: 'operator-1', assigneeName: 'Анна Петрова' }
                                              : task
                                          ));
                                          setSelectedTask(prev => ({ ...prev, assignee: 'operator-1', assigneeName: 'Анна Петрова' }));
                                          setExecutorDropdowns(prev => ({...prev, task: false}));
                                        }}
                                      >
                                        <img src="/headphone.svg" alt="Оператор" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(100%) invert(66%) sepia(21%) saturate(828%) hue-rotate(230deg) brightness(95%) contrast(101%)' }} />
                                        <span className="text-[13px] text-[#070F1A]">Анна Петрова</span>
                                      </div>
                                      <div 
                                        className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                                        onClick={() => {
                                          setTasks(prev => prev.map(task => 
                                            task.id === selectedTask.id 
                                              ? { ...task, assignee: 'operator-2', assigneeName: 'Михаил Сидоров' }
                                              : task
                                          ));
                                          setSelectedTask(prev => ({ ...prev, assignee: 'operator-2', assigneeName: 'Михаил Сидоров' }));
                                          setExecutorDropdowns(prev => ({...prev, task: false}));
                                        }}
                                      >
                                        <img src="/headphone.svg" alt="Оператор" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(100%) invert(66%) sepia(21%) saturate(828%) hue-rotate(230deg) brightness(95%) contrast(101%)' }} />
                                        <span className="text-[13px] text-[#070F1A]">Михаил Сидоров</span>
                                      </div>
                                    </div>
                                  </div>
                                )}
                              </div>
                            </div>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-[14px] text-[#8E8E93]">Дедлайн:</span>
                            <div className="flex items-center gap-2">
                              {!editingTaskDeadline ? (
                                <>
                                  <span className="text-[13px] text-[#070F1A]">
                                    {selectedTask.dueDate ? new Date(selectedTask.dueDate).toLocaleDateString() : 'Не установлен'}
                                  </span>
                                  <button
                                    onClick={startEditingTaskDeadline}
                                    className="text-[12px] text-[#0084FF] hover:text-[#0066CC] transition-colors"
                                  >
                                    Изменить
                                  </button>
                                </>
                              ) : (
                                <div className="flex items-center gap-2">
                                  <input
                                    type="date"
                                    value={editedTaskDeadline}
                                    onChange={(e) => setEditedTaskDeadline(e.target.value)}
                                    className="text-[12px] border border-[#E5E7EB] rounded-[6px] px-2 py-1 focus:outline-none focus:border-[#0084FF]"
                                  />
                                  <button
                                    onClick={saveTaskDeadline}
                                    className="text-[12px] text-[#0084FF] hover:text-[#0066CC] transition-colors"
                                  >
                                    ✓
                                  </button>
                                  <button
                                    onClick={cancelEditingTaskDeadline}
                                    className="text-[12px] text-[#8E8E93] hover:text-[#070F1A] transition-colors"
                                  >
                                    ✕
                                  </button>
                                </div>
                              )}
                            </div>
                          </div>
                          <div className="flex justify-between">
                            <span className="text-[14px] text-[#8E8E93]">Создана:</span>
                            <span className="text-[13px] text-[#070F1A]">
                              {new Date(selectedTask.createdDate).toLocaleDateString()}
                            </span>
                          </div>
                        </div>
                      </div>
                      
                      {/* Описание */}
                      <div>
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="text-[16px] font-[500] text-[#070F1A]">Описание</h4>
                          {!editingTaskDescription && (
                            <button
                              onClick={startEditingTaskDescription}
                              className="text-[12px] text-[#0084FF] hover:text-[#0066CC] transition-colors"
                            >
                              Редактировать
                            </button>
                          )}
                        </div>
                        
                        {editingTaskDescription ? (
                          <div>
                            <textarea
                              value={editedTaskDescription}
                              onChange={(e) => setEditedTaskDescription(e.target.value)}
                              className="w-full h-24 p-3 border border-[#E5E7EB] rounded-[10px] text-[12px] resize-none focus:outline-none focus:border-[#0084FF]"
                              placeholder="Добавьте описание задачи..."
                            />
                            <div className="flex gap-2 mt-2">
                              <button
                                onClick={saveTaskDescription}
                                className="px-3 py-1 bg-[#0084FF] text-white text-[12px] rounded-[90px] hover:bg-[#0073E6] transition-colors h-[34px]"
                              >
                                Сохранить
                              </button>
                              <button
                                onClick={cancelEditingTaskDescription}
                                className="px-3 py-1 bg-gray-200 text-gray-700 text-[12px] rounded-[90px] hover:bg-gray-300 transition-colors h-[34px]"
                              >
                                Отмена
                              </button>
                            </div>
                          </div>
                        ) : (
                          <div className="bg-[#F8F9FA] rounded-[15px] p-4">
                            <p className="text-[12px] text-[#070F1A] leading-relaxed">
                              {selectedTask.description || 'Описание не добавлено'}
                            </p>
                          </div>
                        )}
                      </div>
                      
                      {/* Заметки */}
                      <div>
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="text-[16px] font-[500] text-[#070F1A]">Заметки</h4>
                          {!editingTaskNotes && (
                            <button
                              onClick={startEditingTaskNotes}
                              className="text-[12px] text-[#0084FF] hover:text-[#0066CC] transition-colors"
                            >
                              Редактировать
                            </button>
                          )}
                        </div>
                        
                        {editingTaskNotes ? (
                          <div>
                            <textarea
                              value={editedTaskNotes}
                              onChange={(e) => setEditedTaskNotes(e.target.value)}
                              className="w-full h-24 p-3 border border-[#E5E7EB] rounded-[10px] text-[12px] resize-none focus:outline-none focus:border-[#0084FF]"
                              placeholder="Добавьте заметки к задаче..."
                            />
                            <div className="flex gap-2 mt-2">
                              <button
                                onClick={saveTaskNotes}
                                className="px-3 py-1 bg-[#0084FF] text-white text-[12px] rounded-[90px] hover:bg-[#0073E6] transition-colors h-[34px]"
                              >
                                Сохранить
                              </button>
                              <button
                                onClick={cancelEditingTaskNotes}
                                className="px-3 py-1 bg-gray-200 text-gray-700 text-[12px] rounded-[90px] hover:bg-gray-300 transition-colors h-[34px]"
                              >
                                Отмена
                              </button>
                            </div>
                          </div>
                        ) : (
                          <div className="bg-[#F8F9FA] rounded-[15px] p-4">
                            <p className="text-[12px] text-[#070F1A] leading-relaxed">
                              {selectedTask.notes || 'Заметки не добавлены'}
                            </p>
                          </div>
                        )}
                      </div>
                      
                      {/* Действия */}
                      <div>
                        <h4 className="text-[16px] font-[500] text-[#070F1A] mb-3">Действия</h4>
                        <div className="space-y-2">
                          <button 
                            onClick={() => {
                              updateTask(selectedTask.id, { status: selectedTask.status === 'completed' ? 'pending' : 'completed' });
                              setSelectedTask({...selectedTask, status: selectedTask.status === 'completed' ? 'pending' : 'completed'});
                            }}
                            className={`w-full h-[34px] rounded-[10px] text-[14px] font-[500] transition-colors ${
                              selectedTask.status === 'completed' 
                                ? 'bg-yellow-100 text-yellow-600 hover:bg-yellow-200' 
                                : 'bg-green-100 text-green-600 hover:bg-green-200'
                            }`}
                          >
                            {selectedTask.status === 'completed' ? 'Вернуть в работу' : 'Отметить выполненной'}
                          </button>
                          
                          <button 
                            onClick={() => {
                              if (confirm('Вы уверены, что хотите удалить эту задачу?')) {
                                deleteTask(selectedTask.id);
                              }
                            }}
                            className="w-full h-[34px] bg-red-100 text-red-600 rounded-[10px] text-[14px] font-[500] hover:bg-red-200 transition-colors flex items-center justify-center"
                          >
                            Удалить задачу
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </>
            )}
          </div>
        );

      case 'notifications':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-[20px] font-[500]">Уведомления</h1>
            </div>
            
            {/* Плашка подключения Telegram бота */}
            <div className="border border-[#070F1A]/10 rounded-[16px] p-5">
              <div className="flex items-center gap-2 mb-2">
                <h3 className="text-[18px] font-medium text-[#070F1A]">Уведомления в</h3>
                <div className="flex items-center gap-1">
                  <span className="text-[18px] font-medium text-[#070F1A]">Telegram</span>
                  <img 
                    src="/Vector 712783.svg" 
                    alt="Telegram" 
                    className="w-[15px] h-[13px]"
                  />
                </div>
              </div>
              <p className="text-[14px] text-[#8E8E93] mb-6">
                Получайте информацию о новых сообщениях, уведомлениях о переключения чата на оператора и тд. Это поможет вам быть на связи с клиентами круглосуточно и быть в курсе о перехватах диалогов человеком!
              </p>
              
              <div className="mt-[30px]">
                <p className="text-[14px] font-[500] text-[#070F1A] mb-4">
                  Перейдите в <a href="https://t.me/Adapto_notifications_bot" target="_blank" rel="noopener noreferrer" className="text-[#0084FF] hover:underline">наш Telegram-бот</a> и отправьте команду <span className="text-[#0084FF]">/start</span>.
                  <br />
                  После чего бот вышлет API ключ, который необходимо вставить в поле ниже
                </p>
                
                <div className="flex gap-[10px]">
                  <input
                    type="text"
                    placeholder="Введите API ключ из Telegram бота"
                    value={telegramApiKey}
                    onChange={(e) => setTelegramApiKey(e.target.value)}
                    className="flex-1 h-10 px-4 border border-[#E5E7EB] rounded-[10px] text-[13px] font-[400] focus:outline-none focus:border-[#0084FF]"
                    style={INPUT_STYLES.inputField}
                  />
                  <button 
                    onClick={handleConnectTelegram}
                    disabled={isConnectingTelegram}
                    className="h-10 px-6 bg-[#0084FF] text-white rounded-[10px] text-[13px] font-[500] hover:bg-[#0073E6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    style={BUTTON_STYLES.blueButton}
                  >
                    {isConnectingTelegram ? 'Подключение...' : 'Подключить'}
                  </button>
                </div>
              </div>
            </div>

            {/* Настройки типов уведомлений */}
            <div className="border border-[#070F1A]/10 rounded-[16px] p-5">
              <h3 className="text-[18px] font-medium text-[#070F1A] mb-4">Типы уведомлений</h3>

              <div className="space-y-4">
                <div className="flex items-center justify-between p-3 bg-gray-50 rounded-[12px]">
                  <div>
                    <p className="text-[14px] font-[500] text-[#070F1A]">Новые сообщения в чатах</p>
                    <p className="text-[12px] text-[#8E8E93]">Уведомления о входящих сообщениях от клиентов</p>
                  </div>
                  <img 
                    src={telegramSettings?.notification_types?.includes('new_messages') ? "/iOS/Switch.svg" : "/iOS/Switch-1.svg"} 
                    alt="Включить" 
                    className="w-[34px] h-[34px] cursor-pointer hover:opacity-80 transition-opacity" 
                    onClick={() => toggleNotificationType('new_messages')}
                  />
                </div>
                
                <div className="flex items-center justify-between p-3 bg-gray-50 rounded-[12px]">
                  <div>
                    <p className="text-[14px] font-[500] text-[#070F1A]">Перехваты оператором</p>
                    <p className="text-[12px] text-[#8E8E93]">Уведомления когда диалог перехватывает человек</p>
                  </div>
                  <img 
                    src={telegramSettings?.notification_types?.includes('operator_takeover') ? "/iOS/Switch.svg" : "/iOS/Switch-1.svg"} 
                    alt="Включить" 
                    className="w-[34px] h-[34px] cursor-pointer hover:opacity-80 transition-opacity" 
                    onClick={() => toggleNotificationType('operator_takeover')}
                  />
                </div>
                
                <div className="flex items-center justify-between p-3 bg-gray-50 rounded-[12px]">
                  <div>
                    <p className="text-[14px] font-[500] text-[#070F1A]">Критические уведомления</p>
                    <p className="text-[12px] text-[#8E8E93]">Система недоступна, превышены лимиты токенов</p>
                  </div>
                  <img 
                    src={telegramSettings?.notification_types?.includes('system_alerts') ? "/iOS/Switch.svg" : "/iOS/Switch-1.svg"} 
                    alt="Включить" 
                    className="w-[34px] h-[34px] cursor-pointer hover:opacity-80 transition-opacity" 
                    onClick={() => toggleNotificationType('system_alerts')}
                  />
                </div>

                <div className="flex items-center justify-between p-3 bg-gray-50 rounded-[12px]">
                  <div className="flex-1">
                    <p className="text-[14px] font-[500] text-[#070F1A]">Ежедневные отчеты</p>
                    <p className="text-[12px] text-[#8E8E93]">Ежедневная статистика и аналитика</p>
                    <button
                      onClick={sendDailyReport}
                      className="mt-2 px-3 py-1 text-[12px] font-[500] text-white rounded-[6px] transition-colors"
                      style={{ backgroundColor: '#0084FF' }}
                    >
                      Отправить отчет
                    </button>
                  </div>
                  <img 
                    src={telegramSettings?.notification_types?.includes('daily_reports') ? "/iOS/Switch.svg" : "/iOS/Switch-1.svg"} 
                    alt="Включить" 
                    className="w-[34px] h-[34px] cursor-pointer hover:opacity-80 transition-opacity" 
                    onClick={() => toggleNotificationType('daily_reports')}
                  />
                </div>
              </div>
            </div>
          </div>
        );

      case 'stories-management':
        return (
          <div className="p-0">
            <div className="text-left mb-[16px]">
              <h1 className="text-[20px] font-[500] text-[#070F1A]">Управление сторис</h1>
            </div>
            
            <div className="h-px bg-[#E5E7EB] mb-[30px]" style={{ marginLeft: '-32px', marginRight: '-32px' }}></div>

            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-[16px] font-[500] text-[#070F1A]">Текущие сторис</h2>
                <button
                  onClick={() => setShowStoriesModal(true)}
                  className="bg-[#0084FF] text-white px-4 py-2 rounded-[10px] text-[14px] font-[500] hover:bg-[#0070E6] transition-colors"
                >
                  Добавить сторис
                </button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {stories.map((story) => (
                  <div key={story.id} className="bg-white border border-[#E5E7EB] rounded-[12px] p-4">
                    <div className="flex items-center gap-3 mb-3">
                      <div className="w-[50px] h-[50px] border border-[#0084FF] rounded-[50px] flex items-center justify-center">
                        <div className="w-[46px] h-[46px] bg-white rounded-[50px] relative overflow-hidden">
                          <img 
                            src={story.image_url} 
                            alt={story.title} 
                            className="w-full h-full object-cover" 
                          />
                        </div>
                      </div>
                      <div className="flex-1">
                        <h3 className="text-[14px] font-[500] text-[#070F1A]">{story.title}</h3>
                        <p className="text-[12px] text-[#8E8E93]">Порядок: {story.order_index}</p>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <button
                        onClick={() => setEditingStory(story)}
                        className="flex-1 bg-[#F3F4F6] text-[#070F1A] px-3 py-2 rounded-[8px] text-[12px] font-[500] hover:bg-[#E5E7EB] transition-colors"
                      >
                        Редактировать
                      </button>
                      <button
                        onClick={() => handleDeleteStory(story.id)}
                        className="flex-1 bg-[#FEF2F2] text-[#DC2626] px-3 py-2 rounded-[8px] text-[12px] font-[500] hover:bg-[#FEE2E2] transition-colors"
                      >
                        Удалить
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );

      default:
        return <div className="text-center py-8 text-gray-500">Раздел в разработке</div>;
    }
  };

  // Проверка доступа пользователя (временно отключено)
  if (false && isLoggedIn && !userAccess.hasAccess) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="max-w-4xl w-full mx-4">
          <div className="bg-white rounded-2xl shadow-lg p-8">
            {/* Заголовок */}
            <div className="text-center mb-8">
              <img src="/Логотип-блэк.svg" alt="Adapto" className="h-12 mx-auto mb-4" />
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                {userAccess.reason === 'trial_expired' ? 'Пробный период завершен' : 
                 userAccess.reason === 'days_expired' ? 'Время истекло' :
                 userAccess.reason === 'tokens_expired' ? 'Лимит токенов исчерпан' :
                 'Доступ ограничен'}
              </h1>
              <p className="text-gray-600">
                {userAccess.reason === 'trial_expired' ? 'Ваш 7-дневный пробный период завершен. Выберите подходящий тариф для продолжения работы.' :
                 userAccess.reason === 'days_expired' ? 'Время вашего пробного периода истекло. Выберите тариф для продолжения.' :
                 userAccess.reason === 'tokens_expired' ? 'Вы исчерпали лимит токенов. Выберите тариф для получения большего количества токенов.' :
                 'Для продолжения работы выберите подходящий тариф.'}
              </p>
            </div>

            {/* Тарифы */}
            <div className="grid md:grid-cols-3 gap-6 mb-8">
              {/* Free тариф */}
              <div className="border-2 border-gray-200 rounded-xl p-6 relative">
                <div className="text-center">
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">Free</h3>
                  <div className="text-3xl font-bold text-gray-900 mb-4">0₽</div>
                  <p className="text-gray-600 mb-6">Пробный период завершен</p>
                  <ul className="text-sm text-gray-600 space-y-2 mb-6">
                    <li>❌ Доступ ограничен</li>
                    <li>❌ Нет токенов</li>
                    <li>❌ Ограниченный функционал</li>
                  </ul>
                  <button 
                    disabled
                    className="w-full py-3 px-4 border border-gray-300 rounded-lg text-gray-400 cursor-not-allowed"
                  >
                    Недоступно
                  </button>
                </div>
              </div>

              {/* Pro тариф */}
              <div className="border-2 border-blue-500 rounded-xl p-6 relative bg-blue-50">
                <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                  <span className="bg-blue-500 text-white px-4 py-1 rounded-[90px] text-sm font-medium">Рекомендуется</span>
                </div>
                <div className="text-center">
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">Pro</h3>
                  <div className="text-3xl font-bold text-gray-900 mb-4">2,990₽<span className="text-lg text-gray-600">/мес</span></div>
                  <p className="text-gray-600 mb-6">Для малого бизнеса</p>
                  <ul className="text-sm text-gray-600 space-y-2 mb-6">
                    <li>✅ 10,000 токенов в месяц</li>
                    <li>✅ Полный доступ к платформе</li>
                    <li>✅ Поддержка 24/7</li>
                    <li>✅ Аналитика и отчеты</li>
                  </ul>
                  <button className="w-full py-3 px-4 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
                    Выбрать Pro
                  </button>
                </div>
              </div>

              {/* Enterprise тариф */}
              <div className="border-2 border-gray-200 rounded-xl p-6 relative">
                <div className="text-center">
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">Enterprise</h3>
                  <div className="text-3xl font-bold text-gray-900 mb-4">9,990₽<span className="text-lg text-gray-600">/мес</span></div>
                  <p className="text-gray-600 mb-6">Для крупного бизнеса</p>
                  <ul className="text-sm text-gray-600 space-y-2 mb-6">
                    <li>✅ 50,000 токенов в месяц</li>
                    <li>✅ Приоритетная поддержка</li>
                    <li>✅ Кастомные интеграции</li>
                    <li>✅ Персональный менеджер</li>
                  </ul>
                  <button className="w-full py-3 px-4 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
                    Выбрать Enterprise
                  </button>
                </div>
              </div>
            </div>

            {/* Дополнительная информация */}
            <div className="text-center text-sm text-gray-500">
              <p>Нужна помощь с выбором тарифа? <a href="#" className="text-blue-500 hover:underline">Свяжитесь с нами</a></p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Auth screen
  if (!isLoggedIn) {
    // Для страницы входа используем новый дизайн
    if (currentStep === 'login') {
        return (
        <div className="h-screen flex bg-white">
          {/* Левая часть - форма входа */}
          <div className="w-1/2 bg-white flex flex-col">
            {/* Логотип сверху */}
            <div className="pt-10 flex justify-center">
              <img src="/Логотип-блэк.svg" alt="Adapto" className="h-8" />
            </div>
            
            {/* Форма входа */}
            <div className="flex-1 flex items-center justify-center p-8">
              <div className="w-full max-w-md space-y-8">
                <div className="text-center">
                  <h2 className="text-[24px] font-[500] text-[#070F1A]">Вход в Adapto</h2>
                </div>
                
          <div className="space-y-[15px]">
                  <form onSubmit={handleLoginSubmit} className="space-y-[15px]">
                    <div>
                      <label className="block text-[13px] font-medium mb-2 text-[#070F1A]">Email</label>
                      <Input
                        type="email"
                        value={formData.email}
                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                        placeholder="your@email.com"
                        required
                        className="h-[34px] rounded-[10px] bg-white text-[#070F1A] placeholder-[#8E8E93] focus:outline-none"
                        style={INPUT_STYLES.inputField}
                      />
                    </div>
                    
                    <div>
                      <label className="block text-[13px] font-medium mb-2 text-[#070F1A]">Пароль</label>
                      <Input
                        type="password"
                        value={formData.password}
                        onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                        placeholder="Введите пароль"
                        required
                        className="h-[34px] rounded-[10px] bg-white text-[#070F1A] placeholder-[#8E8E93] focus:outline-none"
                        style={INPUT_STYLES.inputField}
                      />
                    </div>
                    
                    {formErrors.general && (
                      <div className="text-red-400 text-sm">{formErrors.general}</div>
                    )}
                    
                    <Button 
                      type="submit" 
                      className="w-full h-[34px] rounded-[10px] text-white bg-[#0084FF] hover:bg-[#0073E6] transition-colors"
                      style={BUTTON_STYLES.blueButton}
                    >
                      Войти в аккаунт
                    </Button>
                    
                    <div className="text-center">
                      <button
                        type="button"
                        className="text-[#8E8E93] hover:text-[#070F1A] text-sm"
                      >
                        Забыл пароль?
                      </button>
            </div>

                    <div className="text-center">
                      <span className="text-[#8E8E93] text-sm">Нет аккаунта? </span>
                      <button
                        type="button"
                        onClick={() => setCurrentStep('register')}
                        className="text-[#0084FF] hover:text-[#0073E6] text-sm font-[500]"
                      >
                        Зарегистрироваться
                      </button>
                  </div>
                  </form>
                    </div>
                    </div>
                    </div>
                    </div>
          
          {/* Правая часть - слайдер */}
          <div className="w-1/2 relative p-[15px]">
            <div className="w-full h-[calc(100vh-30px)] rounded-[20px] overflow-hidden transition-all duration-1000">
              <img 
                src={slideImages[currentSlide]}
                alt={`Slide ${currentSlide + 1}`}
                className={`w-full h-full object-cover object-center transition-all duration-1000 ease-in-out ${
                  isTransitioning ? 'opacity-50' : 'opacity-100'
                }`}
                onError={(e) => {
                  console.log('Ошибка загрузки изображения:', slideImages[currentSlide]);
                  e.target.style.display = 'none';
                }}
              />
              {/* Индикаторы слайдера внизу */}
              <div className="absolute bottom-[35px] left-1/2 transform -translate-x-1/2">
                <div className="bg-white bg-opacity-20 w-[96px] h-[24px] rounded-[90px] flex items-center justify-center gap-2 px-2">
                  {[0, 1, 2, 3, 4].map((index) => (
                    <div
                      key={index}
                      className={`w-2 h-2 rounded-[90px] transition-all duration-300 ${
                        index === currentSlide 
                          ? 'bg-white bg-opacity-100' 
                          : 'bg-white bg-opacity-30'
                      }`}
                    />
                  ))}
                </div>
          </div>
            </div>
          </div>
        </div>
      );
    }
    
        // Для страницы регистрации используем новый дизайн
        return (
      <div className="h-screen flex bg-white">
        {/* Левая часть - форма регистрации */}
        <div className="w-1/2 bg-white flex flex-col">
          {/* Логотип сверху */}
          <div className="pt-10 flex justify-center">
            <img src="/Логотип-блэк.svg" alt="Adapto" className="h-8" />
          </div>
          
          {/* Форма регистрации */}
          <div className="flex-1 flex items-center justify-center p-8">
            <div className="w-full max-w-md space-y-8">
              <div className="text-center">
                <h2 className="text-[24px] font-[500] text-[#070F1A]">
                  {inviteToken ? 'Регистрация оператора' : 'Регистрация'}
                </h2>
                {inviteToken && (
                  <p className="text-[14px] text-[#8E8E93] mt-2">
                    Вас пригласили в команду как оператора
                  </p>
                )}
              </div>
              
          <div className="space-y-[15px]">
                <form onSubmit={inviteToken ? handleOperatorRegisterSubmit : handleRegisterSubmit} className="space-y-[15px]">
                  {/* Имя и Компания на одной линии */}
                  <div className={inviteToken ? "grid grid-cols-1 gap-5" : "grid grid-cols-2 gap-5"}>
                    <div>
                      <label className="block text-[13px] font-medium mb-2 text-[#070F1A]">Имя</label>
                      <Input
                        type="text"
                        value={formData.name}
                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                        placeholder="Ваше имя"
                        required
                        className="h-[34px] rounded-[10px] border border-[#070F1A] border-opacity-10 bg-white text-[#070F1A] placeholder-[#8E8E93] focus:border-[#070F1A] focus:border-opacity-20 font-[400]"
                      />
                    </div>
                    
                    {!inviteToken && (
                      <div>
                        <label className="block text-[13px] font-medium mb-2 text-[#070F1A]">Компания</label>
                        <Input
                          type="text"
                          value={formData.company}
                          onChange={(e) => setFormData({ ...formData, company: e.target.value })}
                          placeholder="Название компании"
                          required
                          className="h-[34px] rounded-[10px] border border-[#070F1A] border-opacity-10 bg-white text-[#070F1A] placeholder-[#8E8E93] focus:border-[#070F1A] focus:border-opacity-20 font-[400]"
                        />
                      </div>
                    )}
                </div>
                
                  {/* Email и Телефон на одной линии */}
                  <div className={inviteToken ? "grid grid-cols-1 gap-5" : "grid grid-cols-2 gap-5"}>
                <div>
                      <label className="block text-[13px] font-medium mb-2 text-[#070F1A]">Email</label>
                      <Input
                        type="email"
                        value={formData.email}
                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                        placeholder="your@email.com"
                        required
                        className="h-[34px] rounded-[10px] bg-white text-[#070F1A] placeholder-[#8E8E93] focus:outline-none"
                        style={INPUT_STYLES.inputField}
                  />
                </div>

                {!inviteToken && (
                  <div>
                    <label className="block text-[13px] font-medium mb-2 text-[#070F1A]">Номер телефона</label>
                    <Input
                      type="tel"
                      value={formData.phone}
                      onChange={(e) => {
                        const formatted = formatPhoneNumber(e.target.value);
                        setFormData({ ...formData, phone: formatted });
                        const error = validatePhone(formatted);
                        setValidationErrors({ ...validationErrors, phone: error });
                      }}
                      placeholder="+7 (999) 123-45-67"
                      required
                      className="h-[34px] rounded-[10px] bg-white text-[#070F1A] placeholder-[#8E8E93] focus:outline-none"
                      style={INPUT_STYLES.inputField}
                    />
                  </div>
                )}
                </div>

                  {/* Ошибка валидации телефона */}
                  {validationErrors.phone && (
                    <div className="text-red-400 text-sm mt-1">{validationErrors.phone}</div>
                  )}
                  
                  <div>
                    <label className="block text-[13px] font-medium mb-2 text-[#070F1A]">Пароль</label>
                    <Input
                      type="password"
                      value={formData.password}
                      onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                      placeholder="Создайте пароль"
                      required
                      className="h-[34px] rounded-[10px] bg-white text-[#070F1A] placeholder-[#8E8E93] focus:outline-none"
                      style={INPUT_STYLES.inputField}
                    />
                  </div>
                  
                  <Button 
                    type="submit" 
                    className="w-full h-[34px] rounded-[10px] text-white bg-[#0084FF] hover:bg-[#0073E6] transition-colors"
                    style={BUTTON_STYLES.blueButton}
                  >
                    {inviteToken ? 'Зарегистрироваться как оператор' : 'Создать аккаунт'}
                </Button>
                  
                  <div className="text-center space-y-4">
                    <p className="text-xs text-[#8E8E93] leading-relaxed">
                      Нажимая "Создать аккаунт", вы соглашаетесь с условиями Оферты и даете согласие на обработку персональных данных в соответствии с Политикой Конфиденциальности
                    </p>
                    <span className="text-[#8E8E93] text-sm">Уже есть аккаунт? </span>
                    <button
                      type="button"
                      onClick={() => setCurrentStep('login')}
                      className="text-[#0084FF] hover:text-[#0073E6] text-sm font-[500]"
                    >
                      Войти
                    </button>
          </div>
                </form>
              </div>
            </div>
          </div>
        </div>
        
        {/* Правая часть - слайдер */}
        <div className="w-1/2 relative p-[15px]">
          <div className="w-full h-[calc(100vh-30px)] rounded-[20px] overflow-hidden transition-all duration-1000">
            <img 
              src={slideImages[currentSlide]}
              alt={`Slide ${currentSlide + 1}`}
              className={`w-full h-full object-cover object-center transition-all duration-1000 ease-in-out ${
                isTransitioning ? 'opacity-50' : 'opacity-100'
              }`}
              onError={(e) => {
                console.log('Ошибка загрузки изображения:', slideImages[currentSlide]);
                e.target.style.display = 'none';
              }}
            />
            {/* Индикаторы слайдера внизу */}
            <div className="absolute bottom-[35px] left-1/2 transform -translate-x-1/2">
              <div className="bg-white bg-opacity-20 w-[96px] h-[24px] rounded-[90px] flex items-center justify-center gap-2 px-2">
                {[0, 1, 2, 3, 4].map((index) => (
                  <div
                    key={index}
                    className={`w-2 h-2 rounded-[90px] transition-all duration-300 ${
                      index === currentSlide 
                        ? 'bg-white bg-opacity-100' 
                        : 'bg-white bg-opacity-30'
                    }`}
                  />
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // 🔄 Показываем loading пока проверяем сессию (убирает мерцание)
  if (isLoadingAuth) {
    return (
      <div className="h-screen flex items-center justify-center bg-[#F2F3F4]">
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-[#0084FF]"></div>
          <p className="mt-4 text-[#8E8E93]">Загрузка...</p>
        </div>
      </div>
    );
  }

  // Main dashboard
  return (
    <div className={`h-screen flex ${theme === 'light' ? 'bg-[#F2F3F4]' : 'bg-[#070F1A]'}`}>
      {/* Переключатель ролей только для супер-админов */}
      {currentUser?.role === 'super_admin' && (
        <div className="fixed top-4 right-4 z-50 bg-gray-800 text-white p-3 rounded-lg shadow-lg">
          <div className="text-sm mb-2">Режим тестирования (только для супер-админа):</div>
          <div className="flex gap-2">
            <button 
              onClick={() => handleSwitchRole('admin')}
              className={`px-3 py-1 rounded text-xs transition-colors ${
                currentUser?.role === 'admin' ? 'bg-green-500' : 'bg-gray-600 hover:bg-gray-500'
              }`}
            >
              Админ
            </button>
            <button 
              onClick={() => handleSwitchRole('operator')}
              className={`px-3 py-1 rounded text-xs transition-colors ${
                currentUser?.role === 'operator' ? 'bg-green-500' : 'bg-gray-600 hover:bg-gray-500'
              }`}
            >
              Оператор
            </button>
            <button 
              onClick={() => handleSwitchRole('user')}
              className={`px-3 py-1 rounded text-xs transition-colors ${
                currentUser?.role === 'user' ? 'bg-green-500' : 'bg-gray-600 hover:bg-gray-500'
              }`}
            >
              Пользователь
            </button>
            <button 
              onClick={clearUserData}
              className="px-3 py-1 rounded text-xs bg-red-600 hover:bg-red-700 text-white transition-colors"
            >
              Очистить данные
            </button>
          </div>
        </div>
      )}

      {/* Notification */}
      {showNotification && (
        <div className="fixed top-4 right-4 z-50 bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg shadow-lg transform transition-all duration-300">
          <div className="text-sm font-medium mb-[11px]">Уведомление</div>
          <div className="flex items-center justify-between">
            <span className="text-sm">{notificationMessage}</span>
            <button 
              onClick={() => setShowNotification(false)}
              className="ml-4 text-red-600 hover:text-red-800 transition-colors"
            >
              ×
            </button>
          </div>
        </div>
      )}

      {/* System Notification */}
      {showSystemNotification && (
        <div className="fixed top-4 right-4 z-50 bg-green-50 border border-green-200 text-green-600 px-4 py-3 rounded-lg shadow-lg transform transition-all duration-300">
          <div className="text-sm font-medium mb-[11px]">Система</div>
          <div className="flex items-center justify-between">
            <span className="text-sm">{systemNotification}</span>
            <button 
              onClick={() => setShowSystemNotification(false)}
              className="ml-4 text-green-600 hover:text-green-800 transition-colors"
            >
              ×
            </button>
          </div>
        </div>
      )}

      {/* Metric Info Modal */}
      {showMetricInfoModal && currentMetricInfo && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className={`rounded-[20px] p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto ${
            theme === 'dark' ? 'bg-[#070F1A]' : 'bg-white'
          }`}>
            <div className="flex items-center justify-between mb-6">
              <h2 className={`text-[20px] font-[500] ${
                theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
              }`}>{currentMetricInfo.title}</h2>
              <button 
                onClick={() => setShowMetricInfoModal(false)}
                className={`transition-colors ${
                  theme === 'dark' ? 'text-white/70 hover:text-white' : 'text-gray-400 hover:text-gray-600'
                }`}
              >
                <img src="/x-02.svg" alt="Закрыть" className="w-6 h-6" />
              </button>
            </div>
            
            <div className="space-y-6">
              <div>
                <h3 className={`text-[16px] font-[500] mb-2 ${
                  theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                }`}>Описание</h3>
                <p className={`text-[14px] leading-relaxed ${
                  theme === 'dark' ? 'text-white/70' : 'text-[#8E8E93]'
                }`}>{currentMetricInfo.description}</p>
              </div>
              
              <div>
                <h3 className={`text-[16px] font-[500] mb-2 ${
                  theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                }`}>Формула расчета</h3>
                <div className={`rounded-[10px] p-4 ${
                  theme === 'dark' ? 'bg-[#1E2538]' : 'bg-[#F3F5F7]'
                }`}>
                  <p className={`font-mono text-[14px] ${
                    theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                  }`}>{currentMetricInfo.formula}</p>
                </div>
              </div>
              
              <div>
                <h3 className={`text-[16px] font-[500] mb-2 ${
                  theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                }`}>Подробное объяснение</h3>
                <div className="space-y-3">
                  {currentMetricInfo.explanation.split('\n\n').map((paragraph, index) => (
                    <p key={index} className={`text-[14px] leading-relaxed ${
                      theme === 'dark' ? 'text-white/70' : 'text-[#8E8E93]'
                    }`}>{paragraph}</p>
                  ))}
                </div>
              </div>
            </div>
            
            <div className="mt-6 flex justify-end">
              <button 
                onClick={() => setShowMetricInfoModal(false)}
                className="px-6 py-2 bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors text-[14px]"
              >
                Понятно
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Help Modal */}
      {showHelpModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className={`rounded-[20px] p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto ${
            theme === 'dark' ? 'bg-[#070F1A]' : 'bg-white'
          }`}>
            <div className="flex items-center justify-between mb-6">
              <h2 className={`text-[20px] font-[500] ${
                theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
              }`}>Помощь</h2>
              <button 
                onClick={() => setShowHelpModal(false)}
                className={`transition-colors ${
                  theme === 'dark' ? 'text-white/70 hover:text-white' : 'text-gray-400 hover:text-gray-600'
                }`}
              >
                <img src="/x-02.svg" alt="Закрыть" className="w-6 h-6" />
              </button>
            </div>
            
            <div className="space-y-6">
              <div>
                <h3 className={`text-[16px] font-[500] mb-3 ${
                  theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                }`}>Добро пожаловать в Adapto!</h3>
                <p className={`text-[14px] leading-relaxed ${
                  theme === 'dark' ? 'text-white/70' : 'text-[#8E8E93]'
                }`}>
                  Мы поможем вам настроить и использовать платформу для управления ИИ-агентами.
                </p>
              </div>
              
              <div>
                <h3 className={`text-[16px] font-[500] mb-3 ${
                  theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                }`}>Основные разделы</h3>
                <div className="space-y-3">
                  <div className={`rounded-[10px] p-4 ${
                    theme === 'dark' ? 'bg-[#1E2538]' : 'bg-[#F3F5F7]'
                  }`}>
                    <h4 className={`font-[500] mb-2 ${
                      theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                    }`}>Главная</h4>
                    <p className={`text-[14px] ${
                      theme === 'dark' ? 'text-white/70' : 'text-[#8E8E93]'
                    }`}>Обзор статистики и ключевых метрик вашего проекта</p>
                  </div>
                  <div className={`rounded-[10px] p-4 ${
                    theme === 'dark' ? 'bg-[#1E2538]' : 'bg-[#F3F5F7]'
                  }`}>
                    <h4 className={`font-[500] mb-2 ${
                      theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                    }`}>Диалоги</h4>
                    <p className={`text-[14px] ${
                      theme === 'dark' ? 'text-white/70' : 'text-[#8E8E93]'
                    }`}>Управление чат-ботами и настройка диалогов</p>
                  </div>
                  <div className={`rounded-[10px] p-4 ${
                    theme === 'dark' ? 'bg-[#1E2538]' : 'bg-[#F3F5F7]'
                  }`}>
                    <h4 className={`font-[500] mb-2 ${
                      theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                    }`}>Тестирование</h4>
                    <p className={`text-[14px] ${
                      theme === 'dark' ? 'text-white/70' : 'text-[#8E8E93]'
                    }`}>Тестирование и отладка ИИ-агентов</p>
                  </div>
                  <div className={`rounded-[10px] p-4 ${
                    theme === 'dark' ? 'bg-[#1E2538]' : 'bg-[#F3F5F7]'
                  }`}>
                    <h4 className={`font-[500] mb-2 ${
                      theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                    }`}>Интеграции</h4>
                    <p className={`text-[14px] ${
                      theme === 'dark' ? 'text-white/70' : 'text-[#8E8E93]'
                    }`}>Подключение внешних сервисов и API</p>
                  </div>
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-medium text-[#070F1A] mb-3">Нужна дополнительная помощь?</h3>
                <p className="text-[#8E8E93] text-sm leading-relaxed">
                  Обратитесь к нашей команде поддержки или ознакомьтесь с подробной документацией.
                </p>
              </div>
            </div>
            
            <div className="mt-6 flex justify-end">
              <button 
                onClick={() => setShowHelpModal(false)}
                className="px-6 py-2 bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors text-[14px]"
              >
                Понятно
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Unsaved Changes Modal */}
      {showUnsavedChangesModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
          <div className={`rounded-[20px] p-6 max-w-md w-full mx-4 ${
            theme === 'dark' ? 'bg-[#070F1A]' : 'bg-white'
          }`}>
            <h3 className={`text-[18px] font-[500] mb-2 ${
              theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
            }`}>Несохраненные изменения</h3>
            <p className={`text-[14px] mb-6 ${
              theme === 'dark' ? 'text-white/70' : 'text-[#8E8E93]'
            }`}>У вас есть несохраненные изменения. Вы уверены, что хотите покинуть эту страницу? Все несохраненные изменения будут потеряны.</p>
            <div className="flex gap-3 justify-end">
              <button
                onClick={cancelNavigation}
                className={`px-4 py-2 text-[14px] font-[500] transition-colors ${
                  theme === 'dark' 
                    ? 'text-white/70 hover:text-white' 
                    : 'text-[#8E8E93] hover:text-[#070F1A]'
                }`}
              >
                Отмена
              </button>
              <button
                onClick={confirmNavigation}
                className="px-4 py-2 bg-[#FF0D0D] text-white text-[14px] font-[500] rounded-[10px] hover:bg-[#E00D0D] transition-colors"
              >
                Покинуть без сохранения
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Sidebar */}
      <div className={`fixed md:relative z-50 md:z-auto transform transition-transform duration-300 ease-in-out ${
        sidebarOpen ? 'translate-x-0' : '-translate-x-full'
      } md:translate-x-0 ${sidebarCollapsed ? 'w-12' : 'w-56'} h-full ${theme === 'light' ? 'bg-[#F2F3F4]' : 'bg-[#070F1A]'} flex flex-col overflow-hidden`}>
        
        {/* Header with Logo and Language Icon */}
                        <div className="px-[10px] pt-5 pb-0" style={{ width: 'calc(100% + 10px)' }}>
          <div className="flex items-center justify-between">
            <div className="flex items-center pl-[10px]">
              {!sidebarCollapsed && (
                <button
                  onClick={() => {
                    setActiveSection('main');
                    localStorage.setItem('currentSection', 'main');
                    setSidebarOpen(false);
                  }}
                  className="hover:opacity-80 transition-opacity"
                >
                                      <img src={theme === 'light' ? '/Логотип-блэк.svg' : '/logo.svg'} alt="Adapto" className="w-[110px] h-6" />
                </button>
              )}
            </div>
            <div className={`flex items-center ${sidebarCollapsed ? 'justify-center w-full' : 'gap-2'}`}>
              <button 
                onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
                className={`text-gray-400 hover:text-white transition-colors ${sidebarCollapsed ? '-ml-[6px]' : ''}`}
              >
                <img 
                  src={theme === 'light' ? "/светлая тема.svg" : "/темная тема.svg"} 
                  alt="Toggle sidebar" 
                  className="w-4 h-4"
                />
              </button>

            </div>
          </div>
        </div>
        
        {/* Navigation */}
                        <div className="flex-1 px-[10px] pt-5 overflow-y-auto" style={{ width: 'calc(100% + 10px)' }}>
          <nav className="space-y-[5px]">


            {menuItems.map((item) => (
              <div key={item.id}>
              {/* Section headings */}
              {!sidebarCollapsed && item.id === 'statistics' && (
                <div className="text-[10px] text-[#8E8E93] mb-1 ml-[12px]">Основные</div>
              )}
              {!sidebarCollapsed && item.id === 'adapto-ai' && (
                <div className="text-[10px] text-[#8E8E93] mb-1 mt-[18px] ml-[12px]">Управление</div>
              )}
              <button
                onClick={() => {
                    if (item.hasSubmenu) {
                      if (sidebarCollapsed) {
                        // В сокращенном меню - открываем полное меню
                        setSidebarCollapsed(false);
                        setExpandedMenus(prev => 
                          prev.includes(item.id) 
                            ? prev.filter(id => id !== item.id)
                            : [...prev, item.id]
                        );
                      } else {
                        setExpandedMenus(prev => 
                          prev.includes(item.id) 
                            ? prev.filter(id => id !== item.id)
                            : [...prev, item.id]
                        );
                      }
                    } else {
                  setActiveSection(item.id);
                  localStorage.setItem('currentSection', item.id);
                  setSidebarOpen(false);
                  
                  // Прокручиваем к низу при переключении на чат разделы
                  if (item.id === 'my-adapto') {
                    ChatUtils.scrollToBottom(chatHistoryRef, 500);
                  } else if (item.id === 'widget-dev') {
                    ChatUtils.scrollToBottom(widgetChatRef, 500);
                  }
                    }
                }}
                className={`w-full flex items-center ${sidebarCollapsed ? 'justify-center w-[34px] h-[34px]' : 'gap-3'} px-3 h-[34px] rounded-[10px] text-left transition-colors ${
                  (activeSection === item.id || hoveredMenuId === item.id)
                          ? 'bg-[#F8F8FA] text-[#0084FF]'
                          : theme === 'light' ? 'text-[#8E8E93] hover:text-[#0084FF] hover:bg-[#F8F8FA]' : 'text-[#B3B7B9] hover:text-white hover:bg-[#1E2538]'
                }`}
                title={sidebarCollapsed ? item.label : ''}
                onMouseEnter={() => setHoveredMenuId(item.id)}
                onMouseLeave={() => setHoveredMenuId(null)}
              >
                {typeof item.icon === 'function' ? (
                  <div className={`${sidebarCollapsed ? 'w-[18px] h-[18px]' : 'w-4 h-4'}`}>
                    {(() => {
                      const iconElement = item.icon();
                      // Проверяем, является ли иконка img тегом
                      if (iconElement.type === 'img') {
                        return React.cloneElement(iconElement, {
                          className: `${sidebarCollapsed ? 'w-[18px] h-[18px]' : 'w-4 h-4'}`,
                      style: {
                        filter: (activeSection === item.id || hoveredMenuId === item.id)
                              ? theme === 'light' ? 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(199deg) brightness(104%) contrast(101%)' 
                          : 'brightness(0) invert(1)'
                              : theme === 'light' ? 'brightness(0) saturate(100%) invert(60%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.8) contrast(1)' 
                              : 'brightness(0) saturate(100%) invert(70%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.7) contrast(1)',
                            opacity: (activeSection === item.id || hoveredMenuId === item.id) ? 1 : 0.8
                          }
                        });
                      } else {
                        // Для SVG компонентов используем color
                        return React.cloneElement(iconElement, {
                          className: `${sidebarCollapsed ? 'w-[18px] h-[18px]' : 'w-4 h-4'}`,
                          style: {
                            color: (activeSection === item.id || hoveredMenuId === item.id)
                              ? theme === 'light' ? '#0084FF' : '#FFFFFF'
                              : theme === 'light' ? '#8E8E93' : '#B3B7B9',
                            opacity: (activeSection === item.id || hoveredMenuId === item.id) ? 1 : 0.8
                          }
                        });
                      }
                    })()}
                  </div>
                ) : (
                  <img 
                      src={`/${item.id === 'statistics' ? 'dashboard' : 
                         item.id === 'dialogs' ? 'chat' : 
                         item.id === 'knowledge' ? 'knowledge-base' : 
                           item.id === 'integrations' ? 'integration-2' : 
                           'default'}.svg?v=${Date.now()}`} 
                    alt={item.label}
                    className={`${sidebarCollapsed ? 'w-[18px] h-[18px]' : 'w-4 h-4'}`}
                    style={{
                        filter: activeSection === item.id 
                          ? theme === 'light' ? 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(199deg) brightness(104%) contrast(101%)' 
                          : 'brightness(0) invert(1)'
                          : theme === 'light' ? 'brightness(0) saturate(100%) invert(60%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.8) contrast(1)' 
                          : 'brightness(0) saturate(100%) invert(70%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.7) contrast(1)',
                        opacity: activeSection === item.id ? 1 : 0.8
                    }}
                  />
                )}
                  {!sidebarCollapsed && (
                    <div className="flex items-center justify-between flex-1">
                      <span className="text-[13px] font-medium tracking-[0px]">{item.label}</span>
                      {item.hasSubmenu && (
                        <img 
                          src="/chevron-right.svg" 
                          alt="Expand" 
                          className={`w-4 h-4 transition-transform ${
                            expandedMenus.includes(item.id) 
                              ? 'rotate-90' 
                              : ''
                          }`}
                          style={{
                            filter: (activeSection === item.id || hoveredMenuId === item.id)
                              ? theme === 'light' ? 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(199deg) brightness(104%) contrast(101%)'
                              : 'brightness(0) invert(1)'
                              : theme === 'light' ? 'brightness(0) saturate(100%) invert(60%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.8) contrast(1)'
                              : 'brightness(0) saturate(100%) invert(100%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.7) contrast(1)',
                            opacity: (activeSection === item.id || hoveredMenuId === item.id) ? 1 : 0.8
                          }}
                        />
                      )}
                    </div>
                  )}
                </button>

                {/* Submenu */}
                {item.hasSubmenu && expandedMenus.includes(item.id) && !sidebarCollapsed && (
                  <div className="ml-4 mt-1 space-y-1">
                    {item.submenu.map((subItem) => (
                      <button
                        key={subItem.id}
                        onClick={() => {
                          setActiveSection(subItem.id);
                          localStorage.setItem('currentSection', subItem.id);
                          setSidebarOpen(false);
                          
                          // Прокручиваем к низу при переключении на чат разделы
                          if (subItem.id === 'my-adapto') {
                            ChatUtils.scrollToBottom(chatHistoryRef, 500);
                          } else if (subItem.id === 'widget-dev') {
                            ChatUtils.scrollToBottom(widgetChatRef, 500);
                          }
                        }}
                        className={`w-full flex items-center gap-3 pl-[20px] pr-3 h-[34px] rounded-[8px] text-left transition-colors tracking-[0px] ${
                                            activeSection === subItem.id
                    ? 'bg-[#F8F8FA] text-[#0084FF]'
                    : 'text-[#8E8E93] hover:text-[#0084FF] hover:bg-[#F8F8FA]'
                        }`}
                        onMouseEnter={() => setHoveredSubId(subItem.id)}
                        onMouseLeave={() => setHoveredSubId(null)}
                      >
                        {typeof subItem.icon === 'function' ? (
                          <div className={`${sidebarCollapsed ? 'w-[18px] h-[18px]' : 'w-4 h-4'}`}>
                            {(() => {
                              const el = subItem.icon();
                              if (el.type === 'img') {
                                return React.cloneElement(el, {
                                  className: `${sidebarCollapsed ? 'w-[18px] h-[18px]' : 'w-4 h-4'}`,
                                  style: {
                                    filter: (activeSection === subItem.id || hoveredSubId === subItem.id)
                                      ? 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(199deg) brightness(104%) contrast(101%)'
                                      : 'brightness(0) saturate(100%) invert(60%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.8) contrast(1)',
                                    opacity: (activeSection === subItem.id || hoveredSubId === subItem.id) ? 1 : 0.8
                                  }
                                });
                              }
                              return el;
                            })()}
                          </div>
                        ) : (
                          <img 
                            src={`/${subItem.id === 'my-adapto' ? 'mouse-square-menu' : 
                                 subItem.id === 'model-settings' ? 'model-settings' : 
                                 subItem.id === 'model-extensions' ? 'extensions' : 
                                 subItem.id === 'widget-settings' ? 'widget' : 
                                 subItem.id === 'messengers' ? 'chat' : 
                                 subItem.id === 'crm-systems' ? 'crm' : 
                                 subItem.id === 'other-integrations' ? 'other' : 
                                 'default'}.svg?v=${Date.now()}`} 
                            alt={subItem.label}
                            className={`${sidebarCollapsed ? 'w-[18px] h-[18px]' : 'w-4 h-4'}`}
                            style={{
                              filter: (activeSection === subItem.id || hoveredSubId === subItem.id)
                                ? 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(199deg) brightness(104%) contrast(101%)'
                                : 'brightness(0) saturate(100%) invert(60%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.8) contrast(1)',
                              opacity: (activeSection === subItem.id || hoveredSubId === subItem.id) ? 1 : 0.8
                            }}
                          />
                        )}
                        <span className="text-[13px] font-medium tracking-[-0.1px]">{subItem.label}</span>
              </button>
            ))}
                  </div>
                )}
              </div>
            ))}

          </nav>
        </div>

        {/* User Profile */}
                        <div className="px-[10px] pb-[15px]" style={{ width: 'calc(100% + 10px)' }}>
          {!sidebarCollapsed ? (
            <>
              {/* Плашки с тарифами только для админа */}
              {!isOperator && (
                <>
                  {/* Плашка с тарифом Pro */}
                  <div className="w-full h-[60px] rounded-[10px] mb-[10px] relative overflow-hidden">
                    <img src="/Frame 145.png" alt="Pro Background" className="w-full h-full object-cover absolute inset-0" />
                    <div className="p-3 h-full flex flex-col justify-center relative z-10">
                      <div className="flex flex-col items-start">
                        <span className="text-white text-[14px] font-medium">Тариф Pro со скидкой</span>
                        <span className="text-white text-[14px] font-medium">-50% на первый год</span>
              </div>
                    </div>
                  </div>
                  
                  {/* Новый дизайн плашки */}
                  <div className="w-full h-[80px] bg-white rounded-[10px] p-[7px] mb-[10px]">
                    {/* Плашка "Пробная подписка" */}
                    <div className="h-[22px] bg-[#EFFBF3] rounded-[7px] flex items-center justify-center mb-[7px]">
                      <span className="text-[#36C76A] text-[10px] font-medium">Пробная подписка</span>
                    </div>
                
                {/* Две колонки с информацией */}
                <div className="flex justify-between">
                  {/* Левая колонка - Срок */}
                  <div className="flex-1 text-center">
                    <div className="text-[10px] text-[#070F1A] opacity-60 mb-1">Срок:</div>
                    <div className="flex items-center justify-center gap-1">
                      <img src="/clock.svg" alt="Clock" className="w-3 h-3" />
                      <span className="text-[12px] text-[#070F1A] font-medium">
                        {userLimits?.daysRemaining || 0}/7 дней
                      </span>
                    </div>
                  </div>
                  
                  {/* Правая колонка - Токены */}
                  <div className="flex-1 text-center">
                    <div className="text-[10px] text-[#070F1A] opacity-60 mb-1">Токены:</div>
                    <div className="flex items-center justify-center gap-1">
                      <img src="/Vector09.svg" alt="Tokens" className="w-3 h-3" />
                      <span className="text-[12px] text-[#070F1A] font-medium">
                        {userLimits?.tokensRemaining || 0}/{userLimits?.totalTokens || 1000}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
                </>
              )}
              
              {/* Статус оператора */}
              {isOperator && (
                <div className="flex items-center justify-between mb-3 px-3 py-2 bg-[#F9FAFB] rounded-[12px] h-[40px] border border-[#E5E7EB]">
                  <span className="text-[12px] text-[#070F1A]">
                    {isOnline ? 'В сети' : 'Не в сети'}
                  </span>
                  <img 
                    src={isOnline ? "/iOS/Switch.svg" : "/iOS/Switch-1.svg"} 
                    alt="Статус" 
                    className="w-[34px] h-[34px] cursor-pointer hover:opacity-80 transition-opacity" 
                    onClick={() => setIsOnline(!isOnline)}
                  />
                </div>
              )}

              {/* Профиль пользователя */}
              <div className="relative user-dropdown">
                <div className={`rounded-[10px] py-3 pr-3 pl-0 mb-[10px] mt-[5px] cursor-pointer transition-colors h-[40px] flex items-center justify-between ${
                theme === 'light' ? 'hover:bg-gray-50' : 'hover:bg-[#1E2538]'
                }`} onClick={() => setShowUserDropdown(!showUserDropdown)}>
                <div className="flex items-center gap-3">
                    <div className="w-[28px] h-[28px] rounded-[7px] flex items-center justify-center" style={{ backgroundColor: generateAvatar(currentUser?.name).color }}>
                    <span className="text-white font-semibold text-xs">{generateAvatar(currentUser?.name).letter}</span>
                    </div>
                    <div className="flex flex-col">
                      <div className={`text-[13px] font-medium ${theme === 'light' ? 'text-[#070F1A]' : 'text-white'}`}>{currentUser?.company_name || 'Компания'}</div>
                      <div className="text-[11px] text-[#8E8E93]">{currentUser?.email || 'email@example.com'}</div>
                </div>
              </div>
                  <div className="flex items-center">
                                      <img 
                    src="/chevron-right.svg" 
                    alt="Expand" 
                    className={`w-4 h-4 transition-transform duration-200 ${showUserDropdown ? 'rotate-90' : '-rotate-90'}`}
                    style={{
                      filter: theme === 'light' 
                        ? 'brightness(0) saturate(100%) invert(60%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.8) contrast(1)'
                        : 'brightness(0) saturate(100%) invert(70%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.7) contrast(1)'
                    }}
                  />
                  </div>
                </div>
                
                {/* Выпадающее меню пользователя */}
                {showUserDropdown && (
                  <div className="user-dropdown absolute bottom-full left-0 right-0 mb-2 bg-white rounded-[15px] shadow-lg border border-gray-200 p-2 z-50">
                    {/* 1. Мой аккаунт */}
                    <button
                      onClick={() => {
                        setActiveSection('profile');
                        setShowUserDropdown(false);
                        setSidebarOpen(false);
                      }}
                      className={`w-full text-left px-3 py-2 text-[13px] rounded-[6px] transition-colors flex items-center gap-3 group tracking-[0px] ${
                        activeSection === 'profile' 
                          ? 'text-[#0084FF] bg-white' 
                          : 'text-[#8E8E93] hover:text-[#0084FF] hover:bg-white'
                      }`}
                    >
                      <img 
                        src="/Icon%20pers.svg" 
                        alt="Мой аккаунт" 
                        className="w-4 h-4 transition-all duration-200" 
                        style={{ 
                          filter: activeSection === 'profile'
                            ? 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(199deg) brightness(104%) contrast(101%)'
                            : 'brightness(0) saturate(100%) invert(60%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.8) contrast(1)'
                        }} 
                      />
                      Мой аккаунт
                    </button>
                    
                    {/* 2. Участники проекта */}
                    <button 
                      onClick={() => {
                        setActiveSection('profile');
                        setProfileTab('notifications');
                        setShowUserDropdown(false);
                        setSidebarOpen(false);
                      }}
                      className={`w-full text-left px-3 py-2 text-[13px] rounded-[6px] transition-colors flex items-center gap-3 group tracking-[0px] ${
                        activeSection === 'profile' && profileTab === 'notifications'
                          ? 'text-[#0084FF] bg-white' 
                          : 'text-[#8E8E93] hover:text-[#0084FF] hover:bg-white'
                      }`}
                    >
                      <img 
                        src="./Icon%20notific.svg" 
                        alt="Уведомления" 
                        className="w-4 h-4 transition-all duration-200" 
                        style={{ 
                          filter: activeSection === 'profile' && profileTab === 'notifications'
                            ? 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(199deg) brightness(104%) contrast(101%)'
                            : 'brightness(0) saturate(100%) invert(60%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.8) contrast(1)'
                        }} 
                      />
                      Уведомления
                    </button>
                    
                    {/* 3. Оплата и тарифы - только для админа */}
                    {!isOperator && (
                      <button 
                        onClick={() => {
                          setActiveSection('profile');
                          setProfileTab('subscription');
                          setShowUserDropdown(false);
                          setSidebarOpen(false);
                        }}
                        className={`w-full text-left px-3 py-2 text-[13px] rounded-[6px] transition-colors flex items-center gap-3 group tracking-[0px] ${
                          activeSection === 'subscription' 
                            ? 'text-[#0084FF] bg-white' 
                            : 'text-[#8E8E93] hover:text-[#0084FF] hover:bg-white'
                        }`}
                      >
                        <img 
                          src="/Icon%20pers-1.svg" 
                          alt="Оплата и тарифы" 
                          className="w-4 h-4 transition-all duration-200" 
                          style={{ 
                            filter: activeSection === 'subscription'
                              ? 'brightness(0) saturate(100%) invert(27%) sepia(51%) saturate(2878%) hue-rotate(199deg) brightness(104%) contrast(101%)'
                              : 'brightness(0) saturate(100%) invert(60%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.8) contrast(1)'
                          }} 
                        />
                        Оплата и тарифы
                      </button>
                    )}
                    
                    {/* 4. Помощь */}
                    <button 
                      onClick={() => {
                        setShowHelpModal(true);
                        setShowUserDropdown(false);
                      }}
                      className="w-full text-left px-3 py-2 text-[13px] rounded-[6px] transition-colors flex items-center gap-3 group tracking-[0px] text-[#8E8E93] hover:text-[#0084FF] hover:bg-white"
                    >
                      <img src="/Icon%20quest.svg" alt="Помощь" className="w-4 h-4 transition-all duration-200" style={{ filter: 'brightness(0) saturate(100%) invert(60%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.8) contrast(1)' }} />
                      Помощь
                    </button>
                    
                    {/* 5. Язык */}
                    <button 
                      onClick={() => {
                        // TODO: Добавить функциональность смены языка
                        setShowUserDropdown(false);
                      }}
                      className="w-full text-left px-3 py-2 text-[13px] rounded-[6px] transition-colors flex items-center gap-3 group tracking-[0px] text-[#8E8E93] hover:text-[#0084FF] hover:bg-white"
                    >
                      <img src="/Icon%20wor.svg" alt="Язык" className="w-4 h-4 transition-all duration-200" style={{ filter: 'brightness(0) saturate(100%) invert(60%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.8) contrast(1)' }} />
                      Язык
                    </button>
                    
                    <div className="border-t border-gray-200 my-2"></div>
                    
                    {/* 6. Выйти */}
                    <button 
                      onClick={() => {
                        handleLogout();
                        setShowUserDropdown(false);
                      }}
                      className="w-full text-left px-3 py-2 text-[13px] rounded-[6px] transition-colors flex items-center gap-3 group tracking-[0px] text-[#8E8E93] hover:text-[#0084FF] hover:bg-white"
                    >
                      <img src="/Icon%20ex.svg" alt="Выйти" className="w-4 h-4 transition-all duration-200" style={{ filter: 'brightness(0) saturate(100%) invert(60%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0.8) contrast(1)' }} />
                      Выйти
                    </button>
                  </div>
                )}
              </div>
            </>
          ) : (
            /* Укороченная версия профиля при скрытом меню */
            <div className="flex flex-col items-center gap-2">
              
              {/* Профиль пользователя */}
              <div className={`cursor-pointer ${theme === 'light' ? 'hover:bg-gray-50 rounded-[10px] p-1' : ''}`} onClick={() => {
                setActiveSection('profile');
                localStorage.setItem('currentSection', 'profile');
                setSidebarOpen(false);
              }}>
                <div className="w-4 h-4 rounded-[90px] flex items-center justify-center" style={{ backgroundColor: generateAvatar(currentUser?.name).color }}>
                  <span className="text-white font-semibold text-[10px]">{generateAvatar(currentUser?.name).letter}</span>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Main content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Mobile header */}
                  <div className={`md:hidden flex items-center gap-4 p-4 border-b ${theme === 'light' ? 'border-gray-200 bg-white' : 'border-gray-700 bg-[#070F1A]'}`}>
          {/* Логотип */}
          <img src="/logo.svg" alt="Adapto" className="w-8 h-8" />
          
          {/* Кнопка раскрытия меню */}
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setSidebarOpen(true)}
            className={`${theme === 'light' ? 'text-[#070F1A]' : 'text-white'} ml-auto`}
          >
            <Menu className="w-3 h-3" />
          </Button>
        </div>

        {/* Content */}
        <main className="flex-1 bg-[#F8F8FA] rounded-[0px] ml-[10px] border-l flex flex-col overflow-hidden" style={{ borderColor: '#E5E6E7', marginTop: 0, marginRight: 0, marginBottom: 0 }}>
           <div className="p-4 flex-1 min-h-0 overflow-y-auto">
          {renderContent()}
          </div>
        </main>
      </div>

      {/* Widget Constructor Modal */}
      {showWidgetConstructor && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div className="absolute inset-0 bg-black/50" onClick={() => setShowWidgetConstructor(false)} />
          <div className={`relative w-full max-w-4xl mx-4 max-h-[90vh] overflow-hidden flex flex-col ${
            theme === 'dark' ? 'bg-[#070F1A] rounded-[20px]' : 'bg-white rounded-[20px]'
          }`}>
            {/* Header */}
            <div className={`flex items-center justify-between p-6 border-b ${
              theme === 'dark' ? 'border-white/10' : 'border-gray-200'
            }`}>
              <div className="flex items-center gap-3">
                <button 
                  onClick={() => setShowWidgetConstructor(false)}
                  className={`transition-colors ${
                    theme === 'dark' ? 'text-white/70 hover:text-white' : 'text-gray-400 hover:text-gray-600'
                  }`}
                >
                  <img src="/Frame 195.svg" alt="Назад" className="w-4 h-4" />
                </button>
                <h3 className={`text-[20px] font-[500] ${
                  theme === 'dark' ? 'text-white' : 'text-[#070F1A]'
                }`}>Интеграции / Виджет</h3>
    </div>
              <button 
                onClick={async () => {
                  try {
                    const script = generateWidgetCode();
                    await navigator.clipboard.writeText(script);
                    showNotificationMessage('Скрипт скопирован в буфер обмена!');
                    
                  // Устанавливаем виджет как установленный
                  setIntegrations(prev => prev.map(item => 
                    item.id === 'widget' 
                      ? { ...item, installed: true }
                      : item
                  ));
                  setShowWidgetConstructor(false);
                  } catch (error) {
                    console.error('Ошибка при копировании:', error);
                    showNotificationMessage('Ошибка при копировании скрипта');
                  }
                }}
                className="h-[40px] px-4 bg-[#0084FF] text-white hover:bg-[#0073E6] rounded-[10px] font-[500] text-[14px] flex items-center gap-2 transition-colors"
              >
                <img src="/document-copy.svg" alt="Копировать" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(100%) invert(1)' }} />
                Скопировать скрипт
              </button>
            </div>

            {/* Content */}
            <div className="flex-1 overflow-y-auto p-6">
              <div className="space-y-8">
                {/* Settings */}
                <div className="space-y-6">
                  {/* Accent Color */}
                  <div>
                    <label className="block text-sm font-medium mb-3">Акцентный цвет</label>
                    <div className="flex items-center gap-3">
                      <input 
                        type="text" 
                        value={widgetDevelopmentSettings.accentColor}
                        onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, accentColor: e.target.value})}
                        className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                        placeholder="HEX"
                      />
                      <input 
                        type="color" 
                        value={widgetDevelopmentSettings.accentColor}
                        onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, accentColor: e.target.value})}
                        className="w-10 h-10 rounded-lg border-2 border-gray-300 cursor-pointer"
                      />
                      <button 
                        onClick={() => setWidgetSettings({...widgetDevelopmentSettings, accentColor: '#1354FC'})}
                        className="text-gray-400 hover:text-gray-600"
                      >
                        ×
                      </button>
                    </div>
                  </div>

                  {/* Button Color */}
                  <div>
                    <label className="block text-sm font-medium mb-3">Цвет кнопки</label>
                    <div className="grid grid-cols-3 gap-3">
                      {[
                        { id: 'light', label: 'Светлый фон', bg: 'bg-white', border: 'border-blue-500', text: 'text-blue-500' },
                        { id: 'dark', label: 'Темный фон', bg: 'bg-gray-900', border: 'border-white', text: 'text-white' },
                        { id: 'custom', label: 'Задать свой цвет', bg: 'bg-gradient-to-r from-yellow-400 via-pink-500 to-blue-500', border: 'border-blue-500', text: 'text-white' }
                      ].map((style) => (
                        <button
                          key={style.id}
                          onClick={() => setWidgetSettings({...widgetDevelopmentSettings, buttonColor: style.id})}
                          className={`p-3 rounded-lg border-2 transition-all ${
                            widgetDevelopmentSettings.buttonColor === style.id 
                              ? 'border-blue-500 ring-2 ring-blue-200' 
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                        >
                          <div 
                            className={`w-[140px] h-[42px] rounded-xl flex items-center justify-center gap-2 mb-2 mx-auto ${
                              style.id === 'light' ? 'bg-white border-2 border-gray-300' :
                              style.id === 'dark' ? 'bg-gray-900' :
                              'bg-gradient-to-r from-yellow-400 via-pink-500 to-blue-500'
                            }`}
                            style={{
                              borderColor: style.id === 'light' ? widgetDevelopmentSettings.accentColor : 'transparent',
                              color: style.id === 'light' ? widgetDevelopmentSettings.accentColor : 'white'
                            }}
                          >
                            <div 
                              className="w-4 h-4 rounded-[90px] opacity-80"
                              style={{ backgroundColor: style.id === 'light' ? widgetDevelopmentSettings.accentColor : 'currentColor' }}
                            ></div>
                            <span className="text-sm font-medium" style={{ maxWidth: '90px', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>
                              Написать нам
                            </span>
                          </div>
                          <span className={`text-xs ${widgetDevelopmentSettings.buttonColor === style.id ? 'text-blue-600' : 'text-gray-600'}`}>
                            {style.label}
                          </span>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Button Text */}
                  <div>
                    <label className="block text-sm font-medium mb-3">Название кнопки</label>
                    <input 
                      type="text" 
                      value={widgetDevelopmentSettings.buttonText}
                      onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, buttonText: e.target.value})}
                      className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                      placeholder="Написать нам"
                    />
                  </div>

                  {/* Avatar */}
                  <div>
                    <label className="block text-sm font-medium mb-3">Аватар Adapto</label>
                    <div className="grid grid-cols-2 gap-3">
                      <button
                        onClick={() => setWidgetSettings({...widgetDevelopmentSettings, avatar: 'default'})}
                        className={`p-3 rounded-lg border-2 transition-all ${
                          widgetDevelopmentSettings.avatar === 'default' 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-[90px] mx-auto mb-2 flex items-center justify-center">
                          <div className="flex items-center justify-center w-6 h-6">
                            <div className="w-3 h-3 bg-white rounded-[90px] mr-1"></div>
                            <div className="w-1.5 h-1.5 bg-white rounded-[90px]"></div>
                          </div>
                        </div>
                        <span className="text-xs text-center block">По умолчанию</span>
                      </button>
                      <button
                        onClick={() => document.getElementById('avatar-input')?.click()}
                        className={`p-3 rounded-lg border-2 transition-all ${
                          widgetDevelopmentSettings.avatar === 'custom' 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="w-12 h-12 bg-gray-200 rounded-[90px] mx-auto mb-2 flex items-center justify-center">
                          <span className="text-gray-500">+</span>
                        </div>
                        <span className="text-xs text-center block">Загрузить</span>
                        <input 
                          id="avatar-input"
                          type="file" 
                          accept="image/*"
                          className="hidden" 
                          onChange={(e) => {
                            const file = e.target.files?.[0];
                            if (file) {
                              setWidgetSettings({...widgetDevelopmentSettings, avatar: 'custom'});
                              showNotificationMessage('Аватар загружен!');
                            }
                          }}
                        />
                      </button>
                    </div>
                  </div>
                </div>

                {/* Custom Color Picker */}
                {widgetDevelopmentSettings.buttonColor === 'custom' && (
                  <div>
                    <label className="block text-sm font-medium mb-3">Введите цвет для фона</label>
                    <div className="flex items-center gap-3">
                      <input 
                        type="text" 
                        value={widgetDevelopmentSettings.customButtonColor}
                        onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, customButtonColor: e.target.value})}
                        className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                        placeholder="HEX"
                      />
                      <input 
                        type="color" 
                        value={widgetDevelopmentSettings.customButtonColor}
                        onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, customButtonColor: e.target.value})}
                        className="w-10 h-10 rounded-lg border-2 border-gray-300 cursor-pointer"
                      />
                    </div>
                  </div>
                )}

                {/* Расположение виджета */}
                <div>
                  <label className="block text-sm font-medium mb-3">Расположение виджета</label>
                  <div className="grid grid-cols-2 gap-3">
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, widgetLocation: 'default'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.widgetLocation === 'default' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium mb-1">По умолчанию</div>
                        <div className="text-sm text-gray-600">Правый нижний угол</div>
                      </div>
                    </button>
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, widgetLocation: 'custom'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.widgetLocation === 'custom' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium mb-1">Настроить</div>
                        <div className="text-sm text-gray-600">Выбрать позицию</div>
                      </div>
                    </button>
                  </div>
                  
                  {/* Настройки расположения виджета */}
                  {widgetDevelopmentSettings.widgetLocation === 'custom' && (
                    <div className="mt-4 space-y-6 p-4 bg-gray-50 rounded-lg">
                      <div>
                        <h4 className="text-sm font-medium mb-3">Для компьютеров</h4>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-medium mb-2">Отступ снизу</label>
                            <input 
                              type="number" 
                              value={widgetDevelopmentSettings.desktopBottomOffset}
                              onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, desktopBottomOffset: parseInt(e.target.value)})}
                              className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                              min="0"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium mb-2">Отступ справа</label>
                            <input 
                              type="number" 
                              value={widgetDevelopmentSettings.desktopRightOffset}
                              onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, desktopRightOffset: parseInt(e.target.value)})}
                              className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                              min="0"
                            />
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <h4 className="text-sm font-medium mb-3">Для телефонов</h4>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <label className="block text-sm font-medium mb-2">Отступ снизу</label>
                            <input 
                              type="number" 
                              value={widgetDevelopmentSettings.mobileBottomOffset}
                              onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, mobileBottomOffset: parseInt(e.target.value)})}
                              className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                              min="0"
                            />
                          </div>
                          <div>
                            <label className="block text-sm font-medium mb-2">Отступ справа</label>
                            <input 
                              type="number" 
                              value={widgetDevelopmentSettings.mobileRightOffset}
                              onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, mobileRightOffset: parseInt(e.target.value)})}
                              className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                              min="0"
                            />
                          </div>
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Z-index</label>
                        <input 
                          type="number" 
                          value={widgetDevelopmentSettings.zIndex}
                          onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, zIndex: parseInt(e.target.value)})}
                          className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                          min="1"
                        />
                      </div>
                    </div>
                  )}
                </div>

                {/* Приветственное сообщение */}
                <div>
                  <label className="block text-sm font-medium mb-3">Приветственное сообщение</label>
                  <div className="space-y-3">
                    {widgetDevelopmentSettings.welcomeMessages.map((message, index) => (
                      <div key={index} className="flex gap-2">
                        <input 
                          type="text" 
                          value={message}
                          onChange={(e) => {
                            const newMessages = [...widgetDevelopmentSettings.welcomeMessages];
                            newMessages[index] = e.target.value;
                            setWidgetSettings({...widgetDevelopmentSettings, welcomeMessages: newMessages});
                          }}
                          className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                          placeholder="Приветственное сообщение"
                        />
                        <button 
                          onClick={() => {
                            const newMessages = widgetDevelopmentSettings.welcomeMessages.filter((_, i) => i !== index);
                            setWidgetSettings({...widgetDevelopmentSettings, welcomeMessages: newMessages});
                          }}
                          className="px-3 py-2 text-red-500 hover:text-red-700"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                    <button 
                      onClick={() => {
                        const newMessages = [...widgetDevelopmentSettings.welcomeMessages, ''];
                        setWidgetSettings({...widgetDevelopmentSettings, welcomeMessages: newMessages});
                      }}
                      className="text-blue-600 hover:text-blue-700 text-sm"
                    >
                      + Добавить сообщение
                    </button>
                  </div>
                </div>

                {/* Триггерный вопрос */}
                <div>
                  <label className="block text-sm font-medium mb-3">Триггерный вопрос</label>
                  <div className="grid grid-cols-2 gap-3 mb-4">
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, triggerQuestionEnabled: 'no'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.triggerQuestionEnabled === 'no' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Нет</div>
                      </div>
                    </button>
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, triggerQuestionEnabled: 'yes'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.triggerQuestionEnabled === 'yes' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Есть</div>
                      </div>
                    </button>
                  </div>
                  
                  {widgetDevelopmentSettings.triggerQuestionEnabled === 'yes' && (
                    <div className="space-y-4 p-4 bg-gray-50 rounded-lg">
                      <div>
                        <label className="block text-sm font-medium mb-2">Через какое время показать:</label>
                        <div className="flex items-center gap-2">
                          <input 
                            type="number" 
                            value={widgetDevelopmentSettings.triggerQuestionDelay}
                            onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, triggerQuestionDelay: parseInt(e.target.value)})}
                            className="w-20 p-2 border border-gray-300 rounded-lg text-sm"
                            min="1"
                          />
                          <span className="text-sm text-gray-600">сек</span>
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Вопрос:</label>
                        <textarea 
                          value={widgetDevelopmentSettings.triggerQuestionText}
                          onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, triggerQuestionText: e.target.value})}
                          className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                          rows="3"
                          placeholder="Введите вопрос"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Быстрые ответы:</label>
                        <div className="space-y-2">
                          {widgetDevelopmentSettings.quickReplies.map((reply, index) => (
                            <div key={index} className="flex gap-2">
                              <input 
                                type="text" 
                                value={reply}
                                onChange={(e) => {
                                  const newReplies = [...widgetDevelopmentSettings.quickReplies];
                                  newReplies[index] = e.target.value;
                                  setWidgetSettings({...widgetDevelopmentSettings, quickReplies: newReplies});
                                }}
                                className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                                placeholder="Быстрый ответ"
                              />
                              <button 
                                onClick={() => {
                                  const newReplies = widgetDevelopmentSettings.quickReplies.filter((_, i) => i !== index);
                                  setWidgetSettings({...widgetDevelopmentSettings, quickReplies: newReplies});
                                }}
                                className="px-3 py-2 text-red-500 hover:text-red-700"
                              >
                                ×
                              </button>
                            </div>
                          ))}
                          <button 
                            onClick={() => {
                              const newReplies = [...widgetDevelopmentSettings.quickReplies, ''];
                              setWidgetSettings({...widgetDevelopmentSettings, quickReplies: newReplies});
                            }}
                            className="text-blue-600 hover:text-blue-700 text-sm"
                          >
                            + Добавить быстрый ответ
                          </button>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Follow up сообщение */}
                <div>
                  <label className="block text-sm font-medium mb-3">Follow up сообщение</label>
                  <p className="text-sm text-gray-600 mb-4">Сообщение, которое увидит пользователь, если выйдет из диалога</p>
                  <div className="grid grid-cols-2 gap-3 mb-4">
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, followUpMessage: 'no'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.followUpMessage === 'no' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Нет</div>
                      </div>
                    </button>
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, followUpMessage: 'yes'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.followUpMessage === 'yes' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Есть</div>
                      </div>
                    </button>
                  </div>
                  
                  {widgetDevelopmentSettings.followUpMessage === 'yes' && (
                    <div className="space-y-4 p-4 bg-gray-50 rounded-lg">
                      <div>
                        <label className="block text-sm font-medium mb-2">Через какое время показать:</label>
                        <div className="flex items-center gap-2">
                          <input 
                            type="number" 
                            value={widgetDevelopmentSettings.followUpDelay}
                            onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, followUpDelay: parseInt(e.target.value)})}
                            className="w-20 p-2 border border-gray-300 rounded-lg text-sm"
                            min="1"
                          />
                          <span className="text-sm text-gray-600">сек</span>
                        </div>
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Вопрос:</label>
                        <textarea 
                          value={widgetDevelopmentSettings.followUpQuestion}
                          onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, followUpQuestion: e.target.value})}
                          className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                          rows="3"
                          placeholder="Введите вопрос"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium mb-2">Быстрые ответы:</label>
                        <div className="space-y-2">
                          {widgetDevelopmentSettings.followUpQuickReply && (
                            <div className="flex gap-2">
                              <input 
                                type="text" 
                                value={widgetDevelopmentSettings.followUpQuickReply}
                                onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, followUpQuickReply: e.target.value})}
                                className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                                placeholder="Быстрый ответ"
                              />
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* Ссылка на политику обработки персональных данных */}
                <div>
                  <label className="block text-sm font-medium mb-2">Ссылка на политику обработки персональных данных</label>
                  <input 
                    type="url" 
                    value={widgetDevelopmentSettings.privacyPolicyUrl}
                    onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, privacyPolicyUrl: e.target.value})}
                    className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                    placeholder="https://example.com/privacy"
                  />
                </div>

                {/* Какие метки собирать */}
                <div>
                  <label className="block text-sm font-medium mb-3">Какие метки собирать</label>
                  <div className="grid grid-cols-2 gap-2">
                    {[
                      'utm_source',
                      'utm_medium', 
                      'utm_campaign',
                      'utm_term',
                      'utm_content',
                      'roistat_visit',
                      'gclid',
                      'fbclid'
                    ].map(tag => (
                      <button
                        key={tag}
                        onClick={() => {
                          const current = widgetDevelopmentSettings.dataTags || [];
                          const newTags = current.includes(tag)
                            ? current.filter(t => t !== tag)
                            : [...current, tag];
                          setWidgetSettings({...widgetDevelopmentSettings, dataTags: newTags});
                        }}
                        className={`p-2 rounded-lg border-2 transition-all text-sm ${
                          (widgetDevelopmentSettings.dataTags || []).includes(tag)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {tag}
                      </button>
                    ))}
                  </div>
                  <div className="mt-3">
                    <button 
                      onClick={() => {
                        const newTag = prompt('Введите название метки:');
                        if (newTag && !widgetDevelopmentSettings.dataTags.includes(newTag)) {
                          const newTags = [...widgetDevelopmentSettings.dataTags, newTag];
                          setWidgetSettings({...widgetDevelopmentSettings, dataTags: newTags});
                        }
                      }}
                      className="text-blue-600 hover:text-blue-700 text-sm"
                    >
                      + Добавить метку
                    </button>
                  </div>
                </div>

                {/* Режим работы виджета */}
                <div className="border-t pt-6">
                  <h4 className="text-lg font-semibold mb-4">Режим работы виджета</h4>
                  <div className="grid grid-cols-2 gap-4">
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, widgetMode: 'chat'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.widgetMode === 'chat' 
                          ? 'border-blue-500 bg-blue-50' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="flex items-center gap-3 mb-2">
                        <MessageSquare className="w-5 h-5 text-blue-600" />
                        <span className="font-medium">Чат</span>
                      </div>
                      <p className="text-sm text-gray-600">Обычный режим чата с ИИ-ассистентом</p>
                    </button>
                    <button
                      onClick={() => setWidgetSettings({...widgetDevelopmentSettings, widgetMode: 'questions'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        widgetDevelopmentSettings.widgetMode === 'questions' 
                          ? 'border-blue-500 bg-blue-50' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="flex items-center gap-3 mb-2">
                        <HelpCircle className="w-5 h-5 text-blue-600" />
                        <span className="font-medium">Быстрые вопросы</span>
                      </div>
                      <p className="text-sm text-gray-600">Предустановленные вопросы с готовыми ответами</p>
                    </button>
                  </div>
                </div>

                {/* Быстрые вопросы */}
                {widgetDevelopmentSettings.widgetMode === 'questions' && (
                  <div className="border-t pt-6">
                    <h4 className="text-lg font-semibold mb-4">Быстрые вопросы</h4>
                    <div className="space-y-4">
                      {widgetDevelopmentSettings.quickQuestions.map((item, index) => (
                        <div key={index} className="border border-gray-200 rounded-lg p-4">
                          <div className="flex items-start justify-between mb-3">
                            <h5 className="font-medium">Вопрос {index + 1}</h5>
                            <button
                              onClick={() => {
                                const newQuestions = widgetDevelopmentSettings.quickQuestions.filter((_, i) => i !== index);
                                setWidgetSettings({...widgetDevelopmentSettings, quickQuestions: newQuestions});
                              }}
                              className="text-red-500 hover:text-red-700"
                            >
                              <X className="w-4 h-4" />
                            </button>
                          </div>
                          <div className="space-y-3">
                            <div>
                              <label className="block text-sm font-medium mb-1">Вопрос</label>
                              <input
                                type="text"
                                value={item.question}
                                onChange={(e) => {
                                  const newQuestions = [...widgetDevelopmentSettings.quickQuestions];
                                  newQuestions[index].question = e.target.value;
                                  setWidgetSettings({...widgetDevelopmentSettings, quickQuestions: newQuestions});
                                }}
                                className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                                placeholder="Введите вопрос"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium mb-1">Ответ</label>
                              <textarea
                                value={item.answer}
                                onChange={(e) => {
                                  const newQuestions = [...widgetDevelopmentSettings.quickQuestions];
                                  newQuestions[index].answer = e.target.value;
                                  setWidgetSettings({...widgetDevelopmentSettings, quickQuestions: newQuestions});
                                }}
                                className="w-full p-2 border border-gray-300 rounded-lg text-sm h-20 resize-none"
                                placeholder="Введите ответ"
                              />
                            </div>
                          </div>
                        </div>
                      ))}
                      <button
                        onClick={() => {
                          const newQuestions = [...widgetDevelopmentSettings.quickQuestions, { question: '', answer: '' }];
                          setWidgetSettings({...widgetDevelopmentSettings, quickQuestions: newQuestions});
                        }}
                        className="w-full p-3 border-2 border-dashed border-gray-300 rounded-lg text-gray-500 hover:border-gray-400 hover:text-gray-600 transition-colors"
                      >
                        + Добавить вопрос
                      </button>
                    </div>
                  </div>
                )}

                {/* Форма заявки */}
                <div className="border-t pt-6">
                  <h4 className="text-lg font-semibold mb-4">Форма заявки</h4>
                  <div className="space-y-4">
                    <div className="flex items-center gap-4">
                      <button
                        onClick={() => setWidgetSettings({...widgetDevelopmentSettings, leadFormEnabled: 'yes'})}
                        className={`px-4 py-2 rounded-lg border-2 transition-all ${
                          widgetDevelopmentSettings.leadFormEnabled === 'yes' 
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        Включить
                      </button>
                      <button
                        onClick={() => setWidgetSettings({...widgetDevelopmentSettings, leadFormEnabled: 'no'})}
                        className={`px-4 py-2 rounded-lg border-2 transition-all ${
                          widgetDevelopmentSettings.leadFormEnabled === 'no' 
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        Отключить
                      </button>
                    </div>
                    
                    {widgetDevelopmentSettings.leadFormEnabled === 'yes' && (
                      <div className="space-y-4">
                        <div>
                          <label className="block text-sm font-medium mb-2">Заголовок формы</label>
                          <input
                            type="text"
                            value={widgetDevelopmentSettings.leadFormTitle}
                            onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, leadFormTitle: e.target.value})}
                            className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                            placeholder="Оставьте заявку"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium mb-2">Описание формы</label>
                          <input
                            type="text"
                            value={widgetDevelopmentSettings.leadFormDescription}
                            onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, leadFormDescription: e.target.value})}
                            className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                            placeholder="Мы свяжемся с вами в ближайшее время"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium mb-2">Поля формы</label>
                          <div className="space-y-3">
                            {widgetDevelopmentSettings.leadFormFields.map((field, index) => (
                              <div key={index} className="flex items-center gap-3 p-3 border border-gray-200 rounded-lg">
                                <div className="flex-1">
                                  <input
                                    type="text"
                                    value={field.label}
                                    onChange={(e) => {
                                      const newFields = [...widgetDevelopmentSettings.leadFormFields];
                                      newFields[index].label = e.target.value;
                                      setWidgetSettings({...widgetDevelopmentSettings, leadFormFields: newFields});
                                    }}
                                    className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                                    placeholder="Название поля"
                                  />
                                </div>
                                <select
                                  value={field.type}
                                  onChange={(e) => {
                                    const newFields = [...widgetDevelopmentSettings.leadFormFields];
                                    newFields[index].type = e.target.value;
                                    setWidgetSettings({...widgetDevelopmentSettings, leadFormFields: newFields});
                                  }}
                                  className="p-2 border border-gray-300 rounded-lg text-sm"
                                >
                                  <option value="text">Текст</option>
                                  <option value="email">Email</option>
                                  <option value="tel">Телефон</option>
                                </select>
                                <label className="flex items-center gap-2">
                                  <input
                                    type="checkbox"
                                    checked={field.required}
                                    onChange={(e) => {
                                      const newFields = [...widgetDevelopmentSettings.leadFormFields];
                                      newFields[index].required = e.target.checked;
                                      setWidgetSettings({...widgetDevelopmentSettings, leadFormFields: newFields});
                                    }}
                                    className="w-4 h-4"
                                  />
                                  <span className="text-sm">Обязательное</span>
                                </label>
                                <button
                                  onClick={() => {
                                    const newFields = widgetDevelopmentSettings.leadFormFields.filter((_, i) => i !== index);
                                    setWidgetSettings({...widgetDevelopmentSettings, leadFormFields: newFields});
                                  }}
                                  className="text-red-500 hover:text-red-700"
                                >
                                  <X className="w-4 h-4" />
                                </button>
                              </div>
                            ))}
                            <button
                              onClick={() => {
                                const newFields = [...widgetDevelopmentSettings.leadFormFields, { name: '', label: '', type: 'text', required: false }];
                                setWidgetSettings({...widgetDevelopmentSettings, leadFormFields: newFields});
                              }}
                              className="w-full p-3 border-2 border-dashed border-gray-300 rounded-lg text-gray-500 hover:border-gray-400 hover:text-gray-600 transition-colors"
                            >
                              + Добавить поле
                            </button>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>

                {/* Предложения */}
                <div className="border-t pt-6">
                  <h4 className="text-lg font-semibold mb-4">Предложения</h4>
                  <div className="space-y-4">
                    {widgetDevelopmentSettings.quickReplies.map((reply, index) => (
                      <div key={index} className="flex items-center border rounded-md p-2">
                        <input
                          type="text"
                          value={reply}
                          onChange={(e) => {
                            const newReplies = [...widgetDevelopmentSettings.quickReplies];
                            newReplies[index] = e.target.value;
                            setWidgetSettings({...widgetDevelopmentSettings, quickReplies: newReplies});
                          }}
                          className="flex-1 p-2 border border-gray-300 rounded-md text-sm"
                          placeholder={`Сообщение ${index + 1}`}
                        />
                        <button
                          onClick={() => {
                            const newReplies = widgetDevelopmentSettings.quickReplies.filter((_, i) => i !== index);
                            setWidgetSettings({...widgetDevelopmentSettings, quickReplies: newReplies});
                          }}
                          className="ml-2 text-red-400 hover:text-red-600"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </div>
                    ))}
                    <button
                      onClick={() => {
                        const newReplies = [...widgetDevelopmentSettings.quickReplies, ''];
                        setWidgetSettings({...widgetDevelopmentSettings, quickReplies: newReplies});
                      }}
                      className="text-blue-400 hover:text-blue-600 font-medium"
                    >
                      + Добавить сообщение
                    </button>
                    <p className="text-sm text-gray-500">Укажите сообщения, которые будут автоматически видны в виджете и предложены пользователю для отправки</p>
                  </div>
                </div>

                {/* Приветственные сообщения */}
                <div className="border-t pt-6">
                  <h4 className="text-lg font-semibold mb-4">Приветственные сообщения</h4>
                  <div className="space-y-4">
                    {widgetDevelopmentSettings.welcomeMessages.map((message, index) => (
                      <div key={index} className="flex items-center border rounded-md p-2">
                        <input
                          type="text"
                          value={message}
                          onChange={(e) => {
                            const newMessages = [...widgetDevelopmentSettings.welcomeMessages];
                            newMessages[index] = e.target.value;
                            setWidgetSettings({...widgetDevelopmentSettings, welcomeMessages: newMessages});
                          }}
                          className="flex-1 p-2 border border-gray-300 rounded-md text-sm"
                          placeholder={`Сообщение ${index + 1}`}
                        />
                        <button
                          onClick={() => {
                            const newMessages = widgetDevelopmentSettings.welcomeMessages.filter((_, i) => i !== index);
                            setWidgetSettings({...widgetDevelopmentSettings, welcomeMessages: newMessages});
                          }}
                          className="ml-2 text-red-400 hover:text-red-600"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </div>
                    ))}
                    <button
                      onClick={() => {
                        const newMessages = [...widgetDevelopmentSettings.welcomeMessages, ''];
                        setWidgetSettings({...widgetDevelopmentSettings, welcomeMessages: newMessages});
                      }}
                      className="text-blue-400 hover:text-blue-600 font-medium"
                    >
                      + Добавить сообщение
                    </button>
                    <p className="text-sm text-gray-500">Укажите приветственные сообщения от ассистента, которые будут автоматически видны в начале каждого диалога</p>
                  </div>
                </div>

                {/* Логотип и брендинг */}
                <div className="border-t pt-6">
                  <h4 className="text-lg font-semibold mb-4">Логотип и брендинг</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Название рядом с логотипом</label>
                        <input
                          type="text"
                          value={widgetDevelopmentSettings.buttonText}
                          onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, buttonText: e.target.value})}
                          className="w-full p-2 border border-gray-300 rounded-md text-sm"
                          placeholder="Введите название"
                        />
                        <p className="mt-2 text-sm text-gray-500">Текст, отображаемый рядом с логотипом в виджете.</p>
                      </div>
                    </div>
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Ссылка на логотип</label>
                        <input
                          type="url"
                          value={widgetDevelopmentSettings.logoUrl || ''}
                          onChange={(e) => setWidgetSettings({...widgetDevelopmentSettings, logoUrl: e.target.value})}
                          className="w-full p-2 border border-gray-300 rounded-md text-sm"
                          placeholder="Введите ссылку на логотип"
                        />
                        <p className="mt-2 text-sm text-gray-500">Вставьте URL логотипа вашей компании, который будет отображаться в виджете.</p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Код для вставки */}
                <div className="border-t pt-6">
                  <h4 className="text-lg font-semibold mb-4">Код для вставки</h4>
                  <div className="bg-gray-50 p-4 rounded-lg mb-4">
                    <p className="text-sm text-gray-700 mb-2">Вставьте этот фрагмент кода внутри тега <span className="font-semibold text-blue-700">&lt;body&gt;</span> на каждой странице, где вы хотите, чтобы отображался виджет.</p>
                  </div>
                  <div className="bg-gray-900 rounded-lg overflow-hidden">
                    <div className="flex items-center justify-between px-4 py-2 bg-gray-800">
                      <span className="text-gray-200 font-mono text-sm">HTML</span>
                      <div className="flex items-center gap-3">
                        <button 
                          onClick={() => {
                            navigator.clipboard.writeText(generateWidgetCode());
                            showNotificationMessage('Код скопирован!');
                          }}
                          className="text-gray-200 hover:text-white transition-colors text-sm"
                        >
                          Копировать
                        </button>
                        <button 
                          onClick={openWidgetPreview}
                          className="text-gray-200 hover:text-white transition-colors text-sm underline"
                        >
                          Открыть в новой вкладке
                        </button>
                      </div>
                    </div>
                    <pre className="p-4 text-gray-200 text-sm overflow-x-auto">
                      <code>{generateWidgetCode()}</code>
                    </pre>
                  </div>
                </div>

                {/* Превью виджета */}
                <div className="border-t pt-6">
                  <h4 className="text-lg font-semibold mb-4">Превью виджета</h4>
                  <div className="flex items-center justify-between mb-3">
                    <p className="text-sm text-gray-600">Предпросмотр открывается с тем же скриптом, что вставляется на сайт.</p>
                    <button onClick={openWidgetPreview} className="px-3 py-1.5 rounded-md text-sm bg-blue-600 text-white hover:bg-blue-700 transition-colors">Открыть в новой вкладке</button>
                  </div>
                  <div className="border rounded-lg shadow-inner h-96 overflow-hidden relative">
                    <iframe 
                      src={(() => {
                        const settings = {
                          accentColor: widgetDevelopmentSettings.accentColor,
                          buttonText: widgetDevelopmentSettings.buttonText,
                          buttonStyle: widgetDevelopmentSettings.buttonColor || 'rectangle',
                          buttonColor: widgetDevelopmentSettings.buttonColor || 'light',
                          customButtonColor: widgetDevelopmentSettings.customButtonColor,
                          widgetMode: widgetDevelopmentSettings.widgetMode,
                          quickQuestions: widgetDevelopmentSettings.quickQuestions,
                          leadFormEnabled: widgetDevelopmentSettings.leadFormEnabled,
                          leadFormTitle: widgetDevelopmentSettings.leadFormTitle,
                          leadFormDescription: widgetDevelopmentSettings.leadFormDescription,
                          leadFormFields: widgetDevelopmentSettings.leadFormFields,
                          welcomeMessages: widgetDevelopmentSettings.welcomeMessages,
                          quickReplies: widgetDevelopmentSettings.quickReplies,
                          logoUrl: widgetDevelopmentSettings.logoUrl,
                          logoName: widgetDevelopmentSettings.logoName,
                          suggestions: widgetDevelopmentSettings.suggestions,
                          triggerQuestionEnabled: widgetDevelopmentSettings.triggerQuestionEnabled,
                          triggerQuestionDelay: widgetDevelopmentSettings.triggerQuestionDelay,
                          triggerQuestionText: widgetDevelopmentSettings.triggerQuestionText,
                          followUpMessage: widgetDevelopmentSettings.followUpMessage,
                          followUpDelay: widgetDevelopmentSettings.followUpDelay,
                          followUpQuestion: widgetDevelopmentSettings.followUpQuestion,
                          followUpQuickReply: widgetDevelopmentSettings.followUpQuickReply,
                          privacyPolicyUrl: widgetDevelopmentSettings.privacyPolicyUrl,
                          dataTags: widgetDevelopmentSettings.dataTags,
                          widgetLocation: widgetDevelopmentSettings.widgetLocation,
                          desktopBottomOffset: widgetDevelopmentSettings.desktopBottomOffset,
                          desktopRightOffset: widgetDevelopmentSettings.desktopRightOffset,
                          mobileBottomOffset: widgetDevelopmentSettings.mobileBottomOffset,
                          mobileRightOffset: widgetDevelopmentSettings.mobileRightOffset,
                          zIndex: widgetDevelopmentSettings.zIndex,
                          avatar: widgetDevelopmentSettings.avatar
                        };
                        const userKey = currentUser?.id ? `adapto_${currentUser.id}` : 'adapto_demo';
                        return `${API_CONFIG.BASE_URL}/widget-preview.html?key=${userKey}&noCache=1&ts=${Date.now()}`;
                      })()} 
                      title="Widget Preview" 
                      className="w-full h-full"
                      style={{ border: 'none' }}
                    />
                  </div>
                </div>

                {/* Кнопки действий */}
                <div className="flex justify-end gap-3 pt-6 border-t">
                  <Button 
                    variant="outline"
                    onClick={() => {
                      // Открываем предосмотр в новой вкладке
                      const previewUrl = `http://localhost:3002/preview.html?settings=${encodeURIComponent(JSON.stringify(widgetDevelopmentSettings))}`;
                      window.open(previewUrl, '_blank');
                    }}
                  >
                    Предосмотр
                  </Button>
                  <Button 
                    onClick={() => {
                      // Сохраняем настройки
                      localStorage.setItem('widgetDevelopmentSettings', JSON.stringify(widgetDevelopmentSettings));
                      showNotificationMessage('Настройки виджета сохранены!');
                      setShowWidgetModal(false);
                    }}
                  >
                    Сохранить
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Integration Modal */}
      {showIntegrationModal && selectedIntegration && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div className="absolute inset-0 bg-black/50" onClick={() => setShowIntegrationModal(false)} />
          <div className="relative bg-white rounded-xl w-full max-w-2xl mx-4 max-h-[90vh] overflow-hidden flex flex-col">
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <div className="flex items-center gap-3">
                <button 
                  onClick={() => setShowIntegrationModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  ←
                </button>
                <h3 className="text-xl font-semibold">Установка {selectedIntegration.name}</h3>
              </div>
            </div>

            {/* Content */}
            <div className="flex-1 overflow-y-auto p-6">
              <div className="space-y-6">
                <div className="flex items-center gap-4">
                  <img src={`/${selectedIntegration.icon}`} alt={selectedIntegration.name} className="w-12 h-12" />
                  <div>
                    <h4 className="text-lg font-medium">{selectedIntegration.name}</h4>
                    <p className="text-gray-600">{selectedIntegration.description}</p>
                  </div>
                </div>

                <div className="bg-gray-50 rounded-lg p-4">
                  <h5 className="font-medium mb-3">Инструкция по установке:</h5>
                  <div className="space-y-3 text-sm">
                    <p>1. Перейдите в настройки вашего {selectedIntegration.name}</p>
                    <p>2. Найдите раздел "Интеграции" или "API"</p>
                    <p>3. Скопируйте ваш API ключ</p>
                    <p>4. Вставьте ключ в поле ниже</p>
                    <p>5. Нажмите "Подключить"</p>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">API Ключ</label>
                  <Input
                    placeholder="Введите ваш API ключ"
                    className="w-full"
                  />
                </div>

                <div className="flex gap-3">
                  <Button
                    onClick={() => handleIntegrationSuccess(selectedIntegration.id)}
                    className="flex-1"
                  >
                    Подключить
                  </Button>
                  <Button
                    variant="outline"
                    onClick={() => setShowIntegrationModal(false)}
                  >
                    Отмена
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Uninstall Modal */}
      {showUninstallModal && integrationToUninstall && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div className="absolute inset-0 bg-black/50" onClick={() => setShowUninstallModal(false)} />
          <div className="relative bg-white rounded-xl w-full max-w-md mx-4 p-6">
            <div className="text-center">
              <h3 className="text-lg font-semibold mb-4">Удалить интеграцию?</h3>
              <p className="text-gray-600 mb-6">
                Вы действительно хотите удалить интеграцию с {integrationToUninstall.name}? 
                Это действие нельзя отменить.
              </p>
              <div className="flex gap-3">
                <Button
                  onClick={confirmUninstall}
                  variant="destructive"
                  className="flex-1"
                >
                  Да, удалить
                </Button>
                <Button
                  variant="outline"
                  onClick={() => setShowUninstallModal(false)}
                  className="flex-1"
                >
                  Нет, отмена
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Setup Wizard Modal для первого входа */}
      {showSetupWizard && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
          <div className="bg-white rounded-xl p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
                              <h2 className="text-[20px] font-[500]">Настройка вашего ИИ-агента</h2>
              <Button variant="ghost" onClick={() => setShowSetupWizard(false)}>
                <X className="w-4 h-4" />
              </Button>
            </div>

            {/* Прогресс-бар */}
            <div className="mb-8">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium">Шаг {setupStep} из 4</span>
                <span className="text-sm text-gray-500">{Math.round((setupStep / 4) * 100)}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-[90px] h-2">
                <div 
                  className="bg-blue-600 h-2 rounded-[90px] transition-all duration-300"
                  style={{ width: `${(setupStep / 4) * 100}%` }}
                ></div>
              </div>
            </div>

            {/* Содержимое шагов */}
            {setupStep === 1 && (
              <div className="space-y-6">
                <h3 className="text-xl font-semibold">Шаг 1: Уточните цели Adapto</h3>
                
                {/* 1. Какую задачу должен выполнять Адапто? */}
                <div>
                  <label className="block mb-3 font-medium">1. Какую задачу должен выполнять Адапто?</label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    <button
                      onClick={() => setSetupData({...setupData, task: 'Продавать'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        setupData.task === 'Продавать' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium mb-1">Продавать</div>
                        <div className="text-sm text-gray-600">Помогать в продажах</div>
                      </div>
                    </button>
                    <button
                      onClick={() => setSetupData({...setupData, task: 'Консультировать'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        setupData.task === 'Консультировать' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium mb-1">Консультировать</div>
                        <div className="text-sm text-gray-600">Давать консультации</div>
                      </div>
                    </button>
                  </div>
                </div>

                {/* 2. Какая главная цель ии-агента? */}
                <div>
                  <label className="block mb-3 font-medium">2. Какая главная цель ии-агента?</label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {[
                      'Записать на консультацию',
                      'Продать продукт',
                      'Решить проблему клиента'
                    ].map(goal => (
                      <button
                        key={goal}
                        onClick={() => setSetupData({...setupData, mainGoal: goal})}
                        className={`p-4 rounded-lg border-2 transition-all ${
                          setupData.mainGoal === goal 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-lg font-medium">{goal}</div>
                        </div>
                      </button>
                    ))}
                    <button
                      onClick={() => setSetupData({...setupData, mainGoal: 'custom'})}
                      className={`p-4 rounded-lg border-2 transition-all ${
                        setupData.mainGoal === 'custom' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="text-center">
                        <div className="text-lg font-medium">Другое</div>
                        <div className="text-sm text-gray-600">Указать свою цель</div>
                      </div>
                    </button>
                  </div>
                  {setupData.mainGoal === 'custom' && (
                    <div className="mt-3">
                      <Input
                        value={setupData.customGoal || ''}
                        onChange={(e) => setSetupData({...setupData, customGoal: e.target.value})}
                        placeholder="Укажите вашу главную цель"
                        className="w-full"
                      />
                    </div>
                  )}
                </div>

                {/* 3. Какой цикл сделки у вас в компании? */}
                <div>
                  <label className="block mb-2 font-medium">3. Какой цикл сделки у вас в компании?</label>
                  <Textarea
                    value={setupData.dealCycle || ''}
                    onChange={(e) => setSetupData({...setupData, dealCycle: e.target.value})}
                    placeholder="Опишите цикл сделки в вашей компании..."
                    className="min-h-[100px]"
                  />
                </div>

                {/* 4. Целевая аудитория */}
                <div>
                  <label className="block mb-2 font-medium">4. Целевая аудитория</label>
                  <Textarea
                    value={setupData.targetAudience || ''}
                    onChange={(e) => setSetupData({...setupData, targetAudience: e.target.value})}
                    placeholder="Опишите вашу целевую аудиторию..."
                    className="min-h-[100px]"
                  />
                </div>
              </div>
            )}

            {setupStep === 2 && (
              <div className="space-y-6">
                <h3 className="text-xl font-semibold">Шаг 2: Правила общения</h3>
                
                {/* 1. Обращение к пользователю */}
                <div>
                  <label className="block mb-3 font-medium">Обращение к пользователю</label>
                  <div className="flex gap-3">
                    <button 
                      onClick={() => setSetupData({...setupData, addressing: 'Ты'})}
                      className={`flex-1 border rounded-[90px] h-12 transition-colors ${
                        setupData.addressing === 'Ты' ? 'bg-[#0084FF] text-white border-[#0084FF]' : 'bg-white hover:bg-gray-50 border-gray-200'
                      }`}
                    >
                      На "Ты"
                    </button>
                    <button 
                      onClick={() => setSetupData({...setupData, addressing: 'Вы'})}
                      className={`flex-1 border rounded-[90px] h-12 transition-colors ${
                        setupData.addressing === 'Вы' ? 'bg-[#0084FF] text-white border-[#0084FF]' : 'bg-white hover:bg-gray-50 border-gray-200'
                      }`}
                    >
                      На "Вы"
                    </button>
                  </div>
                </div>

                {/* 2. Стиль общения */}
                <div>
                  <label className="block mb-3 font-medium">2. Стиль общения</label>
                  <div className="flex flex-wrap gap-3">
                    {[
                      { text: 'Дружелюбный', emoji: '😊' },
                      { text: 'Нейтральный', emoji: '😐' },
                      { text: 'Профессиональный', emoji: '💼' },
                      { text: 'Юмористический', emoji: '😄' }
                    ].map(t => (
                      <button 
                        key={t.text} 
                        onClick={() => setSetupData({...setupData, communicationStyle: t.text})} 
                        className={`px-6 py-3 rounded-[90px] border flex items-center gap-2 ${
                          setupData.communicationStyle === t.text ? 'bg-blue-600 text-white border-blue-600' : 'bg-white hover:bg-gray-50'
                        }`}
                      >
                        <span>{t.emoji}</span>
                        <span>{t.text}</span>
                      </button>
                    ))}
                  </div>
                </div>

                {/* 3. Ограничения Адапто */}
                <div>
                  <label className="block mb-3 font-medium">3. Ограничения Адапто</label>
                  <div className="flex flex-wrap gap-2">
                    {[
                      'Не обсуждай цены',
                      'Не давай финансовых советов',
                      'Не консультируй по юридическим вопросам',
                      'Не разъясняй условия договоров',
                      'Не создавай обязательств от лица компании',
                      'Не подтверждай наличие товара или услуги'
                    ].map(restriction => (
                      <button
                        key={restriction}
                        onClick={() => {
                          const current = setupData.restrictions || [];
                          const newRestrictions = current.includes(restriction)
                            ? current.filter(r => r !== restriction)
                            : [...current, restriction];
                          setSetupData({...setupData, restrictions: newRestrictions});
                        }}
                        className={`px-4 py-2 rounded-[90px] border-2 transition-all text-sm ${
                          (setupData.restrictions || []).includes(restriction)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {restriction}
                      </button>
                    ))}
                    <button
                      onClick={() => setSetupData({...setupData, showCustomRestriction: true})}
                      className="px-4 py-2 rounded-[90px] border-2 border-gray-200 bg-white text-gray-700 hover:border-gray-300 text-sm"
                    >
                      Другое
                    </button>
                  </div>
                  {setupData.showCustomRestriction && (
                    <div className="mt-3 flex gap-2">
                      <Input
                        value={setupData.customRestriction || ''}
                        onChange={(e) => setSetupData({...setupData, customRestriction: e.target.value})}
                        placeholder="Введите ваше ограничение"
                        className="flex-1"
                      />
                      <Button 
                        onClick={() => {
                          if (setupData.customRestriction) {
                            const current = setupData.restrictions || [];
                            setSetupData({
                              ...setupData, 
                              restrictions: [...current, setupData.customRestriction],
                              customRestriction: '',
                              showCustomRestriction: false
                            });
                          }
                        }}
                        disabled={!setupData.customRestriction}
                      >
                        Добавить
                      </Button>
                    </div>
                  )}
                </div>

                {/* 4. Дополнительные настройки стиля общения */}
                <div>
                  <label className="block mb-3 font-medium">4. Дополнительные настройки стиля общения под вашу компанию</label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {[
                      'Не гарантировать результат',
                      'Пояснять ссылки перед отправкой',
                      'Проверять понимание ответа',
                      'Избегать длинных сообщений',
                      'Уточнять задачу в начале общения',
                      'Не оказывать давление на клиента',
                      'Предупреждать об ожидании ответа',
                      'Избегать споров',
                      'Отвечать от первого лица'
                    ].map(setting => (
                      <button
                        key={setting}
                        onClick={() => {
                          const current = setupData.communicationSettings || [];
                          const newSettings = current.includes(setting)
                            ? current.filter(s => s !== setting)
                            : [...current, setting];
                          setSetupData({...setupData, communicationSettings: newSettings});
                        }}
                        className={`p-3 rounded-lg border-2 transition-all text-left ${
                          (setupData.communicationSettings || []).includes(setting)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {setting}
                      </button>
                    ))}
                  </div>
                  <div className="mt-3">
                    <Input
                      value={setupData.customCommunicationSetting || ''}
                      onChange={(e) => setSetupData({...setupData, customCommunicationSetting: e.target.value})}
                      placeholder="Добавить свое правило общения"
                      className="w-full"
                    />
                  </div>
                </div>

                {/* 5. Сбор данных */}
                <div>
                  <label className="block mb-3 font-medium">5. Сбор данных</label>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-2 mb-3">
                    {[
                      'Имя',
                      'Номер телефона',
                      'Почта',
                      'Адрес доставки',
                      'Город',
                      'Возраст'
                    ].map(dataType => (
                      <button
                        key={dataType}
                        onClick={() => {
                          const current = setupData.dataCollection || [];
                          const newData = current.includes(dataType)
                            ? current.filter(d => d !== dataType)
                            : [...current, dataType];
                          setSetupData({...setupData, dataCollection: newData});
                        }}
                        className={`p-2 rounded-lg border-2 transition-all text-sm ${
                          (setupData.dataCollection || []).includes(dataType)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {dataType}
                      </button>
                    ))}
                  </div>
                  <div className="flex gap-3">
                    <button
                      onClick={() => setSetupData({...setupData, dataCollection: []})}
                      className={`px-4 py-2 rounded-lg border-2 transition-all ${
                        (setupData.dataCollection || []).length === 0
                          ? 'border-blue-500 bg-blue-50 text-blue-700' 
                          : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      Не собирать данные
                    </button>
                    <button
                      onClick={() => setSetupData({...setupData, showCustomData: true})}
                      className="px-4 py-2 rounded-lg border-2 border-gray-200 bg-white text-gray-700 hover:border-gray-300"
                    >
                      Добавить данные
                    </button>
                  </div>
                  {setupData.showCustomData && (
                    <div className="mt-3 flex gap-2">
                      <Input
                        value={setupData.customData || ''}
                        onChange={(e) => setSetupData({...setupData, customData: e.target.value})}
                        placeholder="Введите тип данных для сбора"
                        className="flex-1"
                      />
                      <Button 
                        onClick={() => {
                          if (setupData.customData) {
                            const current = setupData.dataCollection || [];
                            setSetupData({
                              ...setupData, 
                              dataCollection: [...current, setupData.customData],
                              customData: '',
                              showCustomData: false
                            });
                          }
                        }}
                        disabled={!setupData.customData}
                      >
                        Добавить
                      </Button>
                    </div>
                  )}
                </div>

                {/* 6. Уточнение и вопросы */}
                <div>
                  <label className="block mb-3 font-medium">6. Уточнение и вопросы</label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                    {[
                      'Если запрос неполный',
                      'Если клиент сомневается',
                      'Если есть риск ошибки',
                      'При выборе продукта или услуги',
                      'Если ответ зависит от тонкостей',
                      'Если клиент проявляет интерес к нескольким вариантам',
                      'Если клиент не понимает предложенное',
                      'Если требуется индивидуальный подбор',
                      'Если клиент задаёт вопросы вне своей компетенции',
                      'Если клиент спрашивает о вещах, которые требует специальных знаний',
                      'При оформлении заявки или заказа',
                      'Перед тем как оформить что-то важное',
                      'Если клиент долго молчит'
                    ].map(question => (
                      <button
                        key={question}
                        onClick={() => {
                          const current = setupData.clarificationQuestions || [];
                          const newQuestions = current.includes(question)
                            ? current.filter(q => q !== question)
                            : [...current, question];
                          setSetupData({...setupData, clarificationQuestions: newQuestions});
                        }}
                        className={`p-3 rounded-lg border-2 transition-all text-left text-sm ${
                          (setupData.clarificationQuestions || []).includes(question)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {question}
                      </button>
                    ))}
                  </div>
                </div>

                {/* 7. Отправка смайликов */}
                <div>
                  <label className="block mb-3 font-medium">7. Отправка смайликов</label>
                  <div className="flex gap-3">
                    {[
                      { text: 'Никогда', emoji: '😐' },
                      { text: 'Редко', emoji: '😊' },
                      { text: 'Часто', emoji: '😄' }
                    ].map(option => (
                      <button
                        key={option.text}
                        onClick={() => setSetupData({...setupData, emojiUsage: option.text})}
                        className={`flex-1 p-4 rounded-lg border-2 transition-all ${
                          setupData.emojiUsage === option.text
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-2xl mb-2">{option.emoji}</div>
                          <div className="font-medium">{option.text}</div>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {setupStep === 3 && (
              <div className="space-y-6">
                <h3 className="text-xl font-semibold">Шаг 3: Этапы диалога</h3>
                <p className="text-gray-600">Опишите идеальный скрипт</p>
                <p className="text-gray-600">Чем лучше вы опишите ваш скрипт, тем лучше ии-агент сможет выполнять задачи.</p>
                
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                  <div className="flex items-start gap-3">
                    <div className="w-6 h-6 bg-blue-500 rounded-[90px] flex items-center justify-center flex-shrink-0 mt-0.5">
                      <span className="text-white text-sm">!</span>
                    </div>
                    <div>
                      <div className="font-medium text-blue-800 mb-1">Уделите время детальному описанию идеального скрипта</div>
                      <div className="text-sm text-blue-700">
                        Это очень важно для хорошей работы вашего ИИ-продажника. Вы сможете скорректировать поведение позже, но правильная настройка сейчас даст лучшие результаты сразу. Ниже представлен шаблон, который вам нужно адаптировать.
                      </div>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  {(setupData.dialogStages || [
                    '🎯 УСТАНОВЛЕНИЕ КОНТАКТА: Поздоровайся тепло, представься как ИИ-помощник. Спроси имя клиента и как дела. Создай дружелюбную атмосферу.',
                    '🔍 ВЫЯСНЕНИЕ ПОТРЕБНОСТЕЙ: Задавай открытые вопросы о проблемах клиента, целях и ситуации. Уточни детали: бюджет, сроки, приоритеты.',
                    '💡 ПРЕЗЕНТАЦИЯ И ЗАКРЫТИЕ: Предложи решение на основе потребностей. Расскажи о преимуществах и выгодах. При возражениях - выясни причину и предложи альтернативы. Когда готов - подведи итоги и предложи оформить заказ.'
                  ]).map((stage, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-start gap-3">
                        <div className="w-6 h-6 bg-gray-500 rounded-[90px] flex items-center justify-center flex-shrink-0 mt-0.5">
                          <span className="text-white text-sm">{index + 1}</span>
                        </div>
                        <div className="flex-1">
                          <Textarea
                            value={stage}
                            onChange={(e) => {
                              const newStages = [...(setupData.dialogStages || [])];
                              newStages[index] = e.target.value;
                              setSetupData({...setupData, dialogStages: newStages, dialogStagesModified: true});
                            }}
                            className="w-full resize-none"
                            rows={2}
                          />
                        </div>
                        <Button 
                          variant="ghost" 
                          size="sm"
                          onClick={() => {
                            const newStages = [...(setupData.dialogStages || [])];
                            newStages.splice(index, 1);
                            setSetupData({...setupData, dialogStages: newStages, dialogStagesModified: true});
                          }}
                        >
                          <img src="/traash.svg" alt="Удалить" className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  ))}
                  
                  <Button 
                    variant="outline" 
                    onClick={() => {
                      const newStages = [...(setupData.dialogStages || []), 'Новый этап диалога'];
                      setSetupData({...setupData, dialogStages: newStages, dialogStagesModified: true});
                    }}
                    className="w-full"
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Добавить этап
                  </Button>
                </div>

                {/* Предупреждение если не изменены этапы */}
                {setupData.dialogStagesModified === false && (
                  <div className="mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                    <div className="flex items-start gap-3">
                      <div className="w-6 h-6 bg-yellow-500 rounded-[90px] flex items-center justify-center flex-shrink-0 mt-0.5">
                        <span className="text-white text-sm">⚠</span>
                      </div>
                      <div>
                        <div className="font-medium text-yellow-800 mb-1">Вы не внесли никаких изменений</div>
                        <div className="text-sm text-yellow-700 mb-3">
                          Он не адаптирован под ваш бизнес это может сказаться на эффективности ии-агента.
                        </div>
                        <div className="flex gap-3">
                          <Button 
                            variant="outline"
                            onClick={() => setSetupData({...setupData, dialogStagesModified: true})}
                          >
                            Внести изменения
                          </Button>
                          <Button 
                            onClick={() => setSetupData({...setupData, dialogStagesModified: true})}
                          >
                            Продолжить без изменений
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}

            {setupStep === 4 && (
              <div className="space-y-6">
                <h3 className="text-xl font-semibold">Шаг 4: Обучение Адапто</h3>
                <p className="text-gray-600">Загрузите минимум 1 ресурс с информацией о компании, чтобы Адапто смог обучиться на ней</p>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {[
                    { id: 'site', name: 'Сайт', description: 'Добавить URL вашего сайта', icon: Globe },
                    { id: 'feed', name: 'Товарный фид', description: 'CSV/XML фид или ссылка на каталог', icon: FileIcon },
                    { id: 'text', name: 'Написать самому', description: 'Ввести информацию вручную', icon: EditIcon },
                    { id: 'file', name: 'Файл', description: 'PDF, Word, Excel, TXT, CSV, XML', icon: Upload }
                  ].map((option) => (
                    <button
                      key={option.id}
                      onClick={() => setSetupData({...setupData, selectedKnowledgeType: option.id})}
                      className="p-4 border border-gray-200 rounded-lg hover:border-blue-300 transition-colors text-left"
                    >
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                          <option.icon className="w-5 h-5 text-blue-600" />
                        </div>
                        <div>
                          <div className="font-medium">{option.name}</div>
                          <div className="text-sm text-gray-600">{option.description}</div>
                        </div>
                      </div>
                    </button>
                  ))}
                </div>

                {/* Поле для ввода в зависимости от выбранного типа */}
                {setupData.selectedKnowledgeType && (
                  <div className="mt-6 p-4 border border-blue-200 rounded-lg bg-blue-50">
                    <h4 className="font-medium mb-3">
                      {setupData.selectedKnowledgeType === 'site' && 'Добавить URL сайта'}
                      {setupData.selectedKnowledgeType === 'feed' && 'Загрузить CSV/XML фид'}
                      {setupData.selectedKnowledgeType === 'text' && 'Ввести информацию вручную'}
                      {setupData.selectedKnowledgeType === 'file' && 'Загрузить файл (PDF, Word, Excel, TXT, CSV, XML)'}
                    </h4>
                    
                    {setupData.selectedKnowledgeType === 'site' && (
                      <div className="space-y-3">
                        <Input
                          value={setupData.knowledgeInput || ''}
                          onChange={(e) => setSetupData({...setupData, knowledgeInput: e.target.value})}
                          placeholder="https://example.com"
                          className="w-full"
                        />
                        <Button 
                          onClick={async () => {
                            if (setupData.knowledgeInput) {
                              const newItem = {
                                type: 'site',
                                content: setupData.knowledgeInput,
                                nicheId: selectedNicheId
                              };
                              await handleAddKnowledgeItem(newItem);
                              setSetupData({
                                ...setupData, 
                                knowledgeInput: '',
                                selectedKnowledgeType: null
                              });
                            }
                          }}
                          disabled={!setupData.knowledgeInput}
                        >
                          Добавить сайт
                        </Button>
                      </div>
                    )}
                    
                    {setupData.selectedKnowledgeType === 'text' && (
                      <div className="space-y-3">
                        <Textarea
                          value={setupData.knowledgeInput || ''}
                          onChange={(e) => setSetupData({...setupData, knowledgeInput: e.target.value})}
                          placeholder="Введите информацию о вашей компании, продуктах, услугах..."
                          className="w-full min-h-[120px]"
                        />
                        <Button 
                          onClick={async () => {
                            if (setupData.knowledgeInput) {
                              const newItem = {
                                type: 'text',
                                content: setupData.knowledgeInput,
                                nicheId: selectedNicheId
                              };
                              await handleAddKnowledgeItem(newItem);
                              setSetupData({
                                ...setupData, 
                                knowledgeInput: '',
                                selectedKnowledgeType: null
                              });
                            }
                          }}
                          disabled={!setupData.knowledgeInput}
                        >
                          Добавить текст
                        </Button>
                      </div>
                    )}
                    
                    {setupData.selectedKnowledgeType === 'file' && (
                      <div className="space-y-3">
                        <Input
                          type="file"
                          onChange={(e) => setSetupData({...setupData, knowledgeInput: e.target.files?.[0]?.name || ''})}
                          className="w-full"
                        />
                        <Button 
                          onClick={async () => {
                            if (setupData.knowledgeInput) {
                              const newItem = {
                                type: 'file',
                                content: setupData.knowledgeInput,
                                nicheId: selectedNicheId
                              };
                              await handleAddKnowledgeItem(newItem);
                              setSetupData({
                                ...setupData, 
                                knowledgeInput: '',
                                selectedKnowledgeType: null
                              });
                            }
                          }}
                          disabled={!setupData.knowledgeInput}
                        >
                          Загрузить файл
                        </Button>
                      </div>
                    )}
                    
                    {setupData.selectedKnowledgeType === 'feed' && (
                      <div className="space-y-3">
                        <Input
                          type="file"
                          accept=".csv,.xml"
                          onChange={(e) => setSetupData({...setupData, knowledgeInput: e.target.files?.[0]?.name || ''})}
                          className="w-full"
                        />
                        <Button 
                          onClick={async () => {
                            if (setupData.knowledgeInput) {
                              const newItem = {
                                type: 'feed',
                                content: setupData.knowledgeInput,
                                nicheId: selectedNicheId
                              };
                              await handleAddKnowledgeItem(newItem);
                              setSetupData({
                                ...setupData, 
                                knowledgeInput: '',
                                selectedKnowledgeType: null
                              });
                            }
                          }}
                          disabled={!setupData.knowledgeInput}
                        >
                          Загрузить CSV/XML фид
                        </Button>
                      </div>
                    )}
                  </div>
                )}

                {setupData.knowledgeItems && setupData.knowledgeItems.length > 0 && (
                  <div className="mt-4">
                    <h4 className="font-medium mb-2">Добавленные ресурсы:</h4>
                    <div className="space-y-2">
                      {setupData.knowledgeItems.map((item, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center gap-3">
                            <div className="w-8 h-8 bg-blue-100 rounded-[90px] flex items-center justify-center">
                              {(item.type === 'site' || item.type === 'website') && <Globe className="w-4 h-4 text-blue-600" />}
                              {item.type === 'text' && <EditIcon className="w-4 h-4 text-blue-600" />}
                              {item.type === 'file' && <FileIcon className="w-4 h-4 text-blue-600" />}
                              {item.type === 'feed' && <FileIcon className="w-4 h-4 text-blue-600" />}
                            </div>
                            <span className="text-sm">{item.content}</span>
                          </div>
                          <div className="text-xs text-green-600">✓ Добавлено</div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Кнопки навигации */}
            <div className="flex justify-between mt-8">
              <Button 
                variant="outline" 
                onClick={() => setSetupStep(Math.max(1, setupStep - 1))}
                disabled={setupStep === 1}
              >
                Назад
              </Button>
              
              {setupStep < 4 ? (
                <Button 
                  onClick={() => {
                    if (setupStep === 3) {
                      // Проверяем, были ли изменения в этапах диалога
                      const originalStages = [
                        'Поздоровайся и спроси имя клиента. Уточни его проблему и пойми текущую ситуацию пользователя',
                        'Опиши коротко как решишь его задачу/назови наши преимущества, предложи товары по запросу',
                        'Веди клиента к оформлению заказа/заявки',
                        'Когда клиент готов оформить заказ, сделай итог заказа и пришли ссылку на оплату из базы знаний.',
                        'Переведи клиента на менеджера для проверки оплаты и дальнейшей работы'
                      ];
                      
                      const currentStages = setupData.dialogStages || [];
                      const hasChanges = currentStages.length !== originalStages.length || 
                        currentStages.some((stage, index) => stage !== originalStages[index]);
                      
                      if (!hasChanges) {
                        setSetupData({...setupData, dialogStagesModified: false});
                      } else {
                        setSetupData({...setupData, dialogStagesModified: true});
                        setSetupStep(setupStep + 1);
                      }
                    } else {
                      setSetupStep(setupStep + 1);
                    }
                  }}
                  disabled={
                    (setupStep === 1 && !setupData.task) ||
                    (setupStep === 2 && (!setupData.addressing || !setupData.communicationStyle)) ||
                    (setupStep === 3 && (!setupData.dialogStages || setupData.dialogStages.length === 0))
                  }
                >
                  Далее
                </Button>
              ) : (
                <Button 
                  onClick={() => {
                    localStorage.setItem('hasShownSetupWizard', 'true');
                    setShowSetupWizard(false);
                    setShowModelSetupProgress(true);
                  }}
                  disabled={!setupData.knowledgeItems || setupData.knowledgeItems.length === 0}
                >
                  Завершить настройку
                </Button>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Model Setup Progress Modal */}
      {showModelSetupProgress && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-white">
          <div className="text-center max-w-md mx-4">
            <div className="mb-8">
              <div className="w-16 h-16 border-4 border-blue-200 border-t-blue-600 rounded-[90px] animate-spin mx-auto mb-4"></div>
                              <h2 className="text-[20px] font-[500] text-gray-800 mb-2">Настраиваем модель</h2>
              <p className="text-gray-600 mb-4">Пожалуйста, подождите. Мы настраиваем вашу модель под ваши требования.</p>
              <div className="text-3xl font-bold text-blue-600 mb-4">
                {Math.floor(modelSetupTimer / 60)}:{(modelSetupTimer % 60).toString().padStart(2, '0')}
              </div>
              
              {/* Прогресс-бар с шагами */}
              <div className="space-y-3">
                <div className="flex items-center justify-between text-sm">
                  <span>Анализ целей и задач</span>
                  <span className="text-green-600">✓</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span>Настройка стиля общения</span>
                  <span className="text-green-600">✓</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span>Создание диалоговых сценариев</span>
                  <span className="text-green-600">✓</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span>Обучение на базе знаний</span>
                  <span className="text-blue-600">⏳</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span>Финальная настройка модели</span>
                  <span className="text-gray-400">○</span>
                </div>
              </div>
            </div>
            
            <div className="w-full bg-gray-200 rounded-[90px] h-2">
              <div 
                className="bg-blue-600 h-2 rounded-[90px] transition-all duration-1000"
                style={{ width: `${((300 - modelSetupTimer) / 300) * 100}%` }}
              ></div>
            </div>
          </div>
        </div>
      )}

      {/* Site Import Popup */}
      {showSitePopup && (
        <div className="fixed inset-0 z-50 flex items-center justify-center" style={{ backgroundColor: 'rgba(7, 15, 26, 0.2)' }} onClick={handleSitePopupClose}>
          <div className="bg-white rounded-[20px] w-[700px] max-h-[90vh] overflow-y-auto relative" onClick={(e) => e.stopPropagation()}>
            <div className="p-[20px]">
              {/* Header */}
              <div className="flex items-center justify-between mb-[12px]">
                <h2 className="text-[20px] font-[500] text-[#070F1A]">Как импортировать знания?</h2>
                <button 
                  onClick={handleSitePopupClose}
                  className="w-8 h-8 flex items-center justify-center hover:bg-gray-100 rounded-[7px] transition-colors"
                >
                  <X className="w-5 h-5 text-gray-500" />
                </button>
              </div>

              {/* Description */}
              <p className="text-[#8E8E93] text-[14px] mb-[30px]">
                Выберите, как вы хотите поделиться знаниями. Это научит ИИ, как отвечать на вопросы, связанные с вашим бизнесом
              </p>

              {/* Tabs */}
              <div className="flex gap-[20px] mb-[30px]">
                {/* Tab 1: Сканировать весь сайт */}
                                  <div 
                    className={`w-[315px] h-[84px] border rounded-[15px] cursor-pointer transition-all ${
                      sitePopupTab === 'full' 
                        ? 'border-[#0084FF]/60 bg-[#FFFFFF]' 
                        : 'border-[#070F1A]/10 bg-white'
                    }`}
                    onClick={() => setSitePopupTab('full')}
                  >
                    <div className="h-full flex flex-col items-center justify-center">
                      <h3 className={`text-[16px] font-[500] mb-2 ${
                        sitePopupTab === 'full' ? 'text-[#070F1A]' : 'text-[#8E8E93]/70'
                      }`}>
                        Сканировать весь сайт
                      </h3>
                      <p className={`text-[12px] font-[400] text-center px-4 ${
                        sitePopupTab === 'full' ? 'text-[#8E8E93]' : 'text-[#8E8E93]/70'
                      }`}>
                        ИИ будет брать знания со всех страниц сайта
                      </p>
                    </div>
                  </div>

                {/* Tab 2: Сканировать страницы */}
                                  <div 
                    className={`w-[315px] h-[84px] border rounded-[15px] cursor-pointer transition-all ${
                      sitePopupTab === 'selective' 
                        ? 'border-[#0084FF]/60 bg-[#FFFFFF]' 
                        : 'border-[#070F1A]/10 bg-white'
                    }`}
                    onClick={() => setSitePopupTab('selective')}
                  >
                    <div className="h-full flex flex-col items-center justify-center">
                      <h3 className={`text-[16px] font-[500] mb-2 ${
                        sitePopupTab === 'selective' ? 'text-[#070F1A]' : 'text-[#8E8E93]/70'
                      }`}>
                        Сканировать страницы
                      </h3>
                      <p className={`text-[12px] font-[400] text-center px-4 ${
                        sitePopupTab === 'selective' ? 'text-[#8E8E93]' : 'text-[#8E8E93]/70'
                      }`}>
                        Выберите определенные страницы сайта
                      </p>
                    </div>
                  </div>
              </div>

              {/* Tab Content */}
              {sitePopupTab === 'full' ? (
                <div className="space-y-[30px]">
                  <div>
                    <h3 className="text-[18px] font-[500] text-[#070F1A] mb-[20px]">Предоставить URL-адрес</h3>
                  <div className={`w-[650px] h-[34px] bg-white border rounded-[10px] flex items-center px-3 ${
                      siteUrlError ? 'border-red-500' : 'border-[#070F1A]/10'
                    }`} style={INPUT_STYLES.inputField}>
                      <input
                        type="url"
                        value={siteUrl}
                        onChange={(e) => handleSiteUrlChange(e.target.value)}
                        placeholder="https://mypage.com"
                        className="flex-1 bg-transparent text-[13px] font-[500] text-[#070F1A] placeholder-[#070F1A]/30 outline-none"
                      />
                    </div>
                    {siteUrlError && (
                      <p className="text-red-500 text-[12px] mt-1">{siteUrlError}</p>
                    )}
                  </div>
                </div>
              ) : (
                <div className="space-y-[30px]">
                  <div>
                    <h3 className="text-[18px] font-[500] text-[#070F1A] mb-[20px]">Предоставить URL-адреса страниц</h3>
                    
                                          {selectedPages.map((page, index) => (
                        <div key={index} className="flex items-center gap-2 mb-2">
                          <div className={`w-[650px] h-[40px] bg-white border rounded-[10px] flex items-center px-3 ${
                            selectedPagesErrors[index] ? 'border-red-500' : 'border-[#070F1A]/10'
                          }`} style={INPUT_STYLES.inputField}>
                            <input
                              type="url"
                              value={page}
                              onChange={(e) => handlePageChange(index, e.target.value)}
                              placeholder="https://mypage.com"
                              className="flex-1 bg-transparent text-[13px] font-[500] text-[#070F1A] placeholder-[#070F1A]/30 outline-none"
                            />
                          </div>
                          {selectedPages.length > 1 && (
                            <button
                              onClick={() => handleRemovePage(index)}
                              className="w-8 h-8 flex items-center justify-center text-red-500 hover:bg-red-50 rounded-[8px] transition-colors"
                            >
                              <img src="/traash.svg" alt="Удалить" className="w-4 h-4" />
                            </button>
                          )}
                          {selectedPagesErrors[index] && (
                            <p className="text-red-500 text-[12px] mt-1">{selectedPagesErrors[index]}</p>
                          )}
                        </div>
                      ))}
                    
                    <button
                      onClick={handleAddPage}
                      className="h-[34px] px-4 bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0084FF]/80 transition-colors text-[13px] font-[500]"
                      style={BUTTON_STYLES.blueButton}
                    >
                      Добавить страницу
                    </button>
                  </div>
                </div>
              )}

              {/* Footer */}
              <div className="mt-[10px]">
                <p className="text-[10px] text-[#8E8E93] mb-[30px]">
                  Этот процесс может занять несколько минут и будет продолжаться в фоновом режиме.
                </p>
                <div className="flex justify-center">
                                      <button
                      onClick={handleSiteImport}
                      disabled={
                        (sitePopupTab === 'full' && (siteUrlError || !siteUrl.trim())) ||
                        (sitePopupTab === 'selective' && (selectedPagesErrors.some(err => err) || selectedPages.filter(p => p.trim()).length === 0))
                      }
                    className="w-[650px] h-[34px] bg-[#0084FF] text-white font-[500] text-[13px] rounded-[10px] hover:opacity-90 transition-opacity disabled:opacity-50 disabled:cursor-not-allowed"
                    style={BUTTON_STYLES.blueButton}
                    >
                      Начать импорт
                    </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Feed Import Popup */}
      {showFeedPopup && (
        <div className="fixed inset-0 bg-black bg-opacity-20 flex items-center justify-center z-50" onClick={handleFeedPopupClose}>
          <div className="bg-white rounded-[20px] w-[700px] p-[20px]" onClick={(e)=>e.stopPropagation()}>
            {/* Header */}
            <div className="flex justify-between items-start mb-[12px]">
              <h2 className="text-[20px] font-[500] text-[#070F1A]">Загрузите товарный фид</h2>
              <button
                onClick={handleFeedPopupClose}
                className="w-8 h-8 flex items-center justify-center hover:bg-gray-100 rounded-[7px] transition-colors"
              >
                <X className="w-5 h-5 text-gray-500" />
              </button>
            </div>

            {/* Description */}
            <p className="text-[#8E8E93] text-[14px] mb-[30px]">
              Вставьте ссылку на товарный фид (CSV/XML) или загрузите файл каталога
            </p>

            {/* Content */}
            <div className="space-y-[30px]">
              <div>
                <div className={`w-[650px] h-[34px] bg-white border rounded-[10px] flex items-center px-3 ${
                  feedUrlError ? 'border-red-500' : 'border-[#070F1A]/10'
                }`} style={INPUT_STYLES.inputField}>
                  <input
                    type="url"
                    value={feedUrl}
                    onChange={(e) => handleFeedUrlChange(e.target.value)}
                    placeholder="https://example.com/feed.xml или https://example.com/products.csv"
                    className="flex-1 bg-transparent text-[13px] font-[500] text-[#070F1A] placeholder-[#070F1A]/30 outline-none"
                  />
                </div>
                {feedUrlError && (
                  <p className="text-red-500 text-[12px] mt-1">{feedUrlError}</p>
                )}
              </div>
            </div>

            {/* Footer */}
              <div className="mt-[10px]">
              <p className="text-[10px] text-[#8E8E93] mb-[30px]">
                Этот процесс может занять несколько минут и будет продолжаться в фоновом режиме.
              </p>
              <div className="flex justify-center">
                <button
                  onClick={handleFeedImport}
                  disabled={feedUrlError || !feedUrl.trim()}
                  className="w-[650px] h-[34px] bg-[#0084FF] text-white font-[500] text-[13px] rounded-[10px] hover:opacity-90 transition-opacity disabled:opacity-50 disabled:cursor-not-allowed"
                  style={BUTTON_STYLES.blueButton}
                >
                  Начать импорт
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* File Import Popup */}
      {showFilePopup && (
        <div className="fixed inset-0 bg-black bg-opacity-20 flex items-center justify-center z-50" onClick={handleFilePopupClose}>
          <div className="bg-white rounded-[20px] w-[700px] p-[20px]" onClick={(e)=>e.stopPropagation()}>
            {/* Header */}
            <div className="flex justify-between items-start mb-[12px]">
              <h2 className="text-[20px] font-[500] text-[#070F1A]">Прикрепите файлы для импорта</h2>
              <button
                onClick={handleFilePopupClose}
                className="w-8 h-8 flex items-center justify-center hover:bg-gray-100 rounded-[7px] transition-colors"
              >
                <X className="w-5 h-5 text-gray-500" />
              </button>
            </div>

            {/* Description */}
            <p className="text-[#8E8E93] text-[14px] mb-[30px]">
              Поддерживается загрузка файлов формата: .docx, .doc, .pdf, .txt, .xls, .xlsx, .csv, .xml
            </p>

            {/* File Upload Area */}
            <div className="space-y-[30px]">
              <div className="border-2 border-dashed border-[#070F1A]/10 rounded-[10px] p-8 text-center">
                <input
                  type="file"
                  multiple
                  accept=".docx,.doc,.pdf,.txt,.xls,.xlsx,.csv,.xml"
                  onChange={handleFileSelect}
                  className="hidden"
                  id="file-upload"
                />
                <label htmlFor="file-upload" className="cursor-pointer">
                  <div className="space-y-4">
                    <div className="mx-auto w-12 h-12 bg-gray-100 rounded-[90px] flex items-center justify-center">
                      <Upload className="w-6 h-6 text-gray-400" />
                    </div>
                    <div>
                      <p className="text-[16px] font-[500] text-[#070F1A]">Прикрепить файл</p>
                      <p className="text-[12px] text-[#8E8E93] mt-1">Максимум: 3 файла, 100 мегабайт за одну отправку.</p>
                    </div>
                  </div>
                </label>
              </div>

              {/* Selected Files */}
              {selectedFiles.length > 0 && (
                <div className="space-y-4">
                  <div className="space-y-2">
                    {selectedFiles.map((file, index) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-[10px]">
                        <div className="flex items-center gap-3">
                          <FileIcon className="w-5 h-5 text-blue-500" />
                          <span className="text-sm text-gray-700">{file.name}</span>
                        </div>
                        <button
                          onClick={() => handleRemoveFile(index)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <X className="w-4 h-4" />
                        </button>
                      </div>
                    ))}
                  </div>
                  
                  {/* Upload Button */}
                  <div className="flex justify-end">
                    <button
                      onClick={handleFileUpload}
                      className="px-6 py-2 bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors font-[500] text-[13px] flex items-center gap-2"
                      style={BUTTON_STYLES.blueButton}
                    >
                      <Upload className="w-4 h-4" />
                      Загрузить в базу знаний
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Text Import Popup */}
      {showTextPopup && (
        <div className="fixed inset-0 bg-black bg-opacity-20 flex items-center justify-center z-50" onClick={handleTextPopupClose}>
          <div className="bg-white rounded-[20px] w-[700px] p-[20px]" onClick={(e)=>e.stopPropagation()}>
            {/* Header */}
            <div className="flex justify-between items-start mb-[12px]">
              <h2 className="text-[20px] font-[500] text-[#070F1A]">Добавить текст в базу знаний</h2>
              <button
                onClick={handleTextPopupClose}
                className="w-8 h-8 flex items-center justify-center hover:bg-gray-100 rounded-[7px] transition-colors"
              >
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ color: '#8E8E93' }}>
                  <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"></path>
                </svg>
              </button>
            </div>

            {/* Description */}
            <p className="text-[#8E8E93] text-[14px] mb-[30px]">
              Введите текстовую информацию, которую должен знать ИИ-агент при общении с клиентами
            </p>

            {/* Text Input */}
            <div className="space-y-[20px]">
              <div>
                <textarea
                  value={textContent}
                  onChange={(e) => handleTextContentChange(e.target.value)}
                  placeholder="Введите информацию о вашей компании, услугах, ценах, условиях работы и т.д."
                  className={`w-full h-[200px] p-4 border rounded-[10px] text-[13px] resize-none ${
                    textContentError ? 'border-red-500' : 'border-[#070F1A]/10 focus:outline-none'
                  }`}
                  style={INPUT_STYLES.inputField}
                />
                {textContentError && (
                  <p className="text-red-500 text-[12px] mt-2">{textContentError}</p>
                )}
              </div>
            </div>

            {/* Button */}
            <div className="mt-[20px]">
              <button
                onClick={async () => {
                  if (!textContent.trim()) {
                    setTextContentError('Поле обязательно для заполнения');
                    return;
                  }
                  
                  const newItem = {
                    type: 'text',
                    content: textContent.trim(),
                    status: 'Загружено'
                  };
                  
                  await handleAddKnowledgeItem(newItem);
                  handleTextPopupClose();
                }}
                disabled={(textContent || '').trim().length < 50}
                className="w-full h-[34px] text-[13px] font-[500] text-white bg-[#0084FF] rounded-[10px] hover:bg-[#0073E6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                style={BUTTON_STYLES.blueButton}
              >
                Добавить в базу знаний
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Knowledge Details Popup */}
      {showKnowledgeDetailsPopup && selectedKnowledgeDetails && (
        <div className="fixed inset-0 bg-black bg-opacity-20 flex items-center justify-center z-50" onClick={() => setShowKnowledgeDetailsPopup(false)}>
          <div className="bg-white rounded-[20px] w-[800px] max-h-[90vh] overflow-y-auto" onClick={(e) => e.stopPropagation()}>
            {/* Header */}
            <div className="flex justify-between items-start mb-[20px] p-[20px] border-b border-[#070F1A]/10">
              <div>
                <h2 className="text-[20px] font-[500] text-[#070F1A] mb-2">Подробности источника</h2>
                <div className="flex items-center gap-2">
                  <div className="h-[24px] px-2 rounded-[7px] bg-gray-100 flex items-center gap-[2px]">
                    <img 
                      src={
                        (selectedKnowledgeDetails.source_type || selectedKnowledgeDetails.type) === 'site' ? '/global2.svg' :
                        (selectedKnowledgeDetails.source_type || selectedKnowledgeDetails.type) === 'feed' ? '/document-code.svg' :
                        (selectedKnowledgeDetails.source_type || selectedKnowledgeDetails.type) === 'text' ? '/edit-2.svg' :
                        '/document-copy.svg'
                      }
                      alt={selectedKnowledgeDetails.type}
                      className="w-[10px] h-[10px]"
                    />
                    <span className="text-[12px] font-[400] text-[#070F1A]">
                      {(selectedKnowledgeDetails.source_type || selectedKnowledgeDetails.type) === 'site' && 'Сайт'}
                      {(selectedKnowledgeDetails.source_type || selectedKnowledgeDetails.type) === 'feed' && 'Товарный фид'}
                      {(selectedKnowledgeDetails.source_type || selectedKnowledgeDetails.type) === 'text' && 'Текст'}
                      {(selectedKnowledgeDetails.source_type || selectedKnowledgeDetails.type) === 'file' && 'Файл'}
                      {(selectedKnowledgeDetails.source_type || selectedKnowledgeDetails.type) === 'website' && 'Сайт'}
                    </span>
                  </div>
                  <div className={`h-[24px] px-3 rounded-[50px] flex items-center gap-2 ${
                    selectedKnowledgeDetails.status === 'Загружено' ? 'bg-[#36C76A]/15 text-[#36C76A]' :
                    selectedKnowledgeDetails.status === 'Обработка' ? 'bg-[#0084FF]/15 text-[#0084FF]' :
                    selectedKnowledgeDetails.status === 'Ошибка' ? 'bg-[#FF3B30]/15 text-[#FF3B30]' :
                    'bg-[#0084FF]/15 text-[#0084FF]'
                  }`}>
                    <span className="text-[12px] font-[400]">
                      {selectedKnowledgeDetails.status || 'Обработка...'}
                    </span>
                  </div>
                </div>
              </div>
              <button
                onClick={() => setShowKnowledgeDetailsPopup(false)}
                className="w-8 h-8 flex items-center justify-center hover:bg-gray-100 rounded-[7px] transition-colors"
              >
                <X className="w-5 h-5 text-gray-500" />
              </button>
            </div>

            {/* Content */}
            <div className="p-[20px] space-y-6">
              {/* Title */}
              {selectedKnowledgeDetails.title && (
                <div>
                  <h3 className="text-[16px] font-[500] text-[#070F1A] mb-2">Название</h3>
                  <p className="text-[14px] text-[#070F1A] bg-gray-50 p-3 rounded-[10px]">
                    {selectedKnowledgeDetails.title}
                  </p>
                </div>
              )}

              {/* URL */}
              {selectedKnowledgeDetails.source_url && (
                <div>
                  <h3 className="text-[16px] font-[500] text-[#070F1A] mb-2">URL</h3>
                  <p className="text-[14px] text-[#0084FF] bg-gray-50 p-3 rounded-[10px] break-all">
                    <a href={selectedKnowledgeDetails.source_url} target="_blank" rel="noopener noreferrer" className="hover:underline">
                      {selectedKnowledgeDetails.source_url}
                    </a>
                  </p>
                </div>
              )}

              {/* Original Content */}
              {selectedKnowledgeDetails.original_content && (
                <div>
                  <h3 className="text-[16px] font-[500] text-[#070F1A] mb-2">Исходный контент</h3>
                  <div className="bg-gray-50 p-4 rounded-[10px] max-h-[300px] overflow-y-auto">
                    <pre className="text-[13px] text-[#070F1A] whitespace-pre-wrap font-sans">
                      {selectedKnowledgeDetails.original_content}
                    </pre>
                  </div>
                </div>
              )}

              {/* Processed Content */}
              {selectedKnowledgeDetails.processed_content && selectedKnowledgeDetails.processed_content !== selectedKnowledgeDetails.original_content && (
                <div>
                  <h3 className="text-[16px] font-[500] text-[#070F1A] mb-2">Обработанный контент</h3>
                  <div className="bg-blue-50 p-4 rounded-[10px] max-h-[300px] overflow-y-auto">
                    <pre className="text-[13px] text-[#070F1A] whitespace-pre-wrap font-sans">
                      {selectedKnowledgeDetails.processed_content}
                    </pre>
                  </div>
                </div>
              )}

              {/* Structured Data */}
              {selectedKnowledgeDetails.structured_data && Object.keys(selectedKnowledgeDetails.structured_data).length > 0 && (
                <div>
                  <h3 className="text-[16px] font-[500] text-[#070F1A] mb-2">Структурированные данные</h3>
                  <div className="bg-green-50 p-4 rounded-[10px] max-h-[300px] overflow-y-auto">
                    <pre className="text-[13px] text-[#070F1A] whitespace-pre-wrap">
                      {JSON.stringify(selectedKnowledgeDetails.structured_data, null, 2)}
                    </pre>
                  </div>
                </div>
              )}

              {/* Chunks */}
              {selectedKnowledgeDetails.chunks && selectedKnowledgeDetails.chunks.length > 0 && (
                <div>
                  <h3 className="text-[16px] font-[500] text-[#070F1A] mb-2">
                    Созданные чанки ({selectedKnowledgeDetails.chunks.length})
                  </h3>
                  <div className="space-y-3 max-h-[400px] overflow-y-auto">
                    {selectedKnowledgeDetails.chunks.map((chunk, index) => (
                      <div key={index} className="bg-yellow-50 p-3 rounded-[10px] border border-yellow-200">
                        <div className="flex justify-between items-start mb-2">
                          <span className="text-[12px] font-[500] text-[#070F1A]">Чанк {index + 1}</span>
                          {chunk.tokens_estimate && (
                            <span className="text-[12px] text-[#8E8E93]">{chunk.tokens_estimate} токенов</span>
                          )}
                        </div>
                        <p className="text-[13px] text-[#070F1A] mb-2">
                          {chunk.chunk_text?.substring(0, 200)}
                          {chunk.chunk_text?.length > 200 && '...'}
                        </p>
                        {chunk.chunk_summary && (
                          <p className="text-[12px] text-[#8E8E93] italic">
                            Резюме: {chunk.chunk_summary}
                          </p>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Metadata */}
              <div className="grid grid-cols-2 gap-4">
                {selectedKnowledgeDetails.created_at && (
                  <div>
                    <h3 className="text-[16px] font-[500] text-[#070F1A] mb-2">Дата создания</h3>
                    <p className="text-[14px] text-[#8E8E93]">
                      {new Date(selectedKnowledgeDetails.created_at).toLocaleString('ru-RU')}
                    </p>
                  </div>
                )}
                {selectedKnowledgeDetails.updated_at && (
                  <div>
                    <h3 className="text-[16px] font-[500] text-[#070F1A] mb-2">Последнее обновление</h3>
                    <p className="text-[14px] text-[#8E8E93]">
                      {new Date(selectedKnowledgeDetails.updated_at).toLocaleString('ru-RU')}
                    </p>
                  </div>
                )}
              </div>
            </div>

            {/* Footer */}
            <div className="p-[20px] border-t border-[#070F1A]/10">
              <div className="flex justify-end">
                <button
                  onClick={() => setShowKnowledgeDetailsPopup(false)}
                  className="h-[34px] px-6 text-[13px] font-[500] text-[#070F1A] bg-gray-100 rounded-[10px] hover:bg-gray-200 transition-colors"
                >
                  Закрыть
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Боковая панель для деталей клиента */}
      {clientSidebarOpen && selectedClient && (
        <>
          <div 
            className="fixed inset-0 bg-black bg-opacity-50 z-[9998]"
            style={{ marginTop: 0 }}
            onClick={() => setClientSidebarOpen(false)}
          />
          <div className="fixed right-0 top-0 h-full w-[500px] bg-white shadow-2xl z-[9999] transform transition-transform duration-300 ease-in-out" style={{ borderTopLeftRadius: '20px', borderBottomLeftRadius: '20px', marginTop: 0 }}>
            <div className="h-full flex flex-col">
              {/* Заголовок панели */}
              <div className="flex items-center justify-between p-6 border-b border-[#E5E7EB]">
                <h2 className="text-[18px] font-[500] text-[#070F1A]">Детали клиента</h2>
                <button 
                  onClick={() => setClientSidebarOpen(false)}
                  className="w-8 h-8 rounded-[90px] bg-gray-100 flex items-center justify-center hover:bg-gray-200 transition-colors"
                >
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ color: '#8E8E93' }}>
                    <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"></path>
                  </svg>
                </button>
              </div>
              
              {/* Контент панели */}
              <div className="flex-1 overflow-y-auto p-6 space-y-6">
                {/* Информация о клиенте */}
                <div>
                  <h4 className="text-[16px] font-[500] text-[#070F1A] mb-3">Контактная информация</h4>
                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span className="text-[14px] font-[500] text-[#070F1A]">Телефон:</span>
                      <span className="text-[12px] text-[#070F1A]">{selectedClient.phone}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-[14px] font-[500] text-[#070F1A]">Email:</span>
                      <span className="text-[12px] text-[#0084FF]">{selectedClient.email}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-[14px] font-[500] text-[#070F1A]">Компания:</span>
                      <span className="text-[12px] text-[#070F1A]">{selectedClient.company}</span>
                    </div>
                  </div>
                </div>

                {/* Действия */}
                <div className="space-y-3">
                  <button 
                    onClick={() => setCreateTaskModalOpen(true)}
                    className="w-full h-[34px] bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors flex items-center justify-center"
                    style={BUTTON_STYLES.blueButton}
                  >
                    Создать задачу
                  </button>
                  <button 
                    className="w-full h-[34px] text-[#070F1A] rounded-[10px] hover:bg-gray-50 transition-colors flex items-center justify-center"
                    style={BUTTON_STYLES.whiteButton}
                  >
                    Перейти в диалог
                  </button>
                  <button 
                    onClick={() => handleDeleteClient(selectedClient.phone)}
                    className="w-full h-[34px] bg-red-50 border border-red-100 text-red-500 rounded-[10px] text-[14px] font-[500] hover:bg-red-100 transition-colors flex items-center justify-center"
                  >
                    Удалить клиента
                  </button>
                </div>
              </div>
            </div>
          </div>
        </>
      )}

      {/* Модальное окно создания сделки */}
      {createDealModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-10 z-[9998]" style={{ marginTop: 0 }} onClick={() => setCreateDealModalOpen(false)}>
          <div className="fixed right-0 top-0 h-full w-[500px] bg-white shadow-2xl z-[9999] transform transition-transform duration-300 ease-in-out" style={{ borderTopLeftRadius: '16px', borderBottomLeftRadius: '16px', marginTop: 0 }} onClick={(e) => e.stopPropagation()}>
            <div className="h-full flex flex-col">
              {/* Заголовок */}
              <div className="flex items-center justify-between p-5 border-b border-[#E5E7EB]">
                <h2 className="text-[18px] font-[500] text-[#070F1A]">Создать сделку</h2>
                <button onClick={() => setCreateDealModalOpen(false)} className="w-8 h-8 flex items-center justify-center hover:bg-gray-100 rounded-[7px] transition-colors">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ color: '#8E8E93' }}>
                    <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"></path>
                  </svg>
                </button>
              </div>
              
              {/* Форма */}
              <div className="flex-1 overflow-y-auto p-5 space-y-4">
                {/* Название сделки */}
                <div>
                  <label className="block text-[13px] font-[500] text-[#070F1A] mb-2">Название сделки</label>
                  <input
                    type="text"
                    value={newDeal.title}
                    onChange={(e) => setNewDeal(prev => ({ ...prev, title: e.target.value }))}
                    placeholder="Введите название сделки"
                    className="w-full h-[34px] px-3 border border-[#E5E7EB] rounded-[10px] text-[14px] focus:outline-none placeholder-[#8E8E93]"
                  />
                </div>

                {/* Стадия (кастом) */}
                <div className="relative">
                  <label className="block text-[13px] font-[500] text-[#070F1A] mb-2">Стадия</label>
                  <button
                    onClick={() => setCrmDropdowns(prev => ({...prev, dealStage: !prev.dealStage}))}
                    className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20 flex items-center justify-between"
                  >
                    <span>{newDeal.stage || 'Выберите стадию'}</span>
                    <img src="/Bounds.svg" alt="Раскрыть" className="w-[9px] h-[9px] transition-transform duration-300" style={{ transform: (crmDropdowns?.dealStage ? 'rotate(-90deg)' : 'rotate(90deg)'), filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)' }} />
                  </button>
                  {crmDropdowns?.dealStage && (
                    <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-[#070F1A]/10 rounded-[10px] shadow-lg z-50">
                      <div className="p-[2px]">
                        {['Новые','В работе','Согласование','Закрытые'].map(opt => {
                          const isSelected = newDeal.stage === opt;
                          return (
                            <div
                              key={opt}
                            className={`flex items-center gap-2 p-2 rounded-[10px] cursor-pointer h-[32px] ${isSelected ? 'bg-[#F2F3F4]' : 'hover:bg-[#F2F3F4]'}`}
                              onMouseDown={(e) => { e.preventDefault(); e.stopPropagation(); setNewDeal(prev => ({...prev, stage: opt})); setCrmDropdowns(prev => ({...prev, dealStage:false})); }}
                            >
                              {isSelected && (
                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" className="w-3 h-3">
                                  <path d="M 1.5 6 L 4.5 9 L 10.5 3" fill="transparent" strokeWidth="1.5" stroke="currentColor" strokeLinecap="round" strokeMiterlimit="10" strokeDasharray=""></path>
                                </svg>
                              )}
                              <span className="text-[13px] text-[#070F1A]">{opt}</span>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  )}
                </div>

                {/* Качество лида (кастом) */}
                <div className="relative">
                  <label className="block text-[13px] font-[500] text-[#070F1A] mb-2">Качество лида</label>
                  <button
                    onClick={() => setCrmDropdowns(prev => ({...prev, leadQualityDeal: !prev.leadQualityDeal}))}
                    className="w-full h-[34px] px-3 border border-[#070F1A]/10 rounded-[10px] text-[14px] text-[#070F1A] focus:outline-none focus:ring-2 focus:ring-[#0084FF]/20 flex items-center justify-between"
                  >
                    <span>{newDeal.leadQuality === 'hot' ? 'Горячий' : newDeal.leadQuality === 'warm' ? 'Теплый' : newDeal.leadQuality === 'cold' ? 'Холодный' : 'Выберите качество'}</span>
                    <img src="/Bounds.svg" alt="Раскрыть" className="w-[9px] h-[9px] transition-transform duration-300" style={{ transform: (crmDropdowns?.leadQualityDeal ? 'rotate(-90deg)' : 'rotate(90deg)'), filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)' }} />
                  </button>
                  {crmDropdowns?.leadQualityDeal && (
                    <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-[#070F1A]/10 rounded-[10px] shadow-lg z-50">
                      <div className="p-[2px]">
                        {[
                          {key:'hot', label:'Горячий'},
                          {key:'warm', label:'Теплый'},
                          {key:'cold', label:'Холодный'}
                        ].map(opt => {
                          const isSelected = newDeal.leadQuality === opt.key;
                          return (
                            <div
                              key={opt.key}
                            className={`flex items-center gap-2 p-2 rounded-[10px] cursor-pointer h-[32px] ${isSelected ? 'bg-[#F2F3F4]' : 'hover:bg-[#F2F3F4]'}`}
                              onMouseDown={(e) => { e.preventDefault(); e.stopPropagation(); setNewDeal(prev => ({...prev, leadQuality: opt.key})); setCrmDropdowns(prev => ({...prev, leadQualityDeal:false})); }}
                            >
                              {isSelected && (
                                <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" className="w-3 h-3">
                                  <path d="M 1.5 6 L 4.5 9 L 10.5 3" fill="transparent" strokeWidth="1.5" stroke="currentColor" strokeLinecap="round" strokeMiterlimit="10" strokeDasharray=""></path>
                                </svg>
                              )}
                              <span className="text-[13px] text-[#070F1A]">{opt.label}</span>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  )}
                </div>

                {/* Сумма */}
                <div>
                  <label className="block text-[13px] font-[500] text-[#070F1A] mb-2">Сумма (₽)</label>
                  <input
                    type="number"
                    value={newDeal.amount}
                    onChange={(e) => setNewDeal(prev => ({ ...prev, amount: e.target.value }))}
                    placeholder="Введите сумму"
                    className="w-full h-[34px] px-3 border border-[#E5E7EB] rounded-[10px] text-[14px] focus:outline-none placeholder-[#8E8E93]"
                  />
                </div>

                {/* Информация о клиенте */}
                <div>
                  <h4 className="text-[13px] font-[500] text-[#070F1A] mb-3">Информация о клиенте</h4>
                  <div className="space-y-3">
                    <input
                      type="text"
                      value={newDeal.client.name}
                      onChange={(e) => setNewDeal(prev => ({ ...prev, client: { ...prev.client, name: e.target.value } }))}
                      placeholder="Имя клиента"
                      className="w-full h-[34px] px-3 border border-[#E5E7EB] rounded-[10px] text-[14px] focus:outline-none placeholder-[#8E8E93]"
                    />
                    <input
                      type="email"
                      value={newDeal.client.email}
                      onChange={(e) => setNewDeal(prev => ({ ...prev, client: { ...prev.client, email: e.target.value } }))}
                      placeholder="Email клиента"
                      className="w-full h-[34px] px-3 border border-[#E5E7EB] rounded-[10px] text-[14px] focus:outline-none placeholder-[#8E8E93]"
                    />
                    <input
                      type="tel"
                      value={newDeal.client.phone}
                      onChange={(e) => {
                        let value = e.target.value.replace(/\D/g, '');
                        if (value.length > 0) {
                          if (value.length <= 1) {
                            value = '+7 (' + value;
                          } else if (value.length <= 4) {
                            value = '+7 (' + value.slice(1);
                          } else if (value.length <= 7) {
                            value = '+7 (' + value.slice(1, 4) + ') ' + value.slice(4);
                          } else if (value.length <= 9) {
                            value = '+7 (' + value.slice(1, 4) + ') ' + value.slice(4, 7) + '-' + value.slice(7);
                          } else if (value.length <= 11) {
                            value = '+7 (' + value.slice(1, 4) + ') ' + value.slice(4, 7) + '-' + value.slice(7, 9) + '-' + value.slice(9);
                          } else {
                            value = '+7 (' + value.slice(1, 4) + ') ' + value.slice(4, 7) + '-' + value.slice(7, 9) + '-' + value.slice(9, 11);
                          }
                        }
                        setNewDeal(prev => ({ ...prev, client: { ...prev.client, phone: value } }));
                      }}
                      placeholder="+7 (___) ___-__-__"
                      className="w-full h-[34px] px-3 border border-[#E5E7EB] rounded-[10px] text-[14px] focus:outline-none placeholder-[#8E8E93]"
                    />
                    <input
                      type="text"
                      value={newDeal.client.address || ''}
                      onChange={(e) => setNewDeal(prev => ({ ...prev, client: { ...prev.client, address: e.target.value } }))}
                      placeholder="Адрес клиента"
                      className="w-full h-[34px] px-3 border border-[#E5E7EB] rounded-[10px] text-[14px] focus:outline-none placeholder-[#8E8E93]"
                    />
                    <input
                      type="text"
                      value={newDeal.client.company}
                      onChange={(e) => setNewDeal(prev => ({ ...prev, client: { ...prev.client, company: e.target.value } }))}
                      placeholder="Компания клиента"
                      className="w-full h-[34px] px-3 border border-[#E5E7EB] rounded-[10px] text-[14px] focus:outline-none placeholder-[#8E8E93]"
                    />
                  </div>
                </div>

                {/* Заметки */}
                <div>
                  <label className="block text-[14px] font-[500] text-[#070F1A] mb-2">Заметки</label>
                  <textarea
                    value={newDeal.notes}
                    onChange={(e) => setNewDeal(prev => ({ ...prev, notes: e.target.value }))}
                    placeholder="Дополнительная информация о сделке"
                    rows={3}
                    className="w-full px-3 py-2 border border-[#E5E7EB] rounded-[10px] text-[14px] focus:outline-none focus:border-[#0084FF] resize-none"
                  />
                </div>
              </div>

              {/* Кнопки */}
              <div className="p-5 border-t border-[#E5E7EB] flex flex-col gap-2">
                <button
                  onClick={() => {
                    const email = (newDeal?.client?.email || '').trim();
                    const phone = (newDeal?.client?.phone || '').trim();
                    const emailValid = email === '' || /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
                    const phoneDigits = phone.replace(/[^\d+]/g, '');
                    const phoneValid = phone === '' || /^\+?\d{10,15}$/.test(phoneDigits);
                    if (!emailValid) {
                      alert('Введите корректный email');
                      return;
                    }
                    if (!phoneValid) {
                      alert('Введите корректный телефон (10-15 цифр, допускается +)');
                      return;
                    }
                    handleCreateDeal();
                  }}
                  className="w-full h-[34px] bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors"
                  style={BUTTON_STYLES.blueButton}
                >
                  Создать сделку
                </button>
                <button
                  onClick={() => setCreateDealModalOpen(false)}
                  className="w-full h-[34px] text-gray-600 rounded-[10px] hover:bg-gray-200 transition-colors"
                  style={BUTTON_STYLES.whiteButton}
                >
                  Отмена
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Модальное окно создания задачи */}
      {createTaskModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-[9998]" style={{ marginTop: 0 }} onClick={() => setCreateTaskModalOpen(false)}>
          <div className="fixed right-0 top-0 h-full w-[500px] bg-white shadow-2xl z-[9999] transform transition-transform duration-300 ease-in-out" style={{ borderTopLeftRadius: '20px', borderBottomLeftRadius: '20px', marginTop: 0 }} onClick={(e) => e.stopPropagation()}>
            <div className="h-full flex flex-col">
              {/* Заголовок */}
              <div className="flex items-center justify-between p-6 border-b border-[#E5E7EB]">
                <h2 className="text-[18px] font-[500] text-[#070F1A]">Создать задачу</h2>
                <button onClick={() => setCreateTaskModalOpen(false)} className="w-8 h-8 rounded-[90px] bg-gray-100 flex items-center justify-center hover:bg-gray-200 transition-colors">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{ color: '#8E8E93' }}>
                    <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"></path>
                  </svg>
                </button>
              </div>
              
              {/* Форма */}
              <div className="flex-1 overflow-y-auto p-6 space-y-4">
                {/* Название задачи */}
                <div>
                  <label className="block text-[14px] font-[500] text-[#070F1A] mb-2">Название задачи</label>
                  <input
                    type="text"
                    value={newTask.title}
                    onChange={(e) => setNewTask(prev => ({ ...prev, title: e.target.value }))}
                    placeholder="Введите название задачи"
                    className="w-full h-10 px-3 rounded-[10px] focus:outline-none"
                    style={INPUT_STYLES.inputField}
                  />
                </div>

                {/* Описание задачи */}
                <div>
                  <label className="block text-[14px] font-[500] text-[#070F1A] mb-2">Описание</label>
                  <textarea
                    value={newTask.description}
                    onChange={(e) => setNewTask(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="Опишите детали задачи"
                    rows={3}
                    className="w-full px-3 py-2 rounded-[10px] focus:outline-none resize-none"
                    style={INPUT_STYLES.inputField}
                  />
                </div>

                {/* Исполнитель */}
                <div>
                  <label className="block text-[14px] font-[500] text-[#070F1A] mb-2">Исполнитель</label>
                  <div className="relative executor-dropdown">
                    <button
                      onClick={() => toggleExecutorDropdown('task')}
                      className="w-full h-10 px-3 rounded-[10px] flex items-center justify-between hover:border-[#0084FF] transition-colors"
                      style={INPUT_STYLES.inputField}
                    >
                      <span className="text-[#8E8E93] hover:text-[#070F1A] transition-colors">{newTask.assigneeName}</span>
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                      </svg>
                    </button>
                    
                    {executorDropdowns.task && (
                      <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-[#E5E7EB] rounded-[10px] shadow-lg z-50">
                        <div className="p-2 space-y-1">
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setNewTask(prev => ({ ...prev, assignee: 'operator-1', assigneeName: 'Анна Петрова' }));
                              setExecutorDropdowns(prev => ({...prev, task: false}));
                            }}
                          >
                            <img src="/headphone.svg" alt="Оператор" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(100%) invert(66%) sepia(21%) saturate(828%) hue-rotate(230deg) brightness(95%) contrast(101%)' }} />
                            <span className="text-[13px] text-[#070F1A]">Анна Петрова</span>
                          </div>
                          <div 
                            className="flex items-center gap-2 p-2 hover:bg-[#F2F3F4] rounded-[10px] cursor-pointer h-[32px]"
                            onClick={() => {
                              setNewTask(prev => ({ ...prev, assignee: 'operator-2', assigneeName: 'Михаил Сидоров' }));
                              setExecutorDropdowns(prev => ({...prev, task: false}));
                            }}
                          >
                            <img src="/headphone.svg" alt="Оператор" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(100%) invert(66%) sepia(21%) saturate(828%) hue-rotate(230deg) brightness(95%) contrast(101%)' }} />
                            <span className="text-[13px] text-[#070F1A]">Михаил Сидоров</span>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                </div>

                {/* Приоритет */}
                <div>
                  <label className="block text-[14px] font-[500] text-[#070F1A] mb-2">Приоритет</label>
                  <select
                    value={newTask.priority}
                    onChange={(e) => setNewTask(prev => ({ ...prev, priority: e.target.value }))}
                    className="w-full h-10 px-3 border border-[#E5E7EB] rounded-[10px] text-[14px] focus:outline-none focus:border-[#0084FF]"
                  >
                    <option value="low">Низкий</option>
                    <option value="medium">Средний</option>
                    <option value="high">Высокий</option>
                    <option value="urgent">Срочный</option>
                  </select>
                </div>

                {/* Дата дедлайна */}
                <div>
                  <label className="block text-[14px] font-[500] text-[#070F1A] mb-2">Дата дедлайна</label>
                  <input
                    type="date"
                    value={newTask.dueDate}
                    onChange={(e) => setNewTask(prev => ({ ...prev, dueDate: e.target.value }))}
                    className="w-full h-10 px-3 border border-[#E5E7EB] rounded-[10px] text-[14px] focus:outline-none focus:border-[#0084FF]"
                  />
                </div>

                {/* ID сделки */}
                <div>
                  <label className="block text-[14px] font-[500] text-[#070F1A] mb-2">ID сделки</label>
                  <input
                    type="text"
                    value={newTask.dealId}
                    onChange={(e) => setNewTask(prev => ({ ...prev, dealId: e.target.value }))}
                    placeholder="Введите ID связанной сделки"
                    className="w-full h-10 px-3 border border-[#E5E7EB] rounded-[10px] text-[14px] focus:outline-none focus:border-[#0084FF]"
                  />
                </div>

                {/* Заметки */}
                <div>
                  <label className="block text-[14px] font-[500] text-[#070F1A] mb-2">Заметки</label>
                  <textarea
                    value={newTask.notes}
                    onChange={(e) => setNewTask(prev => ({ ...prev, notes: e.target.value }))}
                    placeholder="Дополнительная информация о задаче"
                    rows={3}
                    className="w-full px-3 py-2 border border-[#E5E7EB] rounded-[10px] text-[14px] focus:outline-none focus:border-[#0084FF] resize-none"
                  />
                </div>
              </div>

              {/* Кнопки */}
              <div className="p-6 border-t border-[#E5E7EB] flex gap-3">
                <button
                  onClick={() => setCreateTaskModalOpen(false)}
                  className="flex-1 h-[34px] text-gray-600 rounded-[10px] hover:bg-gray-200 transition-colors"
                  style={BUTTON_STYLES.whiteButton}
                >
                  Отмена
                </button>
                <button
                  onClick={handleCreateTask}
                  className="flex-1 h-[34px] bg-[#0084FF] text-white rounded-[10px] hover:bg-[#0073E6] transition-colors"
                  style={BUTTON_STYLES.blueButton}
                >
                  Создать задачу
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Tooltip for metric info */}
      {hoveredMetricId && (
        <div
          className="fixed z-50 bg-white text-gray-900 text-sm px-4 py-3 rounded-[15px] shadow-lg border border-gray-200 pointer-events-none max-w-[300px]"
          style={{
            left: tooltipPosition.x,
            top: tooltipPosition.y,
            transform: 'translateX(-50%)'
          }}
        >
          <div className="text-[12px] text-gray-600 mb-2 font-[500]">
            {metricsData[hoveredMetricId]?.description || 'Информация о метрике'}
          </div>
          <div className="bg-gray-100 px-3 py-2 rounded text-[12px] font-mono">
            {metricsData[hoveredMetricId]?.formula || 'Формула расчета'}
          </div>
        </div>
      )}

      {/* Попап подтверждения завершения диалога */}
      {showCloseDialogPopup && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white rounded-[16px] p-5 w-[400px]">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-[18px] font-[500] text-[#070F1A]">Завершить диалог</h2>
              <button 
                onClick={() => setShowCloseDialogPopup(false)}
                className="w-8 h-8 flex items-center justify-center hover:bg-gray-100 rounded-[7px] transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 text-gray-500">
                  <path d="M18 6 6 18"></path>
                  <path d="m6 6 12 12"></path>
                </svg>
              </button>
            </div>

            <div className="mb-6">
              <p className="text-[14px] text-[#8E8E93] leading-relaxed">
                Вы уверены, что хотите завершить диалог?<br />
                Диалог будет помечен как разрешенный.
              </p>
            </div>

            <div className="flex gap-3">
              <button
                onClick={() => setShowCloseDialogPopup(false)}
                className="flex-1 h-[34px] text-[#070F1A] rounded-[12px] transition-colors hover:border-[#070F1A]/20"
                style={BUTTON_STYLES.whiteButton}
              >
                Отмена
              </button>
              <button
                onClick={handleConfirmCloseDialog}
                className="flex-1 h-[34px] bg-[#0084FF] text-white rounded-[12px] transition-colors hover:bg-[#0066CC]"
                style={BUTTON_STYLES.blueButton}
              >
                Завершить
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Попап подтверждения удаления диалога */}
      {showDeleteDialogPopup && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white rounded-[16px] p-5 w-[400px]">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-[18px] font-[500] text-[#070F1A]">Удалить диалог</h2>
              <button 
                onClick={() => setShowDeleteDialogPopup(false)}
                className="w-8 h-8 flex items-center justify-center hover:bg-gray-100 rounded-[7px] transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 text-gray-500">
                  <path d="M18 6 6 18"></path>
                  <path d="m6 6 12 12"></path>
                </svg>
              </button>
            </div>

            <div className="mb-6">
              <p className="text-[14px] text-[#8E8E93] leading-relaxed">
                Вы уверены, что хотите удалить диалог?<br />
                Это действие нельзя отменить.
              </p>
            </div>

            <div className="flex gap-3">
              <button
                onClick={() => setShowDeleteDialogPopup(false)}
                className="flex-1 h-[34px] border border-[#070F1A]/10 text-[#070F1A] rounded-[12px] transition-colors hover:border-[#070F1A]/20 text-[14px] font-[500]"
              >
                Отмена
              </button>
              <button
                onClick={handleConfirmDeleteDialog}
                className="flex-1 h-[34px] bg-[#EF4444] text-white rounded-[12px] transition-colors hover:bg-[#DC2626] text-[14px] font-[500]"
              >
                Удалить
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Попап подтверждения удаления корректировок */}
      {showDeleteConfirmModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white rounded-[16px] p-5 w-[400px]">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-[18px] font-[500] text-[#070F1A]">Удалить корректировки</h2>
              <button 
                onClick={() => setShowDeleteConfirmModal(false)}
                className="w-8 h-8 flex items-center justify-center hover:bg-gray-100 rounded-[7px] transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 text-gray-500">
                  <path d="M18 6 6 18"></path>
                  <path d="m6 6 12 12"></path>
                </svg>
              </button>
            </div>

            <div className="mb-6">
              <p className="text-[14px] text-[#8E8E93] leading-relaxed">
                Вы действительно хотите удалить выбранные корректировки?<br />
                Это действие нельзя отменить.
              </p>
            </div>

            <div className="flex gap-3">
              <button
                onClick={() => setShowDeleteConfirmModal(false)}
                className="flex-1 h-[34px] border border-[#070F1A]/10 text-[#070F1A] rounded-[12px] transition-colors hover:border-[#070F1A]/20 text-[14px] font-[500]"
              >
                Отмена
              </button>
              <button
                onClick={handleDeleteCorrections}
                className="flex-1 h-[34px] bg-[#EF4444] text-white rounded-[12px] transition-colors hover:bg-[#DC2626] text-[14px] font-[500]"
              >
                Удалить
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Модальное окно с скриптом виджета */}
      {showScriptModal && (
        <div className="fixed inset-0 bg-black/20 flex items-center justify-center z-50">
          <div className="bg-white rounded-[16px] p-6 w-[600px] max-h-[80vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-[10px]">
              <h3 className="text-[18px] font-[500] text-[#070F1A]">Скрипт вашего виджета</h3>
              <button
                onClick={() => setShowScriptModal(false)}
                className="w-[32px] h-[32px] flex items-center justify-center hover:bg-[#F2F3F4] rounded-[8px] transition-colors"
              >
                <img src="/x-02.svg" alt="Закрыть" className="w-4 h-4" style={{ filter: 'brightness(0) saturate(100%) invert(56%) sepia(6%) saturate(14%) hue-rotate(200deg) brightness(95%) contrast(89%)' }} />
              </button>
            </div>
            
            <div className="mb-[20px]">
              <p className="text-[14px] text-[#8E8E93] mb-[20px]">Скопируйте этот код и вставьте на ваш сайт:</p>
              <div className="bg-[#F8F8FA] rounded-[10px] p-4 border border-[#E5E6E7]">
                <pre className="text-[12px] text-[#070F1A] whitespace-pre-wrap font-mono">
                  {generateWidgetCode()}
                </pre>
              </div>
            </div>
            
            <div className="flex gap-3">
              <button
                onClick={async () => {
                  try {
                    await navigator.clipboard.writeText(generateWidgetCode());
                    showNotificationMessage('Скрипт скопирован в буфер обмена!');
                  } catch (error) {
                    console.error('Ошибка при копировании:', error);
                  }
                }}
                className="flex-1 h-[34px] bg-[#0084FF] text-white rounded-[10px] font-[500] text-[13px] hover:bg-[#0073E6] transition-colors"
                style={BUTTON_STYLES.blueButton}
              >
                Скопировать
              </button>
              <button
                onClick={() => {
                  const userKey = widgetApiKey || (currentUser?.id ? `adapto_${currentUser.id}` : 'adapto_demo');
                  const url = `${API_CONFIG.BASE_URL}/widget-preview.html?key=${userKey}&noCache=1&ts=${Date.now()}`;
                  window.open(url, '_blank', 'noopener,noreferrer');
                }}
                className="flex-1 h-[34px] bg-white text-[#070F1A] border border-[#E5E6E7] rounded-[10px] font-[500] text-[13px] hover:bg-[#F2F3F4] transition-colors"
                style={BUTTON_STYLES.whiteButton}
              >
                Предпросмотр в новой вкладке
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Telegram Bot Modal */}
      {showTelegramModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div className="absolute inset-0 bg-black/50" onClick={() => setShowTelegramModal(false)} />
          <div className="relative bg-white rounded-xl w-full max-w-2xl mx-4 max-h-[90vh] overflow-hidden flex flex-col">
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <div className="flex items-center gap-3">
                <img src="/tg.png" alt="Telegram" className="w-8 h-8" />
                <h3 className="text-xl font-semibold">Подключение Telegram бота</h3>
              </div>
              <button 
                onClick={() => setShowTelegramModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ✕
              </button>
            </div>

            {/* Content */}
            <div className="flex-1 overflow-y-auto p-6">
              <div className="space-y-6">
                <div className="bg-blue-50 rounded-lg p-4">
                  <h5 className="font-medium mb-3 text-blue-900">Инструкция по получению API токена:</h5>
                  <div className="space-y-3 text-sm text-blue-800">
                    <p>1. Откройте Telegram и найдите BotFather</p>
                    <p>2. Отправьте команду /newbot и следуйте инструкциям для создания нового бота</p>
                    <p>3. После создания бота, BotFather даст вам уникальный API токен</p>
                    <p>4. Сохраните этот токен в безопасном месте - он нужен для управления вашим ботом</p>
                    <p>5. Вставьте скопированный API токен в поле ниже</p>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">API Токен бота</label>
                  <input
                    type="text"
                    placeholder="Введите API токен вашего бота"
                    value={telegramBotToken}
                    onChange={(e) => setTelegramBotToken(e.target.value)}
                    className="w-full h-12 px-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div className="flex gap-3">
                  <button
                    onClick={handleConnectTelegramBot}
                    disabled={isConnectingTelegramBot}
                    className="flex-1 h-12 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isConnectingTelegramBot ? 'Подключение...' : 'Подключить Telegram'}
                  </button>
                  <button
                    onClick={() => setShowTelegramModal(false)}
                    className="px-6 h-12 border border-gray-300 text-gray-700 rounded-lg font-medium hover:bg-gray-50 transition-colors"
                  >
                    Отмена
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Stories Management Modal */}
      {showStoriesModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div className="absolute inset-0 bg-black/50" onClick={() => setShowStoriesModal(false)} />
          <div className="relative bg-white rounded-xl w-full max-w-md mx-4 p-6">
            <div className="text-center">
              <h3 className="text-lg font-semibold mb-4">Добавить сторис</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2 text-left">Название</label>
                  <input
                    type="text"
                    value={newStoryTitle}
                    onChange={(e) => setNewStoryTitle(e.target.value)}
                    placeholder="Введите название сторис"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2 text-left">URL изображения</label>
                  <input
                    type="text"
                    value={newStoryImage}
                    onChange={(e) => setNewStoryImage(e.target.value)}
                    placeholder="/path/to/image.png"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div className="flex gap-3">
                  <button
                    onClick={handleAddStory}
                    className="flex-1 bg-[#0084FF] text-white px-4 py-2 rounded-lg font-medium hover:bg-[#0070E6] transition-colors"
                  >
                    Добавить
                  </button>
                  <button
                    onClick={() => setShowStoriesModal(false)}
                    className="flex-1 bg-gray-200 text-gray-800 px-4 py-2 rounded-lg font-medium hover:bg-gray-300 transition-colors"
                  >
                    Отмена
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Edit Story Modal */}
      {editingStory && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div className="absolute inset-0 bg-black/50" onClick={() => setEditingStory(null)} />
          <div className="relative bg-white rounded-xl w-full max-w-md mx-4 p-6">
            <div className="text-center">
              <h3 className="text-lg font-semibold mb-4">Редактировать сторис</h3>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2 text-left">Название</label>
                  <input
                    type="text"
                    value={editingStory.title}
                    onChange={(e) => setEditingStory({...editingStory, title: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2 text-left">URL изображения</label>
                  <input
                    type="text"
                    value={editingStory.image_url}
                    onChange={(e) => setEditingStory({...editingStory, image_url: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2 text-left">Порядок</label>
                  <input
                    type="number"
                    value={editingStory.order_index}
                    onChange={(e) => setEditingStory({...editingStory, order_index: parseInt(e.target.value)})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div className="flex gap-3">
                  <button
                    onClick={() => handleEditStory(editingStory.id, {
                      title: editingStory.title,
                      image_url: editingStory.image_url,
                      order_index: editingStory.order_index
                    })}
                    className="flex-1 bg-[#0084FF] text-white px-4 py-2 rounded-lg font-medium hover:bg-[#0070E6] transition-colors"
                  >
                    Сохранить
                  </button>
                  <button
                    onClick={() => setEditingStory(null)}
                    className="flex-1 bg-gray-200 text-gray-800 px-4 py-2 rounded-lg font-medium hover:bg-gray-300 transition-colors"
                  >
                    Отмена
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

