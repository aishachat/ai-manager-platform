import { useState, useEffect } from 'react'

// API конфигурация
const API_BASE_URL = 'http://localhost:3001/api';

// Custom SVG Icons
const BarChart3 = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
  </svg>
)

const MessageSquare = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
  </svg>
)

const Database = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <ellipse cx="12" cy="5" rx="9" ry="3" strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} />
    <path d="M3 5v14c0 1.66 4.03 3 9 3s9-1.34 9-3V5" strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} />
    <path d="M3 12c0 1.66 4.03 3 9 3s9-1.34 9-3" strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} />
  </svg>
)

const Settings = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
  </svg>
)

const Zap = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
  </svg>
)

const User = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
  </svg>
)

const Plus = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
  </svg>
)

const ExternalLink = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
  </svg>
)

const AlertTriangle = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
  </svg>
)

const Info = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <circle cx="12" cy="12" r="10" strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 16v-4m0-4h.01" />
  </svg>
)

const Send = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
  </svg>
)

const Menu = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
  </svg>
)

// Extra icons for UI
const Globe = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 21c4.97 0 9-4.03 9-9s-4.03-9-9-9-9 4.03-9 9 4.03 9 9 9z" />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12h18M12 3c2.5 2.5 2.5 15.5 0 18M8 3.5c-1.5 2.2-1.5 14.8 0 17M16 3.5c1.5 2.2 1.5 14.8 0 17" />
  </svg>
)

const LinkIcon = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 14a3 3 0 004.243 0l3.535-3.535a3 3 0 10-4.243-4.243L12 6M14 10l-2 2m-2-2L6.222 13.778a3 3 0 104.243 4.243L10 18" />
  </svg>
)

const EditIcon = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 4h7a2 2 0 012 2v7M7 17l-4 4 1-5 10-10 4 4-10 10z" />
  </svg>
)

const FileIcon = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 3h6l5 5v13a1 1 0 01-1 1H7a1 1 0 01-1-1V4a1 1 0 011-1z" />
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 3v6h6" />
  </svg>
)

const Trash = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7H5m3 0V5a2 2 0 012-2h4a2 2 0 012 2v2m-1 0v12a2 2 0 01-2 2H8a2 2 0 01-2-2V7h10z" />
  </svg>
)

const Trash2 = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
  </svg>
)

const ArrowUp = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
  </svg>
)

const ArrowDown = ({ className }: { className?: string }) => (
  <svg className={className} fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
  </svg>
)

type MenuItem = {
  icon: React.ComponentType<{ className?: string }>
  label: string
  id: string
}

const menuItems: MenuItem[] = [
  { icon: User, label: 'Мой Adapto', id: 'my-solo' },
  { icon: BarChart3, label: 'Сводка', id: 'dashboard' },
  { icon: MessageSquare, label: 'Диалоги', id: 'dialogs' },
  { icon: Database, label: 'База знаний', id: 'knowledge' },
  { icon: Settings, label: 'Настройки модели', id: 'model-settings' },
  { icon: Zap, label: 'Интеграции', id: 'integrations' }
]

// Simple Button component
const Button = ({ children, variant = 'default', size = 'default', className = '', onClick, ...props }: any) => {
  const baseClasses = 'inline-flex items-center justify-center rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2'
  const variants = {
    default: 'bg-slate-900 text-white hover:bg-slate-800',
    outline: 'border border-gray-300 bg-white hover:bg-gray-50',
    ghost: 'hover:bg-gray-100'
  }
  const sizes = {
    sm: 'h-8 px-3 text-sm',
    default: 'h-10 px-4',
    lg: 'h-12 px-8'
  }
  
  return (
    <button 
      className={`${baseClasses} ${variants[variant]} ${sizes[size]} ${className}`}
      onClick={onClick}
      {...props}
    >
      {children}
    </button>
  )
}

// Simple Card components
const Card = ({ children, className = '', ...props }: any) => (
  <div className={`rounded-lg border border-gray-200 bg-white shadow-sm ${className}`} {...props}>
    {children}
  </div>
)

const CardHeader = ({ children, className = '', ...props }: any) => (
  <div className={`flex flex-col space-y-1.5 p-6 ${className}`} {...props}>
    {children}
  </div>
)

const CardTitle = ({ children, className = '', ...props }: any) => (
  <h3 className={`text-2xl font-semibold leading-none tracking-tight ${className}`} {...props}>
    {children}
  </h3>
)

const CardContent = ({ children, className = '', ...props }: any) => (
  <div className={`p-6 pt-0 ${className}`} {...props}>
    {children}
  </div>
)

// Simple Input component
const Input = ({ className = '', ...props }: any) => (
  <input 
    className={`flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:cursor-not-allowed disabled:opacity-50 ${className}`}
    {...props}
  />
)

// Simple Textarea component
const Textarea = ({ className = '', ...props }: any) => (
  <textarea 
    className={`flex w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:cursor-not-allowed disabled:opacity-50 ${className}`}
    {...props}
  />
)

// Simple Progress component
const Progress = ({ value = 0, className = '', ...props }: any) => (
  <div className={`relative h-4 w-full overflow-hidden rounded-full bg-gray-200 ${className}`} {...props}>
    <div 
      className="h-full bg-blue-600 transition-all"
      style={{ width: `${value}%` }}
    />
  </div>
)

export default function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(() => {
    const token = localStorage.getItem('authToken');
    return !!token;
  })
  const [currentStep, setCurrentStep] = useState<'login' | 'register' | 'register-email' | 'register-name' | 'register-phone' | 'register-company' | 'dashboard' | 'forgot-password' | 'reset-password'>('login')
  const [showSuccessModal, setShowSuccessModal] = useState(false)
  const [showNotification, setShowNotification] = useState(false)
  const [notificationMessage, setNotificationMessage] = useState('')
  const [selectedKbType, setSelectedKbType] = useState<'site' | 'feed' | 'text' | 'file' | null>(null)
  const [kbInputValue, setKbInputValue] = useState('')
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    name: '',
    company: '',
    phone: '',
    companyField: ''
  })
  const [selectedDataFields, setSelectedDataFields] = useState<string[]>(['Имя', 'Номер телефона'])
  const [userAddress, setUserAddress] = useState<'ty' | 'vy'>('vy')
  
  const [activeSection, setActiveSection] = useState('my-solo')
  const [sidebarOpen, setSidebarOpen] = useState(false)
  const [chatMessage, setChatMessage] = useState('')
  const [chatHistory, setChatHistory] = useState([
    { type: 'assistant', text: 'Привет! Я ваш ИИ-ассистент Adapto. Как дела?' }
  ])
  const [kbModalOpen, setKbModalOpen] = useState(false)
  const [kbItems, setKbItems] = useState<{ id: number, type: 'site' | 'feed' | 'text' | 'file', title: string, status: 'Загружен' | 'Обработка' }[]>([])
  const [dialogStages, setDialogStages] = useState<Array<{id: number, name: string, order: number}>>([
    {id: 1, name: 'Выясни цель пользователя.', order: 1},
    {id: 2, name: 'Пойми текущую ситуацию пользователя.', order: 2},
    {id: 3, name: 'Опиши, благодаря каким преимуществам мы поможем ему прийти к цели.', order: 3},
    {id: 4, name: 'Записать на консультацию', order: 4}
  ])
  const [tone, setTone] = useState<'Дружелюбный' | 'Нейтральный' | 'Человечный' | 'Профессиональный' | 'Юмор'>('Профессиональный')
  const [emojiUsage, setEmojiUsage] = useState<'Никогда' | 'Редко' | 'Часто'>('Редко')
  const [targetAudience, setTargetAudience] = useState('малый бизнес')
  
  // Новые состояния для расширенного функционала
  const [currentUser, setCurrentUser] = useState<{
    name: string;
    company_name: string;
    email: string;
    id?: string;
  } | null>(null);
  const [assistants, setAssistants] = useState([]);
  const [knowledgeItems, setKnowledgeItems] = useState([]);

  const handleDeleteKnowledgeItem = (index: number) => {
    setSetupData(prev => ({
      ...prev,
      knowledgeItems: prev.knowledgeItems.filter((_, i) => i !== index)
    }));
  };
  const [currentAssistant, setCurrentAssistant] = useState(null);
  const [showKbModal, setShowKbModal] = useState(false);
  const [kbProcessing, setKbProcessing] = useState(false);
  const [currentSection, setCurrentSection] = useState(() => {
    const saved = localStorage.getItem('currentSection');
    return saved || 'summary';
  });
  const [showAddStage, setShowAddStage] = useState(false);
  const [newStageName, setNewStageName] = useState('');
  const [conversations, setConversations] = useState([
    {
      id: 1,
      client: 'Клиент #1234',
      lastMessage: 'Здравствуйте! Меня интересуют ваши услуги',
      timestamp: '2024-01-15 14:30',
      messages: [
        { id: 1, type: 'ai', text: 'Привет! Я ваш ИИ-ассистент. Как могу помочь?', timestamp: '14:25' },
        { id: 2, type: 'user', text: 'Здравствуйте! Меня интересуют ваши услуги', timestamp: '14:30' },
        { id: 3, type: 'ai', text: 'Конечно! Расскажите подробнее, какие именно услуги вас интересуют?', timestamp: '14:31' },
        { id: 4, type: 'user', text: 'Хочу заказать разработку сайта', timestamp: '14:32' },
        { id: 5, type: 'ai', text: 'Отлично! У нас есть несколько пакетов разработки. Какой бюджет у вас планируется?', timestamp: '14:33' }
      ]
    }
  ]);
  const [selectedConversation, setSelectedConversation] = useState(null);
  const [showConversationDetail, setShowConversationDetail] = useState(false);
  const [showIntegrationModal, setShowIntegrationModal] = useState(false);
  const [selectedIntegration, setSelectedIntegration] = useState('');
  const [showWidgetConstructor, setShowWidgetConstructor] = useState(false);
  const [widgetSettings, setWidgetSettings] = useState({
    accentColor: '#1354FC',
    buttonColor: 'light',
    buttonText: 'Спросить ИИ',
    buttonSubtext: 'Задать вопрос',
    avatar: 'default',
    customButtonColor: '#1354FC',
    showCustomColorPicker: false,
    widgetLocation: 'default',
    // Widget positioning
    desktopBottomOffset: 20,
    desktopRightOffset: 20,
    mobileBottomOffset: 20,
    mobileRightOffset: 20,
    zIndex: 9999,
    // Welcome message
    welcomeMessages: ['Привет! Меня зовут Adapto, я ИИ ассистент.'],
    // Trigger question
    triggerQuestion: 'Задать вопрос',
    triggerQuestionEnabled: 'no',
    triggerQuestionDelay: 5,
    triggerQuestionText: 'Здравствуйте! Если появится вопрос, можете задать его в чате, я оперативно отвечу',
    triggerQuickReply: 'Задать вопрос',
    // Follow up message
    followUpMessage: 'no',
    followUpDelay: 10,
    followUpQuestion: 'Продолжим диалог?',
    followUpQuickReply: 'Расскажи подробнее',
    // Quick replies
    quickReplies: ['Расскажи подробнее'],
    privacyPolicyUrl: 'https://',
    dataTags: ['utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content'],
    excludedPages: []
  });
  const [formErrors, setFormErrors] = useState<{[key: string]: string}>({});
  const [countryCode, setCountryCode] = useState('+7');
  const [showProgressBar, setShowProgressBar] = useState(false);
  const [showHintCard, setShowHintCard] = useState(() => {
    const saved = localStorage.getItem('showHintCard');
    return saved ? JSON.parse(saved) : true;
  });
  const [showWarningCard, setShowWarningCard] = useState(() => {
    const saved = localStorage.getItem('showWarningCard');
    return saved ? JSON.parse(saved) : true;
  });
  const [showSetupWizard, setShowSetupWizard] = useState(false);
  const [botCorrection, setBotCorrection] = useState('');
  
  // Загружаем данные пользователя при инициализации
  useEffect(() => {
    const token = localStorage.getItem('authToken');
    const userId = localStorage.getItem('userId');
    
    console.log('Loading user data:', { token: !!token, userId });
    
    if (token && userId) {
      // Устанавливаем статус входа
      setIsLoggedIn(true);
      setCurrentStep('dashboard');
      
      // Загружаем данные пользователя из localStorage
      const savedUser = localStorage.getItem('userData');
      console.log('Saved user data:', savedUser);
      
      if (savedUser) {
        try {
          const userData = JSON.parse(savedUser);
          console.log('Parsed user data:', userData);
          setCurrentUser(userData);
        } catch (error) {
          console.error('Error parsing user data:', error);
        }
      } else {
        console.log('No saved user data found');
      }
    }
  }, []);

  // Показываем мастер только при первом входе после регистрации
  useEffect(() => {
    if (isLoggedIn) {
      const hasShownSetup = localStorage.getItem('hasShownSetupWizard');
      if (!hasShownSetup) {
        setShowSetupWizard(true);
      }
    }
  }, [isLoggedIn]);

  // Сохраняем данные пользователя в localStorage при каждом изменении
  useEffect(() => {
    if (currentUser && isLoggedIn) {
      localStorage.setItem('userData', JSON.stringify(currentUser));
    }
  }, [currentUser, isLoggedIn]);
  
  const [setupStep, setSetupStep] = useState(1);
  
  // Загружаем данные из localStorage при инициализации
  const getInitialSetupData = () => {
    const savedData = localStorage.getItem('setupData');
    if (savedData) {
      try {
        const parsedData = JSON.parse(savedData);
        return {
          // Шаг 1: Цели Adapto
          task: parsedData.task || '',
          mainGoal: parsedData.mainGoal || '',
          mainGoalCustom: parsedData.mainGoalCustom || '',
          salesCycle: parsedData.salesCycle || '',
          targetAudience: parsedData.targetAudience || '',
          
          // Шаг 2: Правила общения
          addressing: parsedData.addressing || 'Вы',
          communicationStyle: parsedData.communicationStyle || 'Профессиональный',
          restrictions: parsedData.restrictions || [],
          restrictionsCustom: parsedData.restrictionsCustom || '',
          additionalSettings: parsedData.additionalSettings || [],
          additionalSettingsCustom: parsedData.additionalSettingsCustom || '',
          dataCollection: parsedData.dataCollection || [],
          dataCollectionCustom: parsedData.dataCollectionCustom || '',
          clarificationRules: parsedData.clarificationRules || [],
          clarificationRulesCustom: parsedData.clarificationRulesCustom || '',
          emojiUsage: parsedData.emojiUsage || 'Редко',
          
          // Шаг 3: Этапы диалога
          dialogStages: parsedData.dialogStages || [
            'Поздоровайся и спроси имя клиента. Уточни его проблему и пойми текущую ситуацию пользователя',
            'Опиши коротко как решишь его задачу/назови наши преимущества, предложи товары по запросу',
            'Веди клиента к оформлению заказа/заявки',
            'Когда клиент готов оформить заказ, сделай итог заказа и пришли ссылку на оплату из базы знаний.',
            'Переведи клиента на менеджера для проверки оплаты и дальнейшей работы'
          ],
          
          // Шаг 4: Обучение
          knowledgeItems: parsedData.knowledgeItems || [],
          selectedKnowledgeType: parsedData.selectedKnowledgeType || '',
          knowledgeInputValue: parsedData.knowledgeInputValue || ''
        };
      } catch (error) {
        console.error('Error parsing setup data:', error);
      }
    }
    
    // Возвращаем дефолтные значения если данных нет
    return {
      // Шаг 1: Цели Adapto
      task: '',
      mainGoal: '',
      mainGoalCustom: '',
      salesCycle: '',
      targetAudience: '',
      
      // Шаг 2: Правила общения
      addressing: 'Вы',
      communicationStyle: 'Профессиональный',
      restrictions: [],
      restrictionsCustom: '',
      additionalSettings: [],
      additionalSettingsCustom: '',
      dataCollection: [],
      dataCollectionCustom: '',
      clarificationRules: [],
      clarificationRulesCustom: '',
      emojiUsage: 'Редко',
      
      // Шаг 3: Этапы диалога
      dialogStages: [
        'Поздоровайся и спроси имя клиента. Уточни его проблему и пойми текущую ситуацию пользователя',
        'Опиши коротко как решишь его задачу/назови наши преимущества, предложи товары по запросу',
        'Веди клиента к оформлению заказа/заявки',
        'Когда клиент готов оформить заказ, сделай итог заказа и пришли ссылку на оплату из базы знаний.',
        'Переведи клиента на менеджера для проверки оплаты и дальнейшей работы'
      ],
      
      // Шаг 4: Обучение
      knowledgeItems: [],
      selectedKnowledgeType: '',
      knowledgeInputValue: ''
    };
  };

  const [setupData, setSetupData] = useState<{
    task: string;
    mainGoal: string;
    mainGoalCustom: string;
    salesCycle: string;
    targetAudience: string;
    addressing: string;
    communicationStyle: string;
    restrictions: string[];
    restrictionsCustom: string;
    additionalSettings: string[];
    additionalSettingsCustom: string;
    dataCollection: string[];
    dataCollectionCustom: string;
    clarificationRules: string[];
    clarificationRulesCustom: string;
    emojiUsage: string;
    dialogStages: string[];
    knowledgeItems: any[];
    selectedKnowledgeType: string;
    knowledgeInputValue: string;
  }>(getInitialSetupData());
  
  // Автоматически сохраняем данные в localStorage при изменении setupData
  useEffect(() => {
    if (setupData) {
      localStorage.setItem('setupData', JSON.stringify(setupData));
    }
  }, [setupData]);
  
  const [showLoadingScreen, setShowLoadingScreen] = useState(false);
  const [loadingTime, setLoadingTime] = useState(300); // 5 минут в секундах
  const [showDialogWarning, setShowDialogWarning] = useState(false);
  const [originalDialogStages] = useState([
    'Поздоровайся и спроси имя клиента. Уточни его проблему и пойми текущую ситуацию пользователя',
    'Опиши коротко как решишь его задачу/назови наши преимущества, предложи товары по запросу',
    'Веди клиента к оформлению заказа/заявки',
    'Когда клиент готов оформить заказ, сделай итог заказа и пришли ссылку на оплату из базы знаний.',
    'Переведи клиента на менеджера для проверки оплаты и дальнейшей работы'
  ]);
  const [validationErrors, setValidationErrors] = useState<{[key: string]: boolean}>({});
  const [showValidationMessage, setShowValidationMessage] = useState(false);
  
  // Функция валидации для каждого шага
  const validateStep = (step: number) => {
    const errors: {[key: string]: boolean} = {};
    
    if (step === 1) {
      if (!setupData.task) errors.task = true;
      if (!setupData.mainGoal) errors.mainGoal = true;
      if (setupData.mainGoal === 'Другое' && !setupData.mainGoalCustom.trim()) errors.mainGoalCustom = true;
      if (!setupData.salesCycle.trim()) errors.salesCycle = true;
      if (!setupData.targetAudience.trim()) errors.targetAudience = true;
    }
    
    if (step === 2) {
      // Исправленная логика валидации для шага 2
      if (setupData.restrictions.length === 0 && !setupData.restrictionsCustom?.trim()) errors.restrictions = true;
      if (setupData.additionalSettings.length === 0 && !setupData.additionalSettingsCustom?.trim()) errors.additionalSettings = true;
      // Для сбора данных - проверяем что что-то выбрано
      if (setupData.dataCollection.length === 0 && !setupData.dataCollectionCustom?.trim()) errors.dataCollection = true;
      if (setupData.clarificationRules.length === 0 && !setupData.clarificationRulesCustom?.trim()) errors.clarificationRules = true;
    }
    
    if (step === 4) {
      if (setupData.knowledgeItems.length === 0) errors.knowledgeItems = true;
    }
    
    setValidationErrors(errors);
    setShowValidationMessage(Object.keys(errors).length > 0);
    return Object.keys(errors).length === 0;
  };
  
  const [progressTasks, setProgressTasks] = useState([
    { id: 1, title: 'Настройка модели', completed: false, description: 'Настройте своего Adapto под свою компанию' },
    { id: 2, title: 'Протестировать Adapto', completed: false, description: 'Перейдите в раздел "Мой Adapto" и посмотрите, как Adapto отвечает на ваши вопросы' },
    { id: 3, title: 'Интеграция ИИ-агента', completed: false, description: 'Интегрируйте ИИ-агента в мессенджер или на сайт' }
  ]);

  // Автоматическое обновление прогресса при изменениях
  useEffect(() => {
    const updatedTasks = [...progressTasks];
    
    // Задача 1: Настройка модели - выполнена если есть данные в setupData
    const hasModelSettings = !!(setupData.task && setupData.mainGoal && setupData.targetAudience);
    updatedTasks[0].completed = hasModelSettings;
    
    // Задача 2: Протестировать - выполнена если был в разделе "Мой Adapto" и есть чат
    const hasTested = chatHistory.length > 1;
    updatedTasks[1].completed = hasTested;
    
    // Задача 3: Интеграция - выполнена если есть элементы в базе знаний
    const hasIntegration = setupData.knowledgeItems.length > 0;
    updatedTasks[2].completed = hasIntegration;
    
    setProgressTasks(updatedTasks);
  }, [setupData, chatHistory]);

  const showNotificationMessage = (message: string) => {
    setNotificationMessage(message)
    setShowNotification(true)
    setTimeout(() => setShowNotification(false), 3000)
  }

  const handleKbTypeSelect = (type: 'site' | 'feed' | 'text' | 'file') => {
    setSelectedKbType(type)
    setKbInputValue('')
  }



  const handleLogout = () => {
    // Очищаем все данные из localStorage
    localStorage.removeItem('authToken');
    localStorage.removeItem('userId');
    localStorage.removeItem('userData');
    
    // Сбрасываем состояние
    setCurrentUser(null);
    setIsLoggedIn(false);
    setCurrentStep('login');
  }

  const handleLogin = () => {
    setIsLoggedIn(true)
    setCurrentStep('dashboard')
  }

  const handleRegister = () => {
    setCurrentStep('register-email')
  }

  // Функция для форматирования телефона
  const formatPhoneNumber = (value: string) => {
    // Убираем все кроме цифр
    const numbers = value.replace(/\D/g, '');
    
    // Ограничиваем до 10 цифр (без кода страны)
    const limitedNumbers = numbers.slice(0, 10);
    
    // Форматируем: (999) 123-45-67
    if (limitedNumbers.length >= 3) {
      return `(${limitedNumbers.slice(0, 3)}) ${limitedNumbers.slice(3, 6)}-${limitedNumbers.slice(6, 8)}-${limitedNumbers.slice(8)}`;
    } else if (limitedNumbers.length >= 1) {
      return `(${limitedNumbers}`;
    }
    
    return '';
  }

  const handleRegisterStep = (step: 'register-email' | 'register-name' | 'register-phone' | 'register-company' | 'dashboard') => {
    // Валидация перед переходом
    if (step === 'register-name') {
      const errors: any = {};
      
      // Валидация email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!formData.email) {
        errors.email = 'Email обязателен';
      } else if (!emailRegex.test(formData.email)) {
        errors.email = 'Введите корректный email';
      }
      
      // Валидация пароля
      if (!formData.password) {
        errors.password = 'Пароль обязателен';
      } else if (formData.password.length < 6) {
        errors.password = 'Пароль должен содержать минимум 6 символов';
      }
      
      if (Object.keys(errors).length > 0) {
        setFormErrors(errors);
        return;
      }
    }
    
    if (step === 'register-company') {
      const errors: any = {};
      
      // Валидация телефона
      const phoneNumbers = formData.phone.replace(/\D/g, '');
      if (!formData.phone) {
        errors.phone = 'Телефон обязателен';
      } else if (phoneNumbers.length < 10) {
        errors.phone = 'Введите полный номер телефона (10 цифр)';
      }
      
      if (Object.keys(errors).length > 0) {
        setFormErrors(errors);
        return;
      }
    }
    
    setFormErrors({});
    setCurrentStep(step);
    
    if (step === 'dashboard') {
      setIsLoggedIn(true);
      setShowSuccessModal(true);
    }
  }

  const handleSaveSettings = () => {
    showNotificationMessage('Успешно сохранено')
  }

  const handleSendMessage = async () => {
    if (chatMessage.trim()) {
      const newMessage = {
        type: 'user' as const,
        text: chatMessage
      };
      setChatHistory([...chatHistory, newMessage]);
      setChatMessage('');
      
      try {
        // Отправляем запрос к OpenAI API
        const response = await fetch('/api/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
                  body: JSON.stringify({
          message: chatMessage,
          setupData: setupData,
          conversationHistory: chatHistory,
          agentId: 'test-agent-1' // Добавляем ID агента для тестирования
        }),
        });

        if (!response.ok) {
          throw new Error('Ошибка при отправке запроса');
        }

        const data = await response.json();
        
        if (data.error) {
          throw new Error(data.error);
        }

        const aiResponse = {
          type: 'assistant' as const,
          text: data.response
        };
        setChatHistory(prev => [...prev, aiResponse]);
      } catch (error) {
        console.error('Error sending message:', error);
        const errorResponse = {
          type: 'assistant' as const,
          text: 'Извините, произошла ошибка при обработке вашего запроса. Попробуйте еще раз.'
        };
        setChatHistory(prev => [...prev, errorResponse]);
      }
    }
  }

  // API функции
  const apiRequest = async (endpoint: string, options: RequestInit = {}) => {
    const token = localStorage.getItem('authToken');
    const headers = {
      'Content-Type': 'application/json',
      ...(token && { Authorization: `Bearer ${token}` }),
      ...options.headers,
    };

    try {
      const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        ...options,
        headers,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'API ошибка');
      }

      return await response.json();
    } catch (error) {
      console.error('API Error:', error);
      throw error;
    }
  };

  const handleLoginSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setFormErrors({});

    if (!formData.email || !formData.password) {
      setFormErrors({ general: 'Заполните все поля' });
      return;
    }

    if (formData.password.length < 6) {
      setFormErrors({ password: 'Пароль должен содержать минимум 6 символов' });
      return;
    }

    try {
      const response = await fetch(`${API_BASE_URL}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: formData.email,
          password: formData.password,
        }),
      });

      const data = await response.json();

      if (response.ok) {
        // Устанавливаем данные пользователя из ответа сервера
        const userData = {
          name: data.user.name || data.user.email?.split('@')[0] || 'Пользователь',
          company_name: data.user.company_name || 'Компания',
          email: data.user.email,
          id: data.user.id
        };
        
        // Сначала сохраняем в localStorage
        localStorage.setItem('authToken', data.session.access_token);
        localStorage.setItem('userId', data.user.id);
        localStorage.setItem('userData', JSON.stringify(userData));
        
        // Затем устанавливаем состояние
        setCurrentUser(userData);
        setIsLoggedIn(true);
        setCurrentStep('dashboard');
        setShowProgressBar(true);
        showNotificationMessage('Успешный вход! Добро пожаловать в Adapto!');
      } else {
        if (data.error === 'Неверный email или пароль') {
          setFormErrors({ 
            email: 'Неверный email или пароль',
            password: 'Неверный email или пароль'
          });
        } else if (data.details) {
          const errors: any = {};
          data.details.forEach((detail: any) => {
            errors[detail.field] = detail.message;
          });
          setFormErrors(errors);
        } else {
          setFormErrors({ general: data.error || 'Ошибка входа' });
        }
        showNotificationMessage('Ошибка входа. Проверьте email и пароль.');
      }
    } catch (error) {
      console.error('Login error:', error);
      showNotificationMessage('Ошибка подключения к серверу');
    }
  };

  const handleRegisterSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setFormErrors({});

    try {
      const response = await fetch(`${API_BASE_URL}/auth/register`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: formData.email,
          password: formData.password,
          name: formData.name,
          company_name: formData.company,
          phone: countryCode + ' ' + formData.phone,
          company_field: formData.companyField,
        }),
      });

      const data = await response.json();

      if (response.ok) {
        // Сохраняем данные пользователя
        const userData = {
          name: formData.name,
          company_name: formData.company,
          email: formData.email,
          id: data.user.id
        };
        
        console.log('Saving user data:', userData);
        console.log('Form data company:', formData.company);
        
        // Сначала сохраняем в localStorage
        localStorage.setItem('authToken', data.session.access_token);
        localStorage.setItem('userId', data.user.id);
        localStorage.setItem('userData', JSON.stringify(userData));
        
        console.log('Saved to localStorage:', localStorage.getItem('userData'));
        
        // Затем устанавливаем состояние
        setCurrentUser(userData);
        setIsLoggedIn(true);
        setCurrentStep('dashboard');
        setShowProgressBar(true);
        showNotificationMessage('Регистрация успешна! Добро пожаловать в Adapto!');
        
        // Очищаем форму
        setFormData({
          email: '',
          password: '',
          name: '',
          company: '',
          phone: '',
          companyField: ''
        });
      } else {
        if (data.error === 'Email already exists' || data.error === 'Пользователь с таким email уже существует') {
          setFormErrors({ email: 'Пользователь с таким email уже существует' });
          showNotificationMessage('Пользователь с таким email уже существует');
        } else if (data.details) {
          const errors: any = {};
          data.details.forEach((detail: any) => {
            errors[detail.field] = detail.message;
          });
          setFormErrors(errors);
          showNotificationMessage('Ошибка регистрации. Проверьте данные.');
        } else {
          setFormErrors({ general: data.error || 'Ошибка регистрации' });
          showNotificationMessage('Ошибка регистрации. Проверьте данные.');
        }
      }
    } catch (error) {
      console.error('Register error:', error);
      showNotificationMessage('Ошибка подключения к серверу');
    }
  };

  const handleKbSubmit = async () => {
    if (!kbInputValue.trim() || !selectedKbType) return;

    const newItem = {
      id: Date.now(),
      type: selectedKbType,
      title: kbInputValue,
      status: 'Обработка' as const
    };

    // Добавляем в setupData для сохранения
    setSetupData(prev => ({
      ...prev,
      knowledgeItems: [...prev.knowledgeItems, {
        type: selectedKbType,
        content: kbInputValue
      }]
    }));

    setKbItems(prev => [...prev, newItem]);
    setKbModalOpen(false);
    setSelectedKbType(null);
    setKbInputValue('');

    try {
      // Отправляем в GigaChat для обучения
      const response = await fetch(`${API_BASE_URL}/knowledge`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'add',
          type: selectedKbType,
          content: kbInputValue,
          agentId: 'test-agent-1'
        }),
      });

      if (response.ok) {
        // Обновляем статус на "Загружен"
        setKbItems(prev => prev.map(item => 
          item.id === newItem.id 
            ? { ...item, status: 'Загружен' as const }
            : item
        ));
        showNotificationMessage('Элемент успешно обработан и добавлен в базу знаний');
      } else {
        showNotificationMessage('Ошибка при обработке элемента');
      }
    } catch (error) {
      console.error('Error processing knowledge item:', error);
      showNotificationMessage('Ошибка при обработке элемента');
    }
  };

  const handleBotCorrection = async () => {
    if (!botCorrection.trim()) return;

    try {
      // Отправляем исправление в GigaChat для обучения
      const response = await fetch(`${API_BASE_URL}/knowledge`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'correction',
          content: botCorrection,
          agentId: 'test-agent-1'
        }),
      });

      if (response.ok) {
        // Добавляем исправление в setupData как часть знаний
        setSetupData(prev => ({
          ...prev,
          knowledgeItems: [...prev.knowledgeItems, {
            type: 'correction',
            content: `Исправление поведения бота: ${botCorrection}`
          }]
        }));

        setBotCorrection('');
        showNotificationMessage('Исправление применено! Бот будет учитывать это в дальнейших ответах.');
      } else {
        showNotificationMessage('Ошибка при применении исправления');
      }
    } catch (error) {
      console.error('Error applying bot correction:', error);
      showNotificationMessage('Ошибка при применении исправления');
    }
  };

  const handleAddDialogStage = () => {
    if (newStageName.trim()) {
      const newStage = {
        id: Date.now(),
        name: newStageName,
        order: dialogStages.length + 1
      };
      setDialogStages([...dialogStages, newStage]);
      setNewStageName('');
      setShowAddStage(false);
    }
  };

  const handleDeleteDialogStage = (id: number) => {
    setDialogStages(dialogStages.filter(stage => stage.id !== id));
  };

  const handleEditDialogStage = (id: number, newName: string) => {
    setDialogStages(dialogStages.map(stage => 
      stage.id === id ? { ...stage, name: newName } : stage
    ));
  };

  const handleTestAdapto = () => {
    setCurrentSection('my-adapto');
  };

  const handleProgressTaskClick = (taskId: number) => {
    setProgressTasks(prev => prev.map(task => 
      task.id === taskId ? { ...task, completed: !task.completed } : task
    ));
  };

  const handleProgressTaskAction = (taskId: number) => {
    switch (taskId) {
      case 1:
        setCurrentSection('knowledge');
        setActiveSection('knowledge');
        localStorage.setItem('currentSection', 'knowledge');
        break;
      case 2:
        setCurrentSection('model-settings');
        setActiveSection('model-settings');
        localStorage.setItem('currentSection', 'model-settings');
        // Отмечаем как выполненную при посещении
        setProgressTasks(prev => prev.map(task => 
          task.id === taskId ? { ...task, completed: true } : task
        ));
        break;
      case 3:
        setCurrentSection('my-adapto');
        setActiveSection('my-adapto');
        localStorage.setItem('currentSection', 'my-adapto');
        // Отмечаем как выполненную при посещении
        setProgressTasks(prev => prev.map(task => 
          task.id === taskId ? { ...task, completed: true } : task
        ));
        break;
      case 4:
        showNotificationMessage('Adapto запущен! 🚀');
        setProgressTasks(prev => prev.map(task => 
          task.id === taskId ? { ...task, completed: true } : task
        ));
        break;
    }
  };

  const handleIntegrationClick = (integration: string) => {
    if (integration === 'widget') {
      setShowWidgetConstructor(true);
    } else {
      setSelectedIntegration(integration);
      setShowIntegrationModal(true);
    }
  };

  if (!isLoggedIn && currentStep !== 'dashboard') {
    return (
      <div className="min-h-screen bg-[#121212] flex flex-col lg:flex-row">
        {/* Логотип */}
        <div className="absolute top-11 left-1/2 transform -translate-x-1/2 z-10">
          <div className="w-[109px] h-6 flex items-center">
            <div className="w-[87px] h-[23px] flex items-center">
              <div className="w-[17px] h-[18px] bg-white rounded-sm"></div>
              <div className="w-[13px] h-[18px] bg-white ml-0.5"></div>
              <div className="w-[12px] h-[14px] bg-white ml-0.5"></div>
              <div className="w-[13px] h-[18px] bg-white ml-0.5"></div>
              <div className="w-[10px] h-[17px] bg-white ml-0.5"></div>
              <div className="w-[13px] h-[14px] bg-white ml-0.5"></div>
            </div>
            <div className="w-[19px] h-[19px] bg-gradient-to-br from-[#5BE5F7] to-[#4576EE] rounded-sm ml-2"></div>
          </div>
        </div>

        {/* Левая часть - форма входа */}
        <div className="w-full lg:w-1/2 flex items-center justify-center relative min-h-screen lg:min-h-0">
          <div className="w-full max-w-[440px] px-5 pt-20 lg:pt-0">
            <h1 className="text-white text-[24px] lg:text-[30px] font-semibold text-center mb-12 lg:mb-16">С возвращением!</h1>
            
            <form onSubmit={handleLoginSubmit} className="space-y-6">
              {formErrors.general && (
                <div className="bg-red-500/20 border border-red-500/50 text-red-400 px-4 py-3 rounded-lg text-sm">
                  {formErrors.general}
                </div>
              )}
              
              <div>
                <label className="block text-white text-[14px] font-semibold mb-2">Электронная почта</label>
                <input 
                  type="email" 
                  className={`w-full h-12 bg-white/20 border border-white rounded-[10px] px-5 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                    formErrors.email ? 'border-red-400 bg-red-500/20' : ''
                  }`}
                  placeholder="yapochta@yandex.ru"
                  value={formData.email}
                  onChange={(e) => setFormData({...formData, email: e.target.value})}
                />
                {formErrors.email && (
                  <p className="text-red-400 text-xs mt-1">{formErrors.email}</p>
                )}
              </div>
              
              <div>
                <label className="block text-white text-[14px] font-semibold mb-2">Пароль</label>
                <input 
                  type="password" 
                  className={`w-full h-12 bg-white/20 border border-white rounded-[10px] px-5 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                    formErrors.password ? 'border-red-400 bg-red-500/20' : ''
                  }`}
                  placeholder="**********"
                  value={formData.password}
                  onChange={(e) => setFormData({...formData, password: e.target.value})}
                />
                {formErrors.password && (
                  <p className="text-red-400 text-xs mt-1">{formErrors.password}</p>
                )}
                <div className="flex justify-end mt-2">
                  <button 
                    type="button"
                    onClick={() => setCurrentStep('forgot-password')}
                    className="text-[#096EFD] text-[14px] font-medium hover:text-blue-400 transition-colors"
                  >
                    Сбросить пароль
                  </button>
                </div>
              </div>
              
              <button 
                type="submit"
                className="w-full h-12 bg-gradient-to-r from-[#52AEFF] to-[#096EFD] text-white text-[16px] font-semibold rounded-[10px] hover:opacity-90 transition-opacity"
              >
                Войти в аккаунт
              </button>
              
              <div className="text-center">
                <button 
                  type="button"
                  onClick={handleRegister}
                  className="text-white text-[14px] font-medium hover:text-gray-300 transition-colors"
                >
                  Создать аккаунт
                </button>
              </div>
            </form>
          </div>
        </div>

        {/* Правая часть - изображение с цитатой */}
        <div className="w-full lg:w-1/2 relative min-h-[300px] lg:min-h-screen">
          <div className="absolute inset-0 bg-cover bg-center" style={{backgroundImage: 'url(/images/v23_6824.png)'}}></div>
          <div className="absolute inset-0 bg-black/20"></div>
          <div className="absolute inset-0 flex flex-col items-center justify-center text-center px-8 py-12">
            <p className="text-white text-[20px] lg:text-[30px] font-semibold mb-4 max-w-[575px]">
              В быстроменяющемся мире самое главное – это способность к адаптации.
            </p>
            <p className="text-white/80 text-[14px] lg:text-[16px] font-medium">
              Илон Маск, основатель xAI
            </p>
          </div>
        </div>
      </div>
    )
  } else {
    return (
      <div className="min-h-screen bg-gray-50">
        {currentStep === 'register-email' && (
          <div className="w-full max-w-md">
            <div className="text-center mb-8">
              <div className="flex items-center justify-center gap-2 mb-4">
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                </div>
                <span className="text-xl font-semibold">Adapto</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Попробуйте Adapto бесплатно</h1>
              <p className="text-gray-600">Укажите почту и пароль для входа в Adapto</p>
            </div>
            <div className="bg-white rounded-xl p-8 shadow-sm">
              <form onSubmit={(e) => { e.preventDefault(); handleRegisterStep('register-name'); }} className="space-y-4">
                {formErrors.general && (
                  <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg text-sm">
                    {formErrors.general}
                  </div>
                )}
                
                <div>
                  <label className="block text-sm font-medium mb-2">Email</label>
                  <input 
                    type="email" 
                    required
                    className={`w-full h-12 border rounded-lg px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      formErrors.email ? 'border-red-300 bg-red-50' : 'border-gray-300'
                    }`}
                    placeholder="your@email.com"
                    value={formData.email}
                    onChange={(e) => {
                      setFormData({...formData, email: e.target.value});
                      if (formErrors.email) setFormErrors({...formErrors, email: null});
                    }}
                  />
                  {formErrors.email && (
                    <p className="text-red-500 text-xs mt-1">{formErrors.email}</p>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-2">Пароль</label>
                  <input 
                    type="password" 
                    required
                    minLength={6}
                    className={`w-full h-12 border rounded-lg px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      formErrors.password ? 'border-red-300 bg-red-50' : 'border-gray-300'
                    }`}
                    placeholder="Минимум 6 символов"
                    value={formData.password}
                    onChange={(e) => {
                      setFormData({...formData, password: e.target.value});
                      if (formErrors.password) setFormErrors({...formErrors, password: null});
                    }}
                  />
                  {formErrors.password && (
                    <p className="text-red-500 text-xs mt-1">{formErrors.password}</p>
                  )}
                </div>
                
                <button 
                  type="submit"
                  className="w-full h-12 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
                >
                  Далее
                </button>
                <p className="text-xs text-gray-500 text-center">
                  Нажимая "Далее", вы соглашаетесь с условиями <span className="text-gray-700 underline">Оферты</span> и даете согласие на обработку персональных данных в соответствии с <span className="text-gray-700 underline">Политикой Конфиденциальности</span>
                </p>
              </form>
            </div>
          </div>
        )}

        {currentStep === 'register-name' && (
          <div className="w-full max-w-md">
            <div className="text-center mb-8">
              <div className="flex items-center justify-center gap-2 mb-4">
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                </div>
                <span className="text-xl font-semibold">Adapto</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Настройка Adapto</h1>
              <p className="text-gray-600">Укажите ответы на вопросы, чтобы настроить Adapto под ваш бизнес</p>
            </div>
            <div className="bg-white rounded-xl p-8 shadow-sm">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">Имя</label>
                  <Input 
                    type="text" 
                    className="h-12"
                    placeholder="Ваше имя"
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2">Название компании</label>
                  <Input 
                    type="text" 
                    className="h-12"
                    placeholder="Название компании"
                    value={formData.company}
                    onChange={(e) => setFormData({...formData, company: e.target.value})}
                  />
                </div>
                <Button 
                  onClick={() => handleRegisterStep('register-phone')}
                  className="w-full h-12"
                >
                  Далее
                </Button>
              </div>
            </div>
          </div>
        )}

        {currentStep === 'register-phone' && (
          <div className="w-full max-w-md">
            <div className="text-center mb-8">
              <div className="flex items-center justify-center gap-2 mb-4">
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                </div>
                <span className="text-xl font-semibold">Adapto</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Контактная информация</h1>
              <p className="text-gray-600">Укажите ваш номер телефона для связи</p>
            </div>
            <div className="bg-white rounded-xl p-8 shadow-sm">
              <form onSubmit={(e) => { e.preventDefault(); handleRegisterStep('register-company'); }} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">Телефон</label>
                  <div className="flex gap-2">
                    <select 
                      value={countryCode}
                      onChange={(e) => setCountryCode(e.target.value)}
                      className="w-24 h-12 border border-gray-300 rounded-lg px-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="+7">+7</option>
                      <option value="+1">+1</option>
                      <option value="+44">+44</option>
                      <option value="+49">+49</option>
                      <option value="+33">+33</option>
                      <option value="+39">+39</option>
                      <option value="+34">+34</option>
                      <option value="+81">+81</option>
                      <option value="+86">+86</option>
                      <option value="+91">+91</option>
                    </select>
                    <Input 
                      type="tel" 
                      required
                      className={`flex-1 h-12 ${
                        formErrors.phone ? 'border-red-300 bg-red-50' : ''
                      }`}
                      placeholder="(999) 123-45-67"
                      value={formData.phone}
                      onChange={(e) => {
                        const formatted = formatPhoneNumber(e.target.value);
                        setFormData({...formData, phone: formatted});
                        if (formErrors.phone) setFormErrors({...formErrors, phone: null});
                      }}
                    />
                  </div>
                  {formErrors.phone && (
                    <p className="text-red-500 text-xs mt-1">{formErrors.phone}</p>
                  )}
                  <p className="text-xs text-gray-500 mt-1">Введите только цифры, форматирование произойдет автоматически</p>
                </div>
                <Button 
                  type="submit"
                  className="w-full h-12"
                >
                  Далее
                </Button>
              </form>
            </div>
          </div>
        )}

        {currentStep === 'register-company' && (
          <div className="w-full max-w-md">
            <div className="text-center mb-8">
              <div className="flex items-center justify-center gap-2 mb-4">
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                </div>
                <span className="text-xl font-semibold">Adapto</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Настройка Adapto</h1>
              <p className="text-gray-600">Укажите ответы на вопросы, чтобы настроить Adapto под ваш бизнес</p>
            </div>
            <div className="bg-white rounded-xl p-8 shadow-sm">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">В какой сфере работает ваша компания?</label>
                  <Input 
                    type="text" 
                    className="h-12"
                    placeholder="Введите сферу компании"
                    value={formData.companyField}
                    onChange={(e) => setFormData({...formData, companyField: e.target.value})}
                  />
                </div>
                <Button 
                  onClick={handleRegisterSubmit}
                  className="w-full h-12"
                >
                  Завершить регистрацию
                </Button>
              </div>
            </div>
          </div>
        )}

        {currentStep === 'forgot-password' && (
          <div className="w-full max-w-md">
            <div className="text-center mb-8">
              <div className="flex items-center justify-center gap-2 mb-4">
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                </div>
                <span className="text-xl font-semibold">Adapto</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Восстановление пароля</h1>
              <p className="text-gray-600">Введите email для восстановления пароля</p>
            </div>
            <div className="bg-white rounded-xl p-8 shadow-sm">
              <form onSubmit={(e) => { e.preventDefault(); setCurrentStep('reset-password'); }} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">Email</label>
                  <Input 
                    type="email" 
                    required
                    className="h-12"
                    placeholder="your@email.com"
                    value={formData.email}
                    onChange={(e) => setFormData({...formData, email: e.target.value})}
                  />
                </div>
                <Button 
                  type="submit"
                  className="w-full h-12"
                >
                  Отправить ссылку
                </Button>
                <div className="text-center">
                  <button 
                    type="button"
                    onClick={() => setCurrentStep('login')}
                    className="text-blue-600 hover:text-blue-700 text-sm"
                  >
                    Вернуться к входу
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {currentStep === 'reset-password' && (
          <div className="w-full max-w-md">
            <div className="text-center mb-8">
              <div className="flex items-center justify-center gap-2 mb-4">
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                </div>
                <span className="text-xl font-semibold">Adapto</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Проверьте почту</h1>
              <p className="text-gray-600">На вашу почту отправлена ссылка для сброса пароля</p>
            </div>
            <div className="bg-white rounded-xl p-8 shadow-sm text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                  <span className="text-white text-xl">✓</span>
                </div>
              </div>
              <h3 className="text-lg font-semibold mb-2">Ссылка отправлена!</h3>
              <p className="text-gray-600 mb-6">
                Перейдите по ссылке в письме, чтобы создать новый пароль
              </p>
              <button 
                onClick={() => setCurrentStep('login')}
                className="w-full h-12 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
              >
                Вернуться к входу
              </button>
            </div>
          </div>
        )}
      </div>
    )
  } else {
    return (
      <div className="min-h-screen bg-gray-50">
        {currentStep === 'register-email' && (
          <div className="w-full max-w-md mx-auto pt-20">
            <div className="text-center mb-8">
              <div className="flex items-center justify-center gap-2 mb-4">
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                </div>
                <span className="text-xl font-semibold">Adapto</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Попробуйте Adapto бесплатно</h1>
              <p className="text-gray-600">Укажите почту и пароль для входа в Adapto</p>
            </div>
            <div className="bg-white rounded-xl p-8 shadow-sm">
              <form onSubmit={(e) => { e.preventDefault(); handleRegisterStep('register-name'); }} className="space-y-4">
                {formErrors.general && (
                  <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg text-sm">
                    {formErrors.general}
                  </div>
                )}
                
                <div>
                  <label className="block text-sm font-medium mb-2">Email</label>
                  <input 
                    type="email" 
                    required
                    className={`w-full h-12 border rounded-lg px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      formErrors.email ? 'border-red-300 bg-red-50' : 'border-gray-300'
                    }`}
                    placeholder="your@email.com"
                    value={formData.email}
                    onChange={(e) => {
                      setFormData({...formData, email: e.target.value});
                      if (formErrors.email) setFormErrors({...formErrors, email: null});
                    }}
                  />
                  {formErrors.email && (
                    <p className="text-red-500 text-xs mt-1">{formErrors.email}</p>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-2">Пароль</label>
                  <input 
                    type="password" 
                    required
                    minLength={6}
                    className={`w-full h-12 border rounded-lg px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      formErrors.password ? 'border-red-300 bg-red-50' : 'border-gray-300'
                    }`}
                    placeholder="Минимум 6 символов"
                    value={formData.password}
                    onChange={(e) => {
                      setFormData({...formData, password: e.target.value});
                      if (formErrors.password) setFormErrors({...formErrors, password: null});
                    }}
                  />
                  {formErrors.password && (
                    <p className="text-red-500 text-xs mt-1">{formErrors.password}</p>
                  )}
                </div>
                
                <button 
                  type="submit"
                  className="w-full h-12 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
                >
                  Далее
                </button>
                <p className="text-xs text-gray-500 text-center">
                  Нажимая "Далее", вы соглашаетесь с условиями <span className="text-gray-700 underline">Оферты</span> и даете согласие на обработку персональных данных в соответствии с <span className="text-gray-700 underline">Политикой Конфиденциальности</span>
                </p>
              </form>
            </div>
          </div>
        )}

        {currentStep === 'register-name' && (
          <div className="w-full max-w-md mx-auto pt-20">
            <div className="text-center mb-8">
              <div className="flex items-center justify-center gap-2 mb-4">
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                </div>
                <span className="text-xl font-semibold">Adapto</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Настройка Adapto</h1>
              <p className="text-gray-600">Укажите ответы на вопросы, чтобы настроить Adapto под ваш бизнес</p>
            </div>
            <div className="bg-white rounded-xl p-8 shadow-sm">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">Имя</label>
                  <input 
                    type="text" 
                    className="w-full h-12 border border-gray-300 rounded-lg px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ваше имя"
                    value={formData.name}
                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-2">Название компании</label>
                  <input 
                    type="text" 
                    className="w-full h-12 border border-gray-300 rounded-lg px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Название компании"
                    value={formData.company}
                    onChange={(e) => setFormData({...formData, company: e.target.value})}
                  />
                </div>
                <button 
                  onClick={() => handleRegisterStep('register-phone')}
                  className="w-full h-12 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
                >
                  Далее
                </button>
              </div>
            </div>
          </div>
        )}

        {currentStep === 'register-phone' && (
          <div className="w-full max-w-md mx-auto pt-20">
            <div className="text-center mb-8">
              <div className="flex items-center justify-center gap-2 mb-4">
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                </div>
                <span className="text-xl font-semibold">Adapto</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Контактная информация</h1>
              <p className="text-gray-600">Укажите ваш номер телефона для связи</p>
            </div>
            <div className="bg-white rounded-xl p-8 shadow-sm">
              <form onSubmit={(e) => { e.preventDefault(); handleRegisterStep('register-company'); }} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">Телефон</label>
                  <div className="flex gap-2">
                    <select 
                      value={countryCode}
                      onChange={(e) => setCountryCode(e.target.value)}
                      className="w-24 h-12 border border-gray-300 rounded-lg px-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="+7">+7</option>
                      <option value="+1">+1</option>
                      <option value="+44">+44</option>
                      <option value="+49">+49</option>
                      <option value="+33">+33</option>
                      <option value="+39">+39</option>
                      <option value="+34">+34</option>
                      <option value="+81">+81</option>
                      <option value="+86">+86</option>
                      <option value="+91">+91</option>
                    </select>
                    <input 
                      type="tel" 
                      required
                      className={`flex-1 h-12 border rounded-lg px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                        formErrors.phone ? 'border-red-300 bg-red-50' : 'border-gray-300'
                      }`}
                      placeholder="(999) 123-45-67"
                      value={formData.phone}
                      onChange={(e) => {
                        const formatted = formatPhoneNumber(e.target.value);
                        setFormData({...formData, phone: formatted});
                        if (formErrors.phone) setFormErrors({...formErrors, phone: null});
                      }}
                    />
                  </div>
                  {formErrors.phone && (
                    <p className="text-red-500 text-xs mt-1">{formErrors.phone}</p>
                  )}
                  <p className="text-xs text-gray-500 mt-1">Введите только цифры, форматирование произойдет автоматически</p>
                </div>
                <button 
                  type="submit"
                  className="w-full h-12 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
                >
                  Далее
                </button>
              </form>
            </div>
          </div>
        )}

        {currentStep === 'register-company' && (
          <div className="w-full max-w-md mx-auto pt-20">
            <div className="text-center mb-8">
              <div className="flex items-center justify-center gap-2 mb-4">
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                </div>
                <span className="text-xl font-semibold">Adapto</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Настройка Adapto</h1>
              <p className="text-gray-600">Укажите ответы на вопросы, чтобы настроить Adapto под ваш бизнес</p>
            </div>
            <div className="bg-white rounded-xl p-8 shadow-sm">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">В какой сфере работает ваша компания?</label>
                  <input 
                    type="text" 
                    className="w-full h-12 border border-gray-300 rounded-lg px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Введите сферу компании"
                    value={formData.companyField}
                    onChange={(e) => setFormData({...formData, companyField: e.target.value})}
                  />
                </div>
                <button 
                  onClick={handleRegisterSubmit}
                  className="w-full h-12 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
                >
                  Завершить регистрацию
                </button>
              </div>
            </div>
          </div>
        )}

        {currentStep === 'forgot-password' && (
          <div className="w-full max-w-md mx-auto pt-20">
            <div className="text-center mb-8">
              <div className="flex items-center justify-center gap-2 mb-4">
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                </div>
                <span className="text-xl font-semibold">Adapto</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Восстановление пароля</h1>
              <p className="text-gray-600">Введите email для восстановления пароля</p>
            </div>
            <div className="bg-white rounded-xl p-8 shadow-sm">
              <form onSubmit={(e) => { e.preventDefault(); setCurrentStep('reset-password'); }} className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2">Email</label>
                  <input 
                    type="email" 
                    required
                    className="w-full h-12 border border-gray-300 rounded-lg px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="your@email.com"
                    value={formData.email}
                    onChange={(e) => setFormData({...formData, email: e.target.value})}
                  />
                </div>
                <button 
                  type="submit"
                  className="w-full h-12 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
                >
                  Отправить ссылку
                </button>
                <div className="text-center">
                  <button 
                    type="button"
                    onClick={() => setCurrentStep('login')}
                    className="text-blue-600 hover:text-blue-700 text-sm"
                  >
                    Вернуться к входу
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {currentStep === 'reset-password' && (
          <div className="w-full max-w-md mx-auto pt-20">
            <div className="text-center mb-8">
              <div className="flex items-center justify-center gap-2 mb-4">
                <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                  <div className="w-2 h-2 bg-white rounded-full"></div>
                </div>
                <span className="text-xl font-semibold">Adapto</span>
              </div>
              <h1 className="text-2xl font-bold mb-2">Проверьте почту</h1>
              <p className="text-gray-600">На вашу почту отправлена ссылка для сброса пароля</p>
            </div>
            <div className="bg-white rounded-xl p-8 shadow-sm text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                  <span className="text-white text-xl">✓</span>
                </div>
              </div>
              <h3 className="text-lg font-semibold mb-2">Ссылка отправлена!</h3>
              <p className="text-gray-600 mb-6">
                Перейдите по ссылке в письме, чтобы создать новый пароль
              </p>
              <button 
                onClick={() => setCurrentStep('login')}
                className="w-full h-12 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
              >
                Вернуться к входу
              </button>
            </div>
          </div>
        )}
      </div>
    )
  }

  const renderContent = () => {
    switch (activeSection) {
      case 'my-solo':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-2xl font-bold">Мой Adapto</h1>
            </div>

            <div className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle>Настройте Adapto под себя</CardTitle>
                  <p className="text-gray-600">
                    Если заметите ошибку или захотите подправить ответ — нажмите кнопку «Исправить ошибку», 
                    и Adapto станет отвечать корректно
                  </p>
                </CardHeader>
              </Card>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Левая панель */}
                <div className="space-y-4">
                  {/* Предупреждение о базе знаний */}
                  {setupData.knowledgeItems.length === 0 && showWarningCard && (
              <div className="border rounded-lg p-4 bg-orange-50 border-orange-200">
                <div className="flex justify-between items-start">
                  <div className="flex gap-3">
                    <AlertTriangle className="h-4 w-4 text-orange-500 mt-1" />
                    <div>
                            <div className="text-orange-600 mb-1 font-medium">Вы еще не настроили базу знаний</div>
                      <div className="text-sm mb-2">
                              Пополните базу знаний, чтобы Adapto начал работать эффективно
                      </div>
                            <Button 
                              variant="outline" 
                              size="sm" 
                              className="bg-orange-100"
                              onClick={() => {
                                setCurrentSection('knowledge');
                                setActiveSection('knowledge');
                                localStorage.setItem('currentSection', 'knowledge');
                              }}
                            >
                              Настроить базу знаний
                      </Button>
                    </div>
                  </div>
                        <Button variant="ghost" size="sm" onClick={() => {
                          setShowWarningCard(false);
                          localStorage.setItem('showWarningCard', 'false');
                        }}>×</Button>
                </div>
              </div>
                  )}

                  {/* Поле для исправлений */}
              <Card>
                <CardHeader>
                      <CardTitle>Внесите исправления в бота</CardTitle>
                      <p className="text-gray-600 text-sm">
                        Если вы увидели ошибку в ответах Adapto – напишите правильный ответ здесь, 
                        и бот будет отвечать корректно
                      </p>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        <Textarea
                          value={botCorrection}
                          onChange={(e) => setBotCorrection(e.target.value)}
                          placeholder="Опишите, как должен отвечать бот в подобных ситуациях..."
                          className="min-h-[120px]"
                        />
                        <Button 
                          className="w-full"
                          onClick={handleBotCorrection}
                          disabled={!botCorrection.trim()}
                        >
                          Применить
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                {/* Правая панель - Чат */}
                <div className="space-y-4">
                  <Card>
                    <CardHeader>
                      <CardTitle>Протестируйте Adapto в действии</CardTitle>
                  <p className="text-gray-600">
                    Напишите любое сообщение и посмотрите, как отвечает ваш ИИ
                  </p>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                        {/* Чат с красивым дизайном */}
                        <div className="border rounded-lg p-4 min-h-[400px] bg-gray-50 flex flex-col">
                          {/* Заголовок чата */}
                          <div className="flex items-center gap-3 mb-4 pb-3 border-b">
                            <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                              <span className="text-white text-sm font-bold">A</span>
                            </div>
                            <div className="bg-gray-200 rounded-full px-3 py-1">
                              <span className="text-sm text-gray-700">Общайтесь с Adapto</span>
                            </div>
                          </div>
                          
                          {/* Сообщения */}
                          <div className="flex-1 space-y-3 overflow-y-auto">
                        {chatHistory.map((message, index) => (
                          <div key={index} className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
                                <div className={`max-w-[80%] p-3 rounded-lg ${
                              message.type === 'user' 
                                    ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white' 
                                    : 'bg-white border border-gray-200 shadow-sm'
                            }`}>
                              {message.text}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                        
                        {/* Поле ввода */}
                    <div className="flex gap-2">
                      <Input 
                        value={chatMessage}
                            onChange={(e) => setChatMessage(e.target.value)}
                            placeholder="Type in a message..."
                            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                            className="flex-1"
                      />
                      <Button onClick={handleSendMessage}>
                            Отправить
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
                </div>
              </div>
            </div>
          </div>
        )

      case 'knowledge':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-2xl font-bold">База знаний</h1>
              <Button variant="ghost" size="sm">
                <Info className="w-4 h-4 mr-2" />
                Как это работает?
              </Button>
            </div>

            {/* Отображение элементов из setup wizard */}
            {setupData.knowledgeItems.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle>Элементы из настройки</CardTitle>
                  <p className="text-gray-600">
                    Элементы, добавленные во время настройки Adapto
                  </p>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    {setupData.knowledgeItems.map((item: any, index: number) => (
                      <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                        <div className="flex items-center gap-3">
                          <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                            {item.type === 'site' && <Globe className="w-4 h-4 text-blue-600" />}
                            {item.type === 'feed' && <LinkIcon className="w-4 h-4 text-blue-600" />}
                            {item.type === 'text' && <EditIcon className="w-4 h-4 text-blue-600" />}
                            {item.type === 'file' && <FileIcon className="w-4 h-4 text-blue-600" />}
                          </div>
                          <div>
                            <div className="font-medium text-sm">
                              {item.type === 'site' && 'Сайт'}
                              {item.type === 'feed' && 'Товарный фид'}
                              {item.type === 'text' && 'Текст'}
                              {item.type === 'file' && 'Файл'}
                            </div>
                            <div className="text-xs text-gray-500 truncate max-w-xs">
                              {item.content}
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className="text-xs text-green-600 bg-green-100 px-2 py-1 rounded-full">
                            Обработка
                          </div>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            onClick={() => handleDeleteKnowledgeItem(index)}
                            className="text-red-500 hover:text-red-700 hover:bg-red-50"
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Основная база знаний */}
            <Card>
              <CardContent className="flex flex-col items-center justify-center py-16 text-center">
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4">
                  <Database className="w-8 h-8 text-gray-400" />
                </div>
                <h3 className="mb-2">Пока здесь пусто</h3>
                <p className="text-gray-600 mb-6">
                  Добавьте новые файлы или ссылки, чтобы Adapto начал обучаться
                </p>
                <Button onClick={() => setKbModalOpen(true)}>
                  <Plus className="w-4 h-4 mr-2" />
                  Добавить файл или ссылку
                </Button>
              </CardContent>
            </Card>
            {kbModalOpen && (
              <div className="fixed inset-0 z-50 flex items-center justify-center">
                <div className="absolute inset-0 bg-black/50" onClick={() => setKbModalOpen(false)} />
                <div className="relative bg-white rounded-xl max-w-xl w-full p-6 shadow-lg">
                  <div className="flex justify-between items-center mb-4">
                    <h3 className="text-lg font-semibold">Добавление в базу знаний</h3>
                    <button className="text-gray-400" onClick={() => setKbModalOpen(false)}>✕</button>
          </div>
                  <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 mb-6">
                    <div 
                      className={`border-2 rounded-lg p-4 flex flex-col items-center text-center cursor-pointer transition-all duration-200 ${
                        selectedKbType === 'site' 
                          ? 'border-blue-500 bg-blue-50 text-blue-700' 
                          : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300 hover:bg-gray-50'
                      }`}
                      onClick={() => handleKbTypeSelect('site')}
                    >
                      <Globe className={`w-6 h-6 mb-2 ${selectedKbType === 'site' ? 'text-blue-600' : 'text-gray-500'}`} />
                      <div className="text-sm font-medium">Сайт</div>
                    </div>
                    <div 
                      className={`border-2 rounded-lg p-4 flex flex-col items-center text-center cursor-pointer transition-all duration-200 ${
                        selectedKbType === 'feed' 
                          ? 'border-blue-500 bg-blue-50 text-blue-700' 
                          : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300 hover:bg-gray-50'
                      }`}
                      onClick={() => handleKbTypeSelect('feed')}
                    >
                      <LinkIcon className={`w-6 h-6 mb-2 ${selectedKbType === 'feed' ? 'text-blue-600' : 'text-gray-500'}`} />
                      <div className="text-sm font-medium">Товарный фид</div>
                    </div>
                    <div 
                      className={`border-2 rounded-lg p-4 flex flex-col items-center text-center cursor-pointer transition-all duration-200 ${
                        selectedKbType === 'text' 
                          ? 'border-blue-500 bg-blue-50 text-blue-700' 
                          : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300 hover:bg-gray-50'
                      }`}
                      onClick={() => handleKbTypeSelect('text')}
                    >
                      <EditIcon className={`w-6 h-6 mb-2 ${selectedKbType === 'text' ? 'text-blue-600' : 'text-gray-500'}`} />
                      <div className="text-sm font-medium">Свой текст</div>
                    </div>
                    <div 
                      className={`border-2 rounded-lg p-4 flex flex-col items-center text-center cursor-pointer transition-all duration-200 ${
                        selectedKbType === 'file' 
                          ? 'border-blue-500 bg-blue-50 text-blue-700' 
                          : 'border-gray-200 bg-white text-gray-600 hover:border-gray-300 hover:bg-gray-50'
                      }`}
                      onClick={() => handleKbTypeSelect('file')}
                    >
                      <FileIcon className={`w-6 h-6 mb-2 ${selectedKbType === 'file' ? 'text-blue-600' : 'text-gray-500'}`} />
                      <div className="text-sm font-medium">Файл</div>
                    </div>
                  </div>
                  
                  {selectedKbType && (
                    <div className="mb-6">
                      {selectedKbType === 'site' && (
                        <div>
                          <label className="block text-sm font-medium mb-2">Ссылка на сайт</label>
                          <input 
                            type="url" 
                            className="w-full h-12 border border-gray-300 rounded-lg px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="https://example.com"
                            value={kbInputValue}
                            onChange={(e) => setKbInputValue(e.target.value)}
                          />
                    </div>
                      )}
                      {selectedKbType === 'feed' && (
                    <div>
                          <label className="block text-sm font-medium mb-2">Ссылка на товарный фид</label>
                          <input 
                            type="url" 
                            className="w-full h-12 border border-gray-300 rounded-lg px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="https://example.com/feed.xml"
                            value={kbInputValue}
                            onChange={(e) => setKbInputValue(e.target.value)}
                          />
                    </div>
                      )}
                      {selectedKbType === 'text' && (
                        <div>
                          <label className="block text-sm font-medium mb-2">Ваш текст</label>
                          <textarea 
                            className="w-full h-32 border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                            placeholder="Введите ваш текст..."
                            value={kbInputValue}
                            onChange={(e) => setKbInputValue(e.target.value)}
                          />
                  </div>
                      )}
                      {selectedKbType === 'file' && (
                        <div>
                          <label className="block text-sm font-medium mb-2">Загрузить файл</label>
                          <div 
                            className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-blue-500 transition-colors"
                            onClick={() => document.getElementById('file-input')?.click()}
                          >
                            <Plus className="w-8 h-8 mx-auto mb-2 text-gray-400" />
                            <div className="text-sm text-gray-600">Нажмите для выбора файла</div>
                            <input 
                              id="file-input"
                              type="file" 
                              className="hidden" 
                              onChange={(e) => {
                                const file = e.target.files?.[0]
                                if (file) {
                                  setKbInputValue(file.name)
                                }
                              }}
                            />
                          </div>
                        </div>
                      )}
                    </div>
                  )}
                  
                  <Button 
                    className={`w-full transition-all duration-200 z-10 relative ${
                      !selectedKbType || !kbInputValue.trim() 
                        ? 'bg-white border-2 border-gray-200 text-gray-600 hover:bg-gray-50' 
                        : 'bg-blue-600 border-2 border-blue-600 text-white hover:bg-blue-700 hover:border-blue-700'
                    }`}
                    onClick={handleKbSubmit}
                    disabled={!selectedKbType || !kbInputValue.trim()}
                  >
                    Добавить в базу знаний
                  </Button>
                </div>
              </div>
            )}

            {kbItems.length > 0 && (
              <Card>
                <CardContent className="p-6">
                  {kbItems.map(item => (
                    <div key={item.id} className="flex items-center justify-between border rounded-lg p-3 mb-3">
                  <div className="flex items-center gap-3">
                        {item.type === 'site' && <Globe className="w-5 h-5" />}
                        {item.type === 'feed' && <LinkIcon className="w-5 h-5" />}
                        {item.type === 'text' && <EditIcon className="w-5 h-5" />}
                        {item.type === 'file' && <FileIcon className="w-5 h-5" />}
                        <div className="font-medium">{item.title}</div>
                    </div>
                      <div className="flex items-center gap-3 text-sm">
                        {item.status === 'Обработка' && (
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                        )}
                        <span className={item.status === 'Обработка' ? 'text-blue-600' : 'text-green-600'}>
                          {item.status}
                        </span>
                        <button 
                          onClick={() => setKbItems(prev => prev.filter(i => i.id !== item.id))}
                          className="text-gray-400 hover:text-red-600 transition-colors"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                    </div>
                  </div>
                  ))}
                </CardContent>
              </Card>
            )}
          </div>
        )



      case 'dashboard':
        return (
          <div className="space-y-6">
            <h1 className="text-2xl font-bold">Сводка</h1>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Количество сообщений</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-blue-600">
                    {chatHistory.length > 1 ? chatHistory.length - 1 : 0}
                    </div>
                  <p className="text-sm text-gray-600">Всего сообщений</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Количество диалогов</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-green-600">
                    {chatHistory.length > 1 ? 1 : 0}
                    </div>
                  <p className="text-sm text-gray-600">Активных диалогов</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Количество заявок</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-purple-600">0</div>
                  <p className="text-sm text-gray-600">Конверсия 0%</p>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Открытие виджета</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-orange-600">0</div>
                  <p className="text-sm text-gray-600">За сегодня</p>
                </CardContent>
              </Card>
            </div>

            {/* График активности */}
              <Card>
                <CardHeader>
                <CardTitle>Активность за последние 7 дней</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-64 flex items-end justify-between gap-2">
                  {[12, 19, 15, 25, 22, 30, 28].map((value, index) => (
                    <div key={index} className="flex-1 bg-blue-100 rounded-t" style={{ height: `${(value / 30) * 100}%` }}>
                      <div className="bg-blue-500 h-full rounded-t"></div>
                    </div>
                  ))}
                    </div>
                <div className="flex justify-between text-xs text-gray-500 mt-2">
                  <span>Пн</span>
                  <span>Вт</span>
                  <span>Ср</span>
                  <span>Чт</span>
                  <span>Пт</span>
                  <span>Сб</span>
                  <span>Вс</span>
                  </div>
                </CardContent>
              </Card>
          </div>
        )



      case 'model-settings':
        return (
          <div className="space-y-6">
            <h1 className="text-2xl font-bold">Настройки модели</h1>
            
            {/* Шаг 1: Цели Adapto */}
              <Card>
                <CardHeader>
                <CardTitle>Шаг 1: Цели Adapto</CardTitle>
                <p className="text-gray-600">
                  Настройки целей и задач вашего ИИ-агента
                </p>
                </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block mb-2 font-medium">Задача Adapto</label>
                    <div className="grid grid-cols-2 gap-3">
                      <button
                        onClick={() => setSetupData({...setupData, task: 'Продавать'})}
                        className={`p-4 rounded-lg border-2 transition-all ${
                          setupData.task === 'Продавать' 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-lg font-medium mb-1">Продавать</div>
                          <div className="text-sm text-gray-600">Помогать в продажах</div>
                        </div>
                      </button>
                      <button
                        onClick={() => setSetupData({...setupData, task: 'Консультировать'})}
                        className={`p-4 rounded-lg border-2 transition-all ${
                          setupData.task === 'Консультировать' 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-lg font-medium mb-1">Консультировать</div>
                          <div className="text-sm text-gray-600">Давать консультации</div>
                        </div>
                      </button>
                    </div>
                  </div>
                  <div>
                    <label className="block mb-2 font-medium">Главная цель</label>
                    <div className="space-y-3">
                      {[
                        'Записать на консультацию',
                        'Продать продукт',
                        'Решить проблему клиента',
                        'Другое'
                      ].map(goal => (
                        <button
                          key={goal}
                          onClick={() => setSetupData({...setupData, mainGoal: goal})}
                          className={`w-full p-3 rounded-lg border-2 transition-all text-left ${
                            setupData.mainGoal === goal 
                              ? 'border-blue-500 ring-2 ring-blue-200' 
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                        >
                          {goal}
                        </button>
                      ))}
                    </div>
                    {setupData.mainGoal === 'Другое' && (
                      <input
                        type="text"
                        value={setupData.mainGoalCustom}
                        onChange={(e) => setSetupData({...setupData, mainGoalCustom: e.target.value})}
                        placeholder="Укажите вашу цель"
                        className="mt-3 w-full p-3 border rounded-lg border-gray-300"
                      />
                    )}
                  </div>
                  <div>
                    <label className="block mb-2 font-medium">Цикл сделки</label>
                    <textarea
                      value={setupData.salesCycle}
                      onChange={(e) => setSetupData({...setupData, salesCycle: e.target.value})}
                      placeholder="Опишите процесс продажи от первого контакта до закрытия сделки"
                      className="w-full p-3 border border-gray-300 rounded-lg resize-none"
                      rows={3}
                    />
                  </div>
                  <div>
                    <label className="block mb-2 font-medium">Целевая аудитория</label>
                    <textarea
                      value={setupData.targetAudience}
                      onChange={(e) => setSetupData({...setupData, targetAudience: e.target.value})}
                      placeholder="Опишите вашу целевую аудиторию"
                      className="w-full p-3 border border-gray-300 rounded-lg resize-none"
                      rows={3}
                    />
                  </div>
                </div>
                </CardContent>
              </Card>

            {/* Шаг 2: Правила общения */}
              <Card>
                <CardHeader>
                <CardTitle>Шаг 2: Правила общения</CardTitle>
                <p className="text-gray-600">
                  Настройки стиля общения и ограничений
                </p>
                </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block mb-2 font-medium">Обращение к пользователю</label>
                    <div className="flex gap-3">
                      <button 
                        onClick={() => setSetupData({...setupData, addressing: 'Ты'})}
                        className={`flex-1 border rounded-full h-10 transition-colors ${
                          setupData.addressing === 'Ты' ? 'bg-blue-600 text-white border-blue-600' : 'bg-white hover:bg-gray-50'
                        }`}
                      >
                        на "Ты"
                      </button>
                      <button 
                        onClick={() => setSetupData({...setupData, addressing: 'Вы'})}
                        className={`flex-1 border rounded-full h-10 transition-colors ${
                          setupData.addressing === 'Вы' ? 'bg-blue-600 text-white border-blue-600' : 'bg-white hover:bg-gray-50'
                        }`}
                      >
                        на "Вы"
                      </button>
                    </div>
                  </div>
                  <div>
                    <label className="block mb-2 font-medium">Стиль общения</label>
                    <div className="flex flex-wrap gap-2">
                      {[
                        { text: 'Дружелюбный', emoji: '😊' },
                        { text: 'Нейтральный', emoji: '😐' },
                        { text: 'Профессиональный', emoji: '💼' },
                        { text: 'Юмористический', emoji: '😄' }
                      ].map(t => (
                        <button 
                          key={t.text} 
                          onClick={() => setSetupData({...setupData, communicationStyle: t.text})} 
                          className={`px-4 h-10 rounded-full border flex items-center gap-2 ${
                            setupData.communicationStyle === t.text ? 'bg-blue-600 text-white border-blue-600' : 'bg-white hover:bg-gray-50'
                          }`}
                        >
                          <span>{t.emoji}</span>
                          <span>{t.text}</span>
                        </button>
                      ))}
                    </div>
                  </div>
                </div>

                <div className="border rounded-xl p-4 bg-gray-50">
                  <div className="font-medium mb-2">Ограничения Adapto</div>
                  <div className="flex flex-wrap gap-2">
                    {[
                      'Не обсуждай цены',
                      'Не давай финансовых советов',
                      'Не консультируй по юридическим вопросам',
                      'Не разъясняй условия договоров',
                      'Не создавай обязательств от лица компании',
                      'Не подтверждай наличие товара или услуги',
                      'Другое'
                    ].map(restriction => (
                      <button
                        key={restriction}
                        onClick={() => {
                          if (restriction === 'Другое') {
                            // Если "Другое" уже активно, убираем его и поле ввода
                            if (setupData.restrictionsCustom !== undefined) {
                              setSetupData({
                                ...setupData, 
                                restrictionsCustom: undefined,
                                restrictions: setupData.restrictions.filter(r => r !== 'Другое')
                              });
                            } else {
                              // Если "Другое" не активно, активируем его и добавляем в массив
                              setSetupData({
                                ...setupData, 
                                restrictionsCustom: '',
                                restrictions: [...setupData.restrictions, 'Другое']
                              });
                            }
                          } else {
                            const newRestrictions = setupData.restrictions.includes(restriction)
                              ? setupData.restrictions.filter(r => r !== restriction)
                              : [...setupData.restrictions, restriction];
                            setSetupData({...setupData, restrictions: newRestrictions});
                          }
                        }}
                        className={`px-4 py-2 rounded-full border-2 transition-all text-sm ${
                          setupData.restrictions.includes(restriction)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {restriction}
                      </button>
                    ))}
                  </div>
                  {setupData.restrictions.includes('Другое') && setupData.restrictionsCustom !== undefined && (
                    <input
                      type="text"
                      value={setupData.restrictionsCustom}
                      onChange={(e) => setSetupData({...setupData, restrictionsCustom: e.target.value})}
                      placeholder="Укажите ваше ограничение"
                      className="mt-3 w-full p-3 border border-gray-300 rounded-lg"
                    />
                  )}
                </div>

                <div className="border rounded-xl p-4 bg-gray-50">
                  <div className="font-medium mb-2">Дополнительные настройки</div>
                  <div className="flex flex-wrap gap-2">
                    {[
                      'Не гарантировать результат',
                      'Пояснять ссылки перед отправкой',
                      'Проверять понимание ответа',
                      'Избегать длинных сообщений',
                      'Уточнять задачу в начале общения',
                      'Не оказывать давление на клиента',
                      'Предупреждать об ожидании ответа',
                      'Избегать споров',
                      'Отвечать от первого лица',
                      'Другое'
                    ].map(setting => (
                      <button
                        key={setting}
                        onClick={() => {
                          if (setting === 'Другое') {
                            // Если "Другое" уже активно, убираем его и поле ввода
                            if (setupData.additionalSettingsCustom !== undefined) {
                              setSetupData({
                                ...setupData, 
                                additionalSettingsCustom: undefined,
                                additionalSettings: setupData.additionalSettings.filter(s => s !== 'Другое')
                              });
                            } else {
                              // Если "Другое" не активно, активируем его и добавляем в массив
                              setSetupData({
                                ...setupData, 
                                additionalSettingsCustom: '',
                                additionalSettings: [...setupData.additionalSettings, 'Другое']
                              });
                            }
                          } else {
                            const newSettings = setupData.additionalSettings.includes(setting)
                              ? setupData.additionalSettings.filter(s => s !== setting)
                              : [...setupData.additionalSettings, setting];
                            setSetupData({...setupData, additionalSettings: newSettings});
                          }
                        }}
                        className={`px-4 py-2 rounded-full border-2 transition-all text-sm ${
                          setupData.additionalSettings.includes(setting)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {setting}
                      </button>
                    ))}
                  </div>
                  {setupData.additionalSettings.includes('Другое') && setupData.additionalSettingsCustom !== undefined && (
                    <input
                      type="text"
                      value={setupData.additionalSettingsCustom}
                      onChange={(e) => setSetupData({...setupData, additionalSettingsCustom: e.target.value})}
                      placeholder="Укажите вашу настройку"
                      className="mt-3 w-full p-3 border border-gray-300 rounded-lg"
                    />
                  )}
                </div>

                <div className="border rounded-xl p-4 bg-gray-50">
                  <div className="font-medium mb-2">Сбор данных</div>
                  <div className="flex flex-wrap gap-2">
                    {[
                      'Имя',
                      'Номер телефона',
                      'Почта',
                      'Адрес доставки',
                      'Город',
                      'Возраст',
                      'Не собирать данные',
                      'Добавить данные'
                    ].map(dataType => (
                      <button
                        key={dataType}
                        onClick={() => {
                          if (dataType === 'Добавить данные') {
                            // Если "Добавить данные" уже активно, убираем его и поле ввода
                            if (setupData.dataCollectionCustom !== undefined) {
                              setSetupData({
                                ...setupData, 
                                dataCollectionCustom: undefined,
                                dataCollection: setupData.dataCollection.filter(d => d !== 'Добавить данные')
                              });
                            } else {
                              // Если "Добавить данные" не активно, активируем его и добавляем в массив
                              setSetupData({
                                ...setupData, 
                                dataCollectionCustom: '',
                                dataCollection: [...setupData.dataCollection, 'Добавить данные']
                              });
                            }
                          } else if (dataType === 'Не собирать данные') {
                            setSetupData({...setupData, dataCollection: []});
                          } else {
                            const newDataCollection = setupData.dataCollection.includes(dataType)
                              ? setupData.dataCollection.filter(d => d !== dataType)
                              : [...setupData.dataCollection, dataType];
                            setSetupData({...setupData, dataCollection: newDataCollection});
                          }
                        }}
                        className={`px-4 py-2 rounded-full border-2 transition-all text-sm ${
                          (dataType === 'Не собирать данные' && setupData.dataCollection.length === 0) ||
                          setupData.dataCollection.includes(dataType)
                            ? 'border-blue-500 bg-blue-50 text-blue-700' 
                            : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                        }`}
                      >
                        {dataType}
                      </button>
                    ))}
                  </div>
                  {setupData.dataCollection.includes('Добавить данные') && setupData.dataCollectionCustom !== undefined && (
                    <input
                      type="text"
                      value={setupData.dataCollectionCustom}
                      onChange={(e) => setSetupData({...setupData, dataCollectionCustom: e.target.value})}
                      placeholder="Укажите какие данные собирать"
                      className="mt-3 w-full p-3 border border-gray-300 rounded-lg"
                    />
                  )}
                </div>

                <div className="border rounded-xl p-4 bg-gray-50">
                  <div className="font-medium mb-2">Отправка смайликов</div>
                  <div className="grid grid-cols-3 gap-4 text-center">
                    {([
                      { text: 'Никогда', emoji: '' },
                      { text: 'Редко', emoji: '😊' },
                      { text: 'Часто', emoji: '😊 😄' }
                    ] as const).map(opt => (
                      <button 
                        key={opt.text} 
                        onClick={() => setSetupData({...setupData, emojiUsage: opt.text})}
                        className={`border rounded-xl p-6 ${setupData.emojiUsage === opt.text ? 'ring-2 ring-blue-500 bg-blue-50' : 'bg-white hover:bg-gray-50'}`}
                      >
                        <div className="text-2xl mb-2">{opt.emoji}</div>
                        <div className="text-sm">{opt.text}</div>
                      </button>
                    ))}
                  </div>
                </div>

                </CardContent>
              </Card>

            {/* Шаг 3: Этапы диалога */}
              <Card>
                <CardHeader>
                <CardTitle>Шаг 3: Этапы диалога</CardTitle>
                <p className="text-gray-600">
                  Настроенные этапы диалога с клиентами
                </p>
                </CardHeader>
                <CardContent>
                <div className="space-y-4">
                  {setupData.dialogStages.map((stage, index) => (
                    <div key={index} className="border border-gray-200 rounded-lg p-4">
                      <div className="flex items-start gap-3">
                        <div className="w-6 h-6 bg-gray-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                          <span className="text-white text-sm">{index + 1}</span>
                        </div>
                        <div className="flex-1">
                          <textarea
                            value={stage}
                            onChange={(e) => {
                              const newStages = [...setupData.dialogStages];
                              newStages[index] = e.target.value;
                              setSetupData({...setupData, dialogStages: newStages});
                            }}
                            className="w-full p-3 border border-gray-300 rounded-lg resize-none"
                            rows={2}
                          />
                        </div>
                        <button
                          onClick={() => {
                            const newStages = setupData.dialogStages.filter((_, i) => i !== index);
                            setSetupData({...setupData, dialogStages: newStages});
                          }}
                          className="text-red-500 hover:text-red-700 p-2"
                        >
                          ×
                        </button>
                      </div>
                    </div>
                  ))}
                  
                  <button
                    onClick={() => {
                      const newStages = [...setupData.dialogStages, 'Новый этап'];
                      setSetupData({...setupData, dialogStages: newStages});
                    }}
                    className="w-full p-3 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-gray-400 hover:text-gray-800 transition-colors"
                  >
                    + Добавить этап
                  </button>
                </div>
                </CardContent>
              </Card>

            {/* Кнопки действий */}
            <div className="flex gap-3">
              <Button className="flex-1" onClick={handleSaveSettings}>Сохранить изменения</Button>
              <Button className="flex-1" variant="outline" onClick={handleTestAdapto}>Протестировать Adapto</Button>
            </div>
          </div>
        )

      case 'dialogs':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-2xl font-bold">Диалоги</h1>
              <div className="flex gap-2">
                <Button variant="outline" size="sm">
                  <Download className="w-4 h-4 mr-2" />
                  CSV
                </Button>
                <Button variant="outline" size="sm">
                  <Download className="w-4 h-4 mr-2" />
                  XLS
                </Button>
              </div>
            </div>

            {/* Фильтрация */}
            <Card>
              <CardContent className="p-4">
                <div className="flex flex-wrap gap-2 items-center">
                  <span className="text-sm font-medium text-gray-700">Фильтр по дате:</span>
                  {[
                    { label: 'Сегодня', value: 'today' },
                    { label: 'Вчера', value: 'yesterday' },
                    { label: '7 дней', value: '7days' },
                    { label: 'Месяц', value: 'month' }
                  ].map(filter => (
                    <button
                      key={filter.value}
                      className="px-3 py-1 text-sm border border-gray-300 rounded-lg hover:bg-gray-50"
                    >
                      {filter.label}
                    </button>
                  ))}
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-gray-600">Выбор дат:</span>
                    <input 
                      type="date" 
                      className="px-2 py-1 text-sm border border-gray-300 rounded"
                    />
                    <span className="text-sm text-gray-600">—</span>
                    <input 
                      type="date" 
                      className="px-2 py-1 text-sm border border-gray-300 rounded"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            {!showConversationDetail ? (
              <div className="space-y-4">
            <Card>
              <CardHeader>
                    <CardTitle>Список диалогов</CardTitle>
              </CardHeader>
              <CardContent>
                    <div className="space-y-2">
                      {conversations.length === 0 ? (
                        <div className="text-center py-8 text-gray-500">
                          <MessageSquare className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                          <p>Здесь будут показываться ваши диалоги</p>
                          <p className="text-sm">Приступите к настройке ИИ-агента</p>
                  </div>
                      ) : (
                        conversations.map((conv) => (
                          <div 
                            key={conv.id}
                            onClick={() => {
                              setSelectedConversation(conv);
                              setShowConversationDetail(true);
                            }}
                            className="border rounded-lg p-4 hover:bg-gray-50 cursor-pointer transition-colors"
                          >
                            <div className="flex justify-between items-start">
                              <div>
                                <div className="font-medium">{conv.client_name || 'Клиент'}</div>
                                <div className="text-sm text-gray-500">{conv.last_message}</div>
                    </div>
                              <div className="text-xs text-gray-400">{conv.last_message_time}</div>
                    </div>
                    </div>
                        ))
                      )}
                    </div>
                  </CardContent>
                </Card>
                  </div>
            ) : (
              <div className="space-y-4">
                <div className="flex items-center gap-4">
                  <button 
                    onClick={() => setShowConversationDetail(false)}
                    className="text-blue-600 hover:text-blue-700"
                  >
                    ← Назад к списку
                  </button>
                  <h2>Диалог с {selectedConversation?.client_name || 'Клиентом'}</h2>
                </div>
                
                <Card>
                  <CardContent className="p-4">
                    <div className="space-y-4 max-h-96 overflow-y-auto">
                      {selectedConversation?.messages?.map((msg, idx) => (
                        <div 
                          key={idx}
                          className={`flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}
                        >
                          <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                            msg.type === 'user' 
                              ? 'bg-blue-600 text-white' 
                              : 'bg-gray-100 text-gray-900'
                          }`}>
                            {msg.text}
                          </div>
                        </div>
                      ))}
                </div>
              </CardContent>
            </Card>
              </div>
            )}
          </div>
        )

      case 'integrations':
        return (
          <div className="space-y-6">
            <div className="flex justify-between items-center">
              <h1 className="text-2xl font-bold">Интеграции</h1>
            </div>

            {/* Первая плашка - настройка виджета */}
            <Card 
              className="cursor-pointer hover:shadow-md transition-shadow"
              onClick={() => handleIntegrationClick('widget')}
            >
              <CardContent className="p-6">
                <div className="flex items-center gap-4">
                  <div className="w-12 h-12 bg-purple-500 rounded-lg flex items-center justify-center">
                    <span className="text-white font-bold">W</span>
                </div>
                  <div className="flex-1">
                    <h3 className="font-medium mb-1">Настройка виджета</h3>
                    <p className="text-sm text-gray-600">Чат-виджет для сайта</p>
                  </div>
                  <div className="text-gray-400">→</div>
                </div>
              </CardContent>
            </Card>

            {/* Вторая группа - мессенджеры */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card 
                className="cursor-pointer hover:shadow-md transition-shadow"
                onClick={() => handleIntegrationClick('telegram')}
              >
                <CardContent className="p-6">
                  <div className="text-center">
                    <div className="w-12 h-12 bg-blue-500 rounded-lg mx-auto mb-4 flex items-center justify-center">
                      <span className="text-white font-bold">TG</span>
                </div>
                    <h3 className="font-medium mb-2">Telegram</h3>
                    <p className="text-sm text-gray-600">Подключите бота к Telegram</p>
                  </div>
                </CardContent>
              </Card>

              <Card 
                className="cursor-pointer hover:shadow-md transition-shadow"
                onClick={() => handleIntegrationClick('whatsapp')}
              >
                <CardContent className="p-6">
                  <div className="text-center">
                    <div className="w-12 h-12 bg-green-500 rounded-lg mx-auto mb-4 flex items-center justify-center">
                      <span className="text-white font-bold">WA</span>
                </div>
                    <h3 className="font-medium mb-2">WhatsApp</h3>
                    <p className="text-sm text-gray-600">Интеграция с WhatsApp Business</p>
                  </div>
                </CardContent>
              </Card>

              <Card 
                className="cursor-pointer hover:shadow-md transition-shadow"
                onClick={() => handleIntegrationClick('instagram')}
              >
                <CardContent className="p-6">
                  <div className="text-center">
                    <div className="w-12 h-12 bg-pink-500 rounded-lg mx-auto mb-4 flex items-center justify-center">
                      <span className="text-white font-bold">IG</span>
                    </div>
                    <h3 className="font-medium mb-2">Instagram</h3>
                    <p className="text-sm text-gray-600">Интеграция с Instagram</p>
                  </div>
              </CardContent>
            </Card>
            </div>

            {/* Третья группа - CRM системы */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card 
                className="cursor-pointer hover:shadow-md transition-shadow"
                onClick={() => handleIntegrationClick('amocrm')}
              >
                <CardContent className="p-6">
                  <div className="text-center">
                    <div className="w-12 h-12 bg-blue-600 rounded-lg mx-auto mb-4 flex items-center justify-center">
                      <span className="text-white font-bold">A</span>
                    </div>
                    <h3 className="font-medium mb-2">AmoCRM</h3>
                    <p className="text-sm text-gray-600">Интеграция с AmoCRM</p>
                  </div>
                </CardContent>
              </Card>

              <Card 
                className="cursor-pointer hover:shadow-md transition-shadow"
                onClick={() => handleIntegrationClick('bitrix24')}
              >
                <CardContent className="p-6">
                  <div className="text-center">
                    <div className="w-12 h-12 bg-orange-500 rounded-lg mx-auto mb-4 flex items-center justify-center">
                      <span className="text-white font-bold">B</span>
                    </div>
                    <h3 className="font-medium mb-2">Битрикс24</h3>
                    <p className="text-sm text-gray-600">Интеграция с Битрикс24</p>
                  </div>
                </CardContent>
              </Card>
            </div>


          </div>
        )

      default:
        return <div>Раздел в разработке</div>
    }
  }

  // Показываем основной интерфейс если пользователь вошел в систему
  if (isLoggedIn || currentStep === 'dashboard') {
        return (
    <div className="flex h-screen w-full bg-gray-50">
      {/* Success Modal */}
      {showSuccessModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div className="absolute inset-0 bg-black/50" onClick={() => setShowSuccessModal(false)} />
          <div className="relative bg-white rounded-xl max-w-md w-full p-8 shadow-lg text-center">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                <span className="text-white text-xl">✓</span>
              </div>
            </div>
            <h3 className="text-xl font-bold mb-2">Спасибо за регистрацию!</h3>
            <p className="text-gray-600 mb-6">
              Пройдите по всем шагам, чтобы создать своего ИИ-агента и запустить его в работу
            </p>
            <button 
              onClick={() => setShowSuccessModal(false)}
              className="w-full h-12 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
            >
              Отлично!
            </button>
          </div>
        </div>
      )}

      {/* Notification */}
      {showNotification && (
        <div className="fixed top-4 right-4 z-50 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg transform transition-all duration-300">
          {notificationMessage}
        </div>
      )}

      {/* Setup Wizard */}
      {showSetupWizard && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
          <div className="bg-white rounded-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="p-6 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <h2 className="text-2xl font-bold">Настройка ИИ-агента</h2>
                <div className="flex items-center gap-4">
                  <div className="text-sm text-gray-600">
                    Шаг {setupStep} из 4
                  </div>
                  <button 
                    onClick={() => setShowSetupWizard(false)}
                    className="text-gray-400 hover:text-gray-600 text-xl"
                  >
                    ×
                  </button>
                </div>
              </div>
              <div className="mt-4 flex gap-2">
                {[1, 2, 3, 4].map(step => (
                  <div 
                    key={step}
                    className={`h-2 flex-1 rounded-full ${
                      step <= setupStep ? 'bg-blue-500' : 'bg-gray-200'
                    }`}
                  />
                ))}
              </div>
            </div>
            
            <div className="p-6" id="setup-content">
              {showValidationMessage && (
                <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                  <div className="text-red-800 font-medium">Пожалуйста, заполните все обязательные поля</div>
                </div>
              )}
              
              {setupStep === 1 && (
          <div className="space-y-6">
                  <h3 className="text-xl font-semibold">Шаг 1. Уточните цели Adapto</h3>
                  
                <div>
                    <label className="block text-sm font-medium mb-3">
                      Какую задачу должен выполнять Адапто?
                      <span className="text-red-500 ml-1">*</span>
                    </label>
                    <div className="grid grid-cols-2 gap-3">
                      <button
                        onClick={() => setSetupData({...setupData, task: 'Продавать'})}
                        className={`p-4 rounded-lg border-2 transition-all ${
                          setupData.task === 'Продавать' 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : validationErrors.task 
                              ? 'border-red-500 ring-2 ring-red-200' 
                              : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-lg font-medium mb-1">Продавать</div>
                          <div className="text-sm text-gray-600">Помогать в продажах</div>
                        </div>
                      </button>
                      <button
                        onClick={() => setSetupData({...setupData, task: 'Консультировать'})}
                        className={`p-4 rounded-lg border-2 transition-all ${
                          setupData.task === 'Консультировать' 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : validationErrors.task 
                              ? 'border-red-500 ring-2 ring-red-200' 
                              : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-lg font-medium mb-1">Консультировать</div>
                          <div className="text-sm text-gray-600">Давать консультации</div>
                        </div>
                      </button>
                    </div>
                </div>
                
                <div>
                    <label className="block text-sm font-medium mb-3">
                      Какая главная цель ИИ-агента?
                      <span className="text-red-500 ml-1">*</span>
                    </label>
                    <div className="space-y-3">
                      {[
                        'Записать на консультацию',
                        'Продать продукт',
                        'Решить проблему клиента',
                        'Другое'
                      ].map(goal => (
                        <button
                          key={goal}
                          onClick={() => setSetupData({...setupData, mainGoal: goal})}
                          className={`w-full p-3 rounded-lg border-2 transition-all text-left ${
                            setupData.mainGoal === goal 
                              ? 'border-blue-500 ring-2 ring-blue-200' 
                              : validationErrors.mainGoal 
                                ? 'border-red-500 ring-2 ring-red-200' 
                                : 'border-gray-200 hover:border-gray-300'
                          }`}
                        >
                          {goal}
                        </button>
                      ))}
                    </div>
                    {setupData.mainGoal === 'Другое' && (
                      <input
                        type="text"
                        value={setupData.mainGoalCustom}
                        onChange={(e) => setSetupData({...setupData, mainGoalCustom: e.target.value})}
                        placeholder="Укажите вашу цель"
                        className={`mt-3 w-full p-3 border rounded-lg ${
                          validationErrors.mainGoalCustom 
                            ? 'border-red-500 ring-2 ring-red-200' 
                            : 'border-gray-300'
                        }`}
                      />
                    )}
                </div>

                <div>
                    <label className="block text-sm font-medium mb-2">
                      Какой цикл сделки у вас в компании?
                      <span className="text-red-500 ml-1">*</span>
                    </label>
                    <textarea
                      value={setupData.salesCycle}
                      onChange={(e) => setSetupData({...setupData, salesCycle: e.target.value})}
                      placeholder="Опишите процесс продажи от первого контакта до закрытия сделки"
                      className={`w-full p-3 border rounded-lg resize-none ${
                        validationErrors.salesCycle 
                          ? 'border-red-500 ring-2 ring-red-200' 
                          : 'border-gray-300'
                      }`}
                      rows={3}
                  />
                </div>

                  <div>
                    <label className="block text-sm font-medium mb-2">
                      Целевая аудитория
                      <span className="text-red-500 ml-1">*</span>
                    </label>
                    <textarea
                      value={setupData.targetAudience}
                      onChange={(e) => setSetupData({...setupData, targetAudience: e.target.value})}
                      placeholder="Опишите вашу целевую аудиторию"
                      className={`w-full p-3 border rounded-lg resize-none ${
                        validationErrors.targetAudience 
                          ? 'border-red-500 ring-2 ring-red-200' 
                          : 'border-gray-300'
                      }`}
                      rows={3}
                    />
          </div>
                </div>
              )}

              {setupStep === 2 && (
                <div className="space-y-6">
                  <h3 className="text-xl font-semibold">Шаг 2. Правила общения</h3>
                  
                  <div>
                    <label className="block text-sm font-medium mb-3">Обращение к пользователю</label>
                    <div className="grid grid-cols-2 gap-3">
                      <button
                        onClick={() => setSetupData({...setupData, addressing: 'Ты'})}
                        className={`p-4 rounded-lg border-2 transition-all ${
                          setupData.addressing === 'Ты' 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-lg font-medium">на "Ты"</div>
                        </div>
                      </button>
                      <button
                        onClick={() => setSetupData({...setupData, addressing: 'Вы'})}
                        className={`p-4 rounded-lg border-2 transition-all ${
                          setupData.addressing === 'Вы' 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-lg font-medium">на "Вы"</div>
                        </div>
                      </button>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-3">Стиль общения</label>
                    <div className="grid grid-cols-2 gap-3">
                      {[
                        { label: 'Дружелюбный', emoji: '😊' },
                        { label: 'Нейтральный', emoji: '😐' },
                        { label: 'Профессиональный', emoji: '💼' },
                        { label: 'Юмористический', emoji: '😄' }
                      ].map(style => (
                        <button
                          key={style.label}
                          onClick={() => setSetupData({...setupData, communicationStyle: style.label})}
                          className={`p-4 rounded-lg border-2 transition-all ${
                            setupData.communicationStyle === style.label 
                              ? 'border-blue-500 ring-2 ring-blue-200' 
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                        >
                          <div className="text-center">
                            <div className="text-lg font-medium mb-1">{style.emoji}</div>
                            <div className="text-sm">{style.label}</div>
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-3">Отправка смайликов</label>
                    <div className="grid grid-cols-3 gap-3">
                      {[
                        { label: 'Никогда', emoji: '' },
                        { label: 'Редко', emoji: '😊' },
                        { label: 'Часто', emoji: '😊 😄' }
                      ].map(option => (
                        <button
                          key={option.label}
                          onClick={() => setSetupData({...setupData, emojiUsage: option.label})}
                          className={`p-4 rounded-lg border-2 transition-all ${
                            setupData.emojiUsage === option.label 
                              ? 'border-blue-500 ring-2 ring-blue-200' 
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                        >
                          <div className="text-center">
                            <div className="text-lg font-medium mb-1">{option.emoji}</div>
                            <div className="text-sm">{option.label}</div>
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-3">
                      Ограничения Адапто
                      <span className="text-red-500 ml-1">*</span>
                    </label>
                    <div className="flex flex-wrap gap-2">
                      {[
                        'Не обсуждай цены',
                        'Не давай финансовых советов',
                        'Не консультируй по юридическим вопросам',
                        'Не разъясняй условия договоров',
                        'Не создавай обязательств от лица компании',
                        'Не подтверждай наличие товара или услуги',
                        'Другое'
                      ].map(restriction => (
                        <button
                          key={restriction}
                          onClick={() => {
                            if (restriction === 'Другое') {
                              // Если "Другое" уже активно, убираем его и поле ввода
                              if (setupData.restrictionsCustom !== undefined) {
                                setSetupData({
                                  ...setupData, 
                                  restrictionsCustom: undefined,
                                  restrictions: setupData.restrictions.filter(r => r !== 'Другое')
                                });
                              } else {
                                // Если "Другое" не активно, активируем его и добавляем в массив
                                setSetupData({
                                  ...setupData, 
                                  restrictionsCustom: '',
                                  restrictions: [...setupData.restrictions, 'Другое']
                                });
                              }
                            } else {
                              const newRestrictions = setupData.restrictions.includes(restriction)
                                ? setupData.restrictions.filter(r => r !== restriction)
                                : [...setupData.restrictions, restriction];
                              setSetupData({...setupData, restrictions: newRestrictions});
                            }
                          }}
                          className={`px-4 py-2 rounded-full border-2 transition-all text-sm ${
                            setupData.restrictions.includes(restriction)
                              ? 'border-blue-500 bg-blue-50 text-blue-700' 
                              : validationErrors.restrictions 
                                ? 'border-red-300 bg-red-50 text-red-700' 
                                : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                          }`}
                        >
                          {restriction}
                        </button>
                      ))}
                    </div>
                    {setupData.restrictions.includes('Другое') && setupData.restrictionsCustom !== undefined && (
                      <input
                        type="text"
                        value={setupData.restrictionsCustom}
                        onChange={(e) => setSetupData({...setupData, restrictionsCustom: e.target.value})}
                        placeholder="Укажите ваше ограничение"
                        className="mt-3 w-full p-3 border border-gray-300 rounded-lg"
                      />
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-3">
                      Дополнительные настройки стиля общения
                      <span className="text-red-500 ml-1">*</span>
                    </label>
                    <div className="flex flex-wrap gap-2">
                      {[
                        'Не гарантировать результат',
                        'Пояснять ссылки перед отправкой',
                        'Проверять понимание ответа',
                        'Избегать длинных сообщений',
                        'Уточнять задачу в начале общения',
                        'Не оказывать давление на клиента',
                        'Предупреждать об ожидании ответа',
                        'Избегать споров',
                        'Отвечать от первого лица',
                        'Другое'
                      ].map(setting => (
                        <button
                          key={setting}
                          onClick={() => {
                            if (setting === 'Другое') {
                              // Если "Другое" уже активно, убираем его и поле ввода
                              if (setupData.additionalSettingsCustom !== undefined) {
                                setSetupData({
                                  ...setupData, 
                                  additionalSettingsCustom: undefined,
                                  additionalSettings: setupData.additionalSettings.filter(s => s !== 'Другое')
                                });
                              } else {
                                // Если "Другое" не активно, активируем его и добавляем в массив
                                setSetupData({
                                  ...setupData, 
                                  additionalSettingsCustom: '',
                                  additionalSettings: [...setupData.additionalSettings, 'Другое']
                                });
                              }
                            } else {
                              const newSettings = setupData.additionalSettings.includes(setting)
                                ? setupData.additionalSettings.filter(s => s !== setting)
                                : [...setupData.additionalSettings, setting];
                              setSetupData({...setupData, additionalSettings: newSettings});
                            }
                          }}
                          className={`px-4 py-2 rounded-full border-2 transition-all text-sm ${
                            setupData.additionalSettings.includes(setting) 
                              ? 'border-blue-500 bg-blue-50 text-blue-700' 
                              : validationErrors.additionalSettings 
                                ? 'border-red-300 bg-red-50 text-red-700' 
                                : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                          }`}
                        >
                          {setting}
                        </button>
                      ))}
                    </div>
                    {setupData.additionalSettings.includes('Другое') && setupData.additionalSettingsCustom !== undefined && (
                      <input
                        type="text"
                        value={setupData.additionalSettingsCustom}
                        onChange={(e) => setSetupData({...setupData, additionalSettingsCustom: e.target.value})}
                        placeholder="Укажите вашу настройку"
                        className="mt-3 w-full p-3 border border-gray-300 rounded-lg"
                      />
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-3">Сбор данных</label>
                    <div className="flex flex-wrap gap-2">
                      {[
                        'Имя',
                        'Номер телефона',
                        'Почта',
                        'Адрес доставки',
                        'Город',
                        'Возраст',
                        'Не собирать данные',
                        'Добавить данные'
                      ].map(dataType => (
                        <button
                          key={dataType}
                          onClick={() => {
                            if (dataType === 'Добавить данные') {
                              // Если "Добавить данные" уже активно, убираем его и поле ввода
                              if (setupData.dataCollectionCustom !== undefined) {
                                setSetupData({
                                  ...setupData, 
                                  dataCollectionCustom: undefined,
                                  dataCollection: setupData.dataCollection.filter(d => d !== 'Добавить данные')
                                });
                              } else {
                                // Если "Добавить данные" не активно, активируем его и добавляем в массив
                                setSetupData({
                                  ...setupData, 
                                  dataCollectionCustom: '',
                                  dataCollection: [...setupData.dataCollection, 'Добавить данные']
                                });
                              }
                            } else {
                              const newDataCollection = setupData.dataCollection.includes(dataType)
                                ? setupData.dataCollection.filter(d => d !== dataType)
                                : [...setupData.dataCollection, dataType];
                              setSetupData({...setupData, dataCollection: newDataCollection});
                            }
                          }}
                          className={`px-4 py-2 rounded-full border-2 transition-all text-sm ${
                            setupData.dataCollection.includes(dataType)
                              ? 'border-blue-500 bg-blue-50 text-blue-700' 
                              : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                          }`}
                        >
                          {dataType}
                        </button>
                      ))}
                    </div>
                    {setupData.dataCollection.includes('Добавить данные') && setupData.dataCollectionCustom !== undefined && (
                      <input
                        type="text"
                        value={setupData.dataCollectionCustom}
                        onChange={(e) => setSetupData({...setupData, dataCollectionCustom: e.target.value})}
                        placeholder="Укажите какие данные собирать"
                        className="mt-3 w-full p-3 border border-gray-300 rounded-lg"
                      />
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-3">Уточнение и вопросы</label>
                    <div className="flex flex-wrap gap-2">
                      {[
                        'Если запрос неполный',
                        'Если клиент сомневается',
                        'Если есть риск ошибки',
                        'При выборе продукта или услуги',
                        'Если ответ зависит от тонкостей',
                        'Если клиент проявляет интерес к нескольким вариантам',
                        'Если клиент не понимает предложенное',
                        'Если требуется индивидуальный подбор',
                        'Если клиент задаёт вопросы вне своей компетенции',
                        'Если клиент спрашивает о вещах, которые требует специальных знаний',
                        'При оформлении заявки или заказа',
                        'Перед тем как оформить что-то важное',
                        'Если клиент долго молчит',
                        'Другое'
                      ].map(rule => (
                        <button
                          key={rule}
                          onClick={() => {
                            if (rule === 'Другое') {
                              // Если "Другое" уже активно, убираем его и поле ввода
                              if (setupData.clarificationRulesCustom !== undefined) {
                                setSetupData({
                                  ...setupData, 
                                  clarificationRulesCustom: undefined,
                                  clarificationRules: setupData.clarificationRules.filter(r => r !== 'Другое')
                                });
                              } else {
                                // Если "Другое" не активно, активируем его и добавляем в массив
                                setSetupData({
                                  ...setupData, 
                                  clarificationRulesCustom: '',
                                  clarificationRules: [...setupData.clarificationRules, 'Другое']
                                });
                              }
                            } else {
                              const newRules = setupData.clarificationRules.includes(rule)
                                ? setupData.clarificationRules.filter(r => r !== rule)
                                : [...setupData.clarificationRules, rule];
                              setSetupData({...setupData, clarificationRules: newRules});
                            }
                          }}
                          className={`px-4 py-2 rounded-full border-2 transition-all text-sm ${
                            setupData.clarificationRules.includes(rule) 
                              ? 'border-blue-500 bg-blue-50 text-blue-700' 
                              : 'border-gray-200 bg-white text-gray-700 hover:border-gray-300'
                          }`}
                        >
                          {rule}
                        </button>
                      ))}
                    </div>
                    {setupData.clarificationRules.includes('Другое') && setupData.clarificationRulesCustom !== undefined && (
                      <input
                        type="text"
                        value={setupData.clarificationRulesCustom}
                        onChange={(e) => setSetupData({...setupData, clarificationRulesCustom: e.target.value})}
                        placeholder="Укажите ваше правило"
                        className="mt-3 w-full p-3 border border-gray-300 rounded-lg"
                      />
                    )}
                  </div>
                </div>
              )}

              {setupStep === 3 && (
                <div className="space-y-6">
                  <h3 className="text-xl font-semibold">Шаг 3. Этапы диалога</h3>
                  
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-start gap-3">
                      <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                        <span className="text-white text-sm">!</span>
                      </div>
                      <div>
                        <div className="font-medium text-blue-800 mb-1">Уделите время детальному описанию идеального скрипта</div>
                        <div className="text-sm text-blue-700">
                          Это очень важно для хорошей работы вашего ИИ-продажника. Вы сможете скорректировать поведение позже, но правильная настройка сейчас даст лучшие результаты сразу. Ниже представлен шаблон, который вам нужно адаптировать.
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="space-y-4">
                    {setupData.dialogStages.map((stage, index) => (
                      <div key={index} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-start gap-3">
                          <div className="w-6 h-6 bg-gray-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                            <span className="text-white text-sm">{index + 1}</span>
                          </div>
                          <div className="flex-1">
                            <textarea
                              value={stage}
                              onChange={(e) => {
                                const newStages = [...setupData.dialogStages];
                                newStages[index] = e.target.value;
                                setSetupData({...setupData, dialogStages: newStages});
                              }}
                              className="w-full p-3 border border-gray-300 rounded-lg resize-none"
                              rows={2}
                            />
                          </div>
                          <button
                            onClick={() => {
                              const newStages = setupData.dialogStages.filter((_, i) => i !== index);
                              setSetupData({...setupData, dialogStages: newStages});
                            }}
                            className="text-red-500 hover:text-red-700 p-2"
                          >
                            ×
                          </button>
                        </div>
                      </div>
                    ))}
                    
                    <button
                      onClick={() => {
                        const newStages = [...setupData.dialogStages, 'Новый этап'];
                        setSetupData({...setupData, dialogStages: newStages});
                      }}
                      className="w-full p-3 border-2 border-dashed border-gray-300 rounded-lg text-gray-600 hover:border-gray-400 hover:text-gray-800 transition-colors"
                    >
                      + Добавить этап
                    </button>
                  </div>
                </div>
              )}

              {setupStep === 4 && (
                <div className="space-y-6">
                  <h3 className="text-xl font-semibold">Шаг 4. Обучение Адапто</h3>
                  
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <div className="flex items-start gap-3">
                      <div className="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                        <span className="text-white text-sm">!</span>
                      </div>
                      <div>
                        <div className="font-medium text-blue-800 mb-1">Загрузите минимум 1 ресурс с информацией о компании</div>
                        <div className="text-sm text-blue-700">
                          Чтобы Адапто смог обучиться на ней
                        </div>
                      </div>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium mb-3">
                      Выберите тип ресурса
                      <span className="text-red-500 ml-1">*</span>
                    </label>
                    <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
                      {[
                        { type: 'site', label: 'Сайт', icon: '🌐' },
                        { type: 'feed', label: 'Товарный фид', icon: '📋' },
                        { type: 'text', label: 'Написать самому', icon: '✏️' },
                        { type: 'file', label: 'Файл', icon: '📁' }
                      ].map(item => (
                        <button
                          key={item.type}
                          onClick={() => {
                            setSetupData({
                              ...setupData, 
                              selectedKnowledgeType: item.type
                            });
                          }}
                          className={`p-4 border-2 rounded-lg transition-colors ${
                            setupData.selectedKnowledgeType === item.type 
                              ? 'border-blue-500 bg-blue-50' 
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                        >
                          <div className="text-center">
                            <div className="text-2xl mb-2">{item.icon}</div>
                            <div className="text-sm">{item.label}</div>
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Поля для ввода в зависимости от выбранного типа */}
                  {setupData.selectedKnowledgeType === 'site' && (
                    <div>
                      <label className="block text-sm font-medium mb-2">Ссылка на сайт</label>
                      <input
                        type="url"
                        value={setupData.knowledgeInputValue || ''}
                        onChange={(e) => setSetupData({...setupData, knowledgeInputValue: e.target.value})}
                        placeholder="https://example.com"
                        className="w-full p-3 border border-gray-300 rounded-lg"
                      />
                      <button
                        onClick={() => {
                          if (setupData.knowledgeInputValue?.trim()) {
                            // Валидация URL
                            const urlRegex = /^https?:\/\/.+/;
                            if (!urlRegex.test(setupData.knowledgeInputValue)) {
                              alert('Пожалуйста, введите корректный URL (начинающийся с http:// или https://)');
                              return;
                            }
                            
                            setSetupData({
                              ...setupData,
                              knowledgeItems: [...setupData.knowledgeItems, { 
                                type: 'site', 
                                content: setupData.knowledgeInputValue 
                              }],
                              knowledgeInputValue: '',
                              selectedKnowledgeType: ''
                            });
                          }
                        }}
                        className="mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                      >
                        Добавить сайт
                      </button>
                    </div>
                  )}

                  {setupData.selectedKnowledgeType === 'feed' && (
                    <div>
                      <label className="block text-sm font-medium mb-2">Ссылка на товарный фид</label>
                      <input
                        type="url"
                        value={setupData.knowledgeInputValue || ''}
                        onChange={(e) => setSetupData({...setupData, knowledgeInputValue: e.target.value})}
                        placeholder="https://example.com/feed.xml"
                        className="w-full p-3 border border-gray-300 rounded-lg"
                      />
                      <button
                        onClick={() => {
                          if (setupData.knowledgeInputValue?.trim()) {
                            // Валидация URL
                            const urlRegex = /^https?:\/\/.+/;
                            if (!urlRegex.test(setupData.knowledgeInputValue)) {
                              alert('Пожалуйста, введите корректный URL (начинающийся с http:// или https://)');
                              return;
                            }
                            
                            setSetupData({
                              ...setupData,
                              knowledgeItems: [...setupData.knowledgeItems, { 
                                type: 'feed', 
                                content: setupData.knowledgeInputValue 
                              }],
                              knowledgeInputValue: '',
                              selectedKnowledgeType: ''
                            });
                          }
                        }}
                        className="mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                      >
                        Добавить фид
                      </button>
                    </div>
                  )}

                  {setupData.selectedKnowledgeType === 'text' && (
                    <div>
                      <label className="block text-sm font-medium mb-2">Текст о компании</label>
                      <textarea
                        value={setupData.knowledgeInputValue || ''}
                        onChange={(e) => setSetupData({...setupData, knowledgeInputValue: e.target.value})}
                        placeholder="Опишите вашу компанию, продукты, услуги..."
                        className="w-full p-3 border border-gray-300 rounded-lg resize-none"
                        rows={4}
                      />
                      <button
                        onClick={() => {
                          if (setupData.knowledgeInputValue?.trim()) {
                            setSetupData({
                              ...setupData,
                              knowledgeItems: [...setupData.knowledgeItems, { 
                                type: 'text', 
                                content: setupData.knowledgeInputValue 
                              }],
                              knowledgeInputValue: '',
                              selectedKnowledgeType: ''
                            });
                          }
                        }}
                        className="mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                      >
                        Добавить текст
                      </button>
                    </div>
                  )}

                  {setupData.selectedKnowledgeType === 'file' && (
                    <div>
                      <label className="block text-sm font-medium mb-2">Загрузить файл</label>
                      <input
                        type="file"
                        onChange={(e) => {
                          const file = e.target.files?.[0];
                          if (file) {
                            setSetupData({
                              ...setupData,
                              knowledgeItems: [...setupData.knowledgeItems, { 
                                type: 'file', 
                                content: file.name 
                              }],
                              selectedKnowledgeType: ''
                            });
                          }
                        }}
                        className="w-full p-3 border border-gray-300 rounded-lg"
                        accept=".pdf,.doc,.docx,.txt"
                      />
                    </div>
                  )}

                  {setupData.knowledgeItems.length > 0 && (
                    <div className="space-y-2">
                      <h4 className="font-medium">Добавленные ресурсы:</h4>
                      {setupData.knowledgeItems.map((item, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <span>{item.type}: {item.content}</span>
                          <button
                            onClick={() => {
                              const newItems = setupData.knowledgeItems.filter((_, i) => i !== index);
                              setSetupData({...setupData, knowledgeItems: newItems});
                            }}
                            className="text-red-500 hover:text-red-700"
                          >
                            ×
                          </button>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              )}

              <div className="flex justify-between mt-8 pt-6 border-t border-gray-200">
                                    <Button
                      onClick={() => setSetupStep(Math.max(1, setupStep - 1))}
                      disabled={setupStep === 1}
                      variant="outline"
                    >
                      Назад
                    </Button>
                
                {setupStep < 4 ? (
                  <Button
                    onClick={() => {
                      // Валидация текущего шага
                      if (!validateStep(setupStep)) {
                        // Прокручиваем к верху для показа ошибок
                        document.getElementById('setup-content')?.scrollIntoView({ behavior: 'smooth' });
                        return;
                      }
                      
                      if (setupStep === 3) {
                        // Проверяем, изменил ли пользователь этапы диалога
                        const hasChanges = setupData.dialogStages.some((stage, index) => 
                          stage !== originalDialogStages[index]
                        ) || setupData.dialogStages.length !== originalDialogStages.length;
                        
                        if (!hasChanges) {
                          setShowDialogWarning(true);
                          return;
                        }
                      }
                      
                      setSetupStep(setupStep + 1);
                      // Прокручиваем к верху при переходе на следующий шаг
                      setTimeout(() => {
                        document.getElementById('setup-content')?.scrollIntoView({ behavior: 'smooth' });
                      }, 100);
                    }}
                  >
                    Далее
                  </Button>
                ) : (
                  <Button
                    onClick={async () => {
                      try {
                        // Временно сохраняем настройки в localStorage (пока бэкенд не работает)
                        localStorage.setItem('setupData', JSON.stringify(setupData));
                        localStorage.setItem('hasShownSetupWizard', 'true');
                        
                        setShowSetupWizard(false);
                        setShowLoadingScreen(true);
                        
                        // Запускаем таймер
                        const timer = setInterval(() => {
                          setLoadingTime(prev => {
                            if (prev <= 1) {
                              clearInterval(timer);
                              setShowLoadingScreen(false);
                              return 0;
                            }
                            return prev - 1;
                          });
                        }, 1000);
                        
                        // Показываем уведомление об успехе
                        showNotificationMessage('Настройки сохранены! Настраиваем вашего ИИ-агента...');
                      } catch (error) {
                        console.error('Error saving settings:', error);
                        alert('Ошибка при сохранении настроек. Попробуйте еще раз.');
                      }
                    }}
                    disabled={setupData.knowledgeItems.length === 0}
                    className={setupData.knowledgeItems.length === 0 ? 'bg-gray-300 text-gray-500' : 'bg-green-600 hover:bg-green-700'}
                  >
                    Завершить настройку
                  </Button>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Loading Screen */}
      {showLoadingScreen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-white">
          <div className="text-center">
            <div className="mb-8">
              <div className="w-16 h-16 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin mx-auto mb-4"></div>
              <h2 className="text-2xl font-bold text-gray-800 mb-2">Настраиваем вашего ИИ-агента</h2>
              <p className="text-gray-600 mb-4">Это займет несколько минут</p>
              <div className="text-3xl font-bold text-blue-600">
                {Math.floor(loadingTime / 60)}:{(loadingTime % 60).toString().padStart(2, '0')}
              </div>
            </div>
            <div className="w-64 bg-gray-200 rounded-full h-2 mx-auto">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-1000"
                style={{ width: `${((300 - loadingTime) / 300) * 100}%` }}
              ></div>
            </div>
          </div>
        </div>
      )}

      {/* Dialog Warning Modal */}
      {showDialogWarning && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
          <div className="bg-white rounded-xl max-w-md w-full mx-4 p-6">
            <div className="text-center">
              <div className="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-orange-600 text-xl">⚠</span>
              </div>
              <h3 className="text-xl font-semibold mb-2">Вы не внесли никаких изменений</h3>
              <p className="text-gray-600 mb-6">
                Он не адаптирован под ваш бизнес это может сказаться на эффективности ИИ-агента.
              </p>
              <div className="flex gap-3">
                <button
                  onClick={() => setShowDialogWarning(false)}
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Внести изменения
                </button>
                <button
                  onClick={() => {
                    setShowDialogWarning(false);
                    setSetupStep(4);
                  }}
                  className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Продолжить без изменений
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Progress Bar */}
      {showProgressBar && (
        <div className="fixed bottom-4 left-4 z-50 bg-white rounded-xl shadow-lg border border-gray-200 w-80 max-h-96 overflow-hidden">
          <div className="p-4 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h3 className="font-semibold text-gray-900">Запуск Adapto {progressTasks.filter(t => t.completed).length}/3</h3>
              <button 
                onClick={() => setShowProgressBar(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ×
              </button>
            </div>
            <div className="mt-2 w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-green-500 h-2 rounded-full transition-all duration-300"
                style={{ width: `${(progressTasks.filter(t => t.completed).length / 3) * 100}%` }}
              ></div>
            </div>
          </div>
          <div className="p-4 space-y-3 max-h-64 overflow-y-auto">
            {progressTasks.map((task) => (
              <div key={task.id} className="flex items-start gap-3">
                <div
                  className={`w-5 h-5 rounded-full border-2 flex items-center justify-center mt-0.5 ${
                    task.completed 
                      ? 'bg-green-500 border-green-500 text-white' 
                      : 'border-gray-300'
                  }`}
                >
                  {task.completed && <span className="text-xs">✓</span>}
                </div>
                <div className="flex-1">
                  <div className="flex items-center justify-between">
                    <span className={`text-sm font-medium ${task.completed ? 'text-green-600' : 'text-gray-900'}`}>
                      {task.title}
                    </span>
                    <button
                      onClick={() => handleProgressTaskAction(task.id)}
                      className="text-blue-600 hover:text-blue-700 text-xs font-medium"
                    >
                      Перейти →
                    </button>
                  </div>
                  <p className="text-xs text-gray-600 mt-1">{task.description}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
      {/* Mobile sidebar overlay */}
      {sidebarOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40 md:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}

      {/* Sidebar */}
      <div className={`fixed md:relative z-50 md:z-auto transform transition-transform duration-300 ease-in-out ${
        sidebarOpen ? 'translate-x-0' : '-translate-x-full'
      } md:translate-x-0 w-64 h-full bg-white border-r border-gray-200 flex flex-col`}>
        
        {/* Header */}
        <div className="p-4 border-b border-gray-200">
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full flex items-center justify-center">
              <div className="flex items-center justify-center w-5 h-5">
                <div className="w-2 h-2 bg-white rounded-full mr-1"></div>
                <div className="w-1 h-1 bg-white rounded-full"></div>
              </div>
            </div>
            <div>
              <div className="font-medium">{currentUser?.name || 'Пользователь'}</div>
              <div className="text-xs text-gray-500">{currentUser?.company_name || 'Компания'}</div>
            </div>
          </div>
        </div>
        
        {/* Navigation */}
        <div className="flex-1 p-4">
          <nav className="space-y-2">
            {menuItems.map((item) => (
              <button
                key={item.id}
                onClick={() => {
                  setActiveSection(item.id)
                  setCurrentSection(item.id)
                  localStorage.setItem('currentSection', item.id)
                  setSidebarOpen(false)
                }}
                className={`w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left transition-colors ${
                  activeSection === item.id 
                    ? 'bg-gray-100 text-gray-900' 
                    : 'hover:bg-gray-50 text-gray-700'
                }`}
              >
                <item.icon className="w-4 h-4" />
                {item.label}
              </button>
            ))}
          </nav>
        </div>

        {/* Footer */}
        <div className="p-4 border-t border-gray-200 space-y-2">
          <button 
            onClick={() => setShowProgressBar(!showProgressBar)}
            className="w-full flex items-center gap-2 p-2 hover:bg-gray-50 rounded cursor-pointer"
          >
            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
            <span className="text-sm">Запуск Adapto</span>
          </button>
          
          <div className="space-y-1">
            <button className="w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left hover:bg-gray-50 transition-colors">
              <Settings className="w-4 h-4" />
              <span className="text-sm">Правила и соглашения</span>
            </button>
            <button className="w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left hover:bg-gray-50 transition-colors">
              <MessageSquare className="w-4 h-4" />
              <span className="text-sm">Чат с поддержкой</span>
            </button>
            <button className="w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left hover:bg-gray-50 transition-colors" onClick={handleLogout}>
              <ExternalLink className="w-4 h-4" />
              <span className="text-sm">Выйти</span>
            </button>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* Mobile header */}
        <div className="md:hidden flex items-center gap-4 p-4 border-b border-gray-200 bg-white">
          <Button 
            variant="ghost" 
            size="sm"
            onClick={() => setSidebarOpen(true)}
          >
            <Menu className="w-4 h-4" />
          </Button>
          <h1 className="font-medium">Adapto AI Platform</h1>
        </div>

        {/* Content */}
        <main className="flex-1 overflow-auto p-6 bg-white">
          {renderContent()}
        </main>
      </div>

      {/* Integration Modal */}
      {showIntegrationModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div className="absolute inset-0 bg-black/50" onClick={() => setShowIntegrationModal(false)} />
          <div className="relative bg-white rounded-xl p-6 max-w-lg w-full mx-4 max-h-[80vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-xl font-semibold">
                {selectedIntegration === 'telegram' ? 'Telegram' : 'WhatsApp'} Интеграция
              </h3>
              <button 
                onClick={() => setShowIntegrationModal(false)}
                className="text-gray-400 hover:text-gray-600 text-xl"
              >
                ×
              </button>
            </div>
            
            {selectedIntegration === 'telegram' && (
              <div className="space-y-4">
                <div className="bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-medium text-blue-900 mb-2">📱 Создание Telegram бота</h4>
                  <ol className="text-sm text-blue-800 space-y-2">
                    <li>1. Откройте Telegram и найдите @BotFather</li>
                    <li>2. Отправьте команду <code className="bg-blue-100 px-1 rounded">/newbot</code></li>
                    <li>3. Следуйте инструкциям и создайте бота</li>
                    <li>4. Скопируйте полученный токен</li>
                  </ol>
                </div>
                
                <div className="bg-gray-50 p-4 rounded-lg">
                  <h4 className="font-medium text-gray-900 mb-2">🔗 Настройка интеграции</h4>
                  <div className="space-y-3">
                    <div>
                      <label className="block text-sm font-medium mb-1">Токен бота</label>
                      <input 
                        type="text" 
                        placeholder="1234567890:ABCdefGHIjklMNOpqrsTUVwxyz"
                        className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                      />
                    </div>
                    <button className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors">
                      Подключить бота
                    </button>
                  </div>
                </div>
              </div>
            )}

            {selectedIntegration === 'whatsapp' && (
              <div className="space-y-4">
                <div className="bg-green-50 p-4 rounded-lg">
                  <h4 className="font-medium text-green-900 mb-2">📱 WhatsApp Business API</h4>
                  <ol className="text-sm text-green-800 space-y-2">
                    <li>1. Зарегистрируйтесь на <a href="https://business.whatsapp.com" target="_blank" className="text-blue-600 hover:underline">business.whatsapp.com</a></li>
                    <li>2. Создайте приложение в Meta for Developers</li>
                    <li>3. Получите номер телефона для бизнеса</li>
                    <li>4. Настройте webhook URL</li>
                  </ol>
                </div>
                
                <div className="bg-gray-50 p-4 rounded-lg">
                  <h4 className="font-medium text-gray-900 mb-2">🔗 Настройка интеграции</h4>
                  <div className="space-y-3">
                    <div>
                      <label className="block text-sm font-medium mb-1">Номер телефона</label>
                      <input 
                        type="text" 
                        placeholder="+1234567890"
                        className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium mb-1">Access Token</label>
                      <input 
                        type="text" 
                        placeholder="EAA..."
                        className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                      />
                    </div>
                    <button className="w-full bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors">
                      Подключить WhatsApp
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Widget Constructor Modal */}
      {showWidgetConstructor && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div className="absolute inset-0 bg-black/50" onClick={() => setShowWidgetConstructor(false)} />
          <div className="relative bg-white rounded-xl w-full max-w-4xl mx-4 max-h-[90vh] overflow-hidden flex flex-col">
            {/* Header */}
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <div className="flex items-center gap-3">
                <button 
                  onClick={() => setShowWidgetConstructor(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  ←
                </button>
                <h3 className="text-xl font-semibold">Интеграции / Виджет</h3>
              </div>
              <button 
                onClick={() => {
                  navigator.clipboard.writeText('<script src="https://adapto.ai/widget.js"></script>');
                  showNotificationMessage('Скрипт скопирован!');
                }}
                className="bg-gray-100 hover:bg-gray-200 px-4 py-2 rounded-lg text-sm font-medium transition-colors"
              >
                Скопировать скрипт
              </button>
            </div>

            {/* Content */}
            <div className="flex-1 overflow-y-auto p-6">
              <div className="space-y-8">
                {/* Settings */}
                <div className="space-y-6">
                                     {/* Accent Color */}
                   <div>
                     <label className="block text-sm font-medium mb-3">Акцентный цвет</label>
                     <div className="flex items-center gap-3">
                       <input 
                         type="text" 
                         value={widgetSettings.accentColor}
                         onChange={(e) => setWidgetSettings({...widgetSettings, accentColor: e.target.value})}
                         className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                         placeholder="HEX"
                       />
                       <input 
                         type="color" 
                         value={widgetSettings.accentColor}
                         onChange={(e) => setWidgetSettings({...widgetSettings, accentColor: e.target.value})}
                         className="w-10 h-10 rounded-lg border-2 border-gray-300 cursor-pointer"
                       />
                       <button 
                         onClick={() => setWidgetSettings({...widgetSettings, accentColor: '#1354FC'})}
                         className="text-gray-400 hover:text-gray-600"
                       >
                         ×
                       </button>
                     </div>
                   </div>

                  {/* Button Color */}
                  <div>
                    <label className="block text-sm font-medium mb-3">Цвет кнопки</label>
                    <div className="grid grid-cols-3 gap-3">
                      {[
                        { id: 'light', label: 'Светлый фон', bg: 'bg-white', border: 'border-blue-500', text: 'text-blue-500' },
                        { id: 'dark', label: 'Темный фон', bg: 'bg-gray-900', border: 'border-white', text: 'text-white' },
                        { id: 'custom', label: 'Задать свой цвет', bg: 'bg-gradient-to-r from-yellow-400 via-pink-500 to-blue-500', border: 'border-blue-500', text: 'text-white' }
                                             ].map((style) => (
                         <button
                           key={style.id}
                           onClick={() => setWidgetSettings({...widgetSettings, buttonColor: style.id})}
                           className={`p-3 rounded-lg border-2 transition-all ${
                             widgetSettings.buttonColor === style.id 
                               ? 'border-blue-500 ring-2 ring-blue-200' 
                               : 'border-gray-200 hover:border-gray-300'
                           }`}
                         >
                           <div 
                             className={`w-[140px] h-[42px] rounded-xl flex items-center justify-center gap-2 mb-2 mx-auto ${
                               style.id === 'light' ? 'bg-white border-2 border-gray-300' :
                               style.id === 'dark' ? 'bg-gray-900' :
                               'bg-gradient-to-r from-yellow-400 via-pink-500 to-blue-500'
                             }`}
                             style={{
                               borderColor: style.id === 'light' ? widgetSettings.accentColor : 'transparent',
                               color: style.id === 'light' ? widgetSettings.accentColor : 'white'
                             }}
                           >
                             <div 
                               className="w-4 h-4 rounded-full opacity-80"
                               style={{ backgroundColor: style.id === 'light' ? widgetSettings.accentColor : 'currentColor' }}
                             ></div>
                             <span className="text-sm font-medium" style={{ maxWidth: '90px', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>
                               Спросить ИИ
                             </span>
                           </div>
                           <span className={`text-xs ${widgetSettings.buttonColor === style.id ? 'text-blue-600' : 'text-gray-600'}`}>
                             {style.label}
                           </span>
                         </button>
                       ))}
                    </div>
                  </div>

                                     {/* Button Text */}
                   <div>
                     <label className="block text-sm font-medium mb-3">Название кнопки</label>
                     <input 
                       type="text" 
                       value={widgetSettings.buttonText}
                       onChange={(e) => setWidgetSettings({...widgetSettings, buttonText: e.target.value})}
                       className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                       placeholder="Спросить ИИ"
                     />
                   </div>

                  {/* Avatar */}
                  <div>
                    <label className="block text-sm font-medium mb-3">Аватар Adapto</label>
                    <div className="grid grid-cols-2 gap-3">
                      <button
                        onClick={() => setWidgetSettings({...widgetSettings, avatar: 'default'})}
                        className={`p-3 rounded-lg border-2 transition-all ${
                          widgetSettings.avatar === 'default' 
                            ? 'border-blue-500 ring-2 ring-blue-200' 
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-full mx-auto mb-2 flex items-center justify-center">
                          <div className="flex items-center justify-center w-6 h-6">
                            <div className="w-3 h-3 bg-white rounded-full mr-1"></div>
                            <div className="w-1.5 h-1.5 bg-white rounded-full"></div>
                          </div>
                        </div>
                        <span className="text-xs text-center block">По умолчанию</span>
                      </button>
                                             <button
                         onClick={() => document.getElementById('avatar-input')?.click()}
                         className={`p-3 rounded-lg border-2 transition-all ${
                           widgetSettings.avatar === 'custom' 
                             ? 'border-blue-500 ring-2 ring-blue-200' 
                             : 'border-gray-200 hover:border-gray-300'
                         }`}
                       >
                         <div className="w-12 h-12 bg-gray-200 rounded-full mx-auto mb-2 flex items-center justify-center">
                           <span className="text-gray-500">+</span>
                         </div>
                         <span className="text-xs text-center block">Загрузить</span>
                         <input 
                           id="avatar-input"
                           type="file" 
                           accept="image/*"
                           className="hidden" 
                           onChange={(e) => {
                             const file = e.target.files?.[0];
                             if (file) {
                               setWidgetSettings({...widgetSettings, avatar: 'custom'});
                               showNotificationMessage('Аватар загружен!');
                             }
                           }}
                         />
                       </button>
                    </div>
                  </div>
                </div>

                                 {/* Custom Color Picker */}
                 {widgetSettings.buttonColor === 'custom' && (
                   <div>
                     <label className="block text-sm font-medium mb-3">Введите цвет для фона</label>
                     <div className="flex items-center gap-3">
                       <input 
                         type="text" 
                         value={widgetSettings.customButtonColor}
                         onChange={(e) => setWidgetSettings({...widgetSettings, customButtonColor: e.target.value})}
                         className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                         placeholder="HEX"
                       />
                       <input 
                         type="color" 
                         value={widgetSettings.customButtonColor}
                         onChange={(e) => setWidgetSettings({...widgetSettings, customButtonColor: e.target.value})}
                         className="w-10 h-10 rounded-lg border-2 border-gray-300 cursor-pointer"
                       />
                     </div>
                   </div>
                 )}

                                 {/* Widget Location */}
                 <div>
                   <label className="block text-sm font-medium mb-3">Расположение виджета</label>
                   <div className="flex gap-3">
                     <button
                       onClick={() => setWidgetSettings({...widgetSettings, widgetLocation: 'default'})}
                       className={`px-4 py-2 rounded-lg border-2 transition-all ${
                         widgetSettings.widgetLocation === 'default' 
                           ? 'border-blue-500 bg-blue-50 text-blue-700' 
                           : 'border-gray-200 hover:border-gray-300'
                       }`}
                     >
                       По умолчанию
                     </button>
                     <button
                       onClick={() => setWidgetSettings({...widgetSettings, widgetLocation: 'custom'})}
                       className={`px-4 py-2 rounded-lg border-2 transition-all ${
                         widgetSettings.widgetLocation === 'custom' 
                           ? 'border-blue-500 bg-blue-50 text-blue-700' 
                           : 'border-gray-200 hover:border-gray-300'
                       }`}
                     >
                       Настроить
                     </button>
                   </div>
                   {widgetSettings.widgetLocation === 'custom' && (
                     <div className="mt-4 space-y-4">
                       <div>
                         <h4 className="text-sm font-medium mb-2">Для компьютеров</h4>
                         <div className="grid grid-cols-2 gap-3">
                           <div>
                             <label className="block text-xs text-gray-600 mb-1">Отступ снизу</label>
                             <input 
                               type="number" 
                               value={widgetSettings.desktopBottomOffset}
                               onChange={(e) => setWidgetSettings({...widgetSettings, desktopBottomOffset: parseInt(e.target.value)})}
                               className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                             />
                           </div>
                           <div>
                             <label className="block text-xs text-gray-600 mb-1">Отступ справа</label>
                             <input 
                               type="number" 
                               value={widgetSettings.desktopRightOffset}
                               onChange={(e) => setWidgetSettings({...widgetSettings, desktopRightOffset: parseInt(e.target.value)})}
                               className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                             />
                           </div>
                         </div>
                       </div>
                       <div>
                         <h4 className="text-sm font-medium mb-2">Для телефонов</h4>
                         <div className="grid grid-cols-2 gap-3">
                           <div>
                             <label className="block text-xs text-gray-600 mb-1">Отступ снизу</label>
                             <input 
                               type="number" 
                               value={widgetSettings.mobileBottomOffset}
                               onChange={(e) => setWidgetSettings({...widgetSettings, mobileBottomOffset: parseInt(e.target.value)})}
                               className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                             />
                           </div>
                           <div>
                             <label className="block text-xs text-gray-600 mb-1">Отступ справа</label>
                             <input 
                               type="number" 
                               value={widgetSettings.mobileRightOffset}
                               onChange={(e) => setWidgetSettings({...widgetSettings, mobileRightOffset: parseInt(e.target.value)})}
                               className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                             />
                           </div>
                         </div>
                       </div>
                       <div>
                         <label className="block text-xs text-gray-600 mb-1">z-index</label>
                         <input 
                           type="number" 
                           value={widgetSettings.zIndex}
                           onChange={(e) => setWidgetSettings({...widgetSettings, zIndex: parseInt(e.target.value)})}
                           className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                         />
                       </div>
                     </div>
                   )}
                 </div>

                                 {/* Welcome Message */}
                 <div>
                   <label className="block text-sm font-medium mb-3">
                     Приветственное сообщение
                   </label>
                   <div className="space-y-3">
                     {widgetSettings.welcomeMessages.map((message, index) => (
                       <div key={index} className="flex gap-2">
                         <textarea 
                           value={message}
                           onChange={(e) => {
                             const newMessages = [...widgetSettings.welcomeMessages];
                             newMessages[index] = e.target.value;
                             setWidgetSettings({...widgetSettings, welcomeMessages: newMessages});
                           }}
                           className="flex-1 p-3 border border-gray-300 rounded-lg text-sm resize-none"
                           rows={2}
                           placeholder="Привет! Меня зовут Adapto, я ИИ ассистент."
                         />
                         {widgetSettings.welcomeMessages.length > 1 && (
                           <button 
                             onClick={() => {
                               const newMessages = widgetSettings.welcomeMessages.filter((_, i) => i !== index);
                               setWidgetSettings({...widgetSettings, welcomeMessages: newMessages});
                             }}
                             className="px-3 py-2 text-red-600 hover:text-red-700 text-sm border border-red-300 rounded-lg hover:bg-red-50"
                           >
                             ×
                           </button>
                         )}
                       </div>
                     ))}
                   </div>
                   <button 
                     onClick={() => {
                       const newMessages = [...widgetSettings.welcomeMessages, 'Новое сообщение'];
                       setWidgetSettings({...widgetSettings, welcomeMessages: newMessages});
                     }}
                     className="mt-2 text-blue-600 hover:text-blue-700 text-sm"
                   >
                     Добавить сообщение +
                   </button>
                 </div>

                                 {/* Trigger Question */}
                 <div>
                   <label className="block text-sm font-medium mb-3">Триггерный вопрос</label>
                   <div className="grid grid-cols-2 gap-3">
                     <button
                       onClick={() => setWidgetSettings({...widgetSettings, triggerQuestionEnabled: 'no'})}
                       className={`p-3 rounded-lg border-2 transition-all ${
                         widgetSettings.triggerQuestionEnabled === 'no' 
                           ? 'border-blue-500 ring-2 ring-blue-200' 
                           : 'border-gray-200 hover:border-gray-300'
                       }`}
                     >
                       <div className="w-[140px] h-[42px] rounded-xl flex items-center justify-center gap-2 mb-2 bg-white border-2 border-gray-300">
                         <div className="w-4 h-4 rounded-full bg-blue-500 opacity-80"></div>
                         <span className="text-sm font-medium text-gray-700">Задать вопрос</span>
                       </div>
                       <span className="text-xs text-center block">Нет</span>
                     </button>
                     <button
                       onClick={() => setWidgetSettings({...widgetSettings, triggerQuestionEnabled: 'yes'})}
                       className={`p-3 rounded-lg border-2 transition-all ${
                         widgetSettings.triggerQuestionEnabled === 'yes' 
                           ? 'border-blue-500 ring-2 ring-blue-200' 
                           : 'border-gray-200 hover:border-gray-300'
                       }`}
                     >
                       <div className="w-[140px] h-[42px] rounded-xl flex items-center justify-center gap-2 mb-2 bg-white border-2 border-gray-300">
                         <div className="w-4 h-4 rounded-full bg-blue-500 opacity-80"></div>
                         <span className="text-sm font-medium text-gray-700">Задать вопрос</span>
                       </div>
                       <span className="text-xs text-center block">Есть</span>
                     </button>
                   </div>
                   
                   {widgetSettings.triggerQuestionEnabled === 'yes' && (
                     <div className="mt-4 space-y-3">
                       <div>
                         <label className="block text-sm font-medium mb-1">Через какое время показать:</label>
                         <div className="flex items-center gap-2">
                           <input 
                             type="number" 
                             value={widgetSettings.triggerQuestionDelay}
                             onChange={(e) => setWidgetSettings({...widgetSettings, triggerQuestionDelay: parseInt(e.target.value)})}
                             className="w-20 p-2 border border-gray-300 rounded-lg text-sm"
                           />
                           <span className="text-sm text-gray-600">сек</span>
                         </div>
                       </div>
                       <div>
                         <label className="block text-sm font-medium mb-1">Вопрос:</label>
                         <input 
                           type="text" 
                           value={widgetSettings.triggerQuestionText}
                           onChange={(e) => setWidgetSettings({...widgetSettings, triggerQuestionText: e.target.value})}
                           className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                           placeholder="Здравствуйте! Если появится вопрос, можете задать его в чате, я оперативно отвечу"
                         />
                       </div>
                       <div>
                         <label className="block text-sm font-medium mb-1">Быстрые ответы:</label>
                         <input 
                           type="text" 
                           value={widgetSettings.triggerQuickReply}
                           onChange={(e) => setWidgetSettings({...widgetSettings, triggerQuickReply: e.target.value})}
                           className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                           placeholder="Задать вопрос"
                         />
                       </div>
                     </div>
                   )}
                 </div>

                {/* Follow Up Message */}
                <div>
                  <label className="block text-sm font-medium mb-3">Follow up сообщение</label>
                  <p className="text-sm text-gray-600 mb-3">Сообщение, которое увидит пользователь, если выйдет из диалога</p>
                  <div className="grid grid-cols-2 gap-3 mb-4">
                    <button
                      onClick={() => setWidgetSettings({...widgetSettings, followUpMessage: 'no'})}
                      className={`p-3 rounded-lg border-2 transition-all ${
                        widgetSettings.followUpMessage === 'no' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="w-[200px] h-[42px] rounded-xl flex items-center justify-center mb-2 bg-white border-2 border-gray-300">
                        <span className="text-sm font-medium text-gray-700">Задать вопрос</span>
                      </div>
                      <span className="text-xs text-center block">Нет</span>
                    </button>
                    <button
                      onClick={() => setWidgetSettings({...widgetSettings, followUpMessage: 'yes'})}
                      className={`p-3 rounded-lg border-2 transition-all ${
                        widgetSettings.followUpMessage === 'yes' 
                          ? 'border-blue-500 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                    >
                      <div className="w-[140px] h-[42px] rounded-xl flex items-center justify-center mb-2 bg-white border-2 border-gray-300">
                        <div className="flex items-center gap-2">
                          <div className="w-4 h-4 rounded-full bg-blue-500"></div>
                          <div className="w-16 h-3 bg-gray-200 rounded"></div>
                        </div>
                        <div className="w-[200px] h-[42px] rounded-xl flex items-center justify-center mt-2 bg-white border-2 border-gray-300">
                          <span className="text-sm font-medium text-gray-700">Задать вопрос</span>
                        </div>
                      </div>
                      <span className="text-xs text-center block">Есть</span>
                    </button>
                  </div>
                  
                                     {widgetSettings.followUpMessage === 'yes' && (
                     <div className="mt-4 space-y-3">
                       <div>
                         <label className="block text-sm font-medium mb-1">Через какое время показать:</label>
                         <div className="flex items-center gap-2">
                           <input 
                             type="number" 
                             value={widgetSettings.followUpDelay}
                             onChange={(e) => setWidgetSettings({...widgetSettings, followUpDelay: parseInt(e.target.value)})}
                             className="w-20 p-2 border border-gray-300 rounded-lg text-sm"
                           />
                           <span className="text-sm text-gray-600">сек</span>
                         </div>
                       </div>
                       <div>
                         <label className="block text-sm font-medium mb-1">Вопрос:</label>
                         <input 
                           type="text" 
                           value={widgetSettings.followUpQuestion}
                           onChange={(e) => setWidgetSettings({...widgetSettings, followUpQuestion: e.target.value})}
                           className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                           placeholder="Продолжим диалог?"
                         />
                       </div>
                       <div>
                         <label className="block text-sm font-medium mb-1">Быстрые ответы:</label>
                         <input 
                           type="text" 
                           value={widgetSettings.followUpQuickReply}
                           onChange={(e) => setWidgetSettings({...widgetSettings, followUpQuickReply: e.target.value})}
                           className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                           placeholder="Расскажи подробнее"
                         />
                       </div>
                     </div>
                   )}
                </div>

                {/* Quick Replies */}
                <div>
                  <label className="block text-sm font-medium mb-3">Быстрые ответы:</label>
                  <div className="space-y-2">
                    {widgetSettings.quickReplies.map((reply, index) => (
                      <div key={index} className="flex items-center gap-2">
                        <input 
                          type="text" 
                          value={reply}
                          onChange={(e) => {
                            const newReplies = [...widgetSettings.quickReplies];
                            newReplies[index] = e.target.value;
                            setWidgetSettings({...widgetSettings, quickReplies: newReplies});
                          }}
                          className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                          placeholder="Расскажи подробнее"
                        />
                        <button 
                          onClick={() => {
                            const newReplies = widgetSettings.quickReplies.filter((_, i) => i !== index);
                            setWidgetSettings({...widgetSettings, quickReplies: newReplies});
                          }}
                          className="text-gray-400 hover:text-red-600"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                    <button 
                      onClick={() => setWidgetSettings({...widgetSettings, quickReplies: [...widgetSettings.quickReplies, '']})}
                      className="text-blue-600 hover:text-blue-700 text-sm"
                    >
                      Добавить быстрый ответ +
                    </button>
                  </div>
                </div>

                {/* Privacy Policy */}
                <div>
                  <label className="block text-sm font-medium mb-3">Ссылка на политику обработки персональных данных</label>
                  <p className="text-sm text-gray-600 mb-2">Укажите ссылку на свою политику обработки персональных данных — это требование 152-ФЗ</p>
                  <input 
                    type="url" 
                    value={widgetSettings.privacyPolicyUrl}
                    onChange={(e) => setWidgetSettings({...widgetSettings, privacyPolicyUrl: e.target.value})}
                    className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                    placeholder="https://"
                  />
                </div>

                {/* Data Tags */}
                <div>
                  <label className="block text-sm font-medium mb-3">Какие метки собирать</label>
                  <p className="text-sm text-gray-600 mb-3">Выберите все метки, которые должен распознавать Adapto. Если метки нет в списке — введите ее название</p>
                  <div className="flex flex-wrap gap-2 mb-3">
                    {widgetSettings.dataTags.map((tag, index) => (
                      <div key={index} className="flex items-center gap-1 bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm">
                        <span>{tag}</span>
                        <button 
                          onClick={() => {
                            const newTags = widgetSettings.dataTags.filter((_, i) => i !== index);
                            setWidgetSettings({...widgetSettings, dataTags: newTags});
                          }}
                          className="text-blue-600 hover:text-red-600"
                        >
                          ×
                        </button>
                      </div>
                    ))}
                    <button 
                      onClick={() => setWidgetSettings({...widgetSettings, dataTags: [...widgetSettings.dataTags, '']})}
                      className="text-blue-600 hover:text-blue-700 text-sm border border-gray-300 rounded-lg px-3 py-1"
                    >
                      Добавить метку +
                    </button>
                  </div>
                </div>

                                 {/* Excluded Pages */}
                 <div>
                   <label className="block text-sm font-medium mb-3">Исключение Adapto</label>
                   <p className="text-sm text-gray-600 mb-3">Укажите страницы, на которых Adapto не должен отображаться</p>
                   <div className="space-y-2">
                     {widgetSettings.excludedPages.map((page, index) => (
                       <div key={index} className="flex items-center gap-2">
                         <input 
                           type="url" 
                           value={page}
                           onChange={(e) => {
                             const newPages = [...widgetSettings.excludedPages];
                             newPages[index] = e.target.value;
                             setWidgetSettings({...widgetSettings, excludedPages: newPages});
                           }}
                           className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                           placeholder="https://example.com/page"
                         />
                         <button 
                           onClick={() => {
                             const newPages = widgetSettings.excludedPages.filter((_, i) => i !== index);
                             setWidgetSettings({...widgetSettings, excludedPages: newPages});
                           }}
                           className="text-gray-400 hover:text-red-600"
                         >
                           ×
                         </button>
                       </div>
                     ))}
                     <button 
                       onClick={() => setWidgetSettings({...widgetSettings, excludedPages: [...widgetSettings.excludedPages, '']})}
                       className="text-blue-600 hover:text-blue-700 text-sm border border-gray-300 rounded-lg px-3 py-1"
                     >
                       Добавить ссылку +
                     </button>
                   </div>
                 </div>
              </div>
            </div>

            {/* Fixed Bottom Buttons */}
            <div className="p-6 border-t border-gray-200 bg-white">
              <div className="flex gap-3">
                <button 
                  onClick={() => {
                    showNotificationMessage('Изменения сохранены!');
                    setShowWidgetConstructor(false);
                  }}
                  className="flex-1 bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 transition-colors font-medium"
                >
                  Сохранить изменения
                </button>
                <button 
                  onClick={() => {
                    window.open('/preview', '_blank');
                    showNotificationMessage('Предпросмотр открыт в новом окне');
                  }}
                  className="bg-white border border-gray-300 text-gray-700 py-3 px-4 rounded-lg hover:bg-gray-50 transition-colors font-medium flex items-center gap-2"
                >
                  <span>👁</span>
                  Предпросмотр
                </button>
                <button 
                  onClick={() => {
                    navigator.clipboard.writeText('<script src="https://adapto.ai/widget.js"></script>');
                    showNotificationMessage('Скрипт скопирован!');
                  }}
                  className="bg-white border border-gray-300 text-gray-700 py-3 px-4 rounded-lg hover:bg-gray-50 transition-colors font-medium flex items-center gap-2"
                >
                  <span>📋</span>
                  Скопировать скрипт
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}