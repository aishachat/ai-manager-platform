// –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ò–ò-–∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
import { createClient } from '@supabase/supabase-js';
import { randomUUID } from 'crypto';
import axios from 'axios';
import https from 'https';
import KnowledgeDatabase from './knowledge-db.js';
import UnifiedRAGSystem from './unified-rag-system.js';
import ChunkingSystem from './chunking.js';
import ImprovedContentParser from './improved-content-parser.js';
import UnifiedAIAgentFlow from './unified-ai-agent-flow.js';
import AIResponseValidator from './ai-response-validator.js';
import monitoring from './monitoring-system.js';
import { smartTokenManager } from './smart-token-manager.js';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤
// –ö—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
const parseCache = new Map();
const CACHE_TTL = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
const MAX_CACHE_SIZE = 100; // –ú–∞–∫—Å–∏–º—É–º 100 URL –≤ –∫—ç—à–µ

// –ü—É–ª –±—Ä–∞—É–∑–µ—Ä–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
const browserPool = [];
const MAX_BROWSERS = 3;
let poolInitialized = false;

async function initializeBrowserPool() {
  if (poolInitialized) return;
  
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤...');
  const playwright = await import('playwright');
  const { chromium } = playwright;
  
  for (let i = 0; i < MAX_BROWSERS; i++) {
    const browser = await chromium.launch({ 
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-accelerated-2d-canvas',
        '--disable-gpu',
        '--window-size=1920x1080'
      ]
    });
    browserPool.push({ browser, inUse: false });
  }
  
  poolInitialized = true;
  console.log(`‚úÖ –ü—É–ª –∏–∑ ${MAX_BROWSERS} –±—Ä–∞—É–∑–µ—Ä–æ–≤ –≥–æ—Ç–æ–≤`);
}

async function getBrowser() {
  await initializeBrowserPool();
  
  // –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
  let freeBrowser = browserPool.find(b => !b.inUse);
  
  // –ï—Å–ª–∏ –≤—Å–µ –∑–∞–Ω—è—Ç—ã, –∂–¥–µ–º
  while (!freeBrowser) {
    await new Promise(resolve => setTimeout(resolve, 100));
    freeBrowser = browserPool.find(b => !b.inUse);
  }
  
  freeBrowser.inUse = true;
  return freeBrowser;
}

function releaseBrowser(browserWrapper) {
  browserWrapper.inUse = false;
}

function getCachedResult(url) {
  const cached = parseCache.get(url);
  if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
    console.log('üíæ –ö—ç—à –ø–æ–ø–∞–¥–∞–Ω–∏–µ –¥–ª—è:', url);
    return cached.result;
  }
  
  // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫—ç—à
  if (cached) {
    parseCache.delete(url);
  }
  
  return null;
}

function setCachedResult(url, result) {
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
  if (parseCache.size >= MAX_CACHE_SIZE) {
    const oldestKey = parseCache.keys().next().value;
    parseCache.delete(oldestKey);
  }
  
  parseCache.set(url, {
    result,
    timestamp: Date.now()
  });
  
  console.log('üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω –¥–ª—è:', url);
}

async function parseWebsiteWithRetry(url, maxRetries = 3) {
  let lastError;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üåê –ü–∞—Ä—Å–∏–Ω–≥ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}):`, url);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cached = getCachedResult(url);
      if (cached) {
        return cached;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∏–∑ –ø—É–ª–∞
      const browserWrapper = await getBrowser();
      
      try {
        const result = await parseWebsiteInternal(url, browserWrapper.browser);
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        setCachedResult(url, result);
        
        return result;
        
      } finally {
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        releaseBrowser(browserWrapper);
      }
      
    } catch (error) {
      lastError = error;
      console.log(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      
      if (attempt < maxRetries) {
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1—Å, 2—Å, 4—Å
        const delay = Math.pow(2, attempt - 1) * 1000;
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }
  
  throw lastError;
}

async function parseWebsiteInternal(url, browser) {
  let page = null;
  try {
    page = await browser.newPage();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è Playwright
    try {
      // Playwright –∏—Å–ø–æ–ª—å–∑—É–µ—Ç setViewportSize –≤–º–µ—Å—Ç–æ setViewport
      await page.setViewportSize({ width: 1920, height: 1080 });
      
      // Playwright –∏—Å–ø–æ–ª—å–∑—É–µ—Ç setExtraHTTPHeaders –¥–ª—è User-Agent
      await page.setExtraHTTPHeaders({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
      });
      
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã (Playwright)');
    } catch (e) {
      console.log('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã:', e.message);
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
    page.setDefaultTimeout(30000);
    page.setDefaultNavigationTimeout(30000);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    await page.goto(url, { 
      waitUntil: 'domcontentloaded', // –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      timeout: 30000 
    });
    
      // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      await page.waitForTimeout(5000);
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      try {
        await page.waitForSelector('body', { timeout: 10000 });
        console.log('üìÑ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
      } catch (e) {
        console.log('‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
      }
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω –∏ —Ç–æ–≤–∞—Ä–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
      try {
        await page.waitForSelector('.price, .cost, .product-price, [class*="price"], [class*="cost"], .product, .item, .card', { timeout: 5000 });
        console.log('üí∞ –¶–µ–Ω—ã/—Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      } catch (e) {
        console.log('‚ö†Ô∏è –¶–µ–Ω—ã/—Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      await page.waitForTimeout(2000);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ –±–∏–∑–Ω–µ—Å-—Å–∞–π—Ç–æ–≤
    const ecommerceSelectors = [
      // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
      'main', 'article', 'section',
      '.content', '.post-content', '.entry-content',
      '.product', '.catalog', '.shop', '.store',
      
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏
      'h1, h2, h3, h4, h5, h6',
      
      // –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
      'p', 'div', 'span', 'li', 'td', 'th',
      
      // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ò–ú –∏ —É—Å–ª—É–≥
      '.product-title', '.product-description', '.product-price',
      '.product-name', '.product-info', '.product-details',
      '.category', '.brand', '.collection', '.service',
      '.price', '.cost', '.amount', '.value', '.tariff', '.plan',
      '.item', '.card', '.product', '.goods', '.offer',
      
      // –¢–∞—Ä–∏—Ñ—ã –∏ –ø–ª–∞–Ω—ã
      '.tariff', '.plan', '.package', '.subscription', '.pricing',
      '.rate', '.fee', '.charge', '.cost', '.price-list',
      '[class*="tariff"]', '[class*="plan"]', '[class*="price"]',
      '[class*="cost"]', '[class*="rate"]', '[class*="fee"]',
      
      // –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥
      '.description', '.specs', '.characteristics',
      '.features', '.benefits', '.details', '.info',
      '.service-description', '.service-info',
      
      // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      '.contact', '.footer', '.header', '.contacts',
      'a[href^="tel:"]', 'a[href^="mailto:"]',
      '.phone', '.email', '.address',
      
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è
      '.menu', '.navigation', '.breadcrumb', '.nav',
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏
      '.pricing-table', '.price-card', '.service-card',
      '.product-card', '.offer-card', '.plan-card'
    ];
    
      const text = await page.evaluate((selectors) => {
        let fullText = '';
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏ –∏ —Å–∫—Ä–∏–ø—Ç—ã
        const styleElements = document.querySelectorAll('style, script, link[rel="stylesheet"], noscript');
        styleElements.forEach(el => el.remove());
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å CSS-–ø–æ–¥–æ–±–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
        const cssElements = document.querySelectorAll('[class*="rec"], [id*="rec"], [class*="tn-"], [class*="t-"]');
        cssElements.forEach(el => el.remove());
        
        selectors.forEach(selector => {
          try {
            const elements = document.querySelectorAll(selector);
            elements.forEach(el => {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç CSS –∫–æ–¥
              const textContent = el.textContent?.trim();
              if (textContent && 
                  !textContent.includes('#rec') && 
                  !textContent.includes('tn-elem') && 
                  !textContent.includes('@media') &&
                  !textContent.includes('display:') &&
                  !textContent.includes('height:') &&
                  !textContent.includes('width:') &&
                  !textContent.includes('left:') &&
                  !textContent.includes('top:') &&
                  !textContent.includes('position:') &&
                  !textContent.includes('z-index:') &&
                  !textContent.includes('background:') &&
                  !textContent.includes('color:') &&
                  !textContent.includes('font-') &&
                  !textContent.includes('margin:') &&
                  !textContent.includes('padding:') &&
                  !textContent.includes('border:') &&
                  !textContent.includes('calc(') &&
                  !textContent.includes('px') &&
                  !textContent.includes('%') &&
                  !textContent.includes('vh') &&
                  !textContent.includes('vw') &&
                  !textContent.includes('em') &&
                  !textContent.includes('rem') &&
                  textContent.length > 10) {
                fullText += textContent + '\n';
              }
            });
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
          }
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã, —Ç–∞—Ä–∏—Ñ—ã –∏ —Ç–æ–≤–∞—Ä—ã
        const priceElements = document.querySelectorAll('[class*="price"], [class*="cost"], [class*="value"], [class*="amount"], [class*="—Ä—É–±"], [class*="‚ÇΩ"], [class*="tariff"], [class*="plan"], [class*="rate"], [class*="fee"], .price, .cost, .amount, .tariff, .plan, .rate, .fee');
        priceElements.forEach(el => {
          if (el.textContent && el.textContent.trim()) {
            const priceText = el.textContent.trim();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω–∞/—Ç–∞—Ä–∏—Ñ
            if (priceText.match(/\d+/) && (priceText.includes('‚ÇΩ') || priceText.includes('—Ä—É–±') || priceText.includes('$') || priceText.includes('‚Ç¨') || priceText.includes('–æ—Ç') || priceText.includes('–¥–æ'))) {
              fullText += '–¶–ï–ù–ê/–¢–ê–†–ò–§: ' + priceText + '\n';
            }
          }
        });
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –∏ –ø–∞–∫–µ—Ç—ã —É—Å–ª—É–≥
        const tariffElements = document.querySelectorAll('[class*="tariff"], [class*="plan"], [class*="package"], [class*="subscription"], [class*="pricing"], .tariff, .plan, .package, .subscription, .pricing');
        tariffElements.forEach(el => {
          if (el.textContent && el.textContent.trim()) {
            fullText += '–¢–ê–†–ò–§–ù–´–ô –ü–õ–ê–ù: ' + el.textContent.trim() + '\n';
          }
        });
        
        const productElements = document.querySelectorAll('[class*="product"], [class*="item"], [class*="card"], [class*="design"], [class*="style"], [class*="–∞–ª—å–±–æ–º"], [class*="–¥–∏–∑–∞–π–Ω"], [class*="—É—Å–ª—É–≥–∞"], [class*="service"], [class*="—Ç–æ–≤–∞—Ä"], .product, .item, .card, .service');
        productElements.forEach(el => {
          if (el.textContent && el.textContent.trim()) {
            fullText += '–¢–û–í–ê–†/–£–°–õ–£–ì–ê: ' + el.textContent.trim() + '\n';
          }
        });
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
        const descriptionElements = document.querySelectorAll('[class*="description"], [class*="spec"], [class*="feature"], [class*="characteristic"], [class*="detail"], [class*="info"]');
        descriptionElements.forEach(el => {
          if (el.textContent && el.textContent.trim()) {
            fullText += '–û–ü–ò–°–ê–ù–ò–ï: ' + el.textContent.trim() + '\n';
          }
        });
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Å–ª—É–≥–∏ –∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏
        const serviceElements = document.querySelectorAll('[class*="service"], [class*="package"], [class*="complect"], [class*="option"], [class*="—É—Å–ª—É–≥–∞"], [class*="–∫–æ–º–ø–ª–µ–∫—Ç"]');
        serviceElements.forEach(el => {
          if (el.textContent && el.textContent.trim()) {
            fullText += '–£–°–õ–£–ì–ê: ' + el.textContent.trim() + '\n';
          }
        });
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º FAQ –∫–æ–Ω—Ç–µ–Ω—Ç
        const faqElements = document.querySelectorAll('[class*="faq"], [class*="question"], [class*="answer"], [id*="faq"], [id*="question"], .faq, .question, .answer, .faq-item, .faq-question, .faq-answer');
        faqElements.forEach(el => {
          if (el.textContent && el.textContent.trim()) {
            const faqText = el.textContent.trim();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ FAQ
            if (faqText.length > 10 && faqText.length < 500 && 
                (faqText.includes('?') || faqText.includes('–≤–æ–ø—Ä–æ—Å') || faqText.includes('–æ—Ç–≤–µ—Ç'))) {
              fullText += 'FAQ: ' + faqText + '\n';
            }
          }
        });

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–∑—ã–≤—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏
        const reviewElements = document.querySelectorAll('[class*="review"], [class*="rating"], [class*="comment"], [class*="–æ—Ç–∑—ã–≤"], [class*="—Ä–µ–π—Ç–∏–Ω–≥"], .review, .rating, .comment, .testimonial, .feedback');
        reviewElements.forEach(el => {
          if (el.textContent && el.textContent.trim()) {
            const reviewText = el.textContent.trim();
            if (reviewText.length > 20 && reviewText.length < 1000) {
              fullText += '–û–¢–ó–´–í: ' + reviewText + '\n';
            }
          }
        });

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏
        const promoElements = document.querySelectorAll('[class*="sale"], [class*="discount"], [class*="promo"], [class*="–∞–∫—Ü–∏—è"], [class*="—Å–∫–∏–¥–∫–∞"], [class*="—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è"], .sale, .discount, .promo, .offer, .special');
        promoElements.forEach(el => {
          if (el.textContent && el.textContent.trim()) {
            const promoText = el.textContent.trim();
            if (promoText.length > 5 && promoText.length < 200) {
              fullText += '–ê–ö–¶–ò–Ø: ' + promoText + '\n';
            }
          }
        });

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∏—à–∞–º
        const nicheKeywords = {
          '–°–ê–ù–¢–ï–•–ù–ò–ö–ê': ['—Ä–∞–¥–∏–∞—Ç–æ—Ä', '—Ç—Ä—É–±–∞', '–∫—Ä–∞–Ω', '—Å–º–µ—Å–∏—Ç–µ–ª—å', '—É–Ω–∏—Ç–∞–∑', '–≤–∞–Ω–Ω–∞', '–¥—É—à', '–æ—Ç–æ–ø–ª–µ–Ω–∏–µ', '–≤–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', '–∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è', '—Ñ–∏—Ç–∏–Ω–≥', '–∞—Ä–º–∞—Ç—É—Ä–∞', '–±–æ–π–ª–µ—Ä', '–Ω–∞—Å–æ—Å', '—Ñ–∏–ª—å—Ç—Ä'],
          '–ú–ï–ë–ï–õ–¨': ['–¥–∏–≤–∞–Ω', '–∫—Ä–æ–≤–∞—Ç—å', '—Å—Ç–æ–ª', '—Å—Ç—É–ª', '—à–∫–∞—Ñ', '–∫–æ–º–æ–¥', '–ø–æ–ª–∫–∞', '–∫—Ä–µ—Å–ª–æ', '—Ç—É–º–±–∞', '—Å—Ç–æ–ª–µ—à–Ω–∏—Ü–∞', '—Ñ–∞—Å–∞–¥', '–¥–≤–µ—Ä—Ü–∞', '—è—â–∏–∫', '–º–∞—Ç—Ä–∞—Å', '–ø–æ–¥—É—à–∫–∞'],
          '–û–î–ï–ñ–î–ê': ['–ø–ª–∞—Ç—å–µ', '–±–ª—É–∑–∫–∞', '—Ä—É–±–∞—à–∫–∞', '–±—Ä—é–∫–∏', '–¥–∂–∏–Ω—Å—ã', '—é–±–∫–∞', '–ø–∏–¥–∂–∞–∫', '–∫—É—Ä—Ç–∫–∞', '–ø–∞–ª—å—Ç–æ', '—Å–≤–∏—Ç–µ—Ä', '—Ñ—É—Ç–±–æ–ª–∫–∞', '–±–µ–ª—å–µ', '–Ω–∏–∂–Ω–µ–µ', 'lingerie', '—Ç—Ä—É—Å—ã', '–±—é—Å—Ç–≥–∞–ª—å—Ç–µ—Ä', '–±–µ–ª—å–µ', '–±–µ–ª—å—ë', '–Ω–∏–∂–Ω–µ–µ –±–µ–ª—å–µ', '–∫—É—Ç—é—Ä–Ω–æ–µ –±–µ–ª—å–µ'],
          '–û–ë–£–í–¨': ['—Ç—É—Ñ–ª–∏', '–±–æ—Ç–∏–Ω–∫–∏', '–∫—Ä–æ—Å—Å–æ–≤–∫–∏', '—Å–∞–ø–æ–≥–∏', '—Å–∞–Ω–¥–∞–ª–∏–∏', '–±–æ—Å–æ–Ω–æ–∂–∫–∏', '–∫–µ–¥—ã', '–º–æ–∫–∞—Å–∏–Ω—ã', '–ª–æ—Ñ–µ—Ä—ã', '—Å–∞–ø–æ–∂–∫–∏', '—É–≥–≥–∏', '—à–ª–µ–ø–∞–Ω—Ü—ã'],
          '–≠–õ–ï–ö–¢–†–û–ù–ò–ö–ê': ['—Ç–µ–ª–µ—Ñ–æ–Ω', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', '–Ω–æ—É—Ç–±—É–∫', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–ø–ª–∞–Ω—à–µ—Ç', '–Ω–∞—É—à–Ω–∏–∫–∏', '–∫–æ–ª–æ–Ω–∫–∞', '–∫–∞–º–µ—Ä–∞', '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä', '—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫', '—Å—Ç–∏—Ä–∞–ª—å–Ω–∞—è', '–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞'],
          '–ö–†–ê–°–û–¢–ê': ['–∫—Ä–µ–º', '—à–∞–º–ø—É–Ω—å', '–º–∞—Å–∫–∞', '—Å—ã–≤–æ—Ä–æ—Ç–∫–∞', '—Ç–æ–Ω–∞–ª—å–Ω—ã–π', '–ø–æ–º–∞–¥–∞', '—Ç—É—à—å', '—Ç–µ–Ω–∏', '–ª–∞–∫', '–¥—É—Ö–∏', '–¥–µ–∑–æ–¥–æ—Ä–∞–Ω—Ç', '–≥–µ–ª—å', '—Å–∫—Ä–∞–±', '–ø–∏–ª–∏–Ω–≥'],
          '–°–ü–û–†–¢': ['–∫—Ä–æ—Å—Å–æ–≤–∫–∏', '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '—Ñ–∏—Ç–Ω–µ—Å', '–π–æ–≥–∞', '–±–µ–≥', '–≤–µ–ª–æ—Å–∏–ø–µ–¥', '–ª—ã–∂–∏', '–∫–æ–Ω—å–∫–∏', '–º—è—á', '–≥–∞–Ω—Ç–µ–ª–∏', '—Ç—Ä–µ–Ω–∞–∂–µ—Ä', '—Ñ–æ—Ä–º–∞', '–∫–æ—Å—Ç—é–º'],
          '–î–û–ú': ['–ø–æ—Å—É–¥–∞', '—Ç–∞—Ä–µ–ª–∫–∞', '—á–∞—à–∫–∞', '–∫–∞—Å—Ç—Ä—é–ª—è', '—Å–∫–æ–≤–æ—Ä–æ–¥–∞', '–ø–æ–ª–æ—Ç–µ–Ω—Ü–µ', '–ø–æ—Å—Ç–µ–ª—å–Ω–æ–µ', '–ø–æ–∫—Ä—ã–≤–∞–ª–æ', '–∫–æ–≤–µ—Ä', '—à—Ç–æ—Ä—ã', '–ª–∞–º–ø–∞', '—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫', '–≤–∞–∑–∞', '–¥–µ–∫–æ—Ä'],
          '–ê–í–¢–û': ['–º–∞—Å–ª–æ', '—Ñ–∏–ª—å—Ç—Ä', '—Ç–æ—Ä–º–æ–∑–Ω–∞—è', '–∫–æ–ª–æ–¥–∫–∞', '–¥–∏—Å–∫', '—à–∏–Ω–∞', '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä', '—Å–≤–µ—á–∞', '—Ä–µ–º–µ–Ω—å', '–ø–æ–¥–≤–µ—Å–∫–∞', '–∞–º–æ—Ä—Ç–∏–∑–∞—Ç–æ—Ä', '—Å—Ç–æ–π–∫–∞', '–ø—Ä—É–∂–∏–Ω–∞'],
          '–°–ê–î': ['—Å–µ–º–µ–Ω–∞', '—Ä–∞—Å—Å–∞–¥–∞', '—É–¥–æ–±—Ä–µ–Ω–∏–µ', '–≥—Ä—É–Ω—Ç', '–≥–æ—Ä—à–æ–∫', '–ª–æ–ø–∞—Ç–∞', '–≥—Ä–∞–±–ª–∏', '–ª–µ–π–∫–∞', '—Å–µ–∫–∞—Ç–æ—Ä', '–ø–µ—Ä—á–∞—Ç–∫–∏', '—Å–∞–∂–µ–Ω–µ—Ü', '–∫—É—Å—Ç', '–¥–µ—Ä–µ–≤–æ', '—Ü–≤–µ—Ç–æ–∫'],
          '–ü–û–õ–ò–ì–†–ê–§–ò–Ø': ['–∞–ª—å–±–æ–º', '—Ñ–æ—Ç–æ–∞–ª—å–±–æ–º', '–≤—ã–ø—É—Å–∫–Ω–æ–π', '–∞–ª—å–±–æ–º –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞', '—Ñ–æ—Ç–æ–∫–Ω–∏–≥–∞', '–∫–Ω–∏–≥–∞', '–±—Ä–æ—à—é—Ä–∞', '–∫–∞—Ç–∞–ª–æ–≥', '–±—É–∫–ª–µ—Ç', '–ª–∏—Å—Ç–æ–≤–∫–∞', '–≤–∏–∑–∏—Ç–∫–∞', '–æ—Ç–∫—Ä—ã—Ç–∫–∞', '–∫–∞–ª–µ–Ω–¥–∞—Ä—å', '–ø–ª–∞–∫–∞—Ç', '–±–∞–Ω–Ω–µ—Ä'],
          '–î–ò–ó–ê–ô–ù': ['–¥–∏–∑–∞–π–Ω', '—Å—Ç–∏–ª—å', '—Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π', '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '–º–∏–Ω–∏–º–∞–ª–∏–∑–º', '–ª–æ—Ñ—Ç', '–ø—Ä–æ–≤–∞–Ω—Å', '–∫–∞–Ω—Ç—Ä–∏', '—Ö–∞–π-—Ç–µ–∫', '—ç–∫–æ', '–≤–∏–Ω—Ç–∞–∂', '—Ä–µ—Ç—Ä–æ', '–º–æ–¥–µ—Ä–Ω', '–∞—Ä—Ç-–¥–µ–∫–æ'],
          '–£–°–õ–£–ì–ò': ['—É—Å–ª—É–≥–∞', '—Å–µ—Ä–≤–∏—Å', '–º–∞—Å—Å–∞–∂', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–æ–±—É—á–µ–Ω–∏–µ', '–∫—É—Ä—Å', '—Ç—Ä–µ–Ω–∏–Ω–≥', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ', '–º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ', '–∫–æ—É—á–∏–Ω–≥', '—Ç–µ—Ä–∞–ø–∏—è', '–ª–µ—á–µ–Ω–∏–µ', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'],
          '–¢–ê–†–ò–§–´': ['—Ç–∞—Ä–∏—Ñ', '–ø–ª–∞–Ω', '–ø–∞–∫–µ—Ç', '–ø–æ–¥–ø–∏—Å–∫–∞', '–∞–±–æ–Ω–µ–º–µ–Ω—Ç', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ü–µ–Ω–∞', '–ø—Ä–∞–π—Å', 'rate', 'fee', 'charge', 'subscription', 'plan', 'package'],
          '–¶–ï–ù–´': ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä—É–±–ª–µ–π', '‚ÇΩ', '$', '‚Ç¨', '–æ—Ç', '–¥–æ', '–∑–∞', '—Ü–µ–Ω–∞ –∑–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞', '–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑', '–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π', '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞']
        };
        
        // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∏—à–∞–º
        Object.entries(nicheKeywords).forEach(([niche, keywords]) => {
          keywords.forEach(keyword => {
            // –ò—â–µ–º –ø–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
            const allElements = document.querySelectorAll('*');
            allElements.forEach(el => {
              if (el.textContent && el.textContent.toLowerCase().includes(keyword.toLowerCase())) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –≤–ª–æ–∂–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                const hasParentWithKeyword = Array.from(el.parentElement?.querySelectorAll('*') || [])
                  .some(parent => parent !== el && parent.textContent && parent.textContent.toLowerCase().includes(keyword.toLowerCase()));
                
                if (!hasParentWithKeyword) {
                  fullText += `${niche}: ${el.textContent.trim()}\n`;
                }
              }
            });
          });
        });
        
        return fullText;
      }, ecommerceSelectors);
    
    await page.close();
    
             // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤
             const cleanedText = text
               .replace(/\s+/g, ' ')
               // –£–¥–∞–ª—è–µ–º cookie –∏ GDPR —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
               .replace(/cookie|Cookie|COOKIE/gi, '')
               .replace(/Accept|–ü—Ä–∏–Ω—è—Ç—å|Customise|Consent|Preferences|–°–æ–≥–ª–∞—Å–∏–µ|–ù–∞—Å—Ç—Ä–æ–π–∫–∏/gi, '')
               .replace(/Show more|Show less|–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ|–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—å—à–µ/gi, '')
               .replace(/Always Active|Necessary|Functional|Analytics|Performance|Advertisement/gi, '')
               .replace(/No cookies to display|–ö—É–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è/gi, '')
               // –£–¥–∞–ª—è–µ–º JavaScript –∫–æ–¥
               .replace(/t_onFuncLoad|t_onReady|t396_|t650_|t1093_|t807_|t367_|t994_|t-records|t-popup/gi, '')
               .replace(/function\(\)|setTimeout|addEventListener|querySelector|getElementById/gi, '')
               .replace(/console\.log|console\.error|console\.warn/gi, '')
               .replace(/[\{\}\(\)\[\];]/g, ' ')
               .replace(/var\s+\w+\s*=|const\s+\w+\s*=|let\s+\w+\s*=/gi, '')
               // –£–¥–∞–ª—è–µ–º CSS –∫–æ–¥ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
               .replace(/#rec\d+/gi, '')
               .replace(/tn-elem/gi, '')
               .replace(/@media[^}]+}/gi, '')
               .replace(/display:\s*[^;]+;/gi, '')
               .replace(/height:\s*[^;]+;/gi, '')
               .replace(/width:\s*[^;]+;/gi, '')
               .replace(/left:\s*[^;]+;/gi, '')
               .replace(/top:\s*[^;]+;/gi, '')
               .replace(/position:\s*[^;]+;/gi, '')
               .replace(/z-index:\s*[^;]+;/gi, '')
               .replace(/background[^;]*;/gi, '')
               .replace(/color:\s*[^;]+;/gi, '')
               .replace(/font-[^:]*:\s*[^;]+;/gi, '')
               .replace(/margin[^:]*:\s*[^;]+;/gi, '')
               .replace(/padding[^:]*:\s*[^;]+;/gi, '')
               .replace(/border[^:]*:\s*[^;]+;/gi, '')
               .replace(/calc\([^)]+\)/gi, '')
               .replace(/\d+px/gi, '')
               .replace(/\d+%/gi, '')
               .replace(/\d+vh/gi, '')
               .replace(/\d+vw/gi, '')
               .replace(/\d+em/gi, '')
               .replace(/\d+rem/gi, '')
               // –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –∏ –∞—Ç—Ä–∏–±—É—Ç—ã
               .replace(/<[^>]*>/g, ' ')
               .replace(/&nbsp;/g, ' ')
               .replace(/&amp;/g, '&')
               .replace(/&lt;/g, '<')
               .replace(/&gt;/g, '>')
               .replace(/&quot;/g, '"')
               // –£–¥–∞–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
               .replace(/undefined|null|NaN/gi, '')
               .replace(/true|false/gi, '')
               .replace(/window\.|document\.|this\./gi, '')
               // –£–ª—É—á—à–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
               .replace(/(\d+)\s*—Ä—É–±/gi, '–¶–ï–ù–ê: $1 —Ä—É–±–ª–µ–π')
               .replace(/(\d+)\s*‚ÇΩ/gi, '–¶–ï–ù–ê: $1 —Ä—É–±–ª–µ–π')
               .replace(/(\d+)\s*–¥–æ–ª–ª/gi, '–¶–ï–ù–ê: $1 –¥–æ–ª–ª–∞—Ä–æ–≤')
               .replace(/(\d+)\s*–µ–≤—Ä–æ/gi, '–¶–ï–ù–ê: $1 –µ–≤—Ä–æ')
               .replace(/–æ—Ç\s*(\d+)/gi, '–¶–ï–ù–ê –û–¢: $1')
               .replace(/–¥–æ\s*(\d+)/gi, '–¶–ï–ù–ê –î–û: $1')
               .replace(/–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π\s*–∑–∞–∫–∞–∑/gi, '–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –ó–ê–ö–ê–ó')
               .replace(/—Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π\s*—Å—Ç–∏–ª—å/gi, '–î–ò–ó–ê–ô–ù: —Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π —Å—Ç–∏–ª—å')
               .replace(/–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π\s*—Å—Ç–∏–ª—å/gi, '–î–ò–ó–ê–ô–ù: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å')
               .replace(/—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π\s*—Å—Ç–∏–ª—å/gi, '–î–ò–ó–ê–ô–ù: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å')
               .replace(/–∞–ª—å–±–æ–º\s*–≤—ã–ø—É—Å–∫–Ω–∏–∫–∞/gi, '–¢–û–í–ê–†: –∞–ª—å–±–æ–º –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞')
               .replace(/—Ñ–æ—Ç–æ–∞–ª—å–±–æ–º/gi, '–¢–û–í–ê–†: —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º')
               .replace(/–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–∞—Ü–∏—è/gi, '–£–°–õ–£–ì–ê: –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–∞—Ü–∏—è')
               .replace(/–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è/gi, '–£–°–õ–£–ì–ê: –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è')
               // –£–ª—É—á—à–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ FAQ
               .replace(/(–≤–æ–ø—Ä–æ—Å|question)[\s\S]*?(–æ—Ç–≤–µ—Ç|answer)/gi, 'FAQ: $&')
               .replace(/(–∫–∞–∫|—á—Ç–æ|–≥–¥–µ|–∫–æ–≥–¥–∞|–ø–æ—á–µ–º—É|–∑–∞—á–µ–º)[\s\S]{10,200}\?/gi, 'FAQ: $&')
               // –£–ª—É—á—à–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
               .replace(/(–æ—Ç–∑—ã–≤|review|—Ä–µ–∫–æ–º–µ–Ω–¥—É—é|—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è)[\s\S]{20,500}/gi, '–û–¢–ó–´–í: $&')
               // –£–ª—É—á—à–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–∫—Ü–∏–π
               .replace(/(—Å–∫–∏–¥–∫–∞|–∞–∫—Ü–∏—è|—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞|—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞)[\s\S]{5,200}/gi, '–ê–ö–¶–ò–Ø: $&')
               .replace(/\s+/g, ' ')
               .trim();
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    let finalContent = cleanedText;
    if (cleanedText.length > 25000) { // –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –¥–ª—è –ò–ú
      const sentences = cleanedText.split(/[.!?]+/).filter(s => s.trim().length > 10);
      let result = '';
      let currentLength = 0;
      
      for (const sentence of sentences) {
        if (currentLength + sentence.length > 25000) break;
        result += sentence.trim() + '. ';
        currentLength = result.length;
      }
      
      finalContent = result.trim();
    }
    
    console.log('‚úÖ Website parsed successfully, content length:', finalContent.length);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metadata = await page.evaluate(() => {
      const meta = {};
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞-—Ç–µ–≥–∏
      meta.title = document.title || '';
      meta.description = document.querySelector('meta[name="description"]')?.content || '';
      meta.keywords = document.querySelector('meta[name="keywords"]')?.content || '';
      meta.ogTitle = document.querySelector('meta[property="og:title"]')?.content || '';
      meta.ogDescription = document.querySelector('meta[property="og:description"]')?.content || '';
      meta.ogImage = document.querySelector('meta[property="og:image"]')?.content || '';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON-LD)
      const jsonLdScripts = document.querySelectorAll('script[type="application/ld+json"]');
      meta.structuredData = [];
      jsonLdScripts.forEach(script => {
        try {
          const data = JSON.parse(script.textContent);
          meta.structuredData.push(data);
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        }
      });
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      meta.contacts = {
        phones: [],
        emails: [],
        addresses: []
      };
      
      // –¢–µ–ª–µ—Ñ–æ–Ω—ã
      const phoneRegex = /(\+?[7-8]?[\s\-]?\(?[0-9]{3}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2})/g;
      const phoneMatches = document.body.textContent.match(phoneRegex);
      if (phoneMatches) {
        meta.contacts.phones = [...new Set(phoneMatches)];
      }
      
      // Email
      const emailRegex = /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/g;
      const emailMatches = document.body.textContent.match(emailRegex);
      if (emailMatches) {
        meta.contacts.emails = [...new Set(emailMatches)];
      }
      
      // –ê–¥—Ä–µ—Å–∞ (–ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫)
      const addressElements = document.querySelectorAll('[class*="address"], [class*="–∞–¥—Ä–µ—Å"], .address, .contact-address');
      addressElements.forEach(el => {
        if (el.textContent && el.textContent.trim().length > 10) {
          meta.contacts.addresses.push(el.textContent.trim());
        }
      });
      
      return meta;
    });

    return {
      success: true,
      content: finalContent,
      length: finalContent.length,
      metadata: metadata,
      extractedData: {
        faqCount: (finalContent.match(/FAQ:/g) || []).length,
        priceCount: (finalContent.match(/–¶–ï–ù–ê:/g) || []).length,
        productCount: (finalContent.match(/–¢–û–í–ê–†:/g) || []).length,
        serviceCount: (finalContent.match(/–£–°–õ–£–ì–ê:/g) || []).length,
        reviewCount: (finalContent.match(/–û–¢–ó–´–í:/g) || []).length,
        promoCount: (finalContent.match(/–ê–ö–¶–ò–Ø:/g) || []).length
      }
    };
    
  } catch (error) {
    console.error('‚ùå Error parsing website:', error);
    throw error;
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –Ω–æ –ù–ï –±—Ä–∞—É–∑–µ—Ä
    if (page) {
      try {
        await page.close();
      } catch (closeError) {
        console.log('‚ö†Ô∏è Error closing page:', closeError.message);
      }
    }
  }
}

async function parseWebsite(url) {
  const startTime = Date.now();
  try {
    console.log('üîç [ImprovedParser] Parsing website:', url);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = `parse_${url}`;
    const cached = parseCache.get(cacheKey);
    if (cached && (Date.now() - cached.timestamp) < CACHE_TTL) {
      console.log('‚úÖ [ImprovedParser] Using cached parsing result');
      return cached.result;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    const parser = new ImprovedContentParser();
    const result = await parser.parseContent(url, {
      preserveImportantContent: true,
      extractMetadata: true,
      cleanAggressively: false
    });
    
    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    parseCache.set(cacheKey, {
      result: result,
      timestamp: Date.now()
    });
    
    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    const parseTime = Date.now() - startTime;
    monitoring.recordParsingAttempt(url, result.success, parseTime);
    
    console.log('‚úÖ [ImprovedParser] Website parsed successfully, content length:', result.content.length);
    
    return result;
    
  } catch (error) {
    console.log('‚ö†Ô∏è All retry attempts failed, trying simple fetch:', error.message);
    
    // Fallback: –ø—Ä–æ—Å—Ç–æ–π fetch
    try {
      const response = await fetch(url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
      
      const html = await response.text();
      
      // –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ HTML
      const cleanedText = html
        .replace(/<script[^>]*>.*?<\/script>/gi, '')
        .replace(/<style[^>]*>.*?<\/style>/gi, '')
        .replace(/<[^>]+>/g, ' ')
        .replace(/\s+/g, ' ')
        .trim();
      
      const parseTime = Date.now() - startTime;
      monitoring.recordParsingAttempt(url, true, parseTime);
      
      return {
        success: true,
        content: cleanedText,
        length: cleanedText.length
      };
      
    } catch (fetchError) {
      const parseTime = Date.now() - startTime;
      monitoring.recordParsingAttempt(url, false, parseTime, fetchError);
      console.error('‚ùå Fallback fetch also failed:', fetchError.message);
      throw fetchError;
    }
  }
}

class AIAgentSystem {
  constructor(config = {}) {
    this.config = {
      supabaseUrl: config.supabaseUrl || process.env.SUPABASE_URL,
      supabaseKey: config.supabaseKey || process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_ANON_KEY,
      tokenBudget: config.tokenBudget || 800,
      maxChunks: config.maxChunks || 3,
      cacheTTL: config.cacheTTL || 3600000,
      ...config
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    this.supabase = createClient(this.config.supabaseUrl, this.config.supabaseKey);
    this.knowledgeDB = new KnowledgeDatabase();
    this.ragSystem = new UnifiedRAGSystem(this.knowledgeDB);
    this.chunkingSystem = new ChunkingSystem();
    this.contentParser = new ImprovedContentParser();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–ª–æ—É –∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    this.unifiedFlow = new UnifiedAIAgentFlow({
      supabaseUrl: this.config.supabaseUrl,
      supabaseKey: this.config.supabaseKey,
      tokenBudget: this.config.tokenBudget,
      maxChunks: this.config.maxChunks,
      enableValidation: true,
      enableMonitoring: true
    });
    
    this.responseValidator = new AIResponseValidator({
      supabaseUrl: this.config.supabaseUrl,
      supabaseKey: this.config.supabaseKey,
      validationLevel: 'strict',
      enableFactCheck: true,
      enableHallucinationDetection: true,
      enableRelevanceCheck: true,
      enableQualityCheck: true
    });
    
    // –ö–µ—à –¥–ª—è FAQ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
    this.faqCache = new Map();
    this.promptCache = new Map();
    this.searchCache = new Map();
    this.settingsCache = new Map();
    
    console.log('ü§ñ AI Agent System initialized');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis –∫—ç—à—É
    this.initializeCache();
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
  async initializeCache() {
    try {
      await this.ragSystem.connectCache();
      console.log('‚úÖ [AIAgent] Cache system initialized');
    } catch (error) {
      console.log('‚ö†Ô∏è [AIAgent] Cache initialization failed:', error.message);
    }
  }
  
  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–ª–æ—É)
  async processUserRequest(request) {
    try {
      console.log('üöÄ [AIAgent] Processing user request through unified flow...');
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–ª–æ—É
      const result = await this.unifiedFlow.processUserRequest(request);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      if (result.success && this.responseValidator) {
        const validationResult = await this.responseValidator.validateResponse(
          result.response,
          { searchResults: result.searchResults },
          request
        );
        
        if (!validationResult.isValid) {
          console.log('‚ö†Ô∏è [AIAgent] Additional validation failed, using fallback response');
          result.response = await this.generateFallbackResponse(request);
          result.validationWarnings = validationResult.warnings;
        }
      }
      
      return result;
      
    } catch (error) {
      console.error('‚ùå [AIAgent] Error processing user request:', error);
      
      // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return await this.processUserRequestLegacy(request);
    }
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –æ—Ç–≤–µ—Ç–∞
  async generateFallbackResponse(request) {
    return {
      content: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.',
      tokens_used: 50,
      model: 'fallback',
      processed_at: new Date().toISOString()
    };
  }

  // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ –≤ –æ–∫–Ω–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  async getRecentConversationId(userId, assistantId, channel = 'admin', windowMinutes = 45) {
    try {
      const { data, error } = await this.supabase
        .from('conversations')
        .select('id, last_message_at, status')
        .eq('user_id', userId)
        .eq('assistant_id', assistantId)
        .eq('channel', channel)
        .gte('last_message_at', new Date(Date.now() - windowMinutes * 60 * 1000).toISOString())
        .order('last_message_at', { ascending: false })
        .limit(1);
      if (error) return null;
      return (data && data.length > 0) ? data[0].id : null;
    } catch (e) {
      return null;
    }
  }

  // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
  async ensureConversation(conversationId, userId, assistantId, channel = 'admin') {
    try {
      if (!conversationId) return null;
      const { data, error } = await this.supabase
        .from('conversations')
        .select('id')
        .eq('id', conversationId)
        .single();
      if (error || !data) {
        const { data: created, error: insertErr } = await this.supabase
          .from('conversations')
          .insert({ id: conversationId, user_id: userId, assistant_id: assistantId, channel, status: 'active', started_at: new Date().toISOString(), last_message_at: new Date().toISOString() })
          .select('id')
          .single();
        if (insertErr) return null;
        return created.id;
      }
      return data.id;
    } catch (e) {
      return null;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedRAG —Å–∏—Å—Ç–µ–º—ã
  async initializeRAG(userId = null, nicheId = null) {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedRAG —Å–∏—Å—Ç–µ–º—ã...');
      await this.ragSystem.initialize(userId, nicheId);
      console.log('‚úÖ UnifiedRAG —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UnifiedRAG —Å–∏—Å—Ç–µ–º—ã:', error);
    }
  }

  // 1. –°–õ–û–ô –•–†–ê–ù–ï–ù–ò–Ø –ó–ù–ê–ù–ò–ô
  async processKnowledgeSource(userId, assistantId, sourceType, content, options = {}) {
    try {
      console.log(`üìö [ImprovedParser] Processing knowledge source for user ${userId}, assistant ${assistantId}`);
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
      let processedContent = content;
      let metadata = {};
      
      if (sourceType === 'site' && content.startsWith('http')) {
        console.log('üåê [ImprovedParser] Parsing website content...');
        const parseResult = await this.contentParser.parseContent(content, {
          preserveImportantContent: true,
          extractMetadata: true,
          cleanAggressively: false
        });
        
        if (parseResult.success && parseResult.content && parseResult.content.length > 100) {
          processedContent = parseResult.content;
          metadata = parseResult.metadata || {};
          console.log(`‚úÖ [ImprovedParser] Website parsed: ${parseResult.content.length} characters`);
          console.log(`üìä [ImprovedParser] Metadata:`, metadata);
          
          // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          if (parseResult.extractedData) {
            console.log('üìä Extracted data:', parseResult.extractedData);
          }
          
          // –£–õ–£–ß–®–ï–ù–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ú–ï–¢–ê–î–ê–ù–ù–´–• –î–õ–Ø –õ–£–ß–®–ï–ì–û –ü–û–ò–°–ö–ê
          if (parseResult.metadata) {
            let metadataText = '';
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            if (parseResult.metadata.title) {
              metadataText += `–ó–ê–ì–û–õ–û–í–û–ö –°–ê–ô–¢–ê: ${parseResult.metadata.title}\n`;
            }
            if (parseResult.metadata.description) {
              metadataText += `–û–ü–ò–°–ê–ù–ò–ï –°–ê–ô–¢–ê: ${parseResult.metadata.description}\n`;
            }
            
            // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if (parseResult.metadata.contacts) {
              if (parseResult.metadata.contacts.phones.length > 0) {
                metadataText += `–¢–ï–õ–ï–§–û–ù–´: ${parseResult.metadata.contacts.phones.join(', ')}\n`;
              }
              if (parseResult.metadata.contacts.emails.length > 0) {
                metadataText += `EMAIL: ${parseResult.metadata.contacts.emails.join(', ')}\n`;
              }
              if (parseResult.metadata.contacts.addresses.length > 0) {
                metadataText += `–ê–î–†–ï–°–ê: ${parseResult.metadata.contacts.addresses.join(', ')}\n`;
              }
            }
            
            // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (parseResult.metadata.structuredData && parseResult.metadata.structuredData.length > 0) {
              metadataText += `–°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï: ${JSON.stringify(parseResult.metadata.structuredData)}\n`;
            }
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if (parseResult.metadata.stats) {
              const stats = parseResult.metadata.stats;
              if (stats.productCount > 0) metadataText += `–¢–û–í–ê–†–û–í –ù–ê –°–ê–ô–¢–ï: ${stats.productCount}\n`;
              if (stats.serviceCount > 0) metadataText += `–£–°–õ–£–ì –ù–ê –°–ê–ô–¢–ï: ${stats.serviceCount}\n`;
              if (stats.reviewCount > 0) metadataText += `–û–¢–ó–´–í–û–í: ${stats.reviewCount}\n`;
              if (stats.promoCount > 0) metadataText += `–ê–ö–¶–ò–ô: ${stats.promoCount}\n`;
            }
            
            processedContent = metadataText + '\n\n–û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢:\n' + processedContent;
            console.log('üìä Metadata added to content:', metadataText.length, 'characters');
          }
        } else {
          console.log('‚ö†Ô∏è Website parsing failed, using URL as content');
          processedContent = content;
        }
      } else if (sourceType === 'feed') {
        console.log('üìä Parsing feed content...');
        const feedResult = await this.parseFeed(content);
        
        if (feedResult.success && feedResult.content) {
          processedContent = feedResult.content;
          console.log(`‚úÖ Feed parsed: ${feedResult.content.length} characters`);
        } else {
          console.log('‚ö†Ô∏è Feed parsing failed, using raw content');
          processedContent = content;
        }
      } else if (sourceType === 'file') {
        console.log('üìÅ Parsing file content...');
        const fileResult = await this.parseFile(content);
        
        if (fileResult.success && fileResult.content) {
          processedContent = fileResult.content;
          console.log(`‚úÖ File parsed: ${fileResult.content.length} characters`);
        } else {
          console.log('‚ö†Ô∏è File parsing failed, using raw content');
          processedContent = content;
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–Ω–∞–Ω–∏–π
      const sourceOptions = {
        ...options,
        sourceUrl: sourceType === 'site' && content.startsWith('http') ? content : null,
        metadata: metadata
      };
      const source = await this.createKnowledgeSource(userId, assistantId, sourceType, processedContent, sourceOptions);
      
      // –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏
      const chunks = await this.createChunksFromContent(source.id, userId, assistantId, processedContent, {
        ...options,
        createEmbeddings: true // –í–∫–ª—é—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
      });
      
      // –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
      if (options.createEmbeddings !== false) {
        await this.createEmbeddingsForChunks(chunks);
      }
      
      return {
        success: true,
        source,
        chunks,
        totalChunks: chunks.length,
        totalTokens: chunks.reduce((sum, chunk) => sum + chunk.tokens_estimate, 0)
      };
      
    } catch (error) {
      console.error('‚ùå Error processing knowledge source:', error);
      throw error;
    }
  }

  async createKnowledgeSource(userId, assistantId, sourceType, content, options = {}) {
    try {
      console.log(`üíæ Creating knowledge source for user ${userId}, assistant ${assistantId}`);
      console.log(`üíæ Source type: ${sourceType}, content length: ${content.length}`);
      
      const sourceData = {
        user_id: userId,
        assistant_id: assistantId,
        source_type: sourceType,
        source_url: options.sourceUrl || null,
        title: options.title || `Source ${Date.now()}`,
        original_content: content,
        processed_content: this.preprocessContent(content, sourceType),
        status: '–ó–∞–≥—Ä—É–∂–µ–Ω–æ',
        niche_id: options.nicheId || null,
        structured_data: (
          sourceType === 'feed' ? this.normalizeFeedContent(content, options.sourceUrl) :
          this.buildStructuredDataForSource(options.sourceUrl, sourceType)
        ) || null,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      console.log('üíæ Source data prepared:', {
        user_id: sourceData.user_id,
        assistant_id: sourceData.assistant_id,
        source_type: sourceData.source_type,
        title: sourceData.title,
        content_length: sourceData.original_content.length
      });
      
      const { data, error } = await this.supabase
        .from('knowledge_sources')
        .insert(sourceData)
        .select()
        .single();

      if (error) {
        console.error('‚ùå Error creating knowledge source:', error);
        console.error('‚ùå Error details:', JSON.stringify(error, null, 2));
        throw error;
      }
      
      console.log('‚úÖ Knowledge source created successfully:', data.id);
      // –ê–≤—Ç–æ–∫—Ä–∞—É–ª–∏–Ω–≥ —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–∞–π—Ç–∞ (–≤ —Ñ–æ–Ω–µ)
      try {
        if ((sourceType === 'site' || sourceType === 'website') && (options.autoCrawl || true)) {
          this.crawlSiteLinks(data.id, { maxPages: 40 }).then(() => {
            console.log('üîó Auto-crawl finished for source', data.id);
          }).catch((e) => console.warn('Auto-crawl error', e?.message || e));
        }
      } catch (_) {}

      // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤ –∏–∑ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ —Ñ–∏–¥–∞
      try {
        if (sourceType === 'feed' && sourceData.structured_data && Array.isArray(sourceData.structured_data.products)) {
          const productChunks = sourceData.structured_data.products.slice(0, 500).map((p, idx) => {
            const text = `–¢–æ–≤–∞—Ä: ${p.title || p.name || '‚Äî'}${p.category ? `\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${p.category}` : ''}${p.price ? `\n–¶–µ–Ω–∞: ${p.price}` : ''}${p.availability ? `\n–ù–∞–ª–∏—á–∏–µ: ${p.availability}` : ''}${p.url ? `\nURL: ${p.url}` : ''}${p.sku ? `\nSKU: ${p.sku}` : ''}`;
            const metadata = this.extractChunkMetadata(text);
            const chunkType = this.computeChunkType(metadata);
            return {
              source_id: data.id,
              user_id: userId,
              assistant_id: assistantId,
              niche_id: options.nicheId || null,
              chunk_text: text,
              chunk_summary: `–¢–æ–≤–∞—Ä ${p.title || p.name || ''}`.trim(),
              tokens_estimate: text.length / 4,
              words_count: (text.match(/\S+/g) || []).length,
              full_text_hash: (text.length + '_' + idx).toString(),
              chunk_index: idx,
              metadata,
              chunk_type: chunkType,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            };
          });
          if (productChunks.length) {
            await this.supabase.from('knowledge_chunks').insert(productChunks);
            console.log(`üß© Inserted ${productChunks.length} chunks from feed products`);
          }
        }
      } catch (e) {
        console.warn('Feed chunk generation error:', e?.message || e);
      }

      return data;
      
    } catch (error) {
      console.error('‚ùå Failed to create knowledge source:', error);
      throw error;
    }
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ –ø—Ä–∞–≤–∏–ª—É –¥–ª—è —Å–∞–π—Ç–æ–≤ (services/portfolio/contacts/about/price)
  buildStructuredDataForSource(sourceUrl, sourceType) {
    try {
      if (!sourceUrl || !/^https?:\/\//i.test(sourceUrl)) return null;
      if (!sourceType || (sourceType !== 'site' && sourceType !== 'website')) return null;
      const url = new URL(sourceUrl);
      const base = `${url.protocol}//${url.host}`;
      const uniq = new Map();
      const add = (label, path) => {
        const full = path.startsWith('http') ? path : base + (path.startsWith('/') ? path : `/${path}`);
        if (!uniq.has(label)) uniq.set(label, full);
      };
      // –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –∏ —Ä—É—Å—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      add('services', '/services');
      add('services', '/uslugi');
      add('portfolio', '/portfolio');
      add('portfolio', '/works');
      add('contacts', '/contacts');
      add('contacts', '/kontakty');
      add('about', '/about');
      add('about', '/o-nas');
      add('prices', '/prices');
      add('prices', '/ceny');
      const links = Array.from(uniq.entries()).map(([label, url]) => ({ label, url }));
      return links.length ? { links } : null;
    } catch {
      return null;
    }
  }

  // ================= CRAWLER (SITEMAP/ANCHORS) =================
  normalizeUrl(baseUrl, href) {
    try {
      if (!href) return null;
      const base = new URL(baseUrl);
      let url;
      if (href.startsWith('http')) {
        url = new URL(href);
      } else if (href.startsWith('//')) {
        url = new URL(base.protocol + href);
      } else if (href.startsWith('/')) {
        url = new URL(base.origin + href);
      } else if (href.startsWith('#') || href.startsWith('mailto:') || href.startsWith('tel:')) {
        return null;
      } else {
        url = new URL(base.origin + (base.pathname.endsWith('/') ? base.pathname : base.pathname + '/') + href);
      }
      // —Ç–æ–ª—å–∫–æ —Ç–æ—Ç –∂–µ —Ö–æ—Å—Ç
      if (url.host !== base.host) return null;
      // —É–±–∏—Ä–∞–µ–º hash
      url.hash = '';
      // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–µ—à–∏
      const normalized = url.toString().replace(/\/$/, '');
      return normalized;
    } catch {
      return null;
    }
  }

  labelForPath(pathname) {
    const p = pathname.toLowerCase();
    if (/uslugi|services/.test(p)) return 'services';
    if (/portfolio|works|cases/.test(p)) return 'portfolio';
    if (/kontakt|contacts/.test(p)) return 'contacts';
    if (/about|o-nas/.test(p)) return 'about';
    if (/price|ceny|prajs/.test(p)) return 'prices';
    return 'page';
  }

  async crawlSiteLinks(sourceId, options = {}) {
    const maxPages = Math.min(Math.max(options.maxPages || 30, 1), 200);
    try {
      // –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
      const { data: src, error: selErr } = await this.supabase
        .from('knowledge_sources')
        .select('id, user_id, niche_id, source_type, source_url, structured_data')
        .eq('id', sourceId)
        .single();
      if (selErr || !src) throw new Error('–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      if (!src.source_url || (src.source_type !== 'site' && src.source_type !== 'website')) {
        throw new Error('–ö—Ä–∞—É–ª–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç–∏–ø–∞ site/website');
      }

      const baseUrl = src.source_url;
      const found = new Map();

      // 1) sitemap.xml
      try {
        const sitemapUrl = baseUrl.replace(/\/$/, '') + '/sitemap.xml';
        const resp = await fetch(sitemapUrl, { method: 'GET' });
        if (resp.ok) {
          const xml = await resp.text();
          const locs = Array.from(xml.matchAll(/<loc>([^<]+)<\/loc>/gi)).map(m => m[1]).slice(0, maxPages);
          locs.forEach(href => {
            const normalized = this.normalizeUrl(baseUrl, href);
            if (normalized) {
              const label = this.labelForPath(new URL(normalized).pathname);
              if (!found.has(normalized)) found.set(normalized, { label, url: normalized });
            }
          });
        }
      } catch {}

      // 2) –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äì —è–∫–æ—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏
      try {
        const resp = await fetch(baseUrl, { method: 'GET' });
        if (resp.ok) {
          const html = await resp.text();
          const anchors = Array.from(html.matchAll(/href=\"([^\"]+)\"/gi)).map(m => m[1]).slice(0, maxPages);
          anchors.forEach(href => {
            const normalized = this.normalizeUrl(baseUrl, href);
            if (normalized && !found.has(normalized)) {
              const label = this.labelForPath(new URL(normalized).pathname);
              found.set(normalized, { label, url: normalized });
            }
          });
        }
      } catch {}

      const links = Array.from(found.values());
      if (links.length === 0) {
        return { success: true, links: [] };
      }

      // –º–µ—Ä–∂–∏–º —Å–æ stuctured_data.links
      const sd = src.structured_data || {};
      const oldLinks = Array.isArray(sd.links) ? sd.links : [];
      const uniq = new Map(oldLinks.map(l => [l.url, l]));
      links.forEach(l => { if (!uniq.has(l.url)) uniq.set(l.url, l); });
      const merged = Array.from(uniq.values()).slice(0, 500);

      const { error: updErr } = await this.supabase
        .from('knowledge_sources')
        .update({ structured_data: { ...(sd || {}), links: merged }, updated_at: new Date().toISOString() })
        .eq('id', sourceId);
      if (updErr) throw updErr;

      return { success: true, links: merged };
    } catch (e) {
      return { success: false, error: e?.message || String(e) };
    }
  }

  // –£–õ–£–ß–®–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ —á–∞–Ω–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
  extractChunkMetadata(text) {
    const metadata = {
      hasPrice: false,
      hasProduct: false,
      hasDesign: false,
      hasService: false,
      hasContact: false,
      hasAddress: false,
      hasEmail: false,
      hasPhone: false,
      priceValues: [],
      productTypes: [],
      designTypes: [],
      serviceTypes: [],
      contactInfo: [],
      addresses: [],
      emails: [],
      phones: [],
      hasFormula: false
    };

    const lowerText = text.toLowerCase();

    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω
    const pricePatterns = [
      /(\d+[\s,]*\d*)\s*(—Ä—É–±|‚ÇΩ|—Ä—É–±–ª–µ–π|—Ä—É–±–ª—è)/gi,
      /(\d+[\s,]*\d*)\s*(–¥–æ–ª–ª|–¥–æ–ª–ª–∞—Ä–æ–≤|$)/gi,
      /(\d+[\s,]*\d*)\s*(–µ–≤—Ä–æ|‚Ç¨)/gi,
      /–æ—Ç\s*(\d+[\s,]*\d*)\s*(—Ä—É–±|‚ÇΩ|–¥–æ–ª–ª|–µ–≤—Ä–æ)/gi,
      /—Ü–µ–Ω–∞[:\s]*(\d+[\s,]*\d*)\s*(—Ä—É–±|‚ÇΩ|–¥–æ–ª–ª|–µ–≤—Ä–æ)/gi
    ];
    
    pricePatterns.forEach(pattern => {
      const matches = text.match(pattern);
      if (matches) {
        metadata.hasPrice = true;
        metadata.priceValues.push(...matches);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const phonePattern = /(\+?[7-8]?\s?\(?\d{3}\)?[\s-]?\d{3}[\s-]?\d{2}[\s-]?\d{2})/g;
    const phoneMatches = text.match(phonePattern);
    if (phoneMatches) {
      metadata.hasContact = true;
      metadata.hasPhone = true;
      metadata.phones = phoneMatches;
    }

    const emailPattern = /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/g;
    const emailMatches = text.match(emailPattern);
    if (emailMatches) {
      metadata.hasContact = true;
      metadata.hasEmail = true;
      metadata.emails = emailMatches;
    }

    const addressPattern = /(–≥\.|–≥–æ—Ä–æ–¥|—É–ª\.|—É–ª–∏—Ü–∞|–ø—Ä\.|–ø—Ä–æ—Å–ø–µ–∫—Ç|–¥\.|–¥–æ–º|–∫–≤\.|–∫–≤–∞—Ä—Ç–∏—Ä–∞|–æ—Ñ\.|–æ—Ñ–∏—Å)[\s\w\.,-]+/gi;
    const addressMatches = text.match(addressPattern);
    if (addressMatches) {
      metadata.hasAddress = true;
      metadata.addresses = addressMatches;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    const productKeywords = ['–∞–ª—å–±–æ–º', '—Ñ–æ—Ç–æ–∞–ª—å–±–æ–º', '–≤—ã–ø—É—Å–∫–Ω–æ–π', '—Ñ–æ—Ç–æ–∫–Ω–∏–≥–∞', '–∫–Ω–∏–≥–∞', '–±—Ä–æ—à—é—Ä–∞', '–∫–∞—Ç–∞–ª–æ–≥', '–±—É–∫–ª–µ—Ç', '–ª–∏—Å—Ç–æ–≤–∫–∞', '–≤–∏–∑–∏—Ç–∫–∞', '–æ—Ç–∫—Ä—ã—Ç–∫–∞', '–∫–∞–ª–µ–Ω–¥–∞—Ä—å', '–ø–ª–∞–∫–∞—Ç', '–±–∞–Ω–Ω–µ—Ä'];
    productKeywords.forEach(keyword => {
      if (lowerText.includes(keyword)) {
        metadata.hasProduct = true;
        metadata.productTypes.push(keyword);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏–∑–∞–π–Ω–æ–≤
    const designKeywords = ['–¥–∏–∑–∞–π–Ω', '—Å—Ç–∏–ª—å', '—Å–∫–∞–Ω–¥–∏–Ω–∞–≤—Å–∫–∏–π', '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '–º–∏–Ω–∏–º–∞–ª–∏–∑–º', '–ª–æ—Ñ—Ç', '–ø—Ä–æ–≤–∞–Ω—Å', '–∫–∞–Ω—Ç—Ä–∏', '—Ö–∞–π-—Ç–µ–∫', '—ç–∫–æ', '–≤–∏–Ω—Ç–∞–∂', '—Ä–µ—Ç—Ä–æ', '–º–æ–¥–µ—Ä–Ω', '–∞—Ä—Ç-–¥–µ–∫–æ'];
    designKeywords.forEach(keyword => {
      if (lowerText.includes(keyword)) {
        metadata.hasDesign = true;
        metadata.designTypes.push(keyword);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—Å–ª—É–≥
    const serviceKeywords = ['—É—Å–ª—É–≥–∞', '—Å–µ—Ä–≤–∏—Å', '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–∞—Ü–∏—è', '–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è', '–ø–µ—á–∞—Ç—å', '–∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ'];
    serviceKeywords.forEach(keyword => {
      if (lowerText.includes(keyword)) {
        metadata.hasService = true;
        metadata.serviceTypes.push(keyword);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É–ª—ã/—Ä–∞—Å—á—ë—Ç—ã
    const formulaKeywords = ['—Ñ–æ—Ä–º—É–ª–∞', '—Ä–∞—Å—á—ë—Ç', '—Ä–∞—Å—á–µ—Ç', '–∏—Ç–æ–≥–æ–≤–∞—è_—Ü–µ–Ω–∞', '–±–∞–∑–æ–≤–∞—è_—Å—Ç–∞–≤–∫–∞', '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç'];
    formulaKeywords.forEach(keyword => {
      if (lowerText.includes(keyword)) {
        metadata.hasFormula = true;
      }
    });

    return metadata;
  }

  // –í—ã—á–∏—Å–ª—è–µ–º —Ç–∏–ø —á–∞–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
  computeChunkType(metadata) {
    if (!metadata) return 'other';
    if (metadata.hasContact) return 'contact';
    if (metadata.hasAddress) return 'address';
    if (metadata.hasFormula) return 'formula';
    if (metadata.hasPrice) return 'price';
    if (metadata.hasService) return 'service';
    return 'other';
  }

  // –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è —á–∞–Ω–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∏—à
  generateSynonymsForChunk(text, nicheId = null) {
    if (!text) return [];
    const lower = text.toLowerCase();
    
    // –ë–∞–∑–æ–≤—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ)
    const baseSynonymsDict = {
      '–∞—Ç–µ–ª—å–µ': ['–¥–µ—Ç–µ–π–ª–∏–Ω–≥', '–¥–µ—Ç–µ–π–ª–∏–Ω–≥ —Ü–µ–Ω—Ç—Ä', 'lab', 'gn lab', '—Ü–µ–Ω—Ç—Ä', '—Å—Ç—É–¥–∏—è', '–º–∞—Å—Ç–µ—Ä—Å–∫–∞—è'],
      '–¥–µ—Ç–µ–π–ª–∏–Ω–≥': ['–∞—Ç–µ–ª—å–µ', '–¥–µ—Ç–µ–π–ª–∏–Ω–≥ —Ü–µ–Ω—Ç—Ä', 'lab', 'gn lab', '—Ü–µ–Ω—Ç—Ä', '—Å—Ç—É–¥–∏—è', '–º–∞—Å—Ç–µ—Ä—Å–∫–∞—è'],
      '—Ü–µ–Ω—Ç—Ä': ['–∞—Ç–µ–ª—å–µ', '–¥–µ—Ç–µ–π–ª–∏–Ω–≥', '–¥–µ—Ç–µ–π–ª–∏–Ω–≥ —Ü–µ–Ω—Ç—Ä', 'lab', 'gn lab', '—Å—Ç—É–¥–∏—è', '–º–∞—Å—Ç–µ—Ä—Å–∫–∞—è'],
      '–≥–¥–µ': ['–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–∞–¥—Ä–µ—Å', '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è', '—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω', '–ª–æ–∫–∞—Ü–∏—è'],
      '—Ç–∞—Ä–∏—Ñ—ã': ['–ø—Ä–∞–π—Å', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ü–µ–Ω—ã', '–ø–∞–∫–µ—Ç—ã', '–ø–ª–∞–Ω—ã', '–ø–æ–¥–ø–∏—Å–∫–∏'],
      '—Ü–µ–Ω—ã': ['—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø—Ä–∞–π—Å', '—Ç–∞—Ä–∏—Ñ—ã'],
      '—Å—Ç–æ–∏–º–æ—Å—Ç—å': ['—Ü–µ–Ω–∞', '–ø—Ä–∞–π—Å', '—Ç–∞—Ä–∏—Ñ—ã', '–ø–∞–∫–µ—Ç—ã'],
      '—É—Å–ª—É–≥–∏': ['—Ä–∞–±–æ—Ç—ã', '–ø—Ä–æ—Ü–µ–¥—É—Ä—ã', '–º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏', '–æ–ø–µ—Ä–∞—Ü–∏–∏'],
      '–∑–∞–ø–∏—Å—å': ['–∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞', '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è'],
      '–≤—Ä–µ–º—è': ['—á–∞—Å—ã —Ä–∞–±–æ—Ç—ã', '—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', '–≥—Ä–∞—Ñ–∏–∫', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
      '–∫–æ–Ω—Ç–∞–∫—Ç—ã': ['—Å–≤—è–∑—å', '—Ç–µ–ª–µ—Ñ–æ–Ω', 'email', '–∞–¥—Ä–µ—Å', '–ª–æ–∫–∞—Ü–∏—è']
    };
    
    // –ù–∏—à–µ–≤—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã
    const nicheSynonymsDict = {
      '–¥–µ—Ç–µ–π–ª–∏–Ω–≥': {
        'PPF': ['–ø–ª–µ–Ω–∫–∞', '–∞–Ω—Ç–∏—Å–∫–æ–ª', '–∑–∞—â–∏—Ç–Ω–∞—è –ø–ª–µ–Ω–∫–∞', '–ø–æ–ª–∏—É—Ä–µ—Ç–∞–Ω–æ–≤–∞—è –ø–ª–µ–Ω–∫–∞'],
        '–∫–µ—Ä–∞–º–∏–∫–∞': ['–∫–µ—Ä–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ', '–≥–∏–¥—Ä–æ—Ñ–æ–±–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ', '–Ω–∞–Ω–æ–ø–æ–∫—Ä—ã—Ç–∏–µ'],
        '–ø–æ–ª–∏—Ä–æ–≤–∫–∞': ['—à–ª–∏—Ñ–æ–≤–∫–∞', '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –õ–ö–ü', '–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –õ–ö–ü'],
        '–æ–∫–ª–µ–π–∫–∞': ['–ø–æ–∫–ª–µ–π–∫–∞', '—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ–Ω–∫–∏', '–º–æ–Ω—Ç–∞–∂ –ø–ª–µ–Ω–∫–∏']
      },
      'ecommerce': {
        '–¥–æ—Å—Ç–∞–≤–∫–∞': ['–æ—Ç–ø—Ä–∞–≤–∫–∞', '–ø–µ—Ä–µ—Å—ã–ª–∫–∞', '–∫—É—Ä—å–µ—Ä', '–ø–æ—á—Ç–∞'],
        '—Ä–∞–∑–º–µ—Ä': ['—Ä–∞–∑–º–µ—Ä–Ω–∞—è —Å–µ—Ç–∫–∞', '—Ä–∞–∑–º–µ—Ä—ã', '–æ–±–º–µ—Ä—ã'],
        '—Ç–æ–≤–∞—Ä': ['–ø—Ä–æ–¥—É–∫—Ç', '–∏–∑–¥–µ–ª–∏–µ', '–≤–µ—â—å', '–ø–æ–∫—É–ø–∫–∞']
      },
      '–∫—Ä–∞—Å–æ—Ç–∞': {
        '–º–∞—Å—Å–∞–∂': ['–º–∞—Å—Å–∞–∂–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ', '–º–∞–Ω—É–∞–ª—å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è'],
        '—Å—Ç—Ä–∏–∂–∫–∞': ['—Å—Ç—Ä–∏–∂–∫–∞ –≤–æ–ª–æ—Å', '–ø—Ä–∏—á–µ—Å–∫–∞', '—É–∫–ª–∞–¥–∫–∞'],
        '–º–∞–Ω–∏–∫—é—Ä': ['–º–∞–Ω–∏–∫—é—Ä–Ω—ã–π —Å–µ—Ä–≤–∏—Å', '—É—Ö–æ–¥ –∑–∞ –Ω–æ–≥—Ç—è–º–∏'],
        '–±–∞—Ä–±–µ—Ä': ['–±–∞—Ä–±–µ—Ä—à–æ–ø', '–º—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞', '–±–æ—Ä–æ–¥–∫–∞']
      },
      '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': {
        '–∫—É—Ä—Å': ['–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–º–æ–¥—É–ª—å', '–±–ª–æ–∫', '—Å–µ—Å—Å–∏—è'],
        '–æ–±—É—á–µ–Ω–∏–µ': ['–∏–∑—É—á–µ–Ω–∏–µ', '–æ—Å–≤–æ–µ–Ω–∏–µ', '–ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ'],
        '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å': ['–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', '—Ç—Ä–µ–Ω–µ—Ä', '–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫', '–º–µ–Ω—Ç–æ—Ä']
      }
    };
    
    const result = new Set();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã
    Object.keys(baseSynonymsDict).forEach(key => {
      if (lower.includes(key)) {
        baseSynonymsDict[key].forEach(s => result.add(s));
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏—à–µ–≤—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã, –µ—Å–ª–∏ nicheId —É–∫–∞–∑–∞–Ω
    if (nicheId && nicheSynonymsDict[nicheId]) {
      Object.keys(nicheSynonymsDict[nicheId]).forEach(key => {
        if (lower.includes(key)) {
          nicheSynonymsDict[nicheId][key].forEach(s => result.add(s));
        }
      });
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    const keywords = this.extractKeywordsFromText(text);
    keywords.forEach(keyword => {
      if (keyword.length > 3) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        result.add(keyword + '—ã'); // –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        result.add(keyword + '–∞'); // –∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥
        result.add(keyword + '–æ'); // —Å—Ä–µ–¥–Ω–∏–π —Ä–æ–¥
      }
    });
    
    return Array.from(result).slice(0, 50);
  }
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
  extractKeywordsFromText(text) {
    if (!text) return [];
    
    // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    const cleanText = text.toLowerCase().replace(/[^\w\s]/g, ' ');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
    const words = cleanText.split(/\s+/)
      .filter(word => word.length > 3) // —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤
      .filter(word => !this.isStopWord(word)); // —É–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    return [...new Set(words)].slice(0, 20);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
  isStopWord(word) {
    const stopWords = [
      '—ç—Ç–æ', '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∫–æ—Ç–æ—Ä—ã–π', '–∫–æ—Ç–æ—Ä–∞—è', '–∫–æ—Ç–æ—Ä–æ–µ',
      '–æ–Ω–∏', '–æ–Ω–∞', '–æ–Ω–æ', '–º—ã', '–≤—ã', '—Ç—ã', '—è', '–æ–Ω', '–º–æ–π', '–º–æ—è', '–º–æ–µ',
      '–Ω–∞—à', '–Ω–∞—à–∞', '–Ω–∞—à–µ', '–≤–∞—à', '–≤–∞—à–∞', '–≤–∞—à–µ', '–∏—Ö', '–µ–≥–æ', '–µ—ë',
      '–¥–ª—è', '–ø—Ä–∏', '–Ω–∞–¥', '–ø–æ–¥', '–±–µ–∑', '—á–µ—Ä–µ–∑', '–º–µ–∂–¥—É', '—Å—Ä–µ–¥–∏', '–≤–æ–∫—Ä—É–≥',
      '–æ—á–µ–Ω—å', '–±–æ–ª–µ–µ', '–º–µ–Ω–µ–µ', '—Å–∞–º—ã–π', '—Å–∞–º–∞—è', '—Å–∞–º–æ–µ', '—Å–∞–º—ã–µ'
    ];
    return stopWords.includes(word);
  }
  
  // –ê–≤—Ç–æ-—ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –Ω–∏—à–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  async extractNicheSynonyms(nicheId, userId) {
    if (!nicheId) return;
    
    try {
      console.log(`üß© Extracting niche synonyms for niche ${nicheId} and user ${userId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –Ω–∏—à–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: chunks, error } = await this.supabase
        .from('knowledge_chunks')
        .select('chunk_text, chunk_summary')
        .eq('user_id', userId)
        .eq('niche_id', nicheId)
        .not('chunk_text', 'is', null);
      
      if (error) {
        console.error('‚ùå Error fetching chunks for niche synonyms:', error);
        return;
      }
      
      if (!chunks || chunks.length === 0) {
        console.log('‚ö†Ô∏è No chunks found for niche synonym extraction');
        return;
      }
      
      console.log(`üìö Found ${chunks.length} chunks for synonym extraction`);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
      const allText = chunks.map(c => `${c.chunk_text} ${c.chunk_summary || ''}`).join(' ');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
      const keywords = this.extractKeywordsFromText(allText);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—É–±–∏—Ä–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –æ–±—â–∏–µ)
      const filteredKeywords = keywords.filter(word => 
        word.length > 4 && 
        !this.isGeneralWord(word) &&
        !this.isStopWord(word)
      );
      
      console.log(`üîç Extracted ${filteredKeywords.length} potential synonyms`);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
      const synonyms = new Set();
      filteredKeywords.forEach(keyword => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        synonyms.add(keyword);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        synonyms.add(keyword + '—ã'); // –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        synonyms.add(keyword + '–∞'); // –∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥
        synonyms.add(keyword + '–æ'); // —Å—Ä–µ–¥–Ω–∏–π —Ä–æ–¥
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        const relatedTerms = this.getRelatedTerms(keyword, nicheId);
        relatedTerms.forEach(term => synonyms.add(term));
      });
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const finalSynonyms = Array.from(synonyms).slice(0, 100);
      
      console.log(`‚úÖ Generated ${finalSynonyms.length} niche synonyms`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      if (finalSynonyms.length > 0) {
        const synonymRows = finalSynonyms.map(synonym => ({
          niche_id: nicheId,
          synonym: synonym
        }));
        
        const { error: insertError } = await this.supabase
          .from('niche_synonyms')
          .upsert(synonymRows, { 
            onConflict: 'niche_id,synonym',
            ignoreDuplicates: true 
          });
        
        if (insertError) {
          console.error('‚ùå Error inserting niche synonyms:', insertError);
        } else {
          console.log(`‚úÖ Successfully saved ${finalSynonyms.length} niche synonyms`);
        }
      }
      
    } catch (error) {
      console.error('‚ùå Error in extractNicheSynonyms:', error);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—â–∏–µ —Å–ª–æ–≤–∞
  isGeneralWord(word) {
    const generalWords = [
      '–∫–æ–º–ø–∞–Ω–∏—è', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '—Ñ–∏—Ä–º–∞', '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', '–±–∏–∑–Ω–µ—Å',
      '–∫–ª–∏–µ–Ω—Ç', '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å', '–∑–∞–∫–∞–∑—á–∏–∫', '–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å',
      '—É—Å–ª—É–≥–∞', '–ø—Ä–æ–¥—É–∫—Ç', '—Ç–æ–≤–∞—Ä', '–∏–∑–¥–µ–ª–∏–µ', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
      '–∫–∞—á–µ—Å—Ç–≤–æ', '—É—Ä–æ–≤–µ–Ω—å', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç', '–∫—Ä–∏—Ç–µ—Ä–∏–π',
      '–≤—Ä–µ–º—è', '–ø–µ—Ä–∏–æ–¥', '—Å—Ä–æ–∫', '–º–æ–º–µ–Ω—Ç', '–¥–µ–Ω—å', '—á–∞—Å',
      '–º–µ—Å—Ç–æ', '–ø–ª–æ—â–∞–¥—å', '—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è', '–∑–æ–Ω–∞', '—É—á–∞—Å—Ç–æ–∫'
    ];
    return generalWords.includes(word);
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –¥–ª—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
  getRelatedTerms(keyword, nicheId) {
    const relatedTermsDict = {
      '–¥–µ—Ç–µ–π–ª–∏–Ω–≥': {
        '–ø–ª–µ–Ω–∫–∞': ['–∑–∞—â–∏—Ç–∞', '–ø–æ–∫—Ä—ã—Ç–∏–µ', '–º–∞—Ç–µ—Ä–∏–∞–ª'],
        '–ø–æ–ª–∏—Ä–æ–≤–∫–∞': ['—à–ª–∏—Ñ–æ–≤–∫–∞', '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ', '–∫–æ—Ä—Ä–µ–∫—Ü–∏—è'],
        '–∫–µ—Ä–∞–º–∏–∫–∞': ['–ø–æ–∫—Ä—ã—Ç–∏–µ', '–≥–∏–¥—Ä–æ—Ñ–æ–±', '–Ω–∞–Ω–æ–ø–æ–∫—Ä—ã—Ç–∏–µ']
      },
      'ecommerce': {
        '–¥–æ—Å—Ç–∞–≤–∫–∞': ['–æ—Ç–ø—Ä–∞–≤–∫–∞', '–∫—É—Ä—å–µ—Ä', '–ø–æ—á—Ç–∞', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'],
        '—Ä–∞–∑–º–µ—Ä': ['–æ–±–º–µ—Ä', '–ø–∞—Ä–∞–º–µ—Ç—Ä', '–≥–∞–±–∞—Ä–∏—Ç'],
        '—Ç–æ–≤–∞—Ä': ['–ø—Ä–æ–¥—É–∫—Ç', '–∏–∑–¥–µ–ª–∏–µ', '–ø–æ–∫—É–ø–∫–∞']
      },
      '–∫—Ä–∞—Å–æ—Ç–∞': {
        '–º–∞—Å—Å–∞–∂': ['–≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ', '—Ç–µ—Ä–∞–ø–∏—è', '—Ä–µ–ª–∞–∫—Å'],
        '—Å—Ç—Ä–∏–∂–∫–∞': ['–ø—Ä–∏—á–µ—Å–∫–∞', '—É–∫–ª–∞–¥–∫–∞', '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä'],
        '–º–∞–Ω–∏–∫—é—Ä': ['–Ω–æ–≥—Ç–∏', '—É—Ö–æ–¥', '–¥–∏–∑–∞–π–Ω']
      },
      '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': {
        '–∫—É—Ä—Å': ['–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–º–æ–¥—É–ª—å', '–±–ª–æ–∫'],
        '–æ–±—É—á–µ–Ω–∏–µ': ['–∏–∑—É—á–µ–Ω–∏–µ', '–æ—Å–≤–æ–µ–Ω–∏–µ', '—Ä–∞–∑–≤–∏—Ç–∏–µ'],
        '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å': ['–∏–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', '—Ç—Ä–µ–Ω–µ—Ä', '–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫']
      }
    };
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∏—à–∏ –ø–æ nicheId (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    let nicheType = null;
    if (nicheId) {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –Ω–∏—à–∏ –ø–æ ID
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
      nicheType = '–¥–µ—Ç–µ–π–ª–∏–Ω–≥'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
    if (nicheType && relatedTermsDict[nicheType] && relatedTermsDict[nicheType][keyword]) {
      return relatedTermsDict[nicheType][keyword];
    }
    
    return [];
  }

  async createChunksFromContent(sourceId, userId, assistantId, content, options = {}) {
    try {
      console.log(`üìù Creating chunks from content for source ${sourceId}`);
      console.log(`üìù Content length: ${content.length} characters`);
      
      // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞–Ω–∫–∏–Ω–≥–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
      const chunks = this.chunkingSystem.createChunks(content, {
        maxTokens: options.maxTokens || 600, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
        summaryMethod: options.summaryMethod || 'keyword',
        overlap: options.overlap || 100, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
        enableDeduplication: options.enableDeduplication !== false, // –í–∫–ª—é—á–∞–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        enableNER: options.enableNER !== false, // –í–∫–ª—é—á–∞–µ–º NER –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        useAdvancedTokenization: options.useAdvancedTokenization !== false // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—é
      });

      console.log(`üìù Created ${chunks.length} chunks`);

      const chunkData = chunks.map((chunk, index) => {
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
        const metadata = this.extractChunkMetadata(chunk.text);
        const chunkType = this.computeChunkType(metadata);

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏
        const enhancedMetadata = {
          ...metadata,
          // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
          ...(chunk.prices && { extracted_prices: chunk.prices }),
          ...(chunk.addresses && { extracted_addresses: chunk.addresses }),
          ...(chunk.phones && { extracted_phones: chunk.phones })
        };

        return {
          source_id: sourceId,
          user_id: userId,
          assistant_id: assistantId,
          niche_id: options.nicheId || null,
          chunk_text: chunk.text,
          chunk_summary: chunk.summary,
          tokens_estimate: chunk.tokens_estimate,
          words_count: chunk.words_count,
          full_text_hash: chunk.full_text_hash,
          chunk_index: chunk.chunk_index,
          // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å —Å—É—â–Ω–æ—Å—Ç—è–º–∏
          metadata: enhancedMetadata,
          chunk_type: chunkType,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        };
      });

      console.log(`üíæ Inserting ${chunkData.length} chunks into database (with dedup)`);

      const data = await this.insertChunksDedup(sourceId, chunkData);
      const error = null;

      if (error) {
        console.error('‚ùå Error creating chunks:', error);
        console.error('‚ùå Error details:', JSON.stringify(error, null, 2));
        throw error;
      }
      
      console.log(`‚úÖ Successfully created ${data.length} chunks`);

      // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      try {
        const synonymRows = [];
        for (const row of data) {
          const syns = this.generateSynonymsForChunk(row.chunk_text, options.nicheId);
          syns.forEach(s => {
            synonymRows.push({ chunk_id: row.id, synonym: s });
          });
        }
        if (synonymRows.length > 0) {
          await this.supabase.from('chunk_synonyms').insert(synonymRows);
          console.log(`üß© Inserted ${synonymRows.length} chunk synonyms for niche ${options.nicheId || 'all'}`);
        }
      } catch (synErr) {
        console.log('‚ö†Ô∏è Error inserting chunk synonyms (non-fatal):', synErr.message);
      }

      // –ê–≤—Ç–æ-—ç–∫—Å—Ç—Ä–∞–∫—Ü–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è –Ω–∏—à–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å nicheId)
      if (options.nicheId && data.length > 0) {
        try {
          await this.extractNicheSynonyms(options.nicheId, userId);
        } catch (nicheSynErr) {
          console.log('‚ö†Ô∏è Error extracting niche synonyms (non-fatal):', nicheSynErr.message);
        }
      }

      return data;
      
    } catch (error) {
      console.error('‚ùå Failed to create chunks:', error);
      throw error;
    }
  }

  // –í—Å—Ç–∞–≤–∫–∞ —á–∞–Ω–∫–æ–≤ —Å –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π –ø–æ full_text_hash –≤ —Ä–∞–º–∫–∞—Ö source_id
  async insertChunksDedup(sourceId, chunks) {
    try {
      const hashes = chunks.map(c => c.full_text_hash).filter(Boolean);
      const { data: existing } = await this.supabase
        .from('knowledge_chunks')
        .select('full_text_hash')
        .eq('source_id', sourceId)
        .in('full_text_hash', hashes);
      const existingSet = new Set((existing || []).map(r => r.full_text_hash));
      const toInsert = chunks.filter(c => !existingSet.has(c.full_text_hash));
      if (!toInsert.length) return [];
      const { data } = await this.supabase
        .from('knowledge_chunks')
        .insert(toInsert)
        .select();
      return data || [];
    } catch (e) {
      console.warn('insertChunksDedup error:', e?.message || e);
      // –§–æ–ª–ª–±–µ–∫: –ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
      const { data } = await this.supabase
        .from('knowledge_chunks')
        .insert(chunks)
        .select();
      return data || [];
    }
  }

  async createEmbeddingsForChunks(chunks) {
    console.log(`üîÆ [VectorSearch] Creating embeddings for ${chunks.length} chunks`);
    
    for (const chunk of chunks) {
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º UnifiedRAGSystem –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        const embedding = await this.ragSystem.createEmbedding(chunk.chunk_text || chunk.chunk_summary);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await this.ragSystem.vectorSearch.saveEmbedding(chunk.id, embedding);
        
        console.log(`‚úÖ [VectorSearch] Embedding created for chunk ${chunk.id}`);
      } catch (error) {
        console.error(`‚ùå [VectorSearch] Error creating embedding for chunk ${chunk.id}:`, error.message);
      }
    }
  }
  
  // –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (deprecated)
  async createEmbedding(text) {
    console.log('‚ö†Ô∏è [VectorSearch] Using deprecated createEmbedding method, please use ragSystem.createEmbedding instead');
    return await this.ragSystem.createEmbedding(text);
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createEmbeddingsForUser(userId, options = {}) {
    try {
      console.log(`üîÆ [VectorSearch] Creating embeddings for all chunks of user ${userId}`);
      return await this.ragSystem.createEmbeddingsForUser(userId, options);
    } catch (error) {
      console.error('‚ùå [VectorSearch] Error creating embeddings for user:', error);
      throw error;
    }
  }
  
  // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async invalidateUserCache(userId) {
    try {
      await this.ragSystem.cacheAdapter.invalidateUserCache(userId);
      console.log(`üóëÔ∏è [AIAgent] Cache invalidated for user ${userId}`);
    } catch (error) {
      console.error('‚ùå [AIAgent] Error invalidating user cache:', error);
    }
  }
  
  // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è –Ω–∏—à–∏
  async invalidateNicheCache(nicheId) {
    try {
      await this.ragSystem.cacheAdapter.invalidateNicheCache(nicheId);
      console.log(`üóëÔ∏è [AIAgent] Cache invalidated for niche ${nicheId}`);
    } catch (error) {
      console.error('‚ùå [AIAgent] Error invalidating niche cache:', error);
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
  getCacheStats() {
    try {
      return this.ragSystem.cacheAdapter.getStats();
    } catch (error) {
      console.error('‚ùå [AIAgent] Error getting cache stats:', error);
      return null;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫—ç—à–∞
  async checkCacheHealth() {
    try {
      return await this.ragSystem.cacheAdapter.healthCheck();
    } catch (error) {
      console.error('‚ùå [AIAgent] Error checking cache health:', error);
      return { status: 'error', error: error.message };
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–ª–æ—É
  getUnifiedFlowStats() {
    try {
      return {
        unifiedFlow: this.unifiedFlow.getStats(),
        validator: this.responseValidator.getStats(),
        cache: this.getCacheStats()
      };
    } catch (error) {
      console.error('‚ùå [AIAgent] Error getting unified flow stats:', error);
      return null;
    }
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–ª–æ—É
  clearUnifiedFlowCaches() {
    try {
      this.unifiedFlow.clearCaches();
      this.responseValidator.clearCaches();
      console.log('üßπ [AIAgent] Unified flow caches cleared');
    } catch (error) {
      console.error('‚ùå [AIAgent] Error clearing unified flow caches:', error);
    }
  }
  
  // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–ª–æ—É
  resetUnifiedFlowStats() {
    try {
      this.unifiedFlow.resetStats();
      this.responseValidator.resetStats();
      console.log('üìä [AIAgent] Unified flow statistics reset');
    } catch (error) {
      console.error('‚ùå [AIAgent] Error resetting unified flow stats:', error);
    }
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (–æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
  async validateResponse(response, searchResults, request) {
    try {
      return await this.responseValidator.validateResponse(response, { searchResults }, request);
    } catch (error) {
      console.error('‚ùå [AIAgent] Error validating response:', error);
      return {
        isValid: false,
        score: 0.0,
        errors: ['Validation system error'],
        warnings: []
      };
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–Ω—ã—Ö —Ñ–∏–¥–æ–≤ (CSV, XML)
  async parseFeed(content) {
    try {
      console.log('üìä Parsing feed content...');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–¥–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
      if (content.includes('<') && content.includes('>')) {
        // XML —Ñ–∏–¥
        return await this.parseXMLFeed(content);
      } else if (content.includes(',') || content.includes(';')) {
        // CSV —Ñ–∏–¥
        return await this.parseCSVFeed(content);
      } else {
        // –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∏–¥
        return {
          success: true,
          content: content,
          type: 'text'
        };
      }
    } catch (error) {
      console.error('‚ùå Feed parsing error:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ XML —Ñ–∏–¥–æ–≤
  async parseXMLFeed(xmlContent) {
    try {
      console.log('üìÑ Parsing XML feed...');
      
      // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ XML –¥–ª—è —Ç–æ–≤–∞—Ä–Ω—ã—Ö —Ñ–∏–¥–æ–≤
      const products = [];
      
      // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≤ XML
      const productMatches = xmlContent.match(/<product[^>]*>[\s\S]*?<\/product>/gi) || 
                           xmlContent.match(/<item[^>]*>[\s\S]*?<\/item>/gi) ||
                           xmlContent.match(/<offer[^>]*>[\s\S]*?<\/offer>/gi);
      
      if (productMatches) {
        productMatches.forEach((productXml, index) => {
          const product = this.extractProductFromXML(productXml);
          if (product) {
            products.push(product);
          }
        });
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
      let textContent = '–¢–û–í–ê–†–ù–´–ô –§–ò–î (XML):\n\n';
      products.forEach((product, index) => {
        textContent += `–¢–û–í–ê–† ${index + 1}:\n`;
        Object.entries(product).forEach(([key, value]) => {
          textContent += `${key}: ${value}\n`;
        });
        textContent += '\n';
      });
      
      return {
        success: true,
        content: textContent,
        type: 'xml',
        products: products
      };
    } catch (error) {
      console.error('‚ùå XML feed parsing error:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ CSV —Ñ–∏–¥–æ–≤
  async parseCSVFeed(csvContent) {
    try {
      console.log('üìä Parsing CSV feed...');
      
      const lines = csvContent.split('\n').filter(line => line.trim());
      if (lines.length < 2) {
        return {
          success: false,
          error: 'CSV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ'
        };
      }
      
      const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
      const products = [];
      
      for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(',').map(v => v.trim().replace(/"/g, ''));
        const product = {};
        
        headers.forEach((header, index) => {
          product[header] = values[index] || '';
        });
        
        products.push(product);
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
      let textContent = '–¢–û–í–ê–†–ù–´–ô –§–ò–î (CSV):\n\n';
      products.forEach((product, index) => {
        textContent += `–¢–û–í–ê–† ${index + 1}:\n`;
        Object.entries(product).forEach(([key, value]) => {
          if (value) {
            textContent += `${key}: ${value}\n`;
          }
        });
        textContent += '\n';
      });
      
      return {
        success: true,
        content: textContent,
        type: 'csv',
        products: products
      };
    } catch (error) {
      console.error('‚ùå CSV feed parsing error:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ –∏–∑ XML
  extractProductFromXML(productXml) {
    try {
      const product = {};
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
      const fields = [
        'name', 'title', 'product_name',
        'price', 'cost', 'value',
        'description', 'desc',
        'category', 'cat',
        'brand', 'manufacturer',
        'sku', 'id', 'article',
        'url', 'link',
        'image', 'img', 'photo',
        'availability', 'stock', 'in_stock'
      ];
      
      fields.forEach(field => {
        const regex = new RegExp(`<${field}[^>]*>([^<]*)</${field}>`, 'i');
        const match = productXml.match(regex);
        if (match && match[1]) {
          product[field] = match[1].trim();
        }
      });
      
      return Object.keys(product).length > 0 ? product : null;
    } catch (error) {
      console.error('‚ùå Error extracting product from XML:', error);
      return null;
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ (PDF, Word, Excel, Text)
  async parseFile(filePath) {
    try {
      console.log('üìÅ Parsing file:', filePath);
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ server.js
      const { parseFile: serverParseFile } = await import('./server.js');
      
      const result = await serverParseFile(filePath, this.getMimeType(filePath));
      
      if (result.success) {
        return {
          success: true,
          content: result.text,
          type: this.getFileType(filePath)
        };
      } else {
        return {
          success: false,
          error: result.error
        };
      }
    } catch (error) {
      console.error('‚ùå File parsing error:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
  getMimeType(filePath) {
    const ext = filePath.split('.').pop().toLowerCase();
    const mimeTypes = {
      'pdf': 'application/pdf',
      'doc': 'application/msword',
      'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'xls': 'application/vnd.ms-excel',
      'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'csv': 'text/csv',
      'txt': 'text/plain',
      'xml': 'application/xml'
    };
    return mimeTypes[ext] || 'text/plain';
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
  getFileType(filePath) {
    const ext = filePath.split('.').pop().toLowerCase();
    return ext;
  }

  async createEmbedding(text) {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è embedding —á–µ—Ä–µ–∑ GigaChat
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API GigaChat
    const embedding = new Array(1536).fill(0);
    for (let i = 0; i < text.length && i < 1536; i++) {
      embedding[i] = Math.sin(text.charCodeAt(i) / 1000);
    }
    return embedding;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getBotCorrections(userId, channel = 'admin') {
    try {
      console.log(`üîß Getting bot corrections for user: ${userId}, channel: ${channel}`);
      
      let query = this.supabase
        .from('bot_corrections')
        .select('*')
        .eq('user_id', userId)
        .eq('active', true)
        .order('created_at', { ascending: false });
      
      if (channel) {
        query = query.eq('channel', channel);
      }
      
      const { data, error } = await query;
      
      if (error) {
        console.error('‚ùå Error fetching bot corrections:', error);
        return [];
      }
      
      console.log(`üîß Found ${data?.length || 0} corrections`);
      return data || [];
      
    } catch (error) {
      console.error('‚ùå Bot corrections error:', error);
      return [];
    }
  }

  preprocessContent(content, sourceType) {
    switch (sourceType) {
      case 'website':
        return this.cleanWebsiteContent(content);
      case 'pdf':
        return this.cleanPDFContent(content);
      case 'text':
        return this.cleanTextContent(content);
      default:
        return content;
    }
  }

  cleanWebsiteContent(content) {
    // –£–¥–∞–ª—è–µ–º boilerplate-–±–ª–æ–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    let html = String(content || '');
    html = html
      .replace(/<script[^>]*>.*?<\/script>/gis, '')
      .replace(/<style[^>]*>.*?<\/style>/gis, '')
      .replace(/<noscript[^>]*>.*?<\/noscript>/gis, '')
      .replace(/<(header|footer|nav|aside|form|iframe)[^>]*>.*?<\/\1>/gis, ' ');
    const text = html
      .replace(/<[^>]+>/g, ' ')
      .replace(/&nbsp;|&amp;|&quot;|&lt;|&gt;/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
    return text;
  }

  cleanPDFContent(content) {
    let text = String(content || '');
    // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å–æ —Å–ª–æ–≤–∞–º–∏, —Å–∫–ª–µ–µ–Ω–Ω—ã–º–∏ –¥–µ—Ñ–∏—Å–æ–º –Ω–∞ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    text = text.replace(/([–ê-–Ø–∞-—èA-Za-z0-9])\-\n([–ê-–Ø–∞-—èA-Za-z0-9])/g, '$1$2');
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: –∑–∞–º–µ–Ω—è–µ–º –±–æ–ª—å—à–∏–µ –±–ª–æ–∫–∏ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    text = text.replace(/[ \t]{3,}/g, ' \u2502 '); // –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    // –ü—Ä–∏–≤–æ–¥–∏–º –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–æ–≤
    text = text.replace(/\n[‚Ä¢¬∑\-]\s*/g, '\n‚Ä¢ ');
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑—Ä—ã–≤—ã –º–µ–∂–¥—É –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    text = text
      .replace(/\r\n/g, '\n')
      .replace(/\n{3,}/g, '\n\n')
      .replace(/[ \t]+\n/g, '\n');
    // –í—ã–Ω–æ—Å–∏–º —Ü–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —Å–ª–∏–ø–ª–∏—Å—å
    text = text.replace(/(\S)(\s*)(\d+[\s,]*\d*\s*(?:—Ä—É–±\.?|‚ÇΩ|eur|‚Ç¨|usd|\$))/gi, '$1\n$3');
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = text.replace(/[ \t]{2,}/g, ' ').trim();
    return text;
  }

  cleanTextContent(content) {
    return content
      .replace(/\r\n/g, '\n')
      .replace(/\n\s*\n/g, '\n')
      .trim();
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏/—Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–π—Å–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤
  extractPriceTableChunks(rawContent, ctx) {
    try {
      const content = String(rawContent || '');
      const lines = content.split(/\n+/).map(l => l.trim()).filter(Boolean);
      const priceRe = /(–æ—Ç\s*)?\d+[\s,]*\d*\s*(—Ä—É–±\.?|‚ÇΩ|eur|‚Ç¨|usd|\$)/i;
      const headerHints = /(—É—Å–ª—É–≥–∞|–ø–æ–∑–∏—Ü–∏—è|–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ|—Ü–µ–Ω–∞|—Å—Ç–æ–∏–º–æ—Å—Ç—å|—Ç–∞—Ä–∏—Ñ|–∫–æ–º–ø–ª–µ–∫—Ç)/i;
      const chunks = [];
      let buffer = [];
      let tableMode = false;
      for (const line of lines) {
        const isHeader = headerHints.test(line);
        const hasPrice = priceRe.test(line);
        // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: –ª–∏–Ω–∏—è —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ‚îÇ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        const looksLikeRow = /\u2502|\s\|\s/.test(line) || (hasPrice && line.split(/\s{2,}|\s\|\s|\u2502/).length >= 2);
        if (isHeader) {
          // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±—É—Ñ–µ—Ä
          if (buffer.length >= 2) {
            const text = buffer.join('\n');
            const metadata = this.extractChunkMetadata(text);
            chunks.push(this._buildPriceChunk(text, ctx, metadata, chunks.length));
          }
          buffer = [line];
          tableMode = true;
          continue;
        }
        if (tableMode && looksLikeRow) {
          buffer.push(line);
          continue;
        }
        if (hasPrice && !tableMode) {
          const text = line;
          const metadata = this.extractChunkMetadata(text);
          chunks.push(this._buildPriceChunk(text, ctx, metadata, chunks.length));
          continue;
        }
        // –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
        if (tableMode && !looksLikeRow) {
          if (buffer.length >= 2) {
            const text = buffer.join('\n');
            const metadata = this.extractChunkMetadata(text);
            chunks.push(this._buildPriceChunk(text, ctx, metadata, chunks.length));
          }
          buffer = [];
          tableMode = false;
        }
      }
      if (tableMode && buffer.length >= 2) {
        const text = buffer.join('\n');
        const metadata = this.extractChunkMetadata(text);
        chunks.push(this._buildPriceChunk(text, ctx, metadata, chunks.length));
      }
      return chunks.slice(0, 200);
    } catch (e) {
      console.warn('extractPriceTableChunks error:', e?.message || e);
      return [];
    }
  }

  _buildPriceChunk(text, ctx, metadata, idx) {
    const chunkType = this.computeChunkType({ ...metadata, hasPrice: true });
    return {
      source_id: ctx.sourceId,
      user_id: ctx.userId,
      assistant_id: ctx.assistantId,
      niche_id: ctx.nicheId || null,
      chunk_text: text,
      chunk_summary: '–ü—Ä–∞–π—Å/—Ç–∞–±–ª–∏—Ü–∞ —Ü–µ–Ω',
      tokens_estimate: Math.ceil(text.length / 4),
      words_count: (text.match(/\S+/g) || []).length,
      full_text_hash: `price_${idx}_${text.length}`,
      chunk_index: 10000 + idx,
      metadata,
      chunk_type: chunkType,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
  }

  detectLanguage(text) {
    try {
      const s = String(text || '');
      const cyr = (s.match(/[\u0400-\u04FF]/g) || []).length;
      const lat = (s.match(/[A-Za-z]/g) || []).length;
      if (cyr > lat * 1.5) return 'ru';
      if (lat > cyr * 1.5) return 'en';
      return cyr >= lat ? 'ru' : 'en';
    } catch { return 'ru'; }
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ —Ñ–∏–¥–∞ (CSV/XML/JSON –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
  normalizeFeedContent(content, sourceUrl = '') {
    try {
      let products = [];
      const text = typeof content === 'string' ? content : String(content || '');
      // JSON
      try {
        const obj = JSON.parse(text);
        if (Array.isArray(obj)) {
          products = obj;
        } else if (obj && Array.isArray(obj.items)) {
          products = obj.items;
        }
      } catch {}
      // CSV (–ø—Ä–æ—Å—Ç–∞—è)
      if (!products.length && /,/.test(text) && /\n/.test(text)) {
        const [header, ...rows] = text.split(/\n+/).filter(Boolean);
        const cols = header.split(',').map(c => c.trim().toLowerCase());
        const idx = (name) => cols.findIndex(c => c.includes(name));
        const iTitle = idx('title') >= 0 ? idx('title') : idx('name');
        const iPrice = idx('price');
        const iUrl = idx('url');
        const iSku = idx('sku');
        const iCat = idx('category');
        products = rows.slice(0, 1000).map(r => {
          const parts = r.split(',');
          return {
            title: iTitle >= 0 ? parts[iTitle] : undefined,
            price: iPrice >= 0 ? parts[iPrice] : undefined,
            url: iUrl >= 0 ? parts[iUrl] : (sourceUrl || undefined),
            sku: iSku >= 0 ? parts[iSku] : undefined,
            category: iCat >= 0 ? parts[iCat] : undefined
          };
        });
      }
      // XML (–æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è)
      if (!products.length && /<item>|<offer>|<product>/i.test(text)) {
        const take = (tag) => Array.from(text.matchAll(new RegExp(`<${tag}>([\s\S]*?)<\/${tag}>`, 'gi'))).map(m => m[1]);
        const titles = take('title');
        const prices = take('price');
        const urls = take('url');
        const skus = take('sku');
        const cats = take('category');
        const len = Math.max(titles.length, prices.length, urls.length);
        for (let i=0;i<len && i<1000;i++) {
          products.push({
            title: titles[i],
            price: prices[i],
            url: urls[i] || sourceUrl,
            sku: skus[i],
            category: cats[i]
          });
        }
      }
      if (!products.length) return null;
      return { products: products.slice(0, 1000) };
    } catch {
      return null;
    }
  }

  // 2. RAG-–°–õ–û–ô (RETRIEVAL-AUGMENTED GENERATION)
  async searchRelevantKnowledge(query, userId, assistantId, options = {}) {
    const startTime = Date.now();
    try {
      console.log(`üîç LangChain RAG search for query: "${query}"`);
      console.log(`üë§ User ID: ${userId}, Assistant ID: ${assistantId}`);
      
      // –°–ù–ê–ß–ê–õ–ê –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ò - –û–ù–ò –ò–ú–ï–Æ–¢ –ü–†–ò–û–†–ò–¢–ï–¢!
      const corrections = await this.getBotCorrections(userId, options.channel || 'admin');
      if (corrections && corrections.length > 0) {
        console.log(`üîß Found ${corrections.length} corrections for user`);
        console.log(`üîß Corrections data:`, corrections.map(c => ({ id: c.id, correction: c.correction?.substring(0, 100) })));
        
        // –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ - –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫
        const relevantCorrections = corrections.filter(correction => 
          correction.correction && 
          (correction.correction.toLowerCase().includes(query.toLowerCase()) ||
           query.toLowerCase().includes(correction.correction.toLowerCase()) ||
           correction.correction.toLowerCase().includes('—Ä—É—á–∫–∞') && query.toLowerCase().includes('—Ä—É—á–∫–∞') ||
           correction.correction.toLowerCase().includes('–∑–∞–º–µ–Ω–∞') && query.toLowerCase().includes('–∑–∞–º–µ–Ω–∞') ||
           correction.correction.toLowerCase().includes('—Å—Ç–æ–∏—Ç') && query.toLowerCase().includes('—Å—Ç–æ–∏—Ç'))
        );
        
        if (relevantCorrections.length > 0) {
          console.log(`‚úÖ Found ${relevantCorrections.length} relevant corrections - USING THEM!`);
          const searchTime = Date.now() - startTime;
          monitoring.recordRAGSearch(searchTime, true, null);
          return {
            type: 'corrections',
            results: relevantCorrections.map(c => ({
              id: c.id,
              chunk_text: c.correction,
              similarity: 1.0,
              source: 'correction'
            })),
            totalResults: relevantCorrections.length,
            source: 'corrections'
          };
        }
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º UnifiedRAGSystem –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∏—à
      const ragResults = await this.ragSystem.searchRelevantKnowledge(query, userId, { 
        ...options, 
        assistantId,
        nicheId: options.nicheId 
      });
      
      if (ragResults && ragResults.chunks && ragResults.chunks.length > 0) {
        const searchTime = Date.now() - startTime;
        monitoring.recordRAGSearch(searchTime, true, null);
        console.log(`‚úÖ UnifiedRAG found ${ragResults.chunks.length} results from ${ragResults.searchSource}`);
        console.log(`üìù First result: ${ragResults.chunks[0].chunk_text.substring(0, 100)}...`);
        return {
          type: 'rag',
          results: ragResults.chunks,
          totalResults: ragResults.chunks.length,
          source: ragResults.searchSource,
          totalTokens: ragResults.totalTokens || 0,
          searchTime: ragResults.searchTime || 0
        };
      }
      
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–∏—Å–∫
      console.log('üîÑ LangChain no results, trying fallback search...');
      const textResults = await this.textSearch(query, userId, assistantId, options);
      
      if (textResults && textResults.length > 0) {
        const searchTime = Date.now() - startTime;
        monitoring.recordRAGSearch(searchTime, false, null);
        console.log(`‚úÖ Fallback found ${textResults.length} results`);
        return {
          type: 'rag',
          results: textResults,
          totalResults: textResults.length,
          source: 'fallback'
        };
      }
      
      console.log('‚ö†Ô∏è No results found in any search method');
      const searchTime = Date.now() - startTime;
      monitoring.recordRAGSearch(searchTime, false, null);
      
      return {
        type: 'rag',
        results: [],
        totalResults: 0,
        source: 'none'
      };
      
    } catch (error) {
      const searchTime = Date.now() - startTime;
      monitoring.recordRAGSearch(searchTime, false, error);
      console.error('‚ùå RAG search error:', error);
      return { type: 'error', error: error.message };
    }
  }

  async checkFAQCache(query, userId, assistantId) {
    const queryHash = this.createQueryHash(query);
    
    const { data, error } = await this.supabase
      .from('faq_cache')
      .select('*')
      .eq('user_id', userId)
      .eq('assistant_id', assistantId)
      .eq('question_hash', queryHash)
      .single();

    if (error || !data) return null;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await this.supabase
      .from('faq_cache')
      .update({ 
        usage_count: data.usage_count + 1,
        last_used_at: new Date().toISOString()
      })
      .eq('id', data.id);

    return data;
  }

  async vectorSearch(query, userId, assistantId, options = {}) {
    try {
      const queryEmbedding = await this.createEmbedding(query);
      
      const { data, error } = await this.supabase
        .rpc('vector_search_knowledge', {
          query_embedding: queryEmbedding,
          user_uuid: userId,
          match_threshold: options.matchThreshold || 0.7,
          match_count: options.matchCount || 5
        });

      if (error) throw error;
      return data || [];
      
    } catch (error) {
      console.error('‚ùå Vector search error:', error);
      return [];
    }
  }

  async textSearch(query, userId, assistantId, options = {}) {
    try {
      console.log(`üîç Text search: query="${query}", userId="${userId}", assistantId="${assistantId}", maxResults=${options.maxResults || 10}`);
      
      // –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
      const synonyms = {
        '–ø–∞–∫–µ—Ç—ã': '—Ç–∞—Ä–∏—Ñ—ã',
        '–ø–ª–∞–Ω—ã': '—Ç–∞—Ä–∏—Ñ—ã', 
        '—Ü–µ–Ω—ã': '—Ç–∞—Ä–∏—Ñ—ã',
        '—Å—Ç–æ–∏–º–æ—Å—Ç—å': '—Ç–∞—Ä–∏—Ñ—ã',
        '–ø–æ–¥–ø–∏—Å–∫–∏': '—Ç–∞—Ä–∏—Ñ—ã',
        '–≤–∞—Ä–∏–∞–Ω—Ç—ã': '—Ç–∞—Ä–∏—Ñ—ã',
        '–ø—Ä–∞–π—Å': '—Ç–∞—Ä–∏—Ñ—ã',
        'rate': '—Ç–∞—Ä–∏—Ñ—ã',
        'fee': '—Ç–∞—Ä–∏—Ñ—ã',
        'charge': '—Ç–∞—Ä–∏—Ñ—ã',
        'subscription': '—Ç–∞—Ä–∏—Ñ—ã',
        'plan': '—Ç–∞—Ä–∏—Ñ—ã',
        'package': '—Ç–∞—Ä–∏—Ñ—ã',
        '–∞–±–æ–Ω–µ–º–µ–Ω—Ç': '—Ç–∞—Ä–∏—Ñ—ã',
        '—Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω': '—Ç–∞—Ä–∏—Ñ—ã',
        '—Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–∞–∫–µ—Ç': '—Ç–∞—Ä–∏—Ñ—ã'
      };
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
      console.log(`üîß Calling RPC with params:`, {
        search_query: query,
        user_uuid: userId,
        max_results: options.maxResults || 10
      });
      
      const baseParams = {
        search_query: query,
        user_uuid: userId,
        max_results: options.maxResults || 10,
        assistant_uuid: assistantId || null,
        niche_uuid: options.nicheId || null,
        chunk_types: options.chunkTypes || null
      };

      // –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å? —Ç–æ–≥–¥–∞ —Å—É–∂–∞–µ–º —Ç–∏–ø—ã
      const contactKeywords = ['–∫–æ–Ω—Ç–∞–∫—Ç', '—Ç–µ–ª–µ—Ñ–æ–Ω', 'email', '–ø–æ—á—Ç–∞', '—Å–≤—è–∑—å', '–Ω–æ–º–µ—Ä', '–∑–≤–æ–Ω–∏—Ç—å', '–ø–æ–∑–≤–æ–Ω–∏—Ç—å', '—Å–≤—è–∑–∞—Ç—å—Å—è', '–∞–¥—Ä–µ—Å', '–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è', '–∞—Ç–µ–ª—å–µ', '–¥–µ—Ç–µ–π–ª–∏–Ω–≥', '—Ü–µ–Ω—Ç—Ä', '–ª–æ–∫–∞—Ü–∏—è'];
      const isContactQuery = contactKeywords.some(k => query.toLowerCase().includes(k));
      if (isContactQuery && !baseParams.chunk_types) {
        baseParams.chunk_types = ['contact','address'];
      }

      const { data, error } = await this.supabase.rpc('search_knowledge_chunks', baseParams);

      if (error) {
        console.error('‚ùå Text search RPC error:', error);
        console.error('‚ùå Error details:', JSON.stringify(error, null, 2));
        return [];
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
      if (!data || data.length === 0) {
        const synonym = synonyms[query.toLowerCase()];
        if (synonym) {
          console.log(`üîÑ No results for "${query}", trying synonym "${synonym}"`);
          const { data: synonymData, error: synonymError } = await this.supabase.rpc('search_knowledge_chunks', {
            ...baseParams,
            search_query: synonym
          });
          
          if (!synonymError && synonymData && synonymData.length > 0) {
            console.log(`‚úÖ Found ${synonymData.length} results using synonym "${synonym}"`);
            return synonymData;
          }
        }
      }

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –Ω–∏—à–∞, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç—è–Ω–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∏—à–∏ (company_RAG) –∏ –æ–±—ä–µ–¥–∏–Ω–∏–º
      if ((data && data.length > 0) && baseParams.niche_uuid) {
        const { data: companyData, error: companyError } = await this.supabase.rpc('search_knowledge_chunks', {
          ...baseParams,
          niche_uuid: null
        });
        if (!companyError && companyData && companyData.length > 0) {
          const map = new Map();
          data.forEach(r => map.set(r.id, { ...r, rank: (r.rank || 0) + 0.2 })); // –ª–µ–≥–∫–∏–π –±—É—Å—Ç –Ω–∏—à–µ–≤—ã–º
          companyData.forEach(r => {
            if (!map.has(r.id)) map.set(r.id, r);
          });
          return Array.from(map.values());
        }
      }
      
      console.log(`üìä Text search results: ${data ? data.length : 0} chunks found`);
      if (data && data.length > 0) {
        console.log(`üìù First result: ${data[0].chunk_text.substring(0, 100)}...`);
      }
      return data || [];
      
    } catch (error) {
      console.error('‚ùå Text search error:', error);
      return [];
    }
  }

  extractKeywords(query) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, —É–±–∏—Ä–∞—è —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    const stopWords = ['—Ä–∞—Å—Å–∫–∞–∂–∏', '–ø—Ä–æ', '–æ', '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∏', '–∏–ª–∏', '–Ω–æ', '–∞', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∏–∑', '–∫', '—É', '–ø—Ä–∏', '–±–µ–∑', '—á–µ—Ä–µ–∑', '–Ω–∞–¥', '–ø–æ–¥', '–º–µ–∂–¥—É', '—Å—Ä–µ–¥–∏', '–æ–∫–æ–ª–æ', '–≤–æ–∑–ª–µ', '–≤–æ–∫—Ä—É–≥', '–≤–Ω—É—Ç—Ä–∏', '—Å–Ω–∞—Ä—É–∂–∏', '–ø–µ—Ä–µ–¥', '–ø–æ—Å–ª–µ', '–≤–æ', '—Å–æ', '–æ–±', '–æ–±–æ', '–Ω–µ', '–Ω–∏', '–∂–µ', '–ª–∏', '–±—ã', '–±—ã–ª', '–±—ã–ª–∞', '–±—ã–ª–æ', '–±—ã–ª–∏', '–µ—Å—Ç—å', '–±—ã—Ç—å', '—ç—Ç–æ', '—ç—Ç–∞', '—ç—Ç–æ—Ç', '—ç—Ç–∏', '–º–æ–π', '–º–æ—è', '–º–æ–µ', '–º–æ–∏', '—Ç–≤–æ–π', '—Ç–≤–æ—è', '—Ç–≤–æ–µ', '—Ç–≤–æ–∏', '–Ω–∞—à', '–Ω–∞—à–∞', '–Ω–∞—à–µ', '–Ω–∞—à–∏', '–≤–∞—à', '–≤–∞—à–∞', '–≤–∞—à–µ', '–≤–∞—à–∏'];
    
    // –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    const synonyms = {
      '—Ç–∞—Ä–∏—Ñ—ã': ['—Ç–∞—Ä–∏—Ñ', '–ø–∞–∫–µ—Ç—ã', '–ø–ª–∞–Ω—ã', '–ø–æ–¥–ø–∏—Å–∫–∏', '–≤–∞—Ä–∏–∞–Ω—Ç—ã', '—Ü–µ–Ω—ã', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø—Ä–∞–π—Å'],
      '–ø–∞–∫–µ—Ç—ã': ['—Ç–∞—Ä–∏—Ñ—ã', '—Ç–∞—Ä–∏—Ñ', '–ø–ª–∞–Ω—ã', '–ø–æ–¥–ø–∏—Å–∫–∏', '–≤–∞—Ä–∏–∞–Ω—Ç—ã', '—Ü–µ–Ω—ã', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø—Ä–∞–π—Å'],
      '–ø–ª–∞–Ω—ã': ['—Ç–∞—Ä–∏—Ñ—ã', '—Ç–∞—Ä–∏—Ñ', '–ø–∞–∫–µ—Ç—ã', '–ø–æ–¥–ø–∏—Å–∫–∏', '–≤–∞—Ä–∏–∞–Ω—Ç—ã', '—Ü–µ–Ω—ã', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø—Ä–∞–π—Å'],
      '—Ü–µ–Ω—ã': ['—Ç–∞—Ä–∏—Ñ—ã', '—Ç–∞—Ä–∏—Ñ', '–ø–∞–∫–µ—Ç—ã', '–ø–ª–∞–Ω—ã', '–ø–æ–¥–ø–∏—Å–∫–∏', '–≤–∞—Ä–∏–∞–Ω—Ç—ã', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø—Ä–∞–π—Å'],
      '—Å—Ç–æ–∏–º–æ—Å—Ç—å': ['—Ç–∞—Ä–∏—Ñ—ã', '—Ç–∞—Ä–∏—Ñ', '–ø–∞–∫–µ—Ç—ã', '–ø–ª–∞–Ω—ã', '–ø–æ–¥–ø–∏—Å–∫–∏', '–≤–∞—Ä–∏–∞–Ω—Ç—ã', '—Ü–µ–Ω—ã', '–ø—Ä–∞–π—Å'],
      '–∫—É—Ä—Å': ['–æ–±—É—á–µ–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Ç—Ä–µ–Ω–∏–Ω–≥', '–∫—É—Ä—Å—ã'],
      '–æ–±—É—á–µ–Ω–∏–µ': ['–∫—É—Ä—Å', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '—Ç—Ä–µ–Ω–∏–Ω–≥', '–∫—É—Ä—Å—ã'],
      '–ø—Ä–æ–≥—Ä–∞–º–º–∞': ['–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω–∏–µ', '—Ç—Ä–µ–Ω–∏–Ω–≥', '–∫—É—Ä—Å—ã'],
      '–±–æ—Ç': ['—á–∞—Ç–±–æ—Ç', '—á–∞—Ç-–±–æ—Ç', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∞'],
      '—á–∞—Ç–±–æ—Ç': ['–±–æ—Ç', '—á–∞—Ç-–±–æ—Ç', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∞'],
      '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è': ['–±–æ—Ç', '—á–∞—Ç–±–æ—Ç', '—á–∞—Ç-–±–æ—Ç', '–∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∞'],
      '–ø–æ–¥–¥–µ—Ä–∂–∫–∞': ['–ø–æ–º–æ—â—å', '—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ', '–º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ'],
      '–ø–æ–º–æ—â—å': ['–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ', '–º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ'],
      '–±–∞–∑–æ–≤—ã–π': ['–Ω–∞—á–∞–ª—å–Ω—ã–π', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', '–æ—Å–Ω–æ–≤–Ω–æ–π'],
      '—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π': ['–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π', '—É–ª—É—á—à–µ–Ω–Ω—ã–π', '–ø—Ä–µ–º–∏—É–º'],
      '–º–∞–∫—Å–∏–º—É–º': ['–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π', '–ø–æ–ª–Ω—ã–π', '—Ç–æ–ø–æ–≤—ã–π', '–ø—Ä–µ–º–∏—É–º'],
      'no-code': ['–±–µ–∑ –∫–æ–¥–∞', '–≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–Ω–∏–∑–∫–æ–∫–æ–¥'],
      '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞': ['—Å–æ–∑–¥–∞–Ω–∏–µ', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ']
    };
    
    const words = query.toLowerCase()
      .replace(/[^\w\s]/g, ' ') // –£–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
      .split(/\s+/)
      .filter(word => word.trim().length > 0) // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      .filter(word => {
        const isLongEnough = word.length > 2;
        const isNotStopWord = !stopWords.includes(word);
        console.log(`üîç Word "${word}": length=${word.length}, isLongEnough=${isLongEnough}, isNotStopWord=${isNotStopWord}`);
        return isLongEnough && isNotStopWord;
      }); // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞ –∏ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    
    console.log(`üîç All words from query: ${query.toLowerCase().split(/\s+/).join(', ')}`);
    console.log(`üîç Filtered words: ${words.join(', ')}`);
    
    // –†–∞—Å—à–∏—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
    const expandedKeywords = new Set();
    
    words.forEach(word => {
      expandedKeywords.add(word);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
      if (synonyms[word]) {
        synonyms[word].forEach(synonym => {
          expandedKeywords.add(synonym);
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ —Å–∏–Ω–æ–Ω–∏–º–æ–º –¥—Ä—É–≥–æ–≥–æ
      Object.keys(synonyms).forEach(key => {
        if (synonyms[key].includes(word)) {
          expandedKeywords.add(key);
          synonyms[key].forEach(synonym => {
            expandedKeywords.add(synonym);
          });
        }
      });
    });
    
    const result = Array.from(expandedKeywords);
    console.log(`üîë Original words: ${words.join(', ')}`);
    console.log(`üîë Expanded keywords: ${result.join(', ')}`);
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –∑–∞–ø—Ä–æ—Å
    return result.length > 0 ? result : [query.toLowerCase()];
  }

  combineAndRankResults(vectorResults, textResults, query) {
    const combined = new Map();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    vectorResults.forEach(result => {
      combined.set(result.id, {
        ...result,
        vectorScore: result.similarity,
        textScore: 0,
        finalScore: result.similarity * 0.7
      });
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    textResults.forEach(result => {
      const existing = combined.get(result.id);
      if (existing) {
        existing.textScore = result.rank;
        existing.finalScore = (existing.vectorScore * 0.7) + (result.rank * 0.3);
      } else {
        combined.set(result.id, {
          ...result,
          vectorScore: 0,
          textScore: result.rank,
          finalScore: result.rank * 0.3
        });
      }
    });
    
    return Array.from(combined.values())
      .sort((a, b) => b.finalScore - a.finalScore);
  }

  selectResultsByTokenBudget(results, options = {}) {
    const tokenBudget = options.tokenBudget || this.config.tokenBudget;
    const maxChunks = options.maxChunks || this.config.maxChunks;
    
    const selected = [];
    let usedTokens = 0;
    
    for (const result of results) {
      if (selected.length >= maxChunks) break;
      
      const tokens = this.estimateTokens(result.chunk_text);
      if (usedTokens + tokens <= tokenBudget) {
        selected.push({
          ...result,
          tokens,
          type: 'full'
        });
        usedTokens += tokens;
      } else if (usedTokens + 100 <= tokenBudget) {
        // –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–µ–∑–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        const truncated = this.truncateByTokens(result.chunk_text, tokenBudget - usedTokens);
        selected.push({
          ...result,
          chunk_text: truncated,
          tokens: this.estimateTokens(truncated),
          type: 'truncated'
        });
        break;
      }
    }
    
    return selected;
  }

  // 3. –°–õ–û–ô –û–†–ö–ï–°–¢–†–ê–¶–ò–ò –î–ò–ê–õ–û–ì–ê
  async processMessage(userId, assistantId, message, conversationId = null, options = {}) {
    try {
      console.log(`üí¨ Processing message for user ${userId}, assistant ${assistantId}`);
      console.log(`üí¨ Message content:`, message);
      console.log(`üí¨ Message type:`, typeof message);
      console.log(`üí¨ Conversation history:`, options.conversationHistory?.length || 0, 'messages');
      console.log(`üí¨ Conversation history data:`, JSON.stringify(options.conversationHistory || []));
      
      const channel = options.channel || 'admin';

      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –¥–∏–∞–ª–æ–≥–æ–≤
      if (!conversationId) {
        try {
          const { data: sessionId, error: sessionError } = await this.supabase
            .rpc('get_or_create_conversation_session', {
              p_user_id: userId,
              p_assistant_id: assistantId,
              p_channel: channel,
              p_session_timeout_minutes: 30
            });
          
          if (sessionError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', sessionError);
            // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
            const recentId = await this.getRecentConversationId(userId, assistantId, channel, 45);
            conversationId = recentId;
          } else {
            conversationId = sessionId;
            console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –¥–∏–∞–ª–æ–≥–∞: ${conversationId}`);
          }
        } catch (error) {
          console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏:', error);
          // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
          const recentId = await this.getRecentConversationId(userId, assistantId, channel, 45);
          conversationId = recentId;
        }
      }

      // –ü–†–û–°–¢–ê–Ø –ò –ü–û–ù–Ø–¢–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ = –Ω–µ—Ç conversationId –ò–õ–ò –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏
      const hasValidConversationId = conversationId && typeof conversationId === 'string' && conversationId.length > 0;
      const hasConversationHistory = options.conversationHistory && options.conversationHistory.length > 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ –≤ –ë–î
      let hasExistingMessages = false;
      if (hasValidConversationId) {
        try {
          const { data: existingMessages } = await this.supabase
            .from('chat_messages')
            .select('id')
            .eq('conversation_id', conversationId)
            .limit(1);
          hasExistingMessages = existingMessages && existingMessages.length > 0;
        } catch (error) {
          console.log('‚ö†Ô∏è Error checking existing messages:', error.message);
        }
      }
      
      // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏, –∑–∞–≥—Ä—É–∑–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ë–î –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      let dbHistory = [];
      if (hasValidConversationId && !hasConversationHistory) {
        try {
          const { data: historyData } = await this.supabase
            .from('chat_messages')
            .select('role, content, created_at')
            .eq('conversation_id', conversationId)
            .order('created_at', { ascending: true })
            .limit(20);
          dbHistory = (historyData || []).map(m => ({ role: m.role, content: m.content }));
        } catch (e) {
          // no-op
        }
      }

      // –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∏ –≤ UI, –Ω–∏ –≤ –ë–î, –∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ conversationId
      let isNewConversation = false;
      if (hasConversationHistory) {
        isNewConversation = false;
      } else if (hasValidConversationId && hasExistingMessages) {
        isNewConversation = false;
      } else if (!hasValidConversationId && dbHistory.length === 0) {
        isNewConversation = true;
      }
      
      console.log(`üÜï –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥:`, isNewConversation);
      console.log(`üÜî –í–∞–ª–∏–¥–Ω—ã–π conversationId:`, hasValidConversationId);
      console.log(`üìö –ï—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:`, hasConversationHistory);
      console.log(`üíæ –ï—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î:`, hasExistingMessages);
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞
      const agentSettings = await this.getAgentSettings(userId, assistantId);
      
      // –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏ –∏–Ω—Ç–µ–Ω—Ç—ã
      const intents = this.detectIntents(String(message || ''));
      const workingHours = await this.getWorkingHours(userId, assistantId);
      const withinWorking = this.isWithinWorkingHours(workingHours);
      let showFormWanted = false;
      let handoverWanted = false;

      // –ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–∫—É—â–µ–º –¥–∏–∞–ª–æ–≥–µ (–¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞)
      const messagesCount = (hasConversationHistory ? (options.conversationHistory?.length || 0) : dbHistory.length) + 1;

      // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è —ç—Å–∫–∞–ª–∞—Ü–∏—è: –∑–∞–ø—Ä–æ—Å ¬´–ø–æ–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞¬ª
      if (intents.managerHelp) {
        let content;
        if (withinWorking) {
          handoverWanted = true;
          content = '–°–µ–π—á–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞.';
        } else {
          showFormWanted = true;
          content = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –º—ã –Ω–µ –æ–Ω–ª–∞–π–Ω. –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É? –ú—ã –ø–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.';
        }
        
        const saved = await this.saveConversationMessages(
          conversationId, userId, assistantId, message,
          { content, tokensUsed: 0 },
          { type: 'none', results: [] },
          { ...options, channel }
        );
        
        // –û—Ç–º–µ—á–∞–µ–º –ø–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –¥–∏–∞–ª–æ–≥
        if (showFormWanted && saved?.conversationId) {
          try { await this.supabase.from('conversations').update({ form_shown: true }).eq('id', saved.conversationId); } catch (_) {}
        }
        
        return {
          success: true,
          response: content,
          conversationId: saved.conversationId,
          ragContext: { type: 'none', results: [] },
          tokensUsed: 0,
          showForm: showFormWanted,
          handover: handoverWanted
        };
      }

      // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: ¬´—ç—Ç–æ –ø–æ–º–æ–≥–ª–æ¬ª, ¬´—Å–ø–∞—Å–∏–±–æ¬ª
      if (intents.helped) {
        const content = '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!';
        const saved = await this.saveConversationMessages(
          conversationId, userId, assistantId, message,
          { content, tokensUsed: 0 },
          { type: 'none', results: [] },
          { ...options, channel }
        );
        return {
          success: true,
          response: content,
          conversationId: saved.conversationId,
          ragContext: { type: 'none', results: [] },
          tokensUsed: 0,
          showForm: false,
          handover: false
        };
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞)
      const systemPrompt = await this.getSystemPrompt(userId, assistantId);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞)
      const userPrompt = await this.getUserPrompt(agentSettings, isNewConversation);
      
      // –ü—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º nicheId –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ RAG-–ø–æ–∏—Å–∫
      const nicheIdFromSettings = (agentSettings && (agentSettings.niche_id || (agentSettings.settings && agentSettings.settings.nicheId))) || null;
      const searchOptions = { ...options, nicheId: options.nicheId || nicheIdFromSettings || null };
      
      // –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–Ω–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º userId –¥–ª—è –ø–æ–∏—Å–∫–∞)
      const ragContext = await this.searchRelevantKnowledge(message, userId, assistantId, searchOptions);
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞
      const history = hasConversationHistory ? options.conversationHistory : dbHistory;
      const llmContext = await this.createLLMContext(systemPrompt, userPrompt, ragContext, message, options, history);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GigaChat
      const response = await this.sendToGigaChat(llmContext, { ...options, userMessage: message, agentSettings: agentSettings });
      console.log('ü§ñ GigaChat response:', response);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      const savedMessages = await this.saveConversationMessages(
        conversationId, userId, assistantId, message, response, ragContext, { ...options, channel }
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º FAQ –∫–µ—à –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (ragContext.type === 'rag' && ragContext.results.length > 0) {
        await this.updateFAQCache(message, response.content, userId, assistantId);
      }
      
      // –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ - —É–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
      let cleanResponse = response.content;
      cleanResponse = cleanResponse.replace(/\*\*([^*]+)\*\*/g, '$1');
      cleanResponse = cleanResponse.replace(/\*([^*]+)\*/g, '$1');
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (—à–∏—Ä–µ: —Å–∫–ª–æ–Ω–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º—ã)
      if (agentSettings && agentSettings.addressing) {
        cleanResponse = this.enforceAddressing(cleanResponse, agentSettings.addressing);
      }

      // –ñ—ë—Å—Ç–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π: —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–º –æ—Ç–≤–µ—Ç–µ
      const greetingRegex = /^\s*(–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|–ü—Ä–∏–≤–µ—Ç|–î–æ–±—Ä—ã–π –¥–µ–Ω—å|–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä|–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ)[!,.\s-]*/i;
      const hasGreeting = greetingRegex.test(cleanResponse);
      if (isNewConversation) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –µ–≥–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∞
        if (!hasGreeting) {
          cleanResponse = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! ${cleanResponse}`.trim();
        }
      } else {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª–∞—Å—å
        cleanResponse = cleanResponse
          .replace(greetingRegex, '')
          .replace(/^\s*–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ![!,\.\s-]*/i, '')
          .replace(/^\s*–ü—Ä–∏–≤–µ—Ç[!,\.\s-]*/i, '')
          .replace(/^\s*–î–æ–±—Ä—ã–π\s*(–¥–µ–Ω—å|–≤–µ—á–µ—Ä|—É—Ç—Ä–æ)[!,\.\s-]*/i, '')
          .trimStart();
      }

      // –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É–∫–∞–∑–∞–Ω–æ "–ù–∏–∫–æ–≥–¥–∞"
      try {
        const settingsRaw = agentSettings && (agentSettings.settings || agentSettings);
        const emojiPref = settingsRaw && (settingsRaw.emoji_usage || settingsRaw.emojiUsage);
        if (emojiPref && /–Ω–∏–∫–æ–≥–¥–∞/i.test(emojiPref)) {
          // –£–¥–∞–ª—è–µ–º –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ unicode-—ç–º–æ–¥–∑–∏
          const emojiRegex = /[\u2190-\u21FF\u2300-\u27BF\u2B00-\u2BFF\u1F000-\u1FAFF\u2600-\u26FF\u2700-\u27BF]|[\u{1F600}-\u{1F64F}]/gu;
          cleanResponse = cleanResponse.replace(emojiRegex, '').replace(/\s{2,}/g, ' ').trim();
        }
      } catch (_) {}

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç ‚Äì –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º URL –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
      try {
        const linkIntent = /\b(—Å—Å—ã–ª–∫–∞|—Å—Å—ã–ª–∫—É|—Å–∞–π—Ç|—Å—Ç—Ä–∞–Ω–∏—Ü—É|web|url)\b/i.test(String(message || ''));
        const responseHasUrl = /(https?:\/\/|www\.)/i.test(cleanResponse);
        if (linkIntent && !responseHasUrl) {
          const nicheId = searchOptions.nicheId || null;
          let query = this.supabase
            .from('knowledge_sources')
            .select('source_url, source_type, niche_id')
            .eq('user_id', userId)
            .not('source_url', 'is', null)
            .order('created_at', { ascending: false })
            .limit(5);
          if (nicheId) query = query.eq('niche_id', nicheId);
          const { data: sources } = await query;
          const preferred = (sources || []).find(s => s.source_type === 'site' || s.source_type === 'website') || (sources || [])[0];
          if (preferred && preferred.source_url) {
            cleanResponse = `${cleanResponse}\n\n–°—Å—ã–ª–∫–∞: ${preferred.source_url}`.trim();
          }
        }
      } catch (_) {}

      // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã (–ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞)
      const priceOrBooking = intents.priceOrBooking; // –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å/—Ü–µ–Ω—É/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
      const longDialogFallback = messagesCount > 5 && (!ragContext || ragContext.type !== 'rag' || !ragContext.results || ragContext.results.length === 0);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞—Å—å –ª–∏ —Ñ–æ—Ä–º–∞ —Ä–∞–Ω–µ–µ –≤ —ç—Ç–æ–º –¥–∏–∞–ª–æ–≥–µ
      let alreadyShown = false;
      if (conversationId) {
        try {
          const { data } = await this.supabase.from('conversations').select('form_shown').eq('id', conversationId).single();
          alreadyShown = !!(data && data.form_shown);
        } catch (_) {}
      }

      if (!alreadyShown && (priceOrBooking || longDialogFallback)) {
        showFormWanted = true;
        cleanResponse = `${cleanResponse}\n\n–•–æ—Ç–∏—Ç–µ, –æ—Ñ–æ—Ä–º–ª—é –∑–∞—è–≤–∫—É, –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏?`;
      }

      // –û—Ç–º–µ—á–∞–µ–º –ø–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –¥–∏–∞–ª–æ–≥
      if (showFormWanted) {
        const convId = conversationId || (savedMessages && savedMessages.conversationId);
        if (convId) {
          try { await this.supabase.from('conversations').update({ form_shown: true }).eq('id', convId); } catch (_) {}
        }
      }

      return {
        success: true,
        response: cleanResponse,
        conversationId: (savedMessages && savedMessages.conversationId) || conversationId || null,
        ragContext,
        tokensUsed: response.tokensUsed || 0,
        showForm: showFormWanted,
        handover: handoverWanted
      };
      
    } catch (error) {
      console.error('‚ùå Error processing message:', error);
      throw error;
    }
  }

  async getAgentSettings(userId, assistantId) {
    const cacheKey = `settings-${userId}-${assistantId}`;
    
    if (this.settingsCache.has(cacheKey)) {
      console.log('üíæ Settings from cache');
      return this.settingsCache.get(cacheKey);
    }
    
    const { data, error } = await this.supabase
      .from('ai_agent_settings')
      .select('*')
      .eq('user_id', userId)
      .eq('assistant_id', assistantId)
      .single();

    if (error && error.code !== 'PGRST116') throw error;
    
    let settings = null;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–æ–ª–µ settings, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö (—ç—Ç–æ –ù–û–í–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
    if (data && data.settings) {
      console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ù–û–í–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–æ–ª—è settings');
      const parsedSettings = data.settings;
      settings = {
        communication_style: parsedSettings.communication_style || parsedSettings.communicationStyle,
        addressing: parsedSettings.addressing,
        emoji_usage: parsedSettings.emoji_usage || parsedSettings.emojiUsage,
        restrictions: parsedSettings.restrictions,
        additional_settings: parsedSettings.additional_settings || parsedSettings.communicationSettings,
        dialog_stages: parsedSettings.dialog_stages || parsedSettings.dialogStages,
        target_audience: parsedSettings.target_audience || parsedSettings.targetAudience,
        main_goal: parsedSettings.main_goal || parsedSettings.mainGoal
      };
    } else {
      settings = data;
    }
    
    // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ 5 –º–∏–Ω—É—Ç
    this.settingsCache.set(cacheKey, settings);
    setTimeout(() => {
      this.settingsCache.delete(cacheKey);
    }, 5 * 60 * 1000);
    
    return settings;
  }

  async getSystemPrompt(userId, assistantId) {
    const cacheKey = `system-${userId}-${assistantId}`;
    
    if (this.promptCache.has(cacheKey)) {
      return this.promptCache.get(cacheKey);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞
    const agentSettings = await this.getAgentSettings(userId, assistantId);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–ª–∏–µ–Ω—Ç–∞
    const systemPrompt = await this.generateSystemPrompt(agentSettings);
    
    this.promptCache.set(cacheKey, systemPrompt);
    return systemPrompt;
  }

  async generateSystemPrompt(agentSettings = null, options = {}) {
    console.log('üîç generateSystemPrompt called with agentSettings:', agentSettings);
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    const { promptGenerator } = await import('./unified-prompt-generator.js');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    const prompt = await promptGenerator.generateSystemPrompt(agentSettings, options);
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä');
    return prompt;
  }

  async getUserPrompt(agentSettings, isNewConversation = false) {
    if (!agentSettings) {
      return '';
    }

    let userPrompt = '';

    // –†–û–õ–¨ –ò –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï
    if (agentSettings.task) {
      userPrompt += `\nüé≠ –†–û–õ–¨: ${agentSettings.task === '–ü—Ä–æ–¥–∞–≤–∞—Ç—å' ? '–ü—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç' : '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'}\n`;
    }

    // –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å
    if (agentSettings.main_goal) {
      userPrompt += `üé™ –ì–õ–ê–í–ù–ê–Ø –¶–ï–õ–¨: ${agentSettings.main_goal}\n`;
    } else if (agentSettings.main_goal_custom) {
      userPrompt += `üé™ –ì–õ–ê–í–ù–ê–Ø –¶–ï–õ–¨: ${agentSettings.main_goal_custom}\n`;
    }

    // –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
    if (agentSettings.target_audience) {
      userPrompt += `üéØ –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø: ${agentSettings.target_audience}\n`;
    }

    // –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
    if (agentSettings.communication_style) {
      userPrompt += `\nüé≠ –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø: ${agentSettings.communication_style}\n`;
    }

    // –û–±—Ä–∞—â–µ–Ω–∏–µ - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û
    if (agentSettings.addressing) {
      userPrompt += `üë§ –û–ë–†–ê–©–ï–ù–ò–ï: ${agentSettings.addressing}\n`;
      userPrompt += `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω–∞—á–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç —Å –æ–±—Ä–∞—â–µ–Ω–∏—è "${agentSettings.addressing}"! –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è!\n`;
    }

    // –≠–º–æ–¥–∑–∏
    if (agentSettings.emoji_usage) {
      userPrompt += `üòä –≠–ú–û–î–ó–ò: ${agentSettings.emoji_usage}\n`;
      if (agentSettings.emoji_usage === '–ù–∏–∫–æ–≥–¥–∞') {
        userPrompt += `üö® –°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö!\n`;
      } else if (agentSettings.emoji_usage === '–ß–∞—Å—Ç–æ') {
        userPrompt += `üö® –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –≤ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ!\n`;
      }
    }

    // –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø
    if (agentSettings.restrictions && agentSettings.restrictions.length > 0) {
      userPrompt += `\nüö´ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:\n`;
      agentSettings.restrictions.forEach(restriction => {
        userPrompt += `- ${restriction}\n`;
      });
    }
    
    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    if (agentSettings.restrictions_custom) {
      userPrompt += `\nüö´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:\n`;
      userPrompt += `- ${agentSettings.restrictions_custom}\n`;
    }

    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
    if (agentSettings.additional_settings && agentSettings.additional_settings.length > 0) {
      userPrompt += `\n‚öôÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:\n`;
      agentSettings.additional_settings.forEach(setting => {
        userPrompt += `- ${setting}\n`;
      });
    }
    
    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (agentSettings.additional_settings_custom) {
      userPrompt += `\n‚öôÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:\n`;
      userPrompt += `- ${agentSettings.additional_settings_custom}\n`;
    }

    // –ü–†–ê–í–ò–õ–ê –°–ë–û–†–ê –î–ê–ù–ù–´–•
    if (agentSettings.data_collection && agentSettings.data_collection.length > 0) {
      userPrompt += `\nüìä –ü–†–ê–í–ò–õ–ê –°–ë–û–†–ê –î–ê–ù–ù–´–•:\n`;
      agentSettings.data_collection.forEach(rule => {
        userPrompt += `- ${rule}\n`;
      });
    }
    
    if (agentSettings.data_collection_custom) {
      userPrompt += `\nüìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê –°–ë–û–†–ê:\n`;
      userPrompt += `- ${agentSettings.data_collection_custom}\n`;
    }

    // –ü–†–ê–í–ò–õ–ê –£–¢–û–ß–ù–ï–ù–ò–Ø
    if (agentSettings.clarification_rules && agentSettings.clarification_rules.length > 0) {
      userPrompt += `\n‚ùì –ü–†–ê–í–ò–õ–ê –£–¢–û–ß–ù–ï–ù–ò–Ø:\n`;
      agentSettings.clarification_rules.forEach(rule => {
        userPrompt += `- ${rule}\n`;
      });
    }
    
    if (agentSettings.clarification_rules_custom) {
      userPrompt += `\n‚ùì –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê –£–¢–û–ß–ù–ï–ù–ò–Ø:\n`;
      userPrompt += `- ${agentSettings.clarification_rules_custom}\n`;
    }

    // –≠–¢–ê–ü–´ –î–ò–ê–õ–û–ì–ê
    if (agentSettings.dialog_stages && agentSettings.dialog_stages.length > 0) {
      userPrompt += `\nüìã –≠–¢–ê–ü–´ –î–ò–ê–õ–û–ì–ê:\n`;
      agentSettings.dialog_stages.forEach((stage, index) => {
        userPrompt += `${index + 1}. ${stage}\n`;
      });
    }

    // –°–¢–ê–¢–£–° –î–ò–ê–õ–û–ì–ê
    if (isNewConversation) {
      userPrompt += `\nüëã –ü–†–ò–í–ï–¢–°–¢–í–ò–ï: –≠—Ç–æ –ù–û–í–´–ô –¥–∏–∞–ª–æ–≥! –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞.\n`;
      userPrompt += `üéØ –ü–†–ò–ú–ï–† –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø: "–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"\n`;
    } else {
      userPrompt += `\nüí¨ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï: –≠—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞. –ù–ï –∑–¥–æ—Ä–æ–≤–∞–π—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n`;
    }

    return userPrompt;
  }

  async createLLMContext(systemPrompt, userPrompt, ragContext, userMessage, options = {}, conversationHistory = []) {
    console.log('üîç RAG Context:', ragContext);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const { promptGenerator } = await import('./unified-prompt-generator.js');
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    const generatorOptions = {
      ragContext: ragContext,
      conversationHistory: conversationHistory
    };
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    const fullContext = await promptGenerator.generateSystemPrompt(options.agentSettings, generatorOptions);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    let finalContext = fullContext;
    if (userPrompt) {
      finalContext += `\n\nüéõÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ö–õ–ò–ï–ù–¢–ê:${userPrompt}`;
    }
    
    return finalContext;
  }

  postProcessResponse(response, agentSettings) {
    if (!agentSettings) return response;
    
    const settings = agentSettings.settings || agentSettings;
    let processedResponse = response;
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (settings.addressing) {
      const hasAddressing = processedResponse.includes(settings.addressing);
      if (!hasAddressing) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ
        processedResponse = `${settings.addressing}, ${processedResponse.toLowerCase()}`;
      }
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (settings.emoji_usage === '–ß–∞—Å—Ç–æ') {
      const hasEmoji = /[\u{1F600}-\u{1F64F}]/u.test(processedResponse);
      if (!hasEmoji) {
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∫–æ–Ω–µ—Ü
        processedResponse += ' üòä';
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ
    if (settings.emoji_usage === '–ù–∏–∫–æ–≥–¥–∞') {
      processedResponse = processedResponse.replace(/[\u{1F600}-\u{1F64F}]/gu, '');
    }
    
    // –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –£–ú–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê –¢–û–ö–ï–ù–û–í
    try {
      console.log('üß† –ü—Ä–∏–º–µ–Ω—è–µ–º —É–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏...');
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞
      const maxTokens = settings.maxTokens || 300;
      const tokenStrategy = settings.tokenStrategy || 'reserve'; // 'reserve' –∏–ª–∏ 'split'
      
      smartTokenManager.configure({
        maxTokens: maxTokens,
        reserveTokens: 50
      });
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å —É–º–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞–º–∏
      const tokenResult = smartTokenManager.processResponse(processedResponse, {
        strategy: tokenStrategy
      });
      
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: ${tokenResult.type}`);
      console.log(`üìè –¢–æ–∫–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ: ${tokenResult.tokens}`);
      console.log(`üîÑ –ù—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ: ${tokenResult.needsContinuation}`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
      processedResponse = tokenResult.content;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      // Fallback –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É
    }
    
    console.log('üîß –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞:', processedResponse);
    return processedResponse;
  }

  async sendToGigaChat(context, options = {}) {
    try {
      const systemPrompt = typeof context === 'string' ? context : context.systemPrompt;
      const userMessage = options.userMessage || '–ü—Ä–∏–≤–µ—Ç!';
      const ragContext = context.ragContext || null;
      
      // –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ú–ü–¢–ê
      console.log('=== PROMPT FOR GIGACHAT MODEL ===');
      console.log('SYSTEM PROMPT:', systemPrompt);
      if (ragContext) {
        console.log('RAG CONTEXT:', ragContext.context || ragContext);
        console.log('RAG TOKENS USED:', ragContext.tokensUsed || 'N/A');
        console.log('RAG ITEMS COUNT:', ragContext.itemsCount || 'N/A');
      } else {
        console.log('RAG CONTEXT: –ù–ï–¢ (—Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ RAG)');
      }
      console.log('USER MESSAGE:', userMessage);
      console.log('=====================================');
      
      const GIGACHAT_API_URL = 'https://gigachat.devices.sberbank.ru/api/v1/chat/completions';
      const GIGACHAT_AUTH_URL = 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth';
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTPS –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
      const httpsAgent = new https.Agent({
        rejectUnauthorized: false
      });
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
      const tokenResponse = await axios.post(GIGACHAT_AUTH_URL, 
        'scope=GIGACHAT_API_PERS',
        {
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'RqUID': '6f0b1291-c7f3-43c0-bb47-8790703601da',
            'Authorization': 'Bearer ' + process.env.GIGACHAT_API_KEY
          },
          httpsAgent
        }
      );

      const accessToken = tokenResponse.data.access_token;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
      const chatResponse = await axios.post(GIGACHAT_API_URL, {
        model: 'GigaChat:latest',
        messages: [
          {
            role: 'system',
            content: systemPrompt
          },
          {
            role: 'user',
            content: userMessage
          }
        ],
        temperature: 0.7,
        max_tokens: 300
      }, {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + accessToken
        },
        httpsAgent
      });

      // –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
      let responseContent = chatResponse.data.choices[0].message.content;
      
      if (options.agentSettings) {
        responseContent = this.postProcessResponse(responseContent, options.agentSettings);
      }

      console.log('‚úÖ GigaChat –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
      
      return {
        content: responseContent,
        tokensUsed: chatResponse.data.usage?.total_tokens || 0
      };
      
    } catch (error) {
      console.error('‚ùå Error calling GigaChat:', error);
      console.log('‚ö†Ô∏è Status:', error.response?.status);
      console.log('‚ö†Ô∏è Data:', error.response?.data);
      
      // Fallback –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
      const message = context.toLowerCase();
      
      let fallbackResponse = '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?';
      
      if (message.includes('–ø—Ä–∏–≤–µ—Ç') || message.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
        fallbackResponse = '–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ö–∞–∫ –¥–µ–ª–∞?';
      } else if (message.includes('–∫–∞–∫ –¥–µ–ª–∞') || message.includes('–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å')) {
        fallbackResponse = '–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞?';
      } else if (message.includes('—Å–ø–∞—Å–∏–±–æ')) {
        fallbackResponse = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!';
      } else if (message.includes('–ø–æ–º–æ—â—å') || message.includes('–ø–æ–º–æ–≥–∏')) {
        fallbackResponse = '–ö–æ–Ω–µ—á–Ω–æ, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.';
      } else if (message.includes('–≤–æ–ø—Ä–æ—Å')) {
        fallbackResponse = '–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!';
      } else if (message.includes('—á—Ç–æ') || message.includes('–∫–∞–∫')) {
        fallbackResponse = '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?';
      }
      
      return {
        content: fallbackResponse,
        tokensUsed: 0
      };
    }
  }

  async saveConversationMessages(conversationId, userId, assistantId, userMessage, aiResponse, ragContext, options = {}) {
    console.log(`üíæ saveConversationMessages called with userId: ${userId}, assistantId: ${assistantId}`);
    console.log(`üíæ conversationId: ${conversationId}`);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç conversationId ‚Äî –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä
    const channel = options.channel || 'admin';
    if (!conversationId || !conversationId.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)) {
      const recentId = await this.getRecentConversationId(userId, assistantId, channel, 45);
      conversationId = recentId || randomUUID();
      await this.ensureConversation(conversationId, userId, assistantId, channel);
      console.log(`üÜî –ò—Å–ø–æ–ª—å–∑—É–µ–º conversation: ${conversationId}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ userMessage –Ω–µ –ø—É—Å—Ç–æ–π
    if (!userMessage || typeof userMessage !== 'string') {
      console.error('‚ùå Invalid userMessage:', userMessage);
      throw new Error('Invalid user message');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log(`üîß Getting or creating assistant for user: ${userId}`);
    let finalAssistantId = await this.getOrCreateAssistant(userId);
    console.log(`‚úÖ Final assistant ID: ${finalAssistantId}`);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
    const userMessageData = {
      user_id: userId,
      role: 'user',
      content: userMessage,
      message_content: userMessage,
      conversation_id: conversationId,
      assistant_id: finalAssistantId,
      channel: options.channel || 'admin',
      sender_type: 'user',           // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      is_operator_message: false     // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    };
    
    console.log('üíæ Saving user message with data:', userMessageData);
    
    const { data: userMsg, error: userError } = await this.supabase
      .from('chat_messages')
      .insert(userMessageData)
      .select()
      .single();
      
    if (userError) {
      console.error('Error saving user message:', userError);
      throw userError;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ aiResponse.content –Ω–µ –ø—É—Å—Ç–æ–π
    if (!aiResponse || !aiResponse.content || typeof aiResponse.content !== 'string') {
      console.error('‚ùå Invalid aiResponse:', aiResponse);
      throw new Error('Invalid AI response');
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
    const aiMessageData = {
      user_id: userId,
      role: 'assistant',
      content: aiResponse.content,
      message_content: aiResponse.content,
      conversation_id: conversationId,
      assistant_id: finalAssistantId,
      channel: options.channel || 'admin',
      tokens_in: this.estimateTokens(userMessage),
      tokens_out: aiResponse.tokensUsed || 0,
      sender_type: 'ai',              // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
      is_operator_message: false      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò
    };
    
    console.log('üíæ Saving AI message with data:', aiMessageData);
    
    const { data: aiMsg, error: aiError } = await this.supabase
      .from('chat_messages')
      .insert(aiMessageData)
      .select()
      .single();
      
    if (aiError) throw aiError;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º last_message_at —É –¥–∏–∞–ª–æ–≥–∞
    try {
      await this.supabase
        .from('conversations')
        .update({ last_message_at: new Date().toISOString() })
        .eq('id', conversationId);
    } catch (e) {}

    return {
      conversationId,
      userMessage: userMsg,
      aiMessage: aiMsg
    };
  }

  // Get or create assistant for user
  async getOrCreateAssistant(userId) {
    try {
      console.log(`Looking for existing assistant for user ${userId}`);
      
      // Try to find existing assistant
      const { data: existingAssistant, error: searchError } = await this.supabase
        .from('assistants')
        .select('id')
        .eq('owner_id', userId)
        .single();
      
      if (existingAssistant && !searchError) {
        console.log(`Found existing assistant: ${existingAssistant.id}`);
        return existingAssistant.id;
      }
      
      // If error is not about missing record, throw it
      if (searchError && searchError.code !== 'PGRST116') {
        console.error('Error searching for assistant:', searchError);
        throw searchError;
      }
      
      console.log(`Creating new assistant for user ${userId}`);
      
      // SIMPLE SOLUTION: Create assistant with NULL owner_id
      const { data: newAssistant, error: createError } = await this.supabase
        .from('assistants')
        .insert({
          owner_id: null,
          name: `AI Agent for ${userId}`,
          language: 'ru',
          prompt: 'You are a helpful AI assistant that helps users with their questions.',
          active: true
        })
        .select('id')
        .single();
      
      if (createError) {
        console.error('Error creating assistant:', createError);
        const randomId = randomUUID();
        console.log(`Using random assistant ID: ${randomId}`);
        return randomId;
      }
      
      console.log(`Created new assistant: ${newAssistant.id}`);
      return newAssistant.id;
      
    } catch (error) {
      console.error('Error in getOrCreateAssistant:', error);
      const randomId = randomUUID();
      console.log(`Using random assistant ID: ${randomId}`);
      return randomId;
    }
  }

  // 4. –°–õ–û–ô –ö–ê–°–¢–û–ú–ò–ó–ê–¶–ò–ò –ü–û–î –ö–õ–ò–ï–ù–¢–ê
  async updateAgentSettings(userId, assistantId, settings) {
    try {
      const { data, error } = await this.supabase
        .from('ai_agent_settings')
        .upsert({
          user_id: userId,
          assistant_id: assistantId,
          niche_id: settings.nicheId || settings.niche_id || null,
          ...settings,
          updated_at: new Date().toISOString()
        })
        .select()
        .single();

      if (error) throw error;
      
      // –û—á–∏—â–∞–µ–º –∫–µ—à –ø—Ä–æ–º–ø—Ç–æ–≤
      this.promptCache.delete(`${userId}-${assistantId}`);
      
      return data;
      
    } catch (error) {
      console.error('‚ùå Error updating agent settings:', error);
      throw error;
    }
  }

  // 5. –°–õ–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ô
  async processWidgetMessage(message, userId, assistantId, options = {}) {
    return this.processMessage(userId, assistantId, message, null, {
      ...options,
      channel: 'widget'
    });
  }

  async processTelegramMessage(message, userId, assistantId, chatId, options = {}) {
    return this.processMessage(userId, assistantId, message, null, {
      ...options,
      channel: 'telegram',
      chatId
    });
  }

  async processWhatsAppMessage(message, userId, assistantId, phoneNumber, options = {}) {
    return this.processMessage(userId, assistantId, message, null, {
      ...options,
      channel: 'whatsapp',
      phoneNumber
    });
  }

  // 6. –°–õ–û–ô –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ó–ê–¢–†–ê–¢
  async updateFAQCache(question, answer, userId, assistantId, confidence = 0.8) {
    const questionHash = this.createQueryHash(question);
    
    const { data, error } = await this.supabase
      .from('faq_cache')
      .upsert({
        user_id: userId,
        assistant_id: assistantId,
        question_hash: questionHash,
        question: question,
        answer: answer,
        confidence_score: confidence,
        usage_count: 1,
        last_used_at: new Date().toISOString()
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  }

  // 7. –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –ö–û–ù–¢–†–û–õ–¨ –ö–ê–ß–ï–°–¢–í–ê
  async recordMetric(userId, assistantId, metricType, metricValue, metricData = {}) {
    const { data, error } = await this.supabase
      .from('analytics_metrics')
      .insert({
        user_id: userId,
        assistant_id: assistantId,
        metric_type: metricType,
        metric_value: metricValue,
        metric_data: metricData
      })
      .select()
      .single();

    if (error) throw error;
    return data;
  }

  async getAnalytics(userId, assistantId, dateFrom, dateTo) {
    const { data, error } = await this.supabase
      .from('analytics_metrics')
      .select('*')
      .eq('user_id', userId)
      .eq('assistant_id', assistantId)
      .gte('recorded_at', dateFrom)
      .lte('recorded_at', dateTo)
      .order('recorded_at', { ascending: false });

    if (error) throw error;
    return data;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  createQueryHash(query) {
    // –ü—Ä–æ—Å—Ç–∞—è —Ö–µ—à-—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ crypto
    let hash = 0;
    const str = query.toLowerCase().trim();
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash).toString(16);
  }

  estimateTokens(text) {
    return Math.ceil(text.length / 4);
  }

  truncateByTokens(text, maxTokens) {
    const maxChars = maxTokens * 4;
    if (text.length <= maxChars) return text;
    
    let truncated = text.slice(0, maxChars);
    const lastSpace = truncated.lastIndexOf(' ');
    if (lastSpace > maxChars * 0.8) {
      truncated = truncated.slice(0, lastSpace);
    }
    
    return truncated + '...';
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–µ–π
  clearCaches() {
    this.faqCache.clear();
    this.promptCache.clear();
    this.searchCache.clear();
    this.settingsCache.clear();
    console.log('üßπ All caches cleared');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async getSystemStats(userId, assistantId) {
    try {
      const [sources, chunks, conversations, messages] = await Promise.all([
        this.supabase.from('knowledge_sources').select('id').eq('user_id', userId).eq('assistant_id', assistantId),
        this.supabase.from('knowledge_chunks').select('tokens_estimate').eq('user_id', userId).eq('assistant_id', assistantId),
        this.supabase.from('conversations').select('id').eq('user_id', userId).eq('assistant_id', assistantId),
        this.supabase.from('chat_messages').select('tokens_in, tokens_out').eq('user_id', userId).eq('assistant_id', assistantId)
      ]);

      const totalTokens = chunks.data?.reduce((sum, chunk) => sum + chunk.tokens_estimate, 0) || 0;
      const totalInputTokens = messages.data?.reduce((sum, msg) => sum + msg.tokens_in, 0) || 0;
      const totalOutputTokens = messages.data?.reduce((sum, msg) => sum + msg.tokens_out, 0) || 0;

      return {
        sourcesCount: sources.data?.length || 0,
        chunksCount: chunks.data?.length || 0,
        conversationsCount: conversations.data?.length || 0,
        messagesCount: messages.data?.length || 0,
        totalKnowledgeTokens: totalTokens,
        totalInputTokens,
        totalOutputTokens,
        totalTokensUsed: totalInputTokens + totalOutputTokens
      };
      
    } catch (error) {
      console.error('‚ùå Error getting system stats:', error);
      throw error;
    }
  }

  // –ü—Ä–æ—Å—Ç–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –∏–Ω—Ç–µ–Ω—Ç–æ–≤ (–º–µ–Ω–µ–¥–∂–µ—Ä / —Ü–µ–Ω—ã/–∑–∞–ø–∏—Å—å)
  detectIntents(text) {
    const t = text.toLowerCase();
    const managerHelp = /(–ø–æ–∑–≤–∞—Ç—å|–ø–æ–∑–æ–≤–∏|–ø–æ–¥–∫–ª—é—á(–∏|–∏—Ç—å)|–ø—Ä–∏–≥–ª–∞—Å(–∏|–∏—Ç—å)|–Ω—É–∂–Ω–∞|–Ω—É–∂–µ–Ω|—Å–≤—è–∂(–∏—Ç–µ—Å—å|–∏—Å—å)|—Å–≤—è–∑–∞—Ç—å—Å—è|–∂–∏–≤–æ–π\s*–æ–ø–µ—Ä–∞—Ç–æ—Ä).*(–º–µ–Ω–µ–¥–∂–µ—Ä|–æ–ø–µ—Ä–∞—Ç–æ—Ä|—á–µ–ª–æ–≤–µ–∫)|–ø–æ–º–æ—â—å\s*(–º–µ–Ω–µ–¥–∂–µ—Ä–∞|–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)/.test(t);
    const priceOrBooking = /(—Å–∫–æ–ª—å–∫–æ\s*—Å—Ç–æ–∏—Ç|—Ü–µ–Ω–∞|—Å—Ç–æ–∏–º–æ—Å—Ç—å|–∑–∞–ø–∏—Å–∞—Ç—å—Å—è|–æ—Ñ–æ—Ä–º–∏—Ç—å|–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü|–ø—Ä–∞–π—Å|–∫—É–ø–∏—Ç—å|–∑–∞–∫–∞–∑–∞—Ç—å|–∑–∞—è–≤–∫|–æ—Å—Ç–∞–≤–∏—Ç—å\s*–∑–∞—è–≤–∫—É|–æ—Å—Ç–∞–≤(–∏—Ç—å)?\s*(–Ω–æ–º–µ—Ä|—Ç–µ–ª–µ—Ñ–æ–Ω)|–∑–∞–ø–æ–ª–Ω(–∏—Ç—å)?\s*—Ñ–æ—Ä–º—É|–ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å|—Å–≤—è–∑–∞—Ç—å—Å—è)/.test(t);
    const helped = /(—ç—Ç–æ –ø–æ–º–æ–≥–ª–æ|—Å–ø–∞—Å–∏–±–æ|–≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ|–≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ|–ø–æ–Ω—è–ª|–ø–æ–Ω—è–ª–∞)/.test(t);
    return { managerHelp, priceOrBooking, helped };
  }

  enforceAddressing(text, addressing) {
    try {
      let out = String(text || '');
      if (addressing === '–í—ã') {
        // –ó–∞–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—ã ¬´—Ç—ã/—Ç–µ–±–µ/—Ç–≤–æ–π¬ª -> ¬´–í—ã/–í–∞–º/–í–∞—à¬ª (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
        out = out.replace(/\b—Ç—ã\b/gi, '–í—ã')
                 .replace(/\b—Ç–µ–±–µ\b/gi, '–í–∞–º')
                 .replace(/\b—Ç–µ–±—è\b/gi, '–í–∞—Å')
                 .replace(/\b—Ç–≤–æ–π\b/gi, '–í–∞—à')
                 .replace(/\b—Ç–≤–æ—è\b/gi, '–í–∞—à–∞')
                 .replace(/\b—Ç–≤–æ–∏\b/gi, '–í–∞—à–∏')
                 .replace(/\b—Ç–≤–æ—é\b/gi, '–í–∞—à—É');
      } else if (addressing === '—Ç—ã') {
        out = out.replace(/\b–í—ã\b/g, '—Ç—ã')
                 .replace(/\b–í–∞–º\b/g, '—Ç–µ–±–µ')
                 .replace(/\b–í–∞—Å\b/g, '—Ç–µ–±—è')
                 .replace(/\b–í–∞—à\b/g, '—Ç–≤–æ–π')
                 .replace(/\b–í–∞—à–∞\b/g, '—Ç–≤–æ—è')
                 .replace(/\b–í–∞—à–∏\b/g, '—Ç–≤–æ–∏')
                 .replace(/\b–í–∞—à—É\b/g, '—Ç–≤–æ—é');
      }
      return out;
    } catch (_) { return text; }
  }

  // –•–µ–ª–ø–µ—Ä—ã —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
  async getWorkingHours(userId, assistantId) {
    try {
      const { data, error } = await this.supabase
        .from('working_hours')
        .select('*')
        .eq('user_id', userId)
        .order('created_at', { ascending: false })
        .limit(1);
      if (error) return null;
      return (data && data[0]) || null;
    } catch (_) { return null; }
  }
  
  isWithinWorkingHours(working) {
    try {
      if (!working) return true; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Ä–∞–±–æ—á–∏–º
      const tz = working.timezone || 'Europe/Moscow';
      const now = new Date();
      // –ë–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –∫–∞–∫ approximation
      const day = ((now.getDay() + 6) % 7) + 1; // –ü–Ω=1...–í—Å=7
      const days = Array.isArray(working.days_of_week) ? working.days_of_week : [1,2,3,4,5];
      if (!days.includes(day)) return false;
      const [hs, ms] = String(working.start_time || '10:00').split(':').map(Number);
      const [he, me] = String(working.end_time || '19:00').split(':').map(Number);
      const minutesNow = now.getHours() * 60 + now.getMinutes();
      const minutesStart = hs * 60 + (ms || 0);
      const minutesEnd = he * 60 + (me || 0);
      return minutesNow >= minutesStart && minutesNow <= minutesEnd;
    } catch (_) { return true; }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
  async saveOperatorMessage(conversationId, userId, assistantId, message, operatorId, channel = 'admin') {
    console.log(`üë®‚Äçüíº –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –¥–∏–∞–ª–æ–≥ ${conversationId}`);
    
    try {
      const { data: messageId, error } = await this.supabase
        .rpc('save_operator_message', {
          p_conversation_id: conversationId,
          p_user_id: userId,
          p_assistant_id: assistantId,
          p_message_text: message,
          p_operator_id: operatorId,
          p_channel: channel
        });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', error);
        throw error;
      }
      
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: ${messageId}`);
      return messageId;
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:', error);
      throw error;
    }
  }

  async handoverToOperator(conversationId, operatorId, reason = 'Manual takeover') {
    console.log(`üîÑ –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∏–∞–ª–æ–≥–∞ ${conversationId} –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ${operatorId}`);
    
    try {
      const { error } = await this.supabase
        .rpc('handover_to_operator', {
          p_conversation_id: conversationId,
          p_operator_id: operatorId,
          p_reason: reason
        });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∏–∞–ª–æ–≥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É:', error);
        throw error;
      }
      
      console.log(`‚úÖ –î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É`);
      return true;
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∏–∞–ª–æ–≥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É:', error);
      throw error;
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
  async getDialogsWithOperators(limit = 50) {
    try {
      const { data, error } = await this.supabase
        .from('dialog_with_operators')
        .select('*')
        .order('last_message_at', { ascending: false })
        .limit(limit);
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤:', error);
        throw error;
      }
      
      return data || [];
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤:', error);
      return [];
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
  async cleanupOldSessions(hoursOld = 24) {
    try {
      const { data: deletedCount, error } = await this.supabase
        .rpc('cleanup_old_sessions', {
          p_hours_old: hoursOld
        });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π:', error);
        throw error;
      }
      
      console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ ${deletedCount} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π`);
      return deletedCount;
    } catch (error) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–µ—Å—Å–∏–π:', error);
      return 0;
    }
  }
}

export default AIAgentSystem;
export { parseWebsite };

