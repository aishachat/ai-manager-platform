// üîí –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RLS –ø–æ–ª–∏—Ç–∏–∫
// –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å RLS –ø–æ–ª–∏—Ç–∏–∫

const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SUPABASE_URL = 'https://jppujbttlrsobfwuzalw.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpwcHVqYnR0bHJzb2Jmd3V6YWx3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU2Mjc3MDMsImV4cCI6MjA3MTIwMzcwM30.W-NgL1PIaAIUQfi5BtvFukSqLLG0ZPQDCKcs70sUaHY';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// –¢–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TABLES_TO_TEST = [
    'users',
    'dialogs', 
    'chat_messages',
    'knowledge_sources',
    'knowledge_chunks',
    'assistants',
    'conversations',
    'widget_development_settings',
    'telegram_settings'
];

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const testResults = {
    passed: 0,
    failed: 0,
    warnings: 0,
    details: []
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function logResult(test, status, message, details = null) {
    const result = {
        test,
        status,
        message,
        details,
        timestamp: new Date().toISOString()
    };
    
    testResults.details.push(result);
    
    if (status === 'PASS') testResults.passed++;
    else if (status === 'FAIL') testResults.failed++;
    else if (status === 'WARN') testResults.warnings++;
    
    console.log(`[${status}] ${test}: ${message}`);
    if (details) console.log(`  Details: ${JSON.stringify(details, null, 2)}`);
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function testAuthentication() {
    try {
        const { data: { user }, error } = await supabase.auth.getUser();
        
        if (error) {
            logResult('Authentication', 'FAIL', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error);
            return false;
        }
        
        if (!user) {
            logResult('Authentication', 'WARN', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø');
            return false;
        }
        
        logResult('Authentication', 'PASS', `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${user.email}`);
        return true;
    } catch (error) {
        logResult('Authentication', 'FAIL', '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
async function testOwnDataAccess(userId) {
    for (const table of TABLES_TO_TEST) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { data, error } = await supabase
                .from(table)
                .select('*')
                .eq('user_id', userId)
                .limit(1);
            
            if (error) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ—à–∏–±–∫–∞ RLS –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                if (error.code === '42501') {
                    logResult(`RLS-${table}`, 'PASS', 'RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø (–æ–∂–∏–¥–∞–µ–º–æ)', {
                        error: error.message,
                        code: error.code
                    });
                } else {
                    logResult(`RLS-${table}`, 'WARN', '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (–Ω–µ RLS)', {
                        error: error.message,
                        code: error.code
                    });
                }
            } else {
                logResult(`RLS-${table}`, 'PASS', '–î–æ—Å—Ç—É–ø –∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω', {
                    recordsCount: data?.length || 0
                });
            }
        } catch (error) {
            logResult(`RLS-${table}`, 'FAIL', '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏', error.message);
        }
    }
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–∏–º –¥–∞–Ω–Ω—ã–º
async function testOtherDataAccess(userId) {
    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ID –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const otherUserId = '00000000-0000-0000-0000-000000000000';
    
    for (const table of TABLES_TO_TEST) {
        try {
            const { data, error } = await supabase
                .from(table)
                .select('*')
                .eq('user_id', otherUserId)
                .limit(1);
            
            if (error) {
                if (error.code === '42501') {
                    logResult(`RLS-Security-${table}`, 'PASS', 'RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —á—É–∂–∏–º –¥–∞–Ω–Ω—ã–º', {
                        error: error.message,
                        code: error.code
                    });
                } else {
                    logResult(`RLS-Security-${table}`, 'WARN', '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (–Ω–µ RLS)', {
                        error: error.message,
                        code: error.code
                    });
                }
            } else {
                // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if (data && data.length > 0) {
                    logResult(`RLS-Security-${table}`, 'FAIL', '–£–Ø–ó–í–ò–ú–û–°–¢–¨: –î–æ—Å—Ç—É–ø –∫ —á—É–∂–∏–º –¥–∞–Ω–Ω—ã–º!', {
                        recordsCount: data.length,
                        records: data
                    });
                } else {
                    logResult(`RLS-Security-${table}`, 'PASS', '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–∏–º –¥–∞–Ω–Ω—ã–º (–ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)');
                }
            }
        } catch (error) {
            logResult(`RLS-Security-${table}`, 'FAIL', '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', error.message);
        }
    }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
async function testDataInsertion(userId) {
    for (const table of TABLES_TO_TEST) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            const testData = {
                user_id: userId,
                test_field: 'RLS Test Data',
                created_at: new Date().toISOString()
            };
            
            const { data, error } = await supabase
                .from(table)
                .insert(testData)
                .select();
            
            if (error) {
                if (error.code === '42501') {
                    logResult(`RLS-Insert-${table}`, 'PASS', 'RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å—Ç–∞–≤–∫—É (–æ–∂–∏–¥–∞–µ–º–æ)', {
                        error: error.message,
                        code: error.code
                    });
                } else {
                    logResult(`RLS-Insert-${table}`, 'WARN', '–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ (–Ω–µ RLS)', {
                        error: error.message,
                        code: error.code
                    });
                }
            } else {
                logResult(`RLS-Insert-${table}`, 'PASS', '–í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∞', {
                    insertedId: data?.[0]?.id
                });
                
                // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                if (data?.[0]?.id) {
                    await supabase
                        .from(table)
                        .delete()
                        .eq('id', data[0].id);
                }
            }
        } catch (error) {
            logResult(`RLS-Insert-${table}`, 'FAIL', '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Å—Ç–∞–≤–∫–∏', error.message);
        }
    }
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function testDataUpdate(userId) {
    for (const table of TABLES_TO_TEST) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            const { data, error } = await supabase
                .from(table)
                .update({ 
                    updated_at: new Date().toISOString(),
                    test_update: 'RLS Update Test'
                })
                .eq('user_id', userId)
                .select();
            
            if (error) {
                if (error.code === '42501') {
                    logResult(`RLS-Update-${table}`, 'PASS', 'RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–æ–∂–∏–¥–∞–µ–º–æ)', {
                        error: error.message,
                        code: error.code
                    });
                } else {
                    logResult(`RLS-Update-${table}`, 'WARN', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–µ RLS)', {
                        error: error.message,
                        code: error.code
                    });
                }
            } else {
                logResult(`RLS-Update-${table}`, 'PASS', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–æ', {
                    updatedCount: data?.length || 0
                });
            }
        } catch (error) {
            logResult(`RLS-Update-${table}`, 'FAIL', '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', error.message);
        }
    }
}

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function testDataDeletion(userId) {
    for (const table of TABLES_TO_TEST) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            const { data, error } = await supabase
                .from(table)
                .delete()
                .eq('user_id', userId)
                .eq('test_field', 'RLS Test Data')
                .select();
            
            if (error) {
                if (error.code === '42501') {
                    logResult(`RLS-Delete-${table}`, 'PASS', 'RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ (–æ–∂–∏–¥–∞–µ–º–æ)', {
                        error: error.message,
                        code: error.code
                    });
                } else {
                    logResult(`RLS-Delete-${table}`, 'WARN', '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (–Ω–µ RLS)', {
                        error: error.message,
                        code: error.code
                    });
                }
            } else {
                logResult(`RLS-Delete-${table}`, 'PASS', '–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–æ', {
                    deletedCount: data?.length || 0
                });
            }
        } catch (error) {
            logResult(`RLS-Delete-${table}`, 'FAIL', '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è', error.message);
        }
    }
}

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ RLS
async function testRLSPerformance(userId) {
    const startTime = Date.now();
    
    try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        const promises = TABLES_TO_TEST.map(table => 
            supabase
                .from(table)
                .select('count')
                .eq('user_id', userId)
        );
        
        await Promise.all(promises);
        
        const endTime = Date.now();
        const duration = endTime - startTime;
        
        if (duration < 1000) {
            logResult('RLS-Performance', 'PASS', `RLS –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ: ${duration}ms`);
        } else if (duration < 3000) {
            logResult('RLS-Performance', 'WARN', `RLS –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ: ${duration}ms`);
        } else {
            logResult('RLS-Performance', 'FAIL', `RLS –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ: ${duration}ms`);
        }
    } catch (error) {
        logResult('RLS-Performance', 'FAIL', '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', error.message);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runRLSAudit() {
    console.log('üîí –ó–∞–ø—É—Å–∫ RLS –∞—É–¥–∏—Ç–∞...\n');
    
    // –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const isAuthenticated = await testAuthentication();
    
    if (isAuthenticated) {
        const { data: { user } } = await supabase.auth.getUser();
        const userId = user.id;
        
        console.log(`\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email} (${userId})\n`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        await testOwnDataAccess(userId);
        await testOtherDataAccess(userId);
        await testDataInsertion(userId);
        await testDataUpdate(userId);
        await testDataDeletion(userId);
        await testRLSPerformance(userId);
    } else {
        console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞...\n');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø
        for (const table of TABLES_TO_TEST) {
            try {
                const { data, error } = await supabase
                    .from(table)
                    .select('*')
                    .limit(1);
                
                if (error) {
                    if (error.code === '42501') {
                        logResult(`RLS-Anonymous-${table}`, 'PASS', 'RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø');
                    } else {
                        logResult(`RLS-Anonymous-${table}`, 'WARN', '–û—à–∏–±–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞', error.message);
                    }
                } else {
                    logResult(`RLS-Anonymous-${table}`, 'FAIL', '–£–Ø–ó–í–ò–ú–û–°–¢–¨: –ê–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!', {
                        recordsCount: data?.length || 0
                    });
                }
            } catch (error) {
                logResult(`RLS-Anonymous-${table}`, 'FAIL', '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞', error.message);
            }
        }
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + '='.repeat(60));
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ RLS –ê–£–î–ò–¢–ê');
    console.log('='.repeat(60));
    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${testResults.passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${testResults.failed}`);
    console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${testResults.warnings}`);
    console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${testResults.passed}/${testResults.passed + testResults.failed + testResults.warnings}`);
    
    const successRate = Math.round((testResults.passed / (testResults.passed + testResults.failed + testResults.warnings)) * 100);
    console.log(`üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`);
    
    if (successRate >= 90) {
        console.log('üéâ –û–¢–õ–ò–ß–ù–û! RLS –ø–æ–ª–∏—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else if (successRate >= 70) {
        console.log('‚ö†Ô∏è  –•–û–†–û–®–û, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    } else {
        console.log('üö® –ö–†–ò–¢–ò–ß–ù–û! RLS –ø–æ–ª–∏—Ç–∏–∫–∏ —Ç—Ä–µ–±—É—é—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    const report = {
        timestamp: new Date().toISOString(),
        summary: {
            passed: testResults.passed,
            failed: testResults.failed,
            warnings: testResults.warnings,
            successRate: successRate
        },
        details: testResults.details
    };
    
    console.log('\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ rls_audit_report.json');
    
    return report;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    runRLSAudit()
        .then(report => {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
            const fs = require('fs');
            fs.writeFileSync('rls_audit_report.json', JSON.stringify(report, null, 2));
            process.exit(0);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ RLS –∞—É–¥–∏—Ç–∞:', error);
            process.exit(1);
        });
}

module.exports = { runRLSAudit };
