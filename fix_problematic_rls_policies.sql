-- üîí –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö RLS –ø–æ–ª–∏—Ç–∏–∫
-- –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑ —É—Å–ª–æ–≤–∏–π –∏ —É–ª—É—á—à–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

-- ============================================
-- 1. –ù–ê–•–û–î–ò–ú –ò –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–û–õ–ò–¢–ò–ö–ò –ë–ï–ó –£–°–õ–û–í–ò–ô
-- ============================================

-- –°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ
SELECT 
    'üö® –ü–†–û–ë–õ–ï–ú–ù–´–ï –ü–û–õ–ò–¢–ò–ö–ò' as section,
    schemaname,
    tablename,
    policyname,
    cmd,
    qual,
    with_check
FROM pg_policies 
WHERE schemaname = 'public'
AND (
    qual IS NULL 
    OR qual = 'true'
    OR (qual NOT LIKE '%auth.uid()%' AND qual NOT LIKE '%user_id%' AND qual NOT LIKE '%id%')
)
ORDER BY tablename, policyname;

-- ============================================
-- 2. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–û–õ–ò–¢–ò–ö–ò –î–õ–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –¢–ê–ë–õ–ò–¶
-- ============================================

-- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è users
DROP POLICY IF EXISTS "Users can view their own profile" ON users;
DROP POLICY IF EXISTS "Users can update their own profile" ON users;
DROP POLICY IF EXISTS "Users can insert their own profile" ON users;
DROP POLICY IF EXISTS "Users can delete their own profile" ON users;

CREATE POLICY "Users can view their own profile" ON users
    FOR SELECT USING (auth.uid()::text = id::text);

CREATE POLICY "Users can update their own profile" ON users
    FOR UPDATE USING (auth.uid()::text = id::text);

CREATE POLICY "Users can insert their own profile" ON users
    FOR INSERT WITH CHECK (auth.uid()::text = id::text);

CREATE POLICY "Users can delete their own profile" ON users
    FOR DELETE USING (auth.uid()::text = id::text);

-- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è dialogs
DROP POLICY IF EXISTS "Users can view their own dialogs" ON dialogs;
DROP POLICY IF EXISTS "Users can insert their own dialogs" ON dialogs;
DROP POLICY IF EXISTS "Users can update their own dialogs" ON dialogs;
DROP POLICY IF EXISTS "Users can delete their own dialogs" ON dialogs;

CREATE POLICY "Users can view their own dialogs" ON dialogs
    FOR SELECT USING (auth.uid()::text = user_id::text);

CREATE POLICY "Users can insert their own dialogs" ON dialogs
    FOR INSERT WITH CHECK (auth.uid()::text = user_id::text);

CREATE POLICY "Users can update their own dialogs" ON dialogs
    FOR UPDATE USING (auth.uid()::text = user_id::text);

CREATE POLICY "Users can delete their own dialogs" ON dialogs
    FOR DELETE USING (auth.uid()::text = user_id::text);

-- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è chat_messages
DROP POLICY IF EXISTS "Users can view their own chat messages" ON chat_messages;
DROP POLICY IF EXISTS "Users can insert their own chat messages" ON chat_messages;
DROP POLICY IF EXISTS "Users can update their own chat messages" ON chat_messages;
DROP POLICY IF EXISTS "Users can delete their own chat messages" ON chat_messages;

CREATE POLICY "Users can view their own chat messages" ON chat_messages
    FOR SELECT USING (auth.uid()::text = user_id::text);

CREATE POLICY "Users can insert their own chat messages" ON chat_messages
    FOR INSERT WITH CHECK (auth.uid()::text = user_id::text);

CREATE POLICY "Users can update their own chat messages" ON chat_messages
    FOR UPDATE USING (auth.uid()::text = user_id::text);

CREATE POLICY "Users can delete their own chat messages" ON chat_messages
    FOR DELETE USING (auth.uid()::text = user_id::text);

-- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è knowledge_sources
DROP POLICY IF EXISTS "Users can view their own knowledge sources" ON knowledge_sources;
DROP POLICY IF EXISTS "Users can insert their own knowledge sources" ON knowledge_sources;
DROP POLICY IF EXISTS "Users can update their own knowledge sources" ON knowledge_sources;
DROP POLICY IF EXISTS "Users can delete their own knowledge sources" ON knowledge_sources;

CREATE POLICY "Users can view their own knowledge sources" ON knowledge_sources
    FOR SELECT USING (auth.uid()::text = user_id::text);

CREATE POLICY "Users can insert their own knowledge sources" ON knowledge_sources
    FOR INSERT WITH CHECK (auth.uid()::text = user_id::text);

CREATE POLICY "Users can update their own knowledge sources" ON knowledge_sources
    FOR UPDATE USING (auth.uid()::text = user_id::text);

CREATE POLICY "Users can delete their own knowledge sources" ON knowledge_sources
    FOR DELETE USING (auth.uid()::text = user_id::text);

-- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è knowledge_chunks
DROP POLICY IF EXISTS "Users can view their own knowledge chunks" ON knowledge_chunks;
DROP POLICY IF EXISTS "Users can insert their own knowledge chunks" ON knowledge_chunks;
DROP POLICY IF EXISTS "Users can update their own knowledge chunks" ON knowledge_chunks;
DROP POLICY IF EXISTS "Users can delete their own knowledge chunks" ON knowledge_chunks;

CREATE POLICY "Users can view their own knowledge chunks" ON knowledge_chunks
    FOR SELECT USING (auth.uid()::text = user_id::text);

CREATE POLICY "Users can insert their own knowledge chunks" ON knowledge_chunks
    FOR INSERT WITH CHECK (auth.uid()::text = user_id::text);

CREATE POLICY "Users can update their own knowledge chunks" ON knowledge_chunks
    FOR UPDATE USING (auth.uid()::text = user_id::text);

CREATE POLICY "Users can delete their own knowledge chunks" ON knowledge_chunks
    FOR DELETE USING (auth.uid()::text = user_id::text);

-- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è assistants
DROP POLICY IF EXISTS "Users can view their own assistants" ON assistants;
DROP POLICY IF EXISTS "Users can insert their own assistants" ON assistants;
DROP POLICY IF EXISTS "Users can update their own assistants" ON assistants;
DROP POLICY IF EXISTS "Users can delete their own assistants" ON assistants;

CREATE POLICY "Users can view their own assistants" ON assistants
    FOR SELECT USING (auth.uid()::text = user_id::text);

CREATE POLICY "Users can insert their own assistants" ON assistants
    FOR INSERT WITH CHECK (auth.uid()::text = user_id::text);

CREATE POLICY "Users can update their own assistants" ON assistants
    FOR UPDATE USING (auth.uid()::text = user_id::text);

CREATE POLICY "Users can delete their own assistants" ON assistants
    FOR DELETE USING (auth.uid()::text = user_id::text);

-- –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è conversations
DROP POLICY IF EXISTS "Users can view their own conversations" ON conversations;
DROP POLICY IF EXISTS "Users can insert their own conversations" ON conversations;
DROP POLICY IF EXISTS "Users can update their own conversations" ON conversations;
DROP POLICY IF EXISTS "Users can delete their own conversations" ON conversations;

CREATE POLICY "Users can view their own conversations" ON conversations
    FOR SELECT USING (auth.uid()::text = user_id::text);

CREATE POLICY "Users can insert their own conversations" ON conversations
    FOR INSERT WITH CHECK (auth.uid()::text = user_id::text);

CREATE POLICY "Users can update their own conversations" ON conversations
    FOR UPDATE USING (auth.uid()::text = user_id::text);

CREATE POLICY "Users can delete their own conversations" ON conversations
    FOR DELETE USING (auth.uid()::text = user_id::text);

-- ============================================
-- 3. –ü–†–û–í–ï–†–Ø–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢
-- ============================================

-- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª–∏—Ç–∏–∫ –æ—Å—Ç–∞–ª–æ—Å—å –±–µ–∑ —É—Å–ª–æ–≤–∏–π
SELECT 
    '‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô' as section,
    COUNT(*) as total_policies,
    COUNT(*) FILTER (WHERE qual IS NULL) as null_condition_policies,
    COUNT(*) FILTER (WHERE qual LIKE '%auth.uid()%') as auth_uid_policies,
    COUNT(*) FILTER (WHERE qual LIKE '%user_id%') as user_id_policies,
    ROUND(
        COUNT(*) FILTER (WHERE qual LIKE '%auth.uid()%' OR qual LIKE '%user_id%') * 100.0 / COUNT(*), 
        2
    ) as secure_policies_percent
FROM pg_policies 
WHERE schemaname = 'public';

-- ============================================
-- 4. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
-- ============================================

-- –ò—â–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏
SELECT 
    'üö® –û–°–¢–ê–í–®–ò–ï–°–Ø –ü–†–û–ë–õ–ï–ú–´' as section,
    schemaname,
    tablename,
    policyname,
    cmd,
    qual,
    '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è' as status
FROM pg_policies 
WHERE schemaname = 'public'
AND (
    qual IS NULL 
    OR qual = 'true'
    OR (qual NOT LIKE '%auth.uid()%' AND qual NOT LIKE '%user_id%' AND qual NOT LIKE '%id%')
)
ORDER BY tablename, policyname;
